{"version":3,"sources":["turbopack:///[project]/node_modules/date-fns/locale/en-US/_lib/formatDistance.js","turbopack:///[project]/node_modules/date-fns/locale/_lib/buildFormatLongFn.js","turbopack:///[project]/node_modules/date-fns/locale/en-US/_lib/formatLong.js","turbopack:///[project]/node_modules/date-fns/locale/en-US/_lib/formatRelative.js","turbopack:///[project]/node_modules/date-fns/locale/_lib/buildLocalizeFn.js","turbopack:///[project]/node_modules/date-fns/locale/en-US/_lib/localize.js","turbopack:///[project]/node_modules/date-fns/locale/_lib/buildMatchFn.js","turbopack:///[project]/node_modules/date-fns/locale/_lib/buildMatchPatternFn.js","turbopack:///[project]/node_modules/date-fns/locale/en-US/_lib/match.js","turbopack:///[project]/node_modules/date-fns/locale/en-US.js","turbopack:///[project]/node_modules/date-fns/_lib/defaultOptions.js","turbopack:///[project]/node_modules/date-fns/constants.js","turbopack:///[project]/node_modules/date-fns/constructFrom.js","turbopack:///[project]/node_modules/date-fns/toDate.js","turbopack:///[project]/node_modules/date-fns/_lib/getTimezoneOffsetInMilliseconds.js","turbopack:///[project]/node_modules/date-fns/_lib/normalizeDates.js","turbopack:///[project]/features/domains/hooks/useDomainV2Hooks.ts","turbopack:///[project]/components/icons/arrow-up-right-2.tsx","turbopack:///[project]/app/actions/data:7339c6 <text/javascript>","turbopack:///[project]/features/emails/hooks/useEmailQuery.ts","turbopack:///[project]/app/actions/data:1c55ae <text/javascript>","turbopack:///[project]/features/emails/hooks/useMarkEmailAsReadMutation.ts","turbopack:///[project]/features/emails/hooks/useEmailAddressesV2Hooks.ts","turbopack:///[project]/features/emails/hooks/useMailV2Hooks.ts","turbopack:///[project]/app/actions/data:64b90e <text/javascript>","turbopack:///[project]/features/emails/hooks/useUserEmailLogsQuery.ts","turbopack:///[project]/app/actions/data:0b1a7d <text/javascript>","turbopack:///[project]/app/actions/data:8660ba <text/javascript>","turbopack:///[project]/app/actions/data:d5ee75 <text/javascript>","turbopack:///[project]/features/emails/hooks/index.ts"],"sourcesContent":["const formatDistanceLocale = {\n  lessThanXSeconds: {\n    one: \"less than a second\",\n    other: \"less than {{count}} seconds\",\n  },\n\n  xSeconds: {\n    one: \"1 second\",\n    other: \"{{count}} seconds\",\n  },\n\n  halfAMinute: \"half a minute\",\n\n  lessThanXMinutes: {\n    one: \"less than a minute\",\n    other: \"less than {{count}} minutes\",\n  },\n\n  xMinutes: {\n    one: \"1 minute\",\n    other: \"{{count}} minutes\",\n  },\n\n  aboutXHours: {\n    one: \"about 1 hour\",\n    other: \"about {{count}} hours\",\n  },\n\n  xHours: {\n    one: \"1 hour\",\n    other: \"{{count}} hours\",\n  },\n\n  xDays: {\n    one: \"1 day\",\n    other: \"{{count}} days\",\n  },\n\n  aboutXWeeks: {\n    one: \"about 1 week\",\n    other: \"about {{count}} weeks\",\n  },\n\n  xWeeks: {\n    one: \"1 week\",\n    other: \"{{count}} weeks\",\n  },\n\n  aboutXMonths: {\n    one: \"about 1 month\",\n    other: \"about {{count}} months\",\n  },\n\n  xMonths: {\n    one: \"1 month\",\n    other: \"{{count}} months\",\n  },\n\n  aboutXYears: {\n    one: \"about 1 year\",\n    other: \"about {{count}} years\",\n  },\n\n  xYears: {\n    one: \"1 year\",\n    other: \"{{count}} years\",\n  },\n\n  overXYears: {\n    one: \"over 1 year\",\n    other: \"over {{count}} years\",\n  },\n\n  almostXYears: {\n    one: \"almost 1 year\",\n    other: \"almost {{count}} years\",\n  },\n};\n\nexport const formatDistance = (token, count, options) => {\n  let result;\n\n  const tokenValue = formatDistanceLocale[token];\n  if (typeof tokenValue === \"string\") {\n    result = tokenValue;\n  } else if (count === 1) {\n    result = tokenValue.one;\n  } else {\n    result = tokenValue.other.replace(\"{{count}}\", count.toString());\n  }\n\n  if (options?.addSuffix) {\n    if (options.comparison && options.comparison > 0) {\n      return \"in \" + result;\n    } else {\n      return result + \" ago\";\n    }\n  }\n\n  return result;\n};\n","export function buildFormatLongFn(args) {\n  return (options = {}) => {\n    // TODO: Remove String()\n    const width = options.width ? String(options.width) : args.defaultWidth;\n    const format = args.formats[width] || args.formats[args.defaultWidth];\n    return format;\n  };\n}\n","import { buildFormatLongFn } from \"../../_lib/buildFormatLongFn.js\";\n\nconst dateFormats = {\n  full: \"EEEE, MMMM do, y\",\n  long: \"MMMM do, y\",\n  medium: \"MMM d, y\",\n  short: \"MM/dd/yyyy\",\n};\n\nconst timeFormats = {\n  full: \"h:mm:ss a zzzz\",\n  long: \"h:mm:ss a z\",\n  medium: \"h:mm:ss a\",\n  short: \"h:mm a\",\n};\n\nconst dateTimeFormats = {\n  full: \"{{date}} 'at' {{time}}\",\n  long: \"{{date}} 'at' {{time}}\",\n  medium: \"{{date}}, {{time}}\",\n  short: \"{{date}}, {{time}}\",\n};\n\nexport const formatLong = {\n  date: buildFormatLongFn({\n    formats: dateFormats,\n    defaultWidth: \"full\",\n  }),\n\n  time: buildFormatLongFn({\n    formats: timeFormats,\n    defaultWidth: \"full\",\n  }),\n\n  dateTime: buildFormatLongFn({\n    formats: dateTimeFormats,\n    defaultWidth: \"full\",\n  }),\n};\n","const formatRelativeLocale = {\n  lastWeek: \"'last' eeee 'at' p\",\n  yesterday: \"'yesterday at' p\",\n  today: \"'today at' p\",\n  tomorrow: \"'tomorrow at' p\",\n  nextWeek: \"eeee 'at' p\",\n  other: \"P\",\n};\n\nexport const formatRelative = (token, _date, _baseDate, _options) =>\n  formatRelativeLocale[token];\n","/**\n * The localize function argument callback which allows to convert raw value to\n * the actual type.\n *\n * @param value - The value to convert\n *\n * @returns The converted value\n */\n\n/**\n * The map of localized values for each width.\n */\n\n/**\n * The index type of the locale unit value. It types conversion of units of\n * values that don't start at 0 (i.e. quarters).\n */\n\n/**\n * Converts the unit value to the tuple of values.\n */\n\n/**\n * The tuple of localized era values. The first element represents BC,\n * the second element represents AD.\n */\n\n/**\n * The tuple of localized quarter values. The first element represents Q1.\n */\n\n/**\n * The tuple of localized day values. The first element represents Sunday.\n */\n\n/**\n * The tuple of localized month values. The first element represents January.\n */\n\nexport function buildLocalizeFn(args) {\n  return (value, options) => {\n    const context = options?.context ? String(options.context) : \"standalone\";\n\n    let valuesArray;\n    if (context === \"formatting\" && args.formattingValues) {\n      const defaultWidth = args.defaultFormattingWidth || args.defaultWidth;\n      const width = options?.width ? String(options.width) : defaultWidth;\n\n      valuesArray =\n        args.formattingValues[width] || args.formattingValues[defaultWidth];\n    } else {\n      const defaultWidth = args.defaultWidth;\n      const width = options?.width ? String(options.width) : args.defaultWidth;\n\n      valuesArray = args.values[width] || args.values[defaultWidth];\n    }\n    const index = args.argumentCallback ? args.argumentCallback(value) : value;\n\n    // @ts-expect-error - For some reason TypeScript just don't want to match it, no matter how hard we try. I challenge you to try to remove it!\n    return valuesArray[index];\n  };\n}\n","import { buildLocalizeFn } from \"../../_lib/buildLocalizeFn.js\";\n\nconst eraValues = {\n  narrow: [\"B\", \"A\"],\n  abbreviated: [\"BC\", \"AD\"],\n  wide: [\"Before Christ\", \"Anno Domini\"],\n};\n\nconst quarterValues = {\n  narrow: [\"1\", \"2\", \"3\", \"4\"],\n  abbreviated: [\"Q1\", \"Q2\", \"Q3\", \"Q4\"],\n  wide: [\"1st quarter\", \"2nd quarter\", \"3rd quarter\", \"4th quarter\"],\n};\n\n// Note: in English, the names of days of the week and months are capitalized.\n// If you are making a new locale based on this one, check if the same is true for the language you're working on.\n// Generally, formatted dates should look like they are in the middle of a sentence,\n// e.g. in Spanish language the weekdays and months should be in the lowercase.\nconst monthValues = {\n  narrow: [\"J\", \"F\", \"M\", \"A\", \"M\", \"J\", \"J\", \"A\", \"S\", \"O\", \"N\", \"D\"],\n  abbreviated: [\n    \"Jan\",\n    \"Feb\",\n    \"Mar\",\n    \"Apr\",\n    \"May\",\n    \"Jun\",\n    \"Jul\",\n    \"Aug\",\n    \"Sep\",\n    \"Oct\",\n    \"Nov\",\n    \"Dec\",\n  ],\n\n  wide: [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\",\n  ],\n};\n\nconst dayValues = {\n  narrow: [\"S\", \"M\", \"T\", \"W\", \"T\", \"F\", \"S\"],\n  short: [\"Su\", \"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\"],\n  abbreviated: [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"],\n  wide: [\n    \"Sunday\",\n    \"Monday\",\n    \"Tuesday\",\n    \"Wednesday\",\n    \"Thursday\",\n    \"Friday\",\n    \"Saturday\",\n  ],\n};\n\nconst dayPeriodValues = {\n  narrow: {\n    am: \"a\",\n    pm: \"p\",\n    midnight: \"mi\",\n    noon: \"n\",\n    morning: \"morning\",\n    afternoon: \"afternoon\",\n    evening: \"evening\",\n    night: \"night\",\n  },\n  abbreviated: {\n    am: \"AM\",\n    pm: \"PM\",\n    midnight: \"midnight\",\n    noon: \"noon\",\n    morning: \"morning\",\n    afternoon: \"afternoon\",\n    evening: \"evening\",\n    night: \"night\",\n  },\n  wide: {\n    am: \"a.m.\",\n    pm: \"p.m.\",\n    midnight: \"midnight\",\n    noon: \"noon\",\n    morning: \"morning\",\n    afternoon: \"afternoon\",\n    evening: \"evening\",\n    night: \"night\",\n  },\n};\n\nconst formattingDayPeriodValues = {\n  narrow: {\n    am: \"a\",\n    pm: \"p\",\n    midnight: \"mi\",\n    noon: \"n\",\n    morning: \"in the morning\",\n    afternoon: \"in the afternoon\",\n    evening: \"in the evening\",\n    night: \"at night\",\n  },\n  abbreviated: {\n    am: \"AM\",\n    pm: \"PM\",\n    midnight: \"midnight\",\n    noon: \"noon\",\n    morning: \"in the morning\",\n    afternoon: \"in the afternoon\",\n    evening: \"in the evening\",\n    night: \"at night\",\n  },\n  wide: {\n    am: \"a.m.\",\n    pm: \"p.m.\",\n    midnight: \"midnight\",\n    noon: \"noon\",\n    morning: \"in the morning\",\n    afternoon: \"in the afternoon\",\n    evening: \"in the evening\",\n    night: \"at night\",\n  },\n};\n\nconst ordinalNumber = (dirtyNumber, _options) => {\n  const number = Number(dirtyNumber);\n\n  // If ordinal numbers depend on context, for example,\n  // if they are different for different grammatical genders,\n  // use `options.unit`.\n  //\n  // `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',\n  // 'day', 'hour', 'minute', 'second'.\n\n  const rem100 = number % 100;\n  if (rem100 > 20 || rem100 < 10) {\n    switch (rem100 % 10) {\n      case 1:\n        return number + \"st\";\n      case 2:\n        return number + \"nd\";\n      case 3:\n        return number + \"rd\";\n    }\n  }\n  return number + \"th\";\n};\n\nexport const localize = {\n  ordinalNumber,\n\n  era: buildLocalizeFn({\n    values: eraValues,\n    defaultWidth: \"wide\",\n  }),\n\n  quarter: buildLocalizeFn({\n    values: quarterValues,\n    defaultWidth: \"wide\",\n    argumentCallback: (quarter) => quarter - 1,\n  }),\n\n  month: buildLocalizeFn({\n    values: monthValues,\n    defaultWidth: \"wide\",\n  }),\n\n  day: buildLocalizeFn({\n    values: dayValues,\n    defaultWidth: \"wide\",\n  }),\n\n  dayPeriod: buildLocalizeFn({\n    values: dayPeriodValues,\n    defaultWidth: \"wide\",\n    formattingValues: formattingDayPeriodValues,\n    defaultFormattingWidth: \"wide\",\n  }),\n};\n","export function buildMatchFn(args) {\n  return (string, options = {}) => {\n    const width = options.width;\n\n    const matchPattern =\n      (width && args.matchPatterns[width]) ||\n      args.matchPatterns[args.defaultMatchWidth];\n    const matchResult = string.match(matchPattern);\n\n    if (!matchResult) {\n      return null;\n    }\n    const matchedString = matchResult[0];\n\n    const parsePatterns =\n      (width && args.parsePatterns[width]) ||\n      args.parsePatterns[args.defaultParseWidth];\n\n    const key = Array.isArray(parsePatterns)\n      ? findIndex(parsePatterns, (pattern) => pattern.test(matchedString))\n      : // [TODO] -- I challenge you to fix the type\n        findKey(parsePatterns, (pattern) => pattern.test(matchedString));\n\n    let value;\n\n    value = args.valueCallback ? args.valueCallback(key) : key;\n    value = options.valueCallback\n      ? // [TODO] -- I challenge you to fix the type\n        options.valueCallback(value)\n      : value;\n\n    const rest = string.slice(matchedString.length);\n\n    return { value, rest };\n  };\n}\n\nfunction findKey(object, predicate) {\n  for (const key in object) {\n    if (\n      Object.prototype.hasOwnProperty.call(object, key) &&\n      predicate(object[key])\n    ) {\n      return key;\n    }\n  }\n  return undefined;\n}\n\nfunction findIndex(array, predicate) {\n  for (let key = 0; key < array.length; key++) {\n    if (predicate(array[key])) {\n      return key;\n    }\n  }\n  return undefined;\n}\n","export function buildMatchPatternFn(args) {\n  return (string, options = {}) => {\n    const matchResult = string.match(args.matchPattern);\n    if (!matchResult) return null;\n    const matchedString = matchResult[0];\n\n    const parseResult = string.match(args.parsePattern);\n    if (!parseResult) return null;\n    let value = args.valueCallback\n      ? args.valueCallback(parseResult[0])\n      : parseResult[0];\n\n    // [TODO] I challenge you to fix the type\n    value = options.valueCallback ? options.valueCallback(value) : value;\n\n    const rest = string.slice(matchedString.length);\n\n    return { value, rest };\n  };\n}\n","import { buildMatchFn } from \"../../_lib/buildMatchFn.js\";\nimport { buildMatchPatternFn } from \"../../_lib/buildMatchPatternFn.js\";\n\nconst matchOrdinalNumberPattern = /^(\\d+)(th|st|nd|rd)?/i;\nconst parseOrdinalNumberPattern = /\\d+/i;\n\nconst matchEraPatterns = {\n  narrow: /^(b|a)/i,\n  abbreviated: /^(b\\.?\\s?c\\.?|b\\.?\\s?c\\.?\\s?e\\.?|a\\.?\\s?d\\.?|c\\.?\\s?e\\.?)/i,\n  wide: /^(before christ|before common era|anno domini|common era)/i,\n};\nconst parseEraPatterns = {\n  any: [/^b/i, /^(a|c)/i],\n};\n\nconst matchQuarterPatterns = {\n  narrow: /^[1234]/i,\n  abbreviated: /^q[1234]/i,\n  wide: /^[1234](th|st|nd|rd)? quarter/i,\n};\nconst parseQuarterPatterns = {\n  any: [/1/i, /2/i, /3/i, /4/i],\n};\n\nconst matchMonthPatterns = {\n  narrow: /^[jfmasond]/i,\n  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,\n  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i,\n};\nconst parseMonthPatterns = {\n  narrow: [\n    /^j/i,\n    /^f/i,\n    /^m/i,\n    /^a/i,\n    /^m/i,\n    /^j/i,\n    /^j/i,\n    /^a/i,\n    /^s/i,\n    /^o/i,\n    /^n/i,\n    /^d/i,\n  ],\n\n  any: [\n    /^ja/i,\n    /^f/i,\n    /^mar/i,\n    /^ap/i,\n    /^may/i,\n    /^jun/i,\n    /^jul/i,\n    /^au/i,\n    /^s/i,\n    /^o/i,\n    /^n/i,\n    /^d/i,\n  ],\n};\n\nconst matchDayPatterns = {\n  narrow: /^[smtwf]/i,\n  short: /^(su|mo|tu|we|th|fr|sa)/i,\n  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,\n  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i,\n};\nconst parseDayPatterns = {\n  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],\n  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i],\n};\n\nconst matchDayPeriodPatterns = {\n  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,\n  any: /^([ap]\\.?\\s?m\\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i,\n};\nconst parseDayPeriodPatterns = {\n  any: {\n    am: /^a/i,\n    pm: /^p/i,\n    midnight: /^mi/i,\n    noon: /^no/i,\n    morning: /morning/i,\n    afternoon: /afternoon/i,\n    evening: /evening/i,\n    night: /night/i,\n  },\n};\n\nexport const match = {\n  ordinalNumber: buildMatchPatternFn({\n    matchPattern: matchOrdinalNumberPattern,\n    parsePattern: parseOrdinalNumberPattern,\n    valueCallback: (value) => parseInt(value, 10),\n  }),\n\n  era: buildMatchFn({\n    matchPatterns: matchEraPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseEraPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  quarter: buildMatchFn({\n    matchPatterns: matchQuarterPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseQuarterPatterns,\n    defaultParseWidth: \"any\",\n    valueCallback: (index) => index + 1,\n  }),\n\n  month: buildMatchFn({\n    matchPatterns: matchMonthPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseMonthPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  day: buildMatchFn({\n    matchPatterns: matchDayPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseDayPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  dayPeriod: buildMatchFn({\n    matchPatterns: matchDayPeriodPatterns,\n    defaultMatchWidth: \"any\",\n    parsePatterns: parseDayPeriodPatterns,\n    defaultParseWidth: \"any\",\n  }),\n};\n","import { formatDistance } from \"./en-US/_lib/formatDistance.js\";\nimport { formatLong } from \"./en-US/_lib/formatLong.js\";\nimport { formatRelative } from \"./en-US/_lib/formatRelative.js\";\nimport { localize } from \"./en-US/_lib/localize.js\";\nimport { match } from \"./en-US/_lib/match.js\";\n\n/**\n * @category Locales\n * @summary English locale (United States).\n * @language English\n * @iso-639-2 eng\n * @author Sasha Koss [@kossnocorp](https://github.com/kossnocorp)\n * @author Lesha Koss [@leshakoss](https://github.com/leshakoss)\n */\nexport const enUS = {\n  code: \"en-US\",\n  formatDistance: formatDistance,\n  formatLong: formatLong,\n  formatRelative: formatRelative,\n  localize: localize,\n  match: match,\n  options: {\n    weekStartsOn: 0 /* Sunday */,\n    firstWeekContainsDate: 1,\n  },\n};\n\n// Fallback for modularized imports:\nexport default enUS;\n","let defaultOptions = {};\n\nexport function getDefaultOptions() {\n  return defaultOptions;\n}\n\nexport function setDefaultOptions(newOptions) {\n  defaultOptions = newOptions;\n}\n","/**\n * @module constants\n * @summary Useful constants\n * @description\n * Collection of useful date constants.\n *\n * The constants could be imported from `date-fns/constants`:\n *\n * ```ts\n * import { maxTime, minTime } from \"./constants/date-fns/constants\";\n *\n * function isAllowedTime(time) {\n *   return time <= maxTime && time >= minTime;\n * }\n * ```\n */\n\n/**\n * @constant\n * @name daysInWeek\n * @summary Days in 1 week.\n */\nexport const daysInWeek = 7;\n\n/**\n * @constant\n * @name daysInYear\n * @summary Days in 1 year.\n *\n * @description\n * How many days in a year.\n *\n * One years equals 365.2425 days according to the formula:\n *\n * > Leap year occurs every 4 years, except for years that are divisible by 100 and not divisible by 400.\n * > 1 mean year = (365+1/4-1/100+1/400) days = 365.2425 days\n */\nexport const daysInYear = 365.2425;\n\n/**\n * @constant\n * @name maxTime\n * @summary Maximum allowed time.\n *\n * @example\n * import { maxTime } from \"./constants/date-fns/constants\";\n *\n * const isValid = 8640000000000001 <= maxTime;\n * //=> false\n *\n * new Date(8640000000000001);\n * //=> Invalid Date\n */\nexport const maxTime = Math.pow(10, 8) * 24 * 60 * 60 * 1000;\n\n/**\n * @constant\n * @name minTime\n * @summary Minimum allowed time.\n *\n * @example\n * import { minTime } from \"./constants/date-fns/constants\";\n *\n * const isValid = -8640000000000001 >= minTime;\n * //=> false\n *\n * new Date(-8640000000000001)\n * //=> Invalid Date\n */\nexport const minTime = -maxTime;\n\n/**\n * @constant\n * @name millisecondsInWeek\n * @summary Milliseconds in 1 week.\n */\nexport const millisecondsInWeek = 604800000;\n\n/**\n * @constant\n * @name millisecondsInDay\n * @summary Milliseconds in 1 day.\n */\nexport const millisecondsInDay = 86400000;\n\n/**\n * @constant\n * @name millisecondsInMinute\n * @summary Milliseconds in 1 minute\n */\nexport const millisecondsInMinute = 60000;\n\n/**\n * @constant\n * @name millisecondsInHour\n * @summary Milliseconds in 1 hour\n */\nexport const millisecondsInHour = 3600000;\n\n/**\n * @constant\n * @name millisecondsInSecond\n * @summary Milliseconds in 1 second\n */\nexport const millisecondsInSecond = 1000;\n\n/**\n * @constant\n * @name minutesInYear\n * @summary Minutes in 1 year.\n */\nexport const minutesInYear = 525600;\n\n/**\n * @constant\n * @name minutesInMonth\n * @summary Minutes in 1 month.\n */\nexport const minutesInMonth = 43200;\n\n/**\n * @constant\n * @name minutesInDay\n * @summary Minutes in 1 day.\n */\nexport const minutesInDay = 1440;\n\n/**\n * @constant\n * @name minutesInHour\n * @summary Minutes in 1 hour.\n */\nexport const minutesInHour = 60;\n\n/**\n * @constant\n * @name monthsInQuarter\n * @summary Months in 1 quarter.\n */\nexport const monthsInQuarter = 3;\n\n/**\n * @constant\n * @name monthsInYear\n * @summary Months in 1 year.\n */\nexport const monthsInYear = 12;\n\n/**\n * @constant\n * @name quartersInYear\n * @summary Quarters in 1 year\n */\nexport const quartersInYear = 4;\n\n/**\n * @constant\n * @name secondsInHour\n * @summary Seconds in 1 hour.\n */\nexport const secondsInHour = 3600;\n\n/**\n * @constant\n * @name secondsInMinute\n * @summary Seconds in 1 minute.\n */\nexport const secondsInMinute = 60;\n\n/**\n * @constant\n * @name secondsInDay\n * @summary Seconds in 1 day.\n */\nexport const secondsInDay = secondsInHour * 24;\n\n/**\n * @constant\n * @name secondsInWeek\n * @summary Seconds in 1 week.\n */\nexport const secondsInWeek = secondsInDay * 7;\n\n/**\n * @constant\n * @name secondsInYear\n * @summary Seconds in 1 year.\n */\nexport const secondsInYear = secondsInDay * daysInYear;\n\n/**\n * @constant\n * @name secondsInMonth\n * @summary Seconds in 1 month\n */\nexport const secondsInMonth = secondsInYear / 12;\n\n/**\n * @constant\n * @name secondsInQuarter\n * @summary Seconds in 1 quarter.\n */\nexport const secondsInQuarter = secondsInMonth * 3;\n\n/**\n * @constant\n * @name constructFromSymbol\n * @summary Symbol enabling Date extensions to inherit properties from the reference date.\n *\n * The symbol is used to enable the `constructFrom` function to construct a date\n * using a reference date and a value. It allows to transfer extra properties\n * from the reference date to the new date. It's useful for extensions like\n * [`TZDate`](https://github.com/date-fns/tz) that accept a time zone as\n * a constructor argument.\n */\nexport const constructFromSymbol = Symbol.for(\"constructDateFrom\");\n","import { constructFromSymbol } from \"./constants.js\";\n\n/**\n * @name constructFrom\n * @category Generic Helpers\n * @summary Constructs a date using the reference date and the value\n *\n * @description\n * The function constructs a new date using the constructor from the reference\n * date and the given value. It helps to build generic functions that accept\n * date extensions.\n *\n * It defaults to `Date` if the passed reference date is a number or a string.\n *\n * Starting from v3.7.0, it allows to construct a date using `[Symbol.for(\"constructDateFrom\")]`\n * enabling to transfer extra properties from the reference date to the new date.\n * It's useful for extensions like [`TZDate`](https://github.com/date-fns/tz)\n * that accept a time zone as a constructor argument.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The reference date to take constructor from\n * @param value - The value to create the date\n *\n * @returns Date initialized using the given date and value\n *\n * @example\n * import { constructFrom } from \"./constructFrom/date-fns\";\n *\n * // A function that clones a date preserving the original type\n * function cloneDate<DateType extends Date>(date: DateType): DateType {\n *   return constructFrom(\n *     date, // Use constructor from the given date\n *     date.getTime() // Use the date value to create a new date\n *   );\n * }\n */\nexport function constructFrom(date, value) {\n  if (typeof date === \"function\") return date(value);\n\n  if (date && typeof date === \"object\" && constructFromSymbol in date)\n    return date[constructFromSymbol](value);\n\n  if (date instanceof Date) return new date.constructor(value);\n\n  return new Date(value);\n}\n\n// Fallback for modularized imports:\nexport default constructFrom;\n","import { constructFrom } from \"./constructFrom.js\";\n\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * Starting from v3.7.0, it clones a date using `[Symbol.for(\"constructDateFrom\")]`\n * enabling to transfer extra properties from the reference date to the new date.\n * It's useful for extensions like [`TZDate`](https://github.com/date-fns/tz)\n * that accept a time zone as a constructor argument.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param argument - The value to convert\n *\n * @returns The parsed date in the local time zone\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\nexport function toDate(argument, context) {\n  // [TODO] Get rid of `toDate` or `constructFrom`?\n  return constructFrom(context || argument, argument);\n}\n\n// Fallback for modularized imports:\nexport default toDate;\n","import { toDate } from \"../toDate.js\";\n\n/**\n * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.\n * They usually appear for dates that denote time before the timezones were introduced\n * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891\n * and GMT+01:00:00 after that date)\n *\n * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,\n * which would lead to incorrect calculations.\n *\n * This function returns the timezone offset in milliseconds that takes seconds in account.\n */\nexport function getTimezoneOffsetInMilliseconds(date) {\n  const _date = toDate(date);\n  const utcDate = new Date(\n    Date.UTC(\n      _date.getFullYear(),\n      _date.getMonth(),\n      _date.getDate(),\n      _date.getHours(),\n      _date.getMinutes(),\n      _date.getSeconds(),\n      _date.getMilliseconds(),\n    ),\n  );\n  utcDate.setUTCFullYear(_date.getFullYear());\n  return +date - +utcDate;\n}\n","import { constructFrom } from \"../constructFrom.js\";\n\nexport function normalizeDates(context, ...dates) {\n  const normalize = constructFrom.bind(\n    null,\n    context || dates.find((date) => typeof date === \"object\"),\n  );\n  return dates.map(normalize);\n}\n","import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query'\nimport { track } from '@vercel/analytics'\nimport type { \n    GetDomainsResponse,\n    GetDomainsRequest,\n    DomainWithStats\n} from '@/app/api/v2/domains/route'\nimport type { \n    GetDomainByIdResponse,\n    PutDomainByIdRequest\n} from '@/app/api/v2/domains/[id]/route'\nimport type {\n    PostEmailAddressesRequest,\n    PostEmailAddressesResponse\n} from '@/app/api/v2/email-addresses/route'\nimport type {\n    PutEmailAddressByIdRequest,\n    PutEmailAddressByIdResponse,\n    DeleteEmailAddressByIdResponse\n} from '@/app/api/v2/email-addresses/[id]/route'\n\n// Query keys for v2 domain API\nexport const domainV2Keys = {\n    all: ['v2', 'domains'] as const,\n    list: (params?: GetDomainsRequest) => [...domainV2Keys.all, 'list', params] as const,\n    detail: (domainId: string) => [...domainV2Keys.all, domainId] as const,\n    verification: (domainId: string) => [...domainV2Keys.all, domainId, 'verification'] as const,\n    emailAddresses: (domainId: string) => [...domainV2Keys.all, domainId, 'email-addresses'] as const,\n}\n\n// Hook for domains list (replacement for useDomainStatsQuery)\nexport const useDomainsListV2Query = (params?: GetDomainsRequest) => {\n    return useQuery<GetDomainsResponse>({\n        queryKey: domainV2Keys.list(params),\n        queryFn: async () => {\n            const searchParams = new URLSearchParams()\n            if (params?.limit) searchParams.set('limit', params.limit.toString())\n            if (params?.offset) searchParams.set('offset', params.offset.toString())\n            if (params?.status) searchParams.set('status', params.status)\n            if (params?.canReceive) searchParams.set('canReceive', params.canReceive)\n            if (params?.check) searchParams.set('check', params.check)\n\n            const response = await fetch(`/api/v2/domains?${searchParams}`)\n            if (!response.ok) {\n                const error = await response.json()\n                throw new Error(error.error || `HTTP error! status: ${response.status}`)\n            }\n            return response.json()\n        },\n        staleTime: 2 * 60 * 1000, // 2 minutes\n        gcTime: 5 * 60 * 1000, // 5 minutes\n    })\n}\n\n// Hook for domain details query\nexport const useDomainDetailsV2Query = (domainId: string) => {\n    return useQuery<GetDomainByIdResponse>({\n        queryKey: domainV2Keys.detail(domainId),\n        queryFn: async () => {\n            const response = await fetch(`/api/v2/domains/${domainId}`)\n            if (!response.ok) {\n                const error = await response.json()\n                throw new Error(error.error || `HTTP error! status: ${response.status}`)\n            }\n            return response.json()\n        },\n        enabled: !!domainId,\n        staleTime: 2 * 60 * 1000, // 2 minutes\n        gcTime: 10 * 60 * 1000, // 10 minutes\n    })\n}\n\n// Hook for domain verification check (using GET with check=true)\nexport const useDomainVerificationCheckV2 = (domainId: string) => {\n    const queryClient = useQueryClient()\n\n    return useMutation({\n        mutationFn: async () => {\n            const response = await fetch(`/api/v2/domains?status=pending&check=true`)\n            if (!response.ok) {\n                const error = await response.json()\n                throw new Error(error.error || 'Failed to check verification')\n            }\n            return response.json()\n        },\n        onSuccess: () => {\n            // Invalidate domain details to refresh the data\n            queryClient.invalidateQueries({ queryKey: domainV2Keys.detail(domainId) })\n        },\n    })\n}\n\n// Hook for domain deletion\nexport const useDeleteDomainV2Mutation = () => {\n    const queryClient = useQueryClient()\n\n    return useMutation({\n        mutationFn: async (domainId: string) => {\n            const response = await fetch(`/api/v2/domains/${domainId}`, {\n                method: 'DELETE',\n            })\n            if (!response.ok) {\n                const error = await response.json()\n                throw new Error(error.error || 'Failed to delete domain')\n            }\n            return response.json()\n        },\n        onMutate: async (domainId: string) => {\n            console.log('🗑️ Starting optimistic domain deletion for:', domainId)\n            \n            // Cancel any outgoing refetches (so they don't overwrite our optimistic update)\n            await queryClient.cancelQueries({ queryKey: domainV2Keys.all })\n\n            // Snapshot the previous values for rollback\n            const previousQueriesData: Array<{ queryKey: any; data: GetDomainsResponse }> = []\n\n            // Get all cached domain list queries and update them\n            const queries = queryClient.getQueriesData<GetDomainsResponse>({ queryKey: domainV2Keys.all })\n            console.log('📊 Found', queries.length, 'cached domain queries to update')\n            \n            for (const [queryKey, queryData] of queries) {\n                // Only process queries that have the expected GetDomainsResponse structure\n                if (queryData && \n                    Array.isArray(queryData.data) && \n                    typeof queryData.meta === 'object' && \n                    queryData.meta !== null) {\n                    \n                    console.log('✅ Updating query with', queryData.data.length, 'domains, totalCount:', queryData.meta.totalCount)\n                    \n                    // Store previous data for rollback\n                    previousQueriesData.push({ queryKey, data: queryData })\n\n                    // Optimistically update by removing the domain\n                    const updatedDomains: GetDomainsResponse = {\n                        ...queryData,\n                        data: queryData.data.filter(domain => domain.id !== domainId),\n                        meta: {\n                            ...queryData.meta,\n                            totalCount: Math.max((queryData.meta?.totalCount || 0) - 1, 0)\n                        }\n                    }\n                    queryClient.setQueryData(queryKey, updatedDomains)\n                    \n                    console.log('✅ Updated query - new count:', updatedDomains.data.length, 'totalCount:', updatedDomains.meta.totalCount)\n                } else {\n                    console.warn('⚠️ Skipping invalid query data:', { \n                        hasData: !!queryData,\n                        isDataArray: queryData ? Array.isArray(queryData.data) : false,\n                        hasMeta: queryData ? typeof queryData.meta === 'object' && queryData.meta !== null : false\n                    })\n                }\n            }\n\n            console.log('✅ Optimistic update complete - updated', previousQueriesData.length, 'queries')\n            \n            // Return a context object with the snapshotted values\n            return { previousQueriesData }\n        },\n        onError: (err, domainId, context) => {\n            console.error('❌ Domain deletion failed, rolling back optimistic updates:', err.message)\n            \n            // If the mutation fails, use the context returned from onMutate to roll back\n            if (context?.previousQueriesData) {\n                console.log('🔄 Rolling back', context.previousQueriesData.length, 'queries')\n                for (const { queryKey, data } of context.previousQueriesData) {\n                    queryClient.setQueryData(queryKey, data)\n                }\n                console.log('✅ Rollback complete')\n            }\n        },\n        onSuccess: (_, domainId) => {\n            // Remove domain from cache and invalidate related queries\n            queryClient.removeQueries({ queryKey: domainV2Keys.detail(domainId) })\n            queryClient.invalidateQueries({ queryKey: domainV2Keys.all })\n            \n            // Also invalidate legacy domain stats queries for backward compatibility\n            queryClient.invalidateQueries({ queryKey: ['domains'] })\n            queryClient.invalidateQueries({ queryKey: ['domainStats'] })\n        },\n    })\n}\n\n// Hook for adding email address\nexport const useAddEmailAddressV2Mutation = () => {\n    const queryClient = useQueryClient()\n\n    return useMutation<PostEmailAddressesResponse, Error, PostEmailAddressesRequest>({\n        mutationFn: async (data) => {\n            const response = await fetch('/api/v2/email-addresses', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(data),\n            })\n            if (!response.ok) {\n                const error = await response.json()\n                throw new Error(error.error || 'Failed to add email address')\n            }\n            return response.json()\n        },\n        onSuccess: (data) => {\n            // Track email address addition\n            track('Email Address Added', {\n                address: data.address,\n                domainId: data.domainId,\n                emailAddressId: data.id\n            })\n            \n            // Invalidate domain details to refresh email addresses\n            queryClient.invalidateQueries({ queryKey: domainV2Keys.detail(data.domainId) })\n            queryClient.invalidateQueries({ queryKey: domainV2Keys.emailAddresses(data.domainId) })\n        },\n    })\n}\n\n// Hook for deleting email address\nexport const useDeleteEmailAddressV2Mutation = () => {\n    const queryClient = useQueryClient()\n\n    return useMutation<DeleteEmailAddressByIdResponse, Error, { emailAddressId: string; domainId: string }>({\n        mutationFn: async ({ emailAddressId }) => {\n            const response = await fetch(`/api/v2/email-addresses/${emailAddressId}`, {\n                method: 'DELETE',\n            })\n            if (!response.ok) {\n                const error = await response.json()\n                throw new Error(error.error || 'Failed to delete email address')\n            }\n            return response.json()\n        },\n        onSuccess: (_, { domainId }) => {\n            // Invalidate domain details to refresh email addresses\n            queryClient.invalidateQueries({ queryKey: domainV2Keys.detail(domainId) })\n            queryClient.invalidateQueries({ queryKey: domainV2Keys.emailAddresses(domainId) })\n        },\n    })\n}\n\n// Hook for updating email endpoint/webhook\nexport const useUpdateEmailEndpointV2Mutation = () => {\n    const queryClient = useQueryClient()\n\n    return useMutation<PutEmailAddressByIdResponse, Error, PutEmailAddressByIdRequest & { emailAddressId: string; domainId: string }>({\n        mutationFn: async ({ emailAddressId, domainId, ...data }) => {\n            console.log('🚀 Sending update request:', {\n                url: `/api/v2/email-addresses/${emailAddressId}`,\n                body: data\n            })\n            \n            const response = await fetch(`/api/v2/email-addresses/${emailAddressId}`, {\n                method: 'PUT',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(data),\n            })\n            if (!response.ok) {\n                const error = await response.json()\n                throw new Error(error.error || 'Failed to update endpoint')\n            }\n            const result = await response.json()\n            console.log('📥 Update response:', result)\n            return result\n        },\n        onSuccess: (_, { domainId }) => {\n            // Invalidate domain details to refresh email addresses\n            queryClient.invalidateQueries({ queryKey: domainV2Keys.detail(domainId) })\n            queryClient.invalidateQueries({ queryKey: domainV2Keys.emailAddresses(domainId) })\n        },\n    })\n}\n\n// Hook for updating domain catch-all settings\nexport const useUpdateDomainCatchAllV2Mutation = () => {\n    const queryClient = useQueryClient()\n\n    return useMutation<any, Error, PutDomainByIdRequest & { domainId: string }>({\n        mutationFn: async ({ domainId, ...data }) => {\n            const response = await fetch(`/api/v2/domains/${domainId}`, {\n                method: 'PUT',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(data),\n            })\n            if (!response.ok) {\n                const error = await response.json()\n                throw new Error(error.error || 'Failed to update catch-all settings')\n            }\n            return response.json()\n        },\n        onSuccess: (_, { domainId, isCatchAllEnabled, catchAllEndpointId }) => {\n            // Track catch-all toggle\n            track(isCatchAllEnabled ? 'Catch All Enabled' : 'Catch All Disabled', {\n                domainId: domainId,\n                endpointId: catchAllEndpointId || null\n            })\n            \n            // Invalidate domain details to refresh catch-all status\n            queryClient.invalidateQueries({ queryKey: domainV2Keys.detail(domainId) })\n        },\n    })\n} ","import React, {SVGProps} from 'react';\n\ntype IconProps = SVGProps<SVGSVGElement> & {\n\tsecondaryfill?: string;\n\tstrokewidth?: number;\n\ttitle?: string;\n}\n\nfunction ArrowUpRight2({fill = 'currentColor', secondaryfill, title = 'badge 13', ...props}: IconProps) {\n\tsecondaryfill = secondaryfill || fill;\n\n\treturn (\n\t\t<svg height=\"12\" width=\"12\" {...props} viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n\t<title>{title}</title>\n\t<g fill={fill}>\n\t\t<path d=\"m1.75,11c-.192,0-.384-.073-.53-.22-.293-.293-.293-.768,0-1.061L9.543,1.396c.293-.293.768-.293,1.061,0s.293.768,0,1.061L2.28,10.78c-.146.146-.338.22-.53.22Z\" fill={secondaryfill} strokeWidth=\"0\"/>\n\t\t<path d=\"m10.25,7.25c-.414,0-.75-.336-.75-.75V2.5h-4c-.414,0-.75-.336-.75-.75s.336-.75.75-.75h4.75c.414,0,.75.336.75.75v4.75c0,.414-.336.75-.75.75Z\" fill={fill} strokeWidth=\"0\"/>\n\t</g>\n</svg>\n\t);\n};\n\nexport default ArrowUpRight2;","/* __next_internal_action_entry_do_not_use__ [{\"40ccd8d8e26d5a0a7819f93603cecd1770ab9afb12\":\"getEmailDetails\"},\"app/actions/primary.ts\",\"\"] */\"use turbopack no side effects\";import{createServerReference,callServer,findSourceMapURL}from\"private-next-rsc-action-client-wrapper\";export var getEmailDetails=/*#__PURE__*/createServerReference(\"40ccd8d8e26d5a0a7819f93603cecd1770ab9afb12\",callServer,void 0,findSourceMapURL,\"getEmailDetails\");","'use client'\n\nimport { useQuery } from '@tanstack/react-query'\nimport { getEmailDetails } from '@/app/actions/primary'\n\nexport interface EmailDetails {\n  id: string\n  emailId: string\n  messageId: string | null\n  from: string\n  to: string\n  recipient: string\n  subject: string | null\n  receivedAt: Date | null\n  processedAt: Date | null\n  status: string\n  emailContent: {\n    htmlBody: string | null\n    textBody: string | null\n    attachments: Array<{\n      filename?: string\n      contentType?: string\n      size?: number\n      contentId?: string\n      contentDisposition?: string\n    }>\n    headers: Record<string, any>\n    rawContent: string | null\n  }\n  parsedData: {\n    fromData: {\n      text: string\n      addresses: Array<{\n        name: string | null\n        address: string | null\n      }>\n    } | null\n    toData: {\n      text: string\n      addresses: Array<{\n        name: string | null\n        address: string | null\n      }>\n    } | null\n    ccData: any\n    bccData: any\n    replyToData: any\n    inReplyTo: string | null\n    references: string[]\n    priority: string | null\n    parseSuccess: boolean | null\n    parseError: string | null\n  }\n  authResults: {\n    spf: string\n    dkim: string\n    dmarc: string\n    spam: string\n    virus: string\n  }\n  metadata: {\n    processingTime: number | null\n    timestamp: Date | null\n    receiptTimestamp: Date | null\n    actionType: string | null\n    s3Info: {\n      bucketName: string | null\n      objectKey: string | null\n      contentFetched: boolean | null\n      contentSize: number | null\n      error: string | null\n    }\n    commonHeaders: any\n  }\n  createdAt: Date | null\n  updatedAt: Date | null\n}\n\nexport const useEmailQuery = (emailId: string | null) => {\n  return useQuery({\n    queryKey: ['email', emailId],\n    queryFn: async () => {\n      if (!emailId) {\n        throw new Error('Email ID is required')\n      }\n      \n      const result = await getEmailDetails(emailId)\n      \n      if (result.error) {\n        throw new Error(result.error)\n      }\n      \n      return result.data as EmailDetails\n    },\n    enabled: !!emailId,\n    staleTime: 5 * 60 * 1000, // 5 minutes\n    gcTime: 10 * 60 * 1000, // 10 minutes\n    retry: (failureCount, error) => {\n      // Don't retry on 404 errors\n      if (error.message === 'Email not found') {\n        return false\n      }\n      return failureCount < 3\n    },\n  })\n} ","/* __next_internal_action_entry_do_not_use__ [{\"400e0c4e16c3c0c54c42073a20508c7d05f4dd64fa\":\"markEmailAsRead\"},\"app/actions/primary.ts\",\"\"] */\"use turbopack no side effects\";import{createServerReference,callServer,findSourceMapURL}from\"private-next-rsc-action-client-wrapper\";export var markEmailAsRead=/*#__PURE__*/createServerReference(\"400e0c4e16c3c0c54c42073a20508c7d05f4dd64fa\",callServer,void 0,findSourceMapURL,\"markEmailAsRead\");","'use client'\n\nimport { useMutation, useQueryClient } from '@tanstack/react-query'\nimport { markEmailAsRead } from '@/app/actions/primary'\nimport { toast } from 'sonner'\n\nexport const useMarkEmailAsReadMutation = () => {\n  const queryClient = useQueryClient()\n\n  return useMutation({\n    mutationFn: async (emailId: string) => {\n      const result = await markEmailAsRead(emailId)\n      \n      if (result.error) {\n        throw new Error(result.error)\n      }\n      \n      return result.data\n    },\n    onSuccess: (data, emailId) => {\n      // Invalidate and refetch email queries to update read status\n      queryClient.invalidateQueries({ queryKey: ['email', emailId] })\n      \n      // Also invalidate analytics/mail list queries that might show read status\n      queryClient.invalidateQueries({ queryKey: ['analytics'] })\n      queryClient.invalidateQueries({ queryKey: ['emails'] })\n      \n      // Optional: Show success toast\n      // toast.success('Email marked as read')\n    },\n    // Optimistic updates can be added here if needed\n    onMutate: async (emailId) => {\n      // Cancel any outgoing refetches (so they don't overwrite our optimistic update)\n      await queryClient.cancelQueries({ queryKey: ['email', emailId] })\n\n      // Snapshot the previous value\n      const previousEmail = queryClient.getQueryData(['email', emailId])\n\n      // Optimistically update to the new value\n      queryClient.setQueryData(['email', emailId], (old: any) => {\n        if (!old) return old\n        return {\n          ...old,\n          isRead: true,\n          readAt: new Date(),\n        }\n      })\n\n      // Return a context object with the snapshotted value\n      return { previousEmail }\n    },\n    onError: (err, emailId, context) => {\n      // If the mutation fails, use the context returned from onMutate to roll back\n      if (context?.previousEmail) {\n        queryClient.setQueryData(['email', emailId], context.previousEmail)\n      }\n      console.error('Failed to mark email as read:', err)\n      toast.error('Failed to mark email as read')\n    },\n    onSettled: (data, error, emailId) => {\n      // Always refetch after error or success to ensure we have the latest data\n      queryClient.invalidateQueries({ queryKey: ['email', emailId] })\n    },\n  })\n} ","import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query'\nimport type {\n    GetEmailAddressesResponse,\n    GetEmailAddressesRequest,\n    PostEmailAddressesRequest,\n    PostEmailAddressesResponse\n} from '@/app/api/v2/email-addresses/route'\nimport type {\n    GetEmailAddressByIdResponse,\n    PutEmailAddressByIdRequest,\n    PutEmailAddressByIdResponse,\n    DeleteEmailAddressByIdResponse\n} from '@/app/api/v2/email-addresses/[id]/route'\n\n// Query keys for v2 email addresses API\nexport const emailAddressesV2Keys = {\n    all: ['v2', 'email-addresses'] as const,\n    lists: () => [...emailAddressesV2Keys.all, 'list'] as const,\n    list: (params?: GetEmailAddressesRequest) => [...emailAddressesV2Keys.lists(), params] as const,\n    details: () => [...emailAddressesV2Keys.all, 'detail'] as const,\n    detail: (emailAddressId: string) => [...emailAddressesV2Keys.details(), emailAddressId] as const,\n}\n\n// Hook for listing email addresses\nexport const useEmailAddressesV2Query = (params?: GetEmailAddressesRequest) => {\n    return useQuery<GetEmailAddressesResponse>({\n        queryKey: emailAddressesV2Keys.list(params),\n        queryFn: async () => {\n            const searchParams = new URLSearchParams()\n            if (params?.limit) searchParams.set('limit', params.limit.toString())\n            if (params?.offset) searchParams.set('offset', params.offset.toString())\n            if (params?.domainId) searchParams.set('domainId', params.domainId)\n            if (params?.isActive) searchParams.set('isActive', params.isActive)\n            if (params?.isReceiptRuleConfigured) searchParams.set('isReceiptRuleConfigured', params.isReceiptRuleConfigured)\n\n            const response = await fetch(`/api/v2/email-addresses?${searchParams}`)\n            if (!response.ok) {\n                const error = await response.json()\n                throw new Error(error.error || `HTTP error! status: ${response.status}`)\n            }\n            return response.json()\n        },\n        staleTime: 2 * 60 * 1000, // 2 minutes\n        gcTime: 5 * 60 * 1000, // 5 minutes\n    })\n}\n\n// Hook for getting email address details\nexport const useEmailAddressV2Query = (emailAddressId: string) => {\n    return useQuery<GetEmailAddressByIdResponse>({\n        queryKey: emailAddressesV2Keys.detail(emailAddressId),\n        queryFn: async () => {\n            const response = await fetch(`/api/v2/email-addresses/${emailAddressId}`)\n            if (!response.ok) {\n                const error = await response.json()\n                throw new Error(error.error || `HTTP error! status: ${response.status}`)\n            }\n            return response.json()\n        },\n        enabled: !!emailAddressId,\n        staleTime: 2 * 60 * 1000, // 2 minutes\n        gcTime: 10 * 60 * 1000, // 10 minutes\n    })\n}\n\n// Hook for creating email address\nexport const useCreateEmailAddressV2Mutation = () => {\n    const queryClient = useQueryClient()\n\n    return useMutation<PostEmailAddressesResponse, Error, PostEmailAddressesRequest>({\n        mutationFn: async (data) => {\n            const response = await fetch('/api/v2/email-addresses', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(data),\n            })\n            if (!response.ok) {\n                const error = await response.json()\n                throw new Error(error.error || 'Failed to create email address')\n            }\n            return response.json()\n        },\n        onSuccess: (data) => {\n            // Invalidate email addresses lists\n            queryClient.invalidateQueries({ queryKey: emailAddressesV2Keys.lists() })\n            // Also invalidate domains queries since this affects domain stats\n            queryClient.invalidateQueries({ queryKey: ['v2', 'domains'] })\n        },\n    })\n}\n\n// Hook for updating email address\nexport const useUpdateEmailAddressV2Mutation = () => {\n    const queryClient = useQueryClient()\n\n    return useMutation<PutEmailAddressByIdResponse, Error, PutEmailAddressByIdRequest & { emailAddressId: string }>({\n        mutationFn: async ({ emailAddressId, ...data }) => {\n            const response = await fetch(`/api/v2/email-addresses/${emailAddressId}`, {\n                method: 'PUT',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(data),\n            })\n            if (!response.ok) {\n                const error = await response.json()\n                throw new Error(error.error || 'Failed to update email address')\n            }\n            return response.json()\n        },\n        onSuccess: (data, { emailAddressId }) => {\n            // Invalidate specific email address and lists\n            queryClient.invalidateQueries({ queryKey: emailAddressesV2Keys.detail(emailAddressId) })\n            queryClient.invalidateQueries({ queryKey: emailAddressesV2Keys.lists() })\n            // Also invalidate domains queries since this affects domain stats\n            queryClient.invalidateQueries({ queryKey: ['v2', 'domains'] })\n        },\n    })\n}\n\n// Hook for deleting email address\nexport const useDeleteEmailAddressV2Mutation = () => {\n    const queryClient = useQueryClient()\n\n    return useMutation<DeleteEmailAddressByIdResponse, Error, string>({\n        mutationFn: async (emailAddressId) => {\n            const response = await fetch(`/api/v2/email-addresses/${emailAddressId}`, {\n                method: 'DELETE',\n            })\n            if (!response.ok) {\n                const error = await response.json()\n                throw new Error(error.error || 'Failed to delete email address')\n            }\n            return response.json()\n        },\n        onSuccess: (_, emailAddressId) => {\n            // Remove from cache and invalidate lists\n            queryClient.removeQueries({ queryKey: emailAddressesV2Keys.detail(emailAddressId) })\n            queryClient.invalidateQueries({ queryKey: emailAddressesV2Keys.lists() })\n            // Also invalidate domains queries since this affects domain stats\n            queryClient.invalidateQueries({ queryKey: ['v2', 'domains'] })\n        },\n    })\n} ","import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query'\nimport type {\n    GetMailResponse,\n    GetMailRequest,\n    EmailItem\n} from '@/app/api/v2/mail/route'\nimport type {\n    GetMailByIdResponse,\n    PatchMailRequest,\n    PatchMailResponse\n} from '@/app/api/v2/mail/[id]/route'\nimport type {\n    GetEmailByIdResponse\n} from '@/app/api/v2/emails/[id]/route'\nimport type {\n    PostMailBulkRequest,\n    PostMailBulkResponse\n} from '@/app/api/v2/mail/bulk/route'\nimport type {\n    GetThreadResponse\n} from '@/app/api/v2/mail/[id]/thread/route'\n\n// Query keys for v2 mail API\nexport const mailV2Keys = {\n    all: ['v2', 'mail'] as const,\n    lists: () => [...mailV2Keys.all, 'list'] as const,\n    list: (params?: GetMailRequest) => [...mailV2Keys.lists(), params] as const,\n    details: () => [...mailV2Keys.all, 'detail'] as const,\n    detail: (emailId: string) => [...mailV2Keys.details(), emailId] as const,\n    outboundEmails: () => ['v2', 'emails'] as const,\n    outboundEmail: (emailId: string) => [...mailV2Keys.outboundEmails(), emailId] as const,\n}\n\n// Hook for listing emails (replacement for old email actions)\nexport const useMailV2Query = (params?: GetMailRequest) => {\n    return useQuery<GetMailResponse>({\n        queryKey: mailV2Keys.list(params),\n        queryFn: async () => {\n            const searchParams = new URLSearchParams()\n            if (params?.limit) searchParams.set('limit', params.limit.toString())\n            if (params?.offset) searchParams.set('offset', params.offset.toString())\n            if (params?.search) searchParams.set('search', params.search)\n            if (params?.status) searchParams.set('status', params.status)\n            if (params?.domain) searchParams.set('domain', params.domain)\n            if (params?.timeRange) searchParams.set('timeRange', params.timeRange)\n\n            const response = await fetch(`/api/v2/mail?${searchParams}`)\n            if (!response.ok) {\n                const error = await response.json()\n                throw new Error(error.error || `HTTP error! status: ${response.status}`)\n            }\n            return response.json()\n        },\n        staleTime: 30 * 1000, // 30 seconds\n        gcTime: 5 * 60 * 1000, // 5 minutes\n    })\n}\n\n// Hook for getting inbound email details by ID (replacement for old email details actions)\nexport const useMailDetailsV2Query = (emailId: string) => {\n    return useQuery<GetMailByIdResponse>({\n        queryKey: mailV2Keys.detail(emailId),\n        queryFn: async () => {\n            const response = await fetch(`/api/v2/mail/${emailId}`)\n            if (!response.ok) {\n                const error = await response.json()\n                throw new Error(error.error || `HTTP error! status: ${response.status}`)\n            }\n            return response.json()\n        },\n        enabled: !!emailId,\n        staleTime: 60 * 1000, // 1 minute\n        gcTime: 10 * 60 * 1000, // 10 minutes\n    })\n}\n\n// Hook for getting outbound email details by ID\nexport const useOutboundEmailDetailsV2Query = (emailId: string) => {\n    return useQuery<GetEmailByIdResponse>({\n        queryKey: mailV2Keys.outboundEmail(emailId),\n        queryFn: async () => {\n            const response = await fetch(`/api/v2/emails/${emailId}`)\n            if (!response.ok) {\n                const error = await response.json()\n                throw new Error(error.error || `HTTP error! status: ${response.status}`)\n            }\n            return response.json()\n        },\n        enabled: !!emailId,\n        staleTime: 60 * 1000, // 1 minute\n        gcTime: 10 * 60 * 1000, // 10 minutes\n    })\n}\n\n// Hook for updating a single email (archive, mark as read, etc.)\nexport const useUpdateEmailMutation = () => {\n    const queryClient = useQueryClient()\n    \n    return useMutation<\n        PatchMailResponse, \n        Error, \n        { emailId: string; updates: PatchMailRequest },\n        { previousEmailLists: [any, any][] }\n    >({\n        mutationFn: async ({ emailId, updates }) => {\n            const response = await fetch(`/api/v2/mail/${emailId}`, {\n                method: 'PATCH',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(updates),\n            })\n            \n            if (!response.ok) {\n                const error = await response.json()\n                throw new Error(error.error || `HTTP error! status: ${response.status}`)\n            }\n            \n            return response.json()\n        },\n        onMutate: async ({ emailId, updates }) => {\n            // Cancel any outgoing refetches\n            await queryClient.cancelQueries({ queryKey: mailV2Keys.lists() })\n\n            // Snapshot the previous value\n            const previousEmailLists = queryClient.getQueriesData({ queryKey: mailV2Keys.lists() })\n\n            // Optimistically update all email list queries\n            queryClient.setQueriesData({ queryKey: mailV2Keys.lists() }, (old: any) => {\n                if (!old?.emails) return old\n\n                return {\n                    ...old,\n                    emails: old.emails.map((email: any) => {\n                        if (email.id === emailId) {\n                            const updatedEmail = { ...email }\n                            \n                            if (updates.isRead !== undefined) {\n                                updatedEmail.isRead = updates.isRead\n                                updatedEmail.readAt = updates.isRead ? new Date().toISOString() : null\n                            }\n                            \n                            if (updates.isArchived !== undefined) {\n                                updatedEmail.isArchived = updates.isArchived\n                                updatedEmail.archivedAt = updates.isArchived ? new Date().toISOString() : null\n                            }\n                            \n                            return updatedEmail\n                        }\n                        return email\n                    })\n                }\n            })\n\n            // Return a context object with the snapshotted value\n            return { previousEmailLists }\n        },\n        onError: (err, variables, context) => {\n            // If the mutation fails, use the context returned from onMutate to roll back\n            if (context?.previousEmailLists) {\n                context.previousEmailLists.forEach(([queryKey, data]: [any, any]) => {\n                    queryClient.setQueryData(queryKey, data)\n                })\n            }\n        },\n        onSettled: () => {\n            // Always refetch after error or success to ensure we have the latest data\n            queryClient.invalidateQueries({ queryKey: mailV2Keys.lists() })\n        },\n    })\n}\n\n// Hook for bulk updating emails (archive, mark as read, etc.)\nexport const useBulkUpdateEmailsMutation = () => {\n    const queryClient = useQueryClient()\n    \n    return useMutation<\n        PostMailBulkResponse, \n        Error, \n        PostMailBulkRequest,\n        { previousEmailLists: [any, any][] }\n    >({\n        mutationFn: async (bulkRequest) => {\n            const response = await fetch('/api/v2/mail/bulk', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(bulkRequest),\n            })\n            \n            if (!response.ok) {\n                const error = await response.json()\n                throw new Error(error.error || `HTTP error! status: ${response.status}`)\n            }\n            \n            return response.json()\n        },\n        onMutate: async ({ emailIds, updates }) => {\n            // Cancel any outgoing refetches\n            await queryClient.cancelQueries({ queryKey: mailV2Keys.lists() })\n\n            // Snapshot the previous value\n            const previousEmailLists = queryClient.getQueriesData({ queryKey: mailV2Keys.lists() })\n\n            // Optimistically update all email list queries\n            queryClient.setQueriesData({ queryKey: mailV2Keys.lists() }, (old: any) => {\n                if (!old?.emails) return old\n\n                return {\n                    ...old,\n                    emails: old.emails.map((email: any) => {\n                        if (emailIds.includes(email.id)) {\n                            const updatedEmail = { ...email }\n                            \n                            if (updates.isRead !== undefined) {\n                                updatedEmail.isRead = updates.isRead\n                                updatedEmail.readAt = updates.isRead ? new Date().toISOString() : null\n                            }\n                            \n                            if (updates.isArchived !== undefined) {\n                                updatedEmail.isArchived = updates.isArchived\n                                updatedEmail.archivedAt = updates.isArchived ? new Date().toISOString() : null\n                            }\n                            \n                            return updatedEmail\n                        }\n                        return email\n                    }).filter((email: any) => {\n                        // If archiving emails, remove them from the list immediately\n                        if (updates.isArchived === true) {\n                            return !emailIds.includes(email.id)\n                        }\n                        return true\n                    })\n                }\n            })\n\n            // Return a context object with the snapshotted value\n            return { previousEmailLists }\n        },\n        onError: (err, variables, context) => {\n            // If the mutation fails, use the context returned from onMutate to roll back\n            if (context?.previousEmailLists) {\n                context.previousEmailLists.forEach(([queryKey, data]: [any, any]) => {\n                    queryClient.setQueryData(queryKey, data)\n                })\n            }\n        },\n        onSettled: () => {\n            // Always refetch after error or success to ensure we have the latest data\n            queryClient.invalidateQueries({ queryKey: mailV2Keys.lists() })\n        },\n    })\n}\n\n// Hook for marking email as read (if available in v2 API - placeholder)\nexport const useMarkEmailAsReadV2Mutation = () => {\n    const queryClient = useQueryClient()\n\n    return useMutation<any, Error, string>({\n        mutationFn: async (emailId) => {\n            // Note: This endpoint might not exist in v2 API yet\n            // For now, we'll need to use the old action or create a new endpoint\n            const response = await fetch(`/api/v2/mail/${emailId}/mark-read`, {\n                method: 'POST',\n            })\n            if (!response.ok) {\n                const error = await response.json()\n                throw new Error(error.error || 'Failed to mark email as read')\n            }\n            return response.json()\n        },\n        onSuccess: (_, emailId) => {\n            // Update the specific email in cache\n            queryClient.invalidateQueries({ queryKey: mailV2Keys.detail(emailId) })\n            // Also invalidate the mail lists to update read status\n            queryClient.invalidateQueries({ queryKey: mailV2Keys.lists() })\n        },\n    })\n}\n\n// Helper hook for user email logs (replacement for useUserEmailLogsQuery)\nexport const useUserEmailLogsV2Query = (options?: GetMailRequest) => {\n    // This is essentially the same as useMailV2Query but with specific filtering\n    return useMailV2Query({\n        ...options,\n        limit: options?.limit || 50,\n        offset: options?.offset || 0,\n    })\n}\n\n// Hook for replying to an email\nexport const useReplyToEmailV2Mutation = () => {\n    const queryClient = useQueryClient()\n\n    return useMutation<\n        { id: string },\n        Error,\n        {\n            emailId: string\n            from: string\n            to?: string | string[]\n            subject?: string\n            text?: string\n            html?: string\n            include_original?: boolean\n        }\n    >({\n        mutationFn: async ({ emailId, ...replyData }) => {\n            const response = await fetch(`/api/v2/emails/${emailId}/reply`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(replyData),\n            })\n            \n            if (!response.ok) {\n                const error = await response.json()\n                throw new Error(error.error || 'Failed to send reply')\n            }\n            \n            return response.json()\n        },\n        onSuccess: (_, { emailId }) => {\n            // Invalidate mail lists to show the sent reply\n            queryClient.invalidateQueries({ queryKey: mailV2Keys.lists() })\n            // Also invalidate the specific email detail\n            queryClient.invalidateQueries({ queryKey: mailV2Keys.detail(emailId) })\n        },\n    })\n} \n\n// Hook for getting email thread/conversation\nexport const useEmailThreadV2Query = (emailId: string) => {\n    return useQuery<GetThreadResponse>({\n        queryKey: [...mailV2Keys.detail(emailId), 'thread'],\n        queryFn: async () => {\n            const response = await fetch(`/api/v2/mail/${emailId}/thread`)\n            if (!response.ok) {\n                const error = await response.json()\n                throw new Error(error.error || `HTTP error! status: ${response.status}`)\n            }\n            return response.json()\n        },\n        enabled: !!emailId,\n        staleTime: 60 * 1000, // 1 minute\n        gcTime: 10 * 60 * 1000, // 10 minutes\n    })\n}\n\n// Hook for getting thread counts for multiple emails (for inbox listing)\nexport const useEmailThreadCountsV2Query = (emailIds: string[]) => {\n    return useQuery<{\n        success: boolean\n        data: Array<{\n            emailId: string\n            threadCount: number\n            hasThread: boolean\n        }>\n    }>({\n        queryKey: ['mail-v2', 'thread-counts', ...emailIds.sort()],\n        queryFn: async () => {\n            const response = await fetch('/api/v2/mail/thread-counts', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({ emailIds })\n            })\n            if (!response.ok) {\n                const error = await response.json()\n                throw new Error(error.error || `HTTP error! status: ${response.status}`)\n            }\n            return response.json()\n        },\n        enabled: emailIds.length > 0,\n        staleTime: 2 * 60 * 1000, // 2 minutes (thread counts don't change often)\n        gcTime: 10 * 60 * 1000, // 10 minutes\n    })\n} ","/* __next_internal_action_entry_do_not_use__ [{\"4036a927bdcc185c7cd5221062f42afb70733d159f\":\"getUserEmailLogs\"},\"app/actions/primary.ts\",\"\"] */\"use turbopack no side effects\";import{createServerReference,callServer,findSourceMapURL}from\"private-next-rsc-action-client-wrapper\";export var getUserEmailLogs=/*#__PURE__*/createServerReference(\"4036a927bdcc185c7cd5221062f42afb70733d159f\",callServer,void 0,findSourceMapURL,\"getUserEmailLogs\");","import { useQuery } from '@tanstack/react-query'\nimport { getUserEmailLogs } from '@/app/actions/primary'\nimport type { EmailLogsOptions, EmailLogsResponse } from '../types'\n\nexport function useUserEmailLogsQuery(options: EmailLogsOptions = {}) {\n  return useQuery({\n    queryKey: ['user-email-logs', options],\n    queryFn: async () => {\n      const result = await getUserEmailLogs(options)\n      if (!result.success) {\n        throw new Error(result.error)\n      }\n      return result.data as EmailLogsResponse\n    },\n    staleTime: 30 * 1000, // 30 seconds\n    gcTime: 5 * 60 * 1000, // 5 minutes\n  })\n} ","/* __next_internal_action_entry_do_not_use__ [{\"4062391b8b9fea3dab173568dc243176dcda35bc73\":\"getEmailsList\"},\"app/actions/primary.ts\",\"\"] */\"use turbopack no side effects\";import{createServerReference,callServer,findSourceMapURL}from\"private-next-rsc-action-client-wrapper\";export var getEmailsList=/*#__PURE__*/createServerReference(\"4062391b8b9fea3dab173568dc243176dcda35bc73\",callServer,void 0,findSourceMapURL,\"getEmailsList\");","/* __next_internal_action_entry_do_not_use__ [{\"40134f515b8fe5278d31a536a3a223c156ec6b61af\":\"getEmailDetailsFromParsed\"},\"app/actions/primary.ts\",\"\"] */\"use turbopack no side effects\";import{createServerReference,callServer,findSourceMapURL}from\"private-next-rsc-action-client-wrapper\";export var getEmailDetailsFromParsed=/*#__PURE__*/createServerReference(\"40134f515b8fe5278d31a536a3a223c156ec6b61af\",callServer,void 0,findSourceMapURL,\"getEmailDetailsFromParsed\");","/* __next_internal_action_entry_do_not_use__ [{\"40f4308e9524f900b328889cf8d5095aa19d019d23\":\"getUnifiedEmailLogs\"},\"app/actions/primary.ts\",\"\"] */\"use turbopack no side effects\";import{createServerReference,callServer,findSourceMapURL}from\"private-next-rsc-action-client-wrapper\";export var getUnifiedEmailLogs=/*#__PURE__*/createServerReference(\"40f4308e9524f900b328889cf8d5095aa19d019d23\",callServer,void 0,findSourceMapURL,\"getUnifiedEmailLogs\");","import { useMutation, useQuery, useQueryClient } from '@tanstack/react-query'\nimport { markEmailAsRead, getEmailsList, getEmailDetailsFromParsed, getUnifiedEmailLogs } from '@/app/actions/primary'\nimport type { EmailLogsOptions, EmailLogsResponse } from '../types'\n\n// Export the v2 hooks as primary exports\nexport {\n  useDomainsListV2Query,\n  useDomainDetailsV2Query,\n  useAddEmailAddressV2Mutation,\n  useUpdateEmailEndpointV2Mutation\n} from '@/features/domains/hooks/useDomainV2Hooks'\n\nexport { useEmailQuery } from './useEmailQuery'\nexport { useMarkEmailAsReadMutation } from './useMarkEmailAsReadMutation'\n\n// Export email address v2 hooks\nexport { useEmailAddressesV2Query, useEmailAddressV2Query } from './useEmailAddressesV2Hooks'\n\nexport {\n  useMailV2Query,\n  useMailDetailsV2Query,\n  useOutboundEmailDetailsV2Query,\n  useMarkEmailAsReadV2Mutation,\n  useUserEmailLogsV2Query,\n  useReplyToEmailV2Mutation,\n  useUpdateEmailMutation,\n  useBulkUpdateEmailsMutation,\n  useEmailThreadV2Query,\n  useEmailThreadCountsV2Query\n} from './useMailV2Hooks'\n\n// Legacy email logs hook (inbound only)\nexport { useUserEmailLogsQuery } from './useUserEmailLogsQuery'\n\n// New unified email logs hook (inbound + outbound)\nexport function useUnifiedEmailLogsQuery(options: EmailLogsOptions = {}) {\n  return useQuery({\n    queryKey: ['unified-email-logs', options],\n    queryFn: async () => {\n      const result = await getUnifiedEmailLogs(options)\n      if (!result.success) {\n        throw new Error(result.error)\n      }\n      return result.data as EmailLogsResponse\n    },\n    staleTime: 30 * 1000, // 30 seconds\n    gcTime: 5 * 60 * 1000, // 5 minutes\n  })\n}\n\n// Query keys\nexport const emailKeys = {\n  all: ['emails'] as const,\n  lists: () => [...emailKeys.all, 'list'] as const,\n  list: (filters: Record<string, any>) => [...emailKeys.lists(), filters] as const,\n  details: () => [...emailKeys.all, 'detail'] as const,\n  detail: (id: string) => [...emailKeys.details(), id] as const,\n}\n\n// Legacy hook for listing emails (kept for backward compatibility)\nexport function useEmailsListQuery(options?: {\n  limit?: number\n  offset?: number\n  searchQuery?: string\n  statusFilter?: string\n  domainFilter?: string\n}) {\n  return useQuery({\n    queryKey: emailKeys.list(options || {}),\n    queryFn: () => getEmailsList(options),\n    staleTime: 30 * 1000, // 30 seconds\n    gcTime: 5 * 60 * 1000, // 5 minutes\n  })\n}\n\n// Legacy hook for getting email details (kept for backward compatibility)\nexport function useEmailDetailsQuery(emailId: string, enabled = true) {\n  return useQuery({\n    queryKey: emailKeys.detail(emailId),\n    queryFn: () => getEmailDetailsFromParsed(emailId),\n    enabled: enabled && !!emailId,\n    staleTime: 60 * 1000, // 1 minute\n    gcTime: 10 * 60 * 1000, // 10 minutes\n  })\n} "],"names":[],"mappings":"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","ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]}