{"version":3,"sources":["turbopack:///[project]/components/icons/media-pause.tsx","turbopack:///[project]/components/icons/cloud-download.tsx","turbopack:///[project]/components/icons/bullet-list.tsx","turbopack:///[project]/components/icons/grid-2.tsx","turbopack:///[project]/app/(main)/admin/actions/data:c430e9 <text/javascript>","turbopack:///[project]/app/(main)/admin/actions/data:943bd7 <text/javascript>","turbopack:///[project]/app/(main)/admin/actions/data:488ead <text/javascript>","turbopack:///[project]/app/(main)/admin/actions/data:1f881d <text/javascript>","turbopack:///[project]/app/(main)/admin/actions/data:72ffeb <text/javascript>","turbopack:///[project]/app/(main)/admin/lambda/page.tsx"],"sourcesContent":["import React, {SVGProps} from 'react';\n\ntype IconProps = SVGProps<SVGSVGElement> & {\n\tsecondaryfill?: string;\n\tstrokewidth?: number;\n\ttitle?: string;\n}\n\nfunction MediaPause({fill = 'currentColor', secondaryfill, title = 'badge 13', ...props}: IconProps) {\n\tsecondaryfill = secondaryfill || fill;\n\n\treturn (\n\t\t<svg height=\"18\" width=\"18\" {...props} viewBox=\"0 0 18 18\" xmlns=\"http://www.w3.org/2000/svg\">\n\t<title>{title}</title>\n\t<g fill={fill}>\n\t\t<rect height=\"14\" width=\"5\" fill={fill} rx=\"1.75\" ry=\"1.75\" x=\"2\" y=\"2\"/>\n\t\t<rect height=\"14\" width=\"5\" fill={secondaryfill} rx=\"1.75\" ry=\"1.75\" x=\"11\" y=\"2\"/>\n\t</g>\n</svg>\n\t);\n};\n\nexport default MediaPause;","import React, {SVGProps} from 'react';\n\ntype IconProps = SVGProps<SVGSVGElement> & {\n\tsecondaryfill?: string;\n\tstrokewidth?: number;\n\ttitle?: string;\n}\n\nfunction CloudDownload({fill = 'currentColor', secondaryfill, title = 'badge 13', ...props}: IconProps) {\n\tsecondaryfill = secondaryfill || fill;\n\n\treturn (\n\t\t<svg height=\"18\" width=\"18\" {...props} viewBox=\"0 0 18 18\" xmlns=\"http://www.w3.org/2000/svg\">\n\t<title>{title}</title>\n\t<g fill={fill}>\n\t\t<path d=\"M14.146,6.327c-.442-2.463-2.611-4.327-5.146-4.327-2.895,0-5.25,2.355-5.25,5.25,0,.128,.005,.258,.017,.39-1.604,.431-2.767,1.885-2.767,3.61,0,2.068,1.682,3.75,3.75,3.75h7.75c2.481,0,4.5-2.019,4.5-4.5,0-1.854-1.15-3.503-2.854-4.173Zm-2.366,3.704l-2.25,2.25c-.146,.146-.338,.22-.53,.22s-.384-.073-.53-.22l-2.25-2.25c-.293-.293-.293-.768,0-1.061s.768-.293,1.061,0l.97,.97v-3.189c0-.414,.336-.75,.75-.75s.75,.336,.75,.75v3.189l.97-.97c.293-.293,.768-.293,1.061,0s.293,.768,0,1.061Z\" fill={fill}/>\n\t</g>\n</svg>\n\t);\n};\n\nexport default CloudDownload;","import React, {SVGProps} from 'react';\n\ntype IconProps = SVGProps<SVGSVGElement> & {\n\tsecondaryfill?: string;\n\tstrokewidth?: number;\n\ttitle?: string;\n}\n\nfunction BulletList({fill = 'currentColor', secondaryfill, title = 'badge 13', ...props}: IconProps) {\n\tsecondaryfill = secondaryfill || fill;\n\n\treturn (\n\t\t<svg height=\"18\" width=\"18\" {...props} viewBox=\"0 0 18 18\" xmlns=\"http://www.w3.org/2000/svg\">\n\t<title>{title}</title>\n\t<g fill={fill}>\n\t\t<path d=\"M15.75 10.5H8.75C8.336 10.5 8 10.836 8 11.25C8 11.664 8.336 12 8.75 12H15.75C16.164 12 16.5 11.664 16.5 11.25C16.5 10.836 16.164 10.5 15.75 10.5Z\" fill={fill}/>\n\t\t<path d=\"M15.75 14H8.75C8.336 14 8 14.336 8 14.75C8 15.164 8.336 15.5 8.75 15.5H15.75C16.164 15.5 16.5 15.164 16.5 14.75C16.5 14.336 16.164 14 15.75 14Z\" fill={fill}/>\n\t\t<path d=\"M15.75 3.5H8.75C8.336 3.5 8 3.836 8 4.25C8 4.664 8.336 5 8.75 5H15.75C16.164 5 16.5 4.664 16.5 4.25C16.5 3.836 16.164 3.5 15.75 3.5Z\" fill={fill}/>\n\t\t<path d=\"M15.75 7H8.75C8.336 7 8 7.336 8 7.75C8 8.164 8.336 8.5 8.75 8.5H15.75C16.164 8.5 16.5 8.164 16.5 7.75C16.5 7.336 16.164 7 15.75 7Z\" fill={fill}/>\n\t\t<path d=\"M3.75 6.5C4.9926 6.5 6 5.493 6 4.25C6 3.007 4.9926 2 3.75 2C2.5074 2 1.5 3.007 1.5 4.25C1.5 5.493 2.5074 6.5 3.75 6.5Z\" fill={secondaryfill}/>\n\t\t<path d=\"M3.75 13.5C4.9926 13.5 6 12.493 6 11.25C6 10.007 4.9926 9 3.75 9C2.5074 9 1.5 10.007 1.5 11.25C1.5 12.493 2.5074 13.5 3.75 13.5Z\" fill={secondaryfill}/>\n\t</g>\n</svg>\n\t);\n};\n\nexport default BulletList;","import React, {SVGProps} from 'react';\n\ntype IconProps = SVGProps<SVGSVGElement> & {\n\tsecondaryfill?: string;\n\tstrokewidth?: number;\n\ttitle?: string;\n}\n\nfunction Grid2({fill = 'currentColor', secondaryfill, title = 'badge 13', ...props}: IconProps) {\n\tsecondaryfill = secondaryfill || fill;\n\n\treturn (\n\t\t<svg height=\"18\" width=\"18\" {...props} viewBox=\"0 0 18 18\" xmlns=\"http://www.w3.org/2000/svg\">\n\t<title>{title}</title>\n\t<g fill={fill}>\n\t\t<rect height=\"6\" width=\"6\" fill={fill} rx=\"1.75\" ry=\"1.75\" x=\"2\" y=\"10\"/>\n\t\t<rect height=\"6\" width=\"6\" fill={fill} rx=\"1.75\" ry=\"1.75\" x=\"10\" y=\"10\"/>\n\t\t<rect height=\"6\" width=\"6\" fill={fill} rx=\"1.75\" ry=\"1.75\" x=\"2\" y=\"2\"/>\n\t\t<path d=\"M16.005,3.763l-1.769-1.769c-.681-.68-1.791-.681-2.474,0l-1.769,1.769c-.681,.682-.681,1.792,0,2.474l1.769,1.769c.341,.34,.789,.511,1.237,.511s.896-.17,1.237-.511l1.769-1.769c.681-.682,.681-1.792,0-2.474,0,0,0,0,0,0Z\" fill={secondaryfill}/>\n\t</g>\n</svg>\n\t);\n};\n\nexport default Grid2;","/* __next_internal_action_entry_do_not_use__ [{\"002fadfbf1de6b6906c36737771fcb63155a62f386\":\"getLambdaFunctionInfo\"},\"app/(main)/admin/actions/lambda.ts\",\"\"] */\"use turbopack no side effects\";import{createServerReference,callServer,findSourceMapURL}from\"private-next-rsc-action-client-wrapper\";export var getLambdaFunctionInfo=/*#__PURE__*/createServerReference(\"002fadfbf1de6b6906c36737771fcb63155a62f386\",callServer,void 0,findSourceMapURL,\"getLambdaFunctionInfo\");","/* __next_internal_action_entry_do_not_use__ [{\"60b38dcd28b08e3c462dc19827d9069a7a04fdad8b\":\"getLambdaRecentLogs\"},\"app/(main)/admin/actions/lambda.ts\",\"\"] */\"use turbopack no side effects\";import{createServerReference,callServer,findSourceMapURL}from\"private-next-rsc-action-client-wrapper\";export var getLambdaRecentLogs=/*#__PURE__*/createServerReference(\"60b38dcd28b08e3c462dc19827d9069a7a04fdad8b\",callServer,void 0,findSourceMapURL,\"getLambdaRecentLogs\");","/* __next_internal_action_entry_do_not_use__ [{\"70ad903b3a5ebe2d80c70c968fd3c917594be4b861\":\"getLambdaMoreLogs\"},\"app/(main)/admin/actions/lambda.ts\",\"\"] */\"use turbopack no side effects\";import{createServerReference,callServer,findSourceMapURL}from\"private-next-rsc-action-client-wrapper\";export var getLambdaMoreLogs=/*#__PURE__*/createServerReference(\"70ad903b3a5ebe2d80c70c968fd3c917594be4b861\",callServer,void 0,findSourceMapURL,\"getLambdaMoreLogs\");","/* __next_internal_action_entry_do_not_use__ [{\"00d95b3472d71039b8dd024b1b22cac9d0724f6b72\":\"getLambdaLogStreams\"},\"app/(main)/admin/actions/lambda.ts\",\"\"] */\"use turbopack no side effects\";import{createServerReference,callServer,findSourceMapURL}from\"private-next-rsc-action-client-wrapper\";export var getLambdaLogStreams=/*#__PURE__*/createServerReference(\"00d95b3472d71039b8dd024b1b22cac9d0724f6b72\",callServer,void 0,findSourceMapURL,\"getLambdaLogStreams\");","/* __next_internal_action_entry_do_not_use__ [{\"00309720759baccbe8187348cba5569cb3494fcf37\":\"checkAWSConnection\"},\"app/(main)/admin/actions/lambda.ts\",\"\"] */\"use turbopack no side effects\";import{createServerReference,callServer,findSourceMapURL}from\"private-next-rsc-action-client-wrapper\";export var checkAWSConnection=/*#__PURE__*/createServerReference(\"00309720759baccbe8187348cba5569cb3494fcf37\",callServer,void 0,findSourceMapURL,\"checkAWSConnection\");","'use client'\n\nimport { useState, useEffect, useRef } from 'react'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Badge } from '@/components/ui/badge'\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'\nimport { ScrollArea } from '@/components/ui/scroll-area'\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'\nimport { Input } from '@/components/ui/input'\nimport { Sheet, SheetContent, SheetHeader, SheetTitle } from '@/components/ui/sheet'\n// Import Nucleo icons\nimport Code2 from '@/components/icons/code-2'\nimport Refresh2 from '@/components/icons/refresh-2'\nimport MediaPause from '@/components/icons/media-pause'\nimport CirclePlay from '@/components/icons/circle-play'\nimport CloudDownload from '@/components/icons/cloud-download'\nimport Magnifier2 from '@/components/icons/magnifier-2'\nimport BulletList from '@/components/icons/bullet-list'\nimport Grid2 from '@/components/icons/grid-2'\nimport ChevronDown from '@/components/icons/chevron-down'\nimport ChevronRight from '@/components/icons/chevron-right'\nimport { toast } from 'sonner'\nimport { \n  getLambdaFunctionInfo, \n  getLambdaRecentLogs, \n  getLambdaMoreLogs,\n  getLambdaLogStreams, \n  checkAWSConnection,\n  type LambdaFunctionInfo,\n  type LogEvent,\n  type LogStreamInfo\n} from '../actions/lambda'\n\nexport default function LambdaPage() {\n  const [functionInfo, setFunctionInfo] = useState<LambdaFunctionInfo | null>(null)\n  const [logStreams, setLogStreams] = useState<LogStreamInfo[]>([])\n  const [logs, setLogs] = useState<LogEvent[]>([])\n  const [isLoading, setIsLoading] = useState(true)\n  const [isLiveTailing, setIsLiveTailing] = useState(true)\n  const [selectedTimeRange, setSelectedTimeRange] = useState('30')\n  const [awsConnected, setAwsConnected] = useState(false)\n  const [error, setError] = useState<string | null>(null)\n  const [lastRefresh, setLastRefresh] = useState<Date | null>(null)\n  const [selectedLog, setSelectedLog] = useState<LogEvent | null>(null)\n  const [isSheetOpen, setIsSheetOpen] = useState(false)\n  const [searchTerm, setSearchTerm] = useState('')\n  const [logSearchTerm, setLogSearchTerm] = useState('')\n  const [nextToken, setNextToken] = useState<string | null>(null)\n  const [isLoadingMore, setIsLoadingMore] = useState(false)\n  const [hasMoreLogs, setHasMoreLogs] = useState(true)\n  const scrollAreaRef = useRef<HTMLDivElement>(null)\n  const [groupedMode, setGroupedMode] = useState(true)\n  const [expandedRequests, setExpandedRequests] = useState<Set<string>>(new Set())\n  const [activeFilter, setActiveFilter] = useState<{ type: 'request' | 'email' | null, value: string | null }>({ type: null, value: null })\n\n  // Check AWS connection on mount\n  useEffect(() => {\n    checkConnection()\n  }, [])\n\n  // Load data when AWS connection is established\n  useEffect(() => {\n    if (awsConnected) {\n      // Reset pagination when time range changes\n      setNextToken(null)\n      setHasMoreLogs(true)\n      loadAllData()\n    }\n  }, [awsConnected, selectedTimeRange])\n\n  // Live tailing interval\n  useEffect(() => {\n    let interval: NodeJS.Timeout | null = null\n    \n    if (isLiveTailing && awsConnected) {\n      interval = setInterval(() => {\n        loadLogs()\n      }, 2000) // Refresh every 2 seconds for better real-time feel\n    }\n    \n    return () => {\n      if (interval) clearInterval(interval)\n    }\n  }, [isLiveTailing, awsConnected, selectedTimeRange])\n\n  // Infinite scroll handler\n  useEffect(() => {\n    const scrollArea = scrollAreaRef.current\n    if (!scrollArea) return\n\n    const handleScroll = (event: Event) => {\n      const target = event.target as HTMLDivElement\n      const { scrollTop, scrollHeight, clientHeight } = target\n      \n      // Load more when user is near the bottom (within 100px)\n      if (scrollHeight - scrollTop - clientHeight < 100) {\n        if (hasMoreLogs && !isLoadingMore) {\n          loadMoreLogs()\n        }\n      }\n    }\n\n    // Find the scrollable element inside ScrollArea (Radix UI structure)\n    const scrollableElement = scrollArea.querySelector('[data-radix-scroll-area-viewport]')\n    if (scrollableElement) {\n      scrollableElement.addEventListener('scroll', handleScroll)\n      return () => {\n        scrollableElement.removeEventListener('scroll', handleScroll)\n      }\n    }\n  }, [hasMoreLogs, isLoadingMore])\n\n  const checkConnection = async () => {\n    try {\n      const result = await checkAWSConnection()\n      setAwsConnected(result.success)\n      if (!result.success) {\n        setError(result.error || 'AWS connection failed')\n      }\n    } catch (err) {\n      setError('Failed to check AWS connection')\n      setAwsConnected(false)\n    }\n  }\n\n  const loadAllData = async () => {\n    setIsLoading(true)\n    setError(null)\n    \n    try {\n      // Load function info and logs in parallel\n      const [functionResult, logsResult, streamsResult] = await Promise.all([\n        getLambdaFunctionInfo(),\n        getLambdaRecentLogs(parseInt(selectedTimeRange)),\n        getLambdaLogStreams()\n      ])\n      \n      if (functionResult.success && functionResult.data) {\n        setFunctionInfo(functionResult.data)\n      } else {\n        setError(functionResult.error || 'Failed to load function info')\n      }\n      \n      if (logsResult.success && logsResult.data) {\n        // Sort logs by timestamp, newest first\n        const sortedLogs = logsResult.data.sort((a, b) => b.timestamp - a.timestamp)\n        setLogs(sortedLogs)\n        setNextToken(logsResult.nextToken || null)\n        setHasMoreLogs(!!logsResult.nextToken)\n      } else {\n        setError(logsResult.error || 'Failed to load logs')\n      }\n      \n      if (streamsResult.success && streamsResult.data) {\n        setLogStreams(streamsResult.data)\n      }\n      \n      setLastRefresh(new Date())\n    } catch (err) {\n      setError('Failed to load Lambda data')\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  const loadLogs = async () => {\n    try {\n      const result = await getLambdaRecentLogs(parseInt(selectedTimeRange))\n      if (result.success && result.data) {\n        // Sort logs by timestamp, newest first\n        const sortedLogs = result.data.sort((a, b) => b.timestamp - a.timestamp)\n        setLogs(sortedLogs)\n        setNextToken(result.nextToken || null)\n        setHasMoreLogs(!!result.nextToken)\n        setLastRefresh(new Date())\n      }\n    } catch (err) {\n      console.error('Failed to refresh logs:', err)\n    }\n  }\n\n  const loadMoreLogs = async () => {\n    if (!nextToken || isLoadingMore) return\n    \n    setIsLoadingMore(true)\n    try {\n      const result = await getLambdaMoreLogs(parseInt(selectedTimeRange), nextToken)\n      if (result.success && result.data) {\n        // Sort new logs and merge with existing logs\n        const newLogs = result.data.sort((a, b) => b.timestamp - a.timestamp)\n        setLogs(prevLogs => {\n          // Combine and deduplicate by timestamp + message\n          const combined = [...prevLogs, ...newLogs]\n          const unique = combined.filter((log, index, self) => \n            index === self.findIndex(l => l.timestamp === log.timestamp && l.message === log.message)\n          )\n          return unique.sort((a, b) => b.timestamp - a.timestamp)\n        })\n        setNextToken(result.nextToken || null)\n        setHasMoreLogs(!!result.nextToken)\n      }\n    } catch (err) {\n      console.error('Failed to load more logs:', err)\n    } finally {\n      setIsLoadingMore(false)\n    }\n  }\n\n  const toggleLiveTailing = () => {\n    setIsLiveTailing(!isLiveTailing)\n  }\n\n  const formatTimestamp = (timestamp: number) => {\n    return new Date(timestamp).toLocaleString()\n  }\n\n  const formatLogMessage = (message: string) => {\n    // Basic log message formatting\n    if (message.includes('ERROR') || message.includes('❌')) {\n      return { type: 'error', content: message }\n    }\n    if (message.includes('WARN') || message.includes('⚠️')) {\n      return { type: 'warning', content: message }\n    }\n    if (message.includes('✅') || message.includes('SUCCESS')) {\n      return { type: 'success', content: message }\n    }\n    return { type: 'info', content: message }\n  }\n\n  const getLogSummary = (message: string) => {\n    // Create short summaries for different log types\n    if (message.includes('📧 Lambda - Received SES email event')) {\n      return '📧 Received SES email event'\n    }\n    if (message.includes('📥 Lambda - Fetching email from S3')) {\n      return '📥 Fetching email from S3'\n    }\n    if (message.includes('✅ Lambda - Successfully fetched email content')) {\n      return '✅ Email content fetched'\n    }\n    if (message.includes('🚀 Lambda - Sending webhook request')) {\n      return '🚀 Sending webhook request'\n    }\n    if (message.includes('✅ Lambda - Webhook response')) {\n      return '✅ Webhook sent successfully'\n    }\n    if (message.includes('❌ Lambda')) {\n      return '❌ Lambda error occurred'\n    }\n    if (message.includes('INIT_START')) {\n      return '🔄 Lambda function initializing'\n    }\n    if (message.includes('START RequestId')) {\n      return '▶️ Request started'\n    }\n    if (message.includes('END RequestId')) {\n      return '✅ Request completed'\n    }\n    if (message.includes('REPORT RequestId')) {\n      return '📊 Request metrics'\n    }\n    if (message.match(/^REPORT\\s+RequestId:/)) {\n      return '📊 Request metrics'\n    }\n    \n    // Fallback to first 80 characters\n    return message.length > 80 ? message.substring(0, 80) + '...' : message\n  }\n\n  const handleLogClick = (log: LogEvent) => {\n    setSelectedLog(log)\n    setIsSheetOpen(true)\n    setSearchTerm('') // Reset search when opening new log\n  }\n\n  const getFilteredLogLines = () => {\n    if (!selectedLog || !searchTerm) return selectedLog?.message.split('\\n') || []\n    \n    return selectedLog.message.split('\\n').filter(line => \n      line.toLowerCase().includes(searchTerm.toLowerCase())\n    )\n  }\n\n  const parseRequestInfo = (message: string) => {\n    // CloudWatch logs come in tab-separated format:\n    // TIMESTAMP\\tREQUEST_ID\\tLEVEL\\tMESSAGE\n    // Example: 2025-07-02T21:49:47.556Z\\t1404d664-c507-4ead-95b2-e24672038331\\tINFO\\t✅ REQUEST_COMPLETE|1404d664-c507-4ead-95b2-e24672038331|SUCCESS|Request completed successfully\n    \n    // First, check if this is a tab-separated CloudWatch log\n    const tabParts = message.split('\\t')\n    let actualMessage = message\n    let embeddedRequestId: string | null = null\n    \n    if (tabParts.length >= 4) {\n      // This is a CloudWatch log with tabs\n      // Format: TIMESTAMP\\tREQUEST_ID\\tLEVEL\\tMESSAGE\n      embeddedRequestId = tabParts[1]\n      actualMessage = tabParts.slice(3).join('\\t') // Join the rest in case message has tabs\n    } else if (tabParts.length === 2) {\n      // Some logs like REPORT might only have TIMESTAMP\\tMESSAGE format\n      actualMessage = tabParts[1]\n    }\n\n    // Parse REQUEST_START logs (with optional emoji prefix)\n    const requestStartMatch = actualMessage.match(/(?:🆔\\s+)?REQUEST_START\\|([^|]+)\\|(.+)/)\n    if (requestStartMatch) {\n      return { type: 'REQUEST_START', requestId: requestStartMatch[1], message: requestStartMatch[2] }\n    }\n\n    // Parse EMAIL_TARGET logs (with optional emoji prefix)\n    const emailTargetMatch = actualMessage.match(/(?:📧\\s+)?EMAIL_TARGET\\|([^|]+)\\|([^|]+)\\|(.+)/)\n    if (emailTargetMatch) {\n      return { type: 'EMAIL_TARGET', requestId: emailTargetMatch[1], email: emailTargetMatch[2], message: emailTargetMatch[3] }\n    }\n\n    // Parse REQUEST_COMPLETE logs (with optional emoji prefix)\n    const requestCompleteMatch = actualMessage.match(/(?:✅\\s+)?REQUEST_COMPLETE\\|([^|]+)\\|([^|]+)\\|(.+)/)\n    if (requestCompleteMatch) {\n      return { type: 'REQUEST_COMPLETE', requestId: requestCompleteMatch[1], status: requestCompleteMatch[2], message: requestCompleteMatch[3] }\n    }\n\n    // Parse logs with emoji prefix and request ID (format: 📧 requestId|Lambda - message)\n    const emojiPrefixedMatch = actualMessage.match(/^(?:[📧📥🔍🚀💥⚠️❌✅📨📭📍🧪📊]\\s+)?([a-f0-9-]+)\\|(.+)/)\n    if (emojiPrefixedMatch) {\n      return { type: 'LAMBDA_LOG', requestId: emojiPrefixedMatch[1], message: emojiPrefixedMatch[2] }\n    }\n\n    // If we found an embedded request ID from tab format, use it\n    if (embeddedRequestId) {\n      return { type: 'LAMBDA_LOG', requestId: embeddedRequestId, message: actualMessage }\n    }\n\n    // Parse logs with emoji prefix but no request ID (format: 📥 Lambda - message or ❌ Lambda - message)\n    // These are logs where requestId was null/undefined\n    const emojiOnlyMatch = actualMessage.match(/^([📧📥🔍🚀💥⚠️❌✅📨📭📍🧪📊])\\s+(Lambda\\s+-\\s+.+|Error\\s+details:|.+error.+)/)\n    if (emojiOnlyMatch) {\n      return { type: 'LAMBDA_LOG_NO_ID', requestId: null, message: actualMessage }\n    }\n\n    // Parse logs with request ID at the beginning (format: requestId|Lambda - message)\n    const prefixedRequestIdMatch = actualMessage.match(/^([a-f0-9-]+)\\|(.+)/)\n    if (prefixedRequestIdMatch) {\n      return { type: 'LAMBDA_LOG', requestId: prefixedRequestIdMatch[1], message: prefixedRequestIdMatch[2] }\n    }\n\n    // Extract request ID from standard Lambda logs (RequestId: xxx)\n    // This handles START, END, and REPORT logs\n    const requestIdMatch = actualMessage.match(/RequestId:\\s*([a-f0-9-]+)/)\n    if (requestIdMatch) {\n      return { type: 'LAMBDA_LOG', requestId: requestIdMatch[1], message: actualMessage }\n    }\n\n    return { type: 'OTHER', requestId: null, message: actualMessage }\n  }\n\n  const groupLogsByRequest = (logs: LogEvent[]) => {\n    const groups: { [requestId: string]: { \n      requestId: string, \n      logs: LogEvent[], \n      startTime: number, \n      endTime: number,\n      status: 'RUNNING' | 'SUCCESS' | 'FAILED',\n      emailTarget?: string,\n      summary: string\n    } } = {}\n\n    logs.forEach(log => {\n      const parsed = parseRequestInfo(log.message)\n      \n      if (parsed.requestId) {\n        if (!groups[parsed.requestId]) {\n          groups[parsed.requestId] = {\n            requestId: parsed.requestId,\n            logs: [],\n            startTime: log.timestamp,\n            endTime: log.timestamp,\n            status: 'RUNNING',\n            summary: 'Processing request...'\n          }\n        }\n\n        groups[parsed.requestId].logs.push(log)\n        groups[parsed.requestId].startTime = Math.min(groups[parsed.requestId].startTime, log.timestamp)\n        groups[parsed.requestId].endTime = Math.max(groups[parsed.requestId].endTime, log.timestamp)\n\n        // Update group info based on log type\n        if (parsed.type === 'EMAIL_TARGET') {\n          groups[parsed.requestId].emailTarget = parsed.email\n          groups[parsed.requestId].summary = `Processing email for ${parsed.email}`\n        } else if (parsed.type === 'REQUEST_COMPLETE') {\n          groups[parsed.requestId].status = parsed.status === 'SUCCESS' ? 'SUCCESS' : 'FAILED'\n          groups[parsed.requestId].summary = parsed.status === 'SUCCESS' ? 'Request completed successfully' : 'Request failed'\n        }\n      }\n    })\n\n    return Object.values(groups).sort((a, b) => b.startTime - a.startTime)\n  }\n\n  const toggleRequestExpansion = (requestId: string) => {\n    setExpandedRequests(prev => {\n      const newSet = new Set(prev)\n      if (newSet.has(requestId)) {\n        newSet.delete(requestId)\n      } else {\n        newSet.add(requestId)\n      }\n      return newSet\n    })\n  }\n\n  const filterByRequest = (requestId: string) => {\n    setActiveFilter({ type: 'request', value: requestId })\n    setLogSearchTerm('') // Clear search when filtering\n  }\n\n  const filterByEmail = (email: string) => {\n    setActiveFilter({ type: 'email', value: email })\n    setLogSearchTerm('') // Clear search when filtering\n  }\n\n  const clearFilter = () => {\n    setActiveFilter({ type: null, value: null })\n  }\n\n  const downloadLogs = () => {\n    const logsText = logs.map(log => \n      `${formatTimestamp(log.timestamp)} - ${log.message}`\n    ).join('\\n')\n    \n    const blob = new Blob([logsText], { type: 'text/plain' })\n    const url = URL.createObjectURL(blob)\n    const a = document.createElement('a')\n    a.href = url\n    a.download = `lambda-logs-${new Date().toISOString().split('T')[0]}.txt`\n    document.body.appendChild(a)\n    a.click()\n    document.body.removeChild(a)\n    URL.revokeObjectURL(url)\n  }\n\n  if (!awsConnected) {\n    return (\n      <div className=\"flex flex-1 flex-col gap-6 p-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold tracking-tight flex items-center gap-2\">\n              <Code2 width=\"32\" height=\"32\" />\n              Lambda Monitoring\n            </h1>\n          </div>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-destructive\">AWS Connection Error</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-muted-foreground mb-4\">\n              {error || 'Unable to connect to AWS services. Please check your AWS credentials and configuration.'}\n            </p>\n            <Button onClick={checkConnection}>\n              <Refresh2 width=\"16\" height=\"16\" className=\"mr-2\" />\n              Retry Connection\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"flex flex-1 flex-col h-full p-6 gap-4\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between flex-shrink-0\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight flex items-center gap-2\">\n            <Code2 width=\"32\" height=\"32\" />\n            Lambda Monitoring\n          </h1>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          {lastRefresh && (\n            <span className=\"text-sm text-muted-foreground flex items-center gap-1\">\n              {isLiveTailing && (\n                <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\"></div>\n              )}\n              Last refresh: {lastRefresh.toLocaleTimeString()}\n            </span>\n          )}\n          <Button \n            variant=\"secondary\" \n            onClick={toggleLiveTailing}\n            className={isLiveTailing ? 'bg-green-50 border-green-200 text-green-700 dark:bg-green-950 dark:border-green-800 dark:text-green-300' : ''}\n          >\n            {isLiveTailing ? (\n              <>\n                <MediaPause width=\"16\" height=\"16\" className=\"mr-2\" />\n                Live Streaming\n              </>\n            ) : (\n              <>\n                <CirclePlay width=\"16\" height=\"16\" className=\"mr-2\" />\n                Start Live Stream\n              </>\n            )}\n          </Button>\n          <Button variant=\"secondary\" onClick={loadAllData} disabled={isLoading}>\n            <Refresh2 width=\"16\" height=\"16\" className=\"mr-2\" />\n            Refresh\n          </Button>\n        </div>\n      </div>\n\n      {/* Logs Section */}\n      <Tabs defaultValue=\"logs\" className=\"flex flex-col flex-1 gap-4\">\n        <TabsList>\n          <TabsTrigger value=\"logs\">Recent Logs</TabsTrigger>\n          <TabsTrigger value=\"streams\">Log Streams</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"logs\" className=\"flex flex-col flex-1 gap-4\">\n          <div className=\"flex items-center justify-between flex-shrink-0\">\n            <div className=\"flex items-center gap-4\">\n              <h3 className=\"text-lg font-semibold\">Lambda Logs</h3>\n              <div className=\"flex items-center gap-2\">\n                <span className=\"text-sm text-muted-foreground bg-muted px-2 py-1 rounded-md font-mono\">\n                  {(() => {\n                    let filteredLogs = logs\n                    if (activeFilter.type && activeFilter.value) {\n                      if (activeFilter.type === 'request') {\n                        filteredLogs = logs.filter(log => {\n                          const parsed = parseRequestInfo(log.message)\n                          return parsed.requestId === activeFilter.value\n                        })\n                      } else if (activeFilter.type === 'email') {\n                        filteredLogs = logs.filter(log => {\n                          const parsed = parseRequestInfo(log.message)\n                          return parsed.type === 'EMAIL_TARGET' && parsed.email === activeFilter.value ||\n                                 log.message.includes(activeFilter.value!)\n                        })\n                      }\n                    }\n                    filteredLogs = filteredLogs.filter(log => \n                      logSearchTerm === '' || \n                      log.message.toLowerCase().includes(logSearchTerm.toLowerCase()) ||\n                      getLogSummary(log.message).toLowerCase().includes(logSearchTerm.toLowerCase())\n                    )\n                    return `${filteredLogs.length} logs`\n                  })()}\n                </span>\n                <Button\n                  variant=\"secondary\"\n                  size=\"sm\"\n                  onClick={() => setGroupedMode(!groupedMode)}\n                  className=\"flex items-center gap-1\"\n                >\n                  {groupedMode ? <BulletList width=\"16\" height=\"16\" /> : <Grid2 width=\"16\" height=\"16\" />}\n                  {groupedMode ? 'Grouped' : 'Individual'}\n                </Button>\n              </div>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              {activeFilter.type && (\n                <div className=\"flex items-center gap-2 px-2 py-1 bg-blue-50 border border-blue-200 rounded text-xs dark:bg-blue-950 dark:border-blue-800\">\n                  <span className=\"text-blue-700 dark:text-blue-300\">\n                    {activeFilter.type === 'request' ? '🔍 Request:' : '📧 Email:'} {activeFilter.value}\n                  </span>\n                  <button onClick={clearFilter} className=\"text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-200\">×</button>\n                </div>\n              )}\n              <div className=\"relative\">\n                <Magnifier2 width=\"16\" height=\"16\" className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground\" />\n                <Input\n                  placeholder={activeFilter.type ? \"Search filtered logs...\" : \"Search logs...\"}\n                  value={logSearchTerm}\n                  onChange={(e) => setLogSearchTerm(e.target.value)}\n                  className=\"pl-10 w-48\"\n                />\n              </div>\n              <Select value={selectedTimeRange} onValueChange={setSelectedTimeRange}>\n                <SelectTrigger className=\"w-32\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"15\">Last 15 min</SelectItem>\n                  <SelectItem value=\"30\">Last 30 min</SelectItem>\n                  <SelectItem value=\"60\">Last 1 hour</SelectItem>\n                  <SelectItem value=\"180\">Last 3 hours</SelectItem>\n                  <SelectItem value=\"720\">Last 12 hours</SelectItem>\n                </SelectContent>\n              </Select>\n              <Button variant=\"secondary\" onClick={downloadLogs}>\n                <CloudDownload width=\"16\" height=\"16\" className=\"mr-2\" />\n                Download\n              </Button>\n            </div>\n          </div>\n          \n          <ScrollArea className=\"flex-1 w-full\" ref={scrollAreaRef}>\n            <div className=\"p-2 space-y-0.5 font-mono text-xs\">\n              {(() => {\n                let filteredLogs = logs\n\n                // Apply active filter first\n                if (activeFilter.type && activeFilter.value) {\n                  if (activeFilter.type === 'request') {\n                    filteredLogs = logs.filter(log => {\n                      const parsed = parseRequestInfo(log.message)\n                      return parsed.requestId === activeFilter.value\n                    })\n                  } else if (activeFilter.type === 'email') {\n                    filteredLogs = logs.filter(log => {\n                      const parsed = parseRequestInfo(log.message)\n                      return parsed.type === 'EMAIL_TARGET' && parsed.email === activeFilter.value ||\n                             log.message.includes(activeFilter.value!)\n                    })\n                  }\n                }\n\n                // Then apply search filter\n                filteredLogs = filteredLogs.filter(log => \n                  logSearchTerm === '' || \n                  log.message.toLowerCase().includes(logSearchTerm.toLowerCase()) ||\n                  getLogSummary(log.message).toLowerCase().includes(logSearchTerm.toLowerCase())\n                )\n                \n                if (filteredLogs.length === 0) {\n                  let message = 'No logs found for the selected time range'\n                  if (activeFilter.type && logSearchTerm) {\n                    message = `No logs found matching \"${logSearchTerm}\" in filtered results`\n                  } else if (activeFilter.type) {\n                    message = `No logs found for ${activeFilter.type === 'request' ? 'request' : 'email'}: ${activeFilter.value}`\n                  } else if (logSearchTerm) {\n                    message = `No logs found matching \"${logSearchTerm}\"`\n                  }\n                  \n                  return (\n                    <div className=\"text-center text-muted-foreground py-6 text-xs\">\n                      {message}\n                    </div>\n                  )\n                }\n\n                if (groupedMode) {\n                  // Grouped view with chronological inline ordering\n                  const requestGroups = groupLogsByRequest(filteredLogs)\n                  const ungroupedLogs = filteredLogs.filter(log => !parseRequestInfo(log.message).requestId)\n\n                  // Create combined items array for chronological sorting\n                  const combinedItems: Array<{\n                    type: 'group' | 'log',\n                    timestamp: number,\n                    group?: typeof requestGroups[0],\n                    log?: typeof ungroupedLogs[0],\n                    originalIndex?: number\n                  }> = [\n                    ...requestGroups.map(group => ({\n                      type: 'group' as const,\n                      timestamp: group.startTime,\n                      group\n                    })),\n                    ...ungroupedLogs.map((log, index) => ({\n                      type: 'log' as const,\n                      timestamp: log.timestamp,\n                      log,\n                      originalIndex: index\n                    }))\n                  ]\n\n                  // Sort chronologically (newest first)\n                  combinedItems.sort((a, b) => b.timestamp - a.timestamp)\n\n                  return (\n                    <>\n                      {combinedItems.map((item, index) => {\n                        if (item.type === 'group' && item.group) {\n                          const group = item.group\n                          return (\n                            <div key={`group-${group.requestId}`} className=\"border rounded-md bg-card\">\n                              {/* Request Group Header */}\n                              <div \n                                className={`px-3 py-2 transition-colors border-l-4 flex items-center gap-2 ${\n                                  group.status === 'SUCCESS' ? 'bg-green-50/50 hover:bg-green-50 text-green-800 border-l-green-400 dark:bg-green-950/30 dark:hover:bg-green-950/50 dark:text-green-300 dark:border-l-green-600' :\n                                  group.status === 'FAILED' ? 'bg-red-50/50 hover:bg-red-50 text-red-800 border-l-red-400 dark:bg-red-950/30 dark:hover:bg-red-950/50 dark:text-red-300 dark:border-l-red-600' :\n                                  'bg-blue-50/50 hover:bg-blue-50 text-blue-800 border-l-blue-400 dark:bg-blue-950/30 dark:hover:bg-blue-950/50 dark:text-blue-300 dark:border-l-blue-600'\n                                }`}\n                              >\n                                <div \n                                  className=\"flex items-center gap-1 cursor-pointer\"\n                                  onClick={() => toggleRequestExpansion(group.requestId)}\n                                >\n                                  {expandedRequests.has(group.requestId) ? \n                                    <ChevronDown width=\"12\" height=\"12\" /> : \n                                    <ChevronRight width=\"12\" height=\"12\" />\n                                  }\n                                  <span className=\"text-[9px] text-muted-foreground whitespace-nowrap font-mono opacity-60\">\n                                    {new Date(group.startTime).toLocaleTimeString()}\n                                  </span>\n                                </div>\n                                <div \n                                  className=\"font-medium text-xs flex-1 cursor-pointer\"\n                                  onClick={() => toggleRequestExpansion(group.requestId)}\n                                >\n                                  {group.emailTarget ? `Request for ${group.emailTarget}` : group.summary}\n                                </div>\n                                <div className=\"flex items-center gap-1.5 flex-shrink-0\">\n                                  {group.emailTarget && (\n                                    <Button\n                                      variant=\"secondary\"\n                                      size=\"sm\"\n                                      onClick={(e) => {\n                                        e.stopPropagation()\n                                        filterByEmail(group.emailTarget!)\n                                      }}\n                                      className=\"h-5 px-2 text-[10px] bg-blue-100 hover:bg-blue-200 text-blue-700 dark:bg-blue-900 dark:hover:bg-blue-800 dark:text-blue-300\"\n                                    >\n                                      📧 Email\n                                    </Button>\n                                  )}\n                                  <Button\n                                    variant=\"secondary\"\n                                    size=\"sm\"\n                                    onClick={(e) => {\n                                      e.stopPropagation()\n                                      filterByRequest(group.requestId)\n                                    }}\n                                    className=\"h-5 px-2 text-[10px] bg-purple-100 hover:bg-purple-200 text-purple-700 dark:bg-purple-900 dark:hover:bg-purple-800 dark:text-purple-300\"\n                                  >\n                                    🔍 Filter\n                                  </Button>\n                                  <Button\n                                    variant=\"secondary\"\n                                    size=\"sm\"\n                                    onClick={(e) => {\n                                      e.stopPropagation()\n                                      navigator.clipboard.writeText(group.requestId)\n                                      toast.success('Request ID copied to clipboard')\n                                    }}\n                                    className=\"h-5 px-2 text-[10px] bg-muted hover:bg-muted/80 text-muted-foreground\"\n                                    title={`Copy request ID: ${group.requestId}`}\n                                  >\n                                    📋 Copy ID\n                                  </Button>\n                                  <span className=\"text-[9px] text-muted-foreground opacity-60 font-mono\">\n                                    {group.logs.length} logs\n                                  </span>\n                                  <span className=\"text-[10px] px-1 py-0.5 rounded font-mono\">\n                                    {group.status === 'SUCCESS' ? '✅' : group.status === 'FAILED' ? '❌' : '⏳'}\n                                  </span>\n                                </div>\n                              </div>\n\n                              {/* Expanded Request Logs */}\n                              {expandedRequests.has(group.requestId) && (\n                                <div className=\"border-t bg-muted/30 space-y-0.5 p-2\">\n                                  {group.logs.map((log, logIndex) => {\n                                    // Parse the log to extract the actual message content\n                                    const parsed = parseRequestInfo(log.message)\n                                    let displayMessage = log.message\n                                    \n                                    // If it's a CloudWatch format log, extract just the message part\n                                    const tabParts = log.message.split('\\t')\n                                    if (tabParts.length >= 4) {\n                                      // Skip timestamp, request ID, and log level to get the actual message\n                                      displayMessage = tabParts.slice(3).join('\\t')\n                                    }\n                                    \n                                    // Remove all occurrences of the request ID from the message\n                                    if (group.requestId) {\n                                      displayMessage = displayMessage.replace(new RegExp(group.requestId, 'g'), '').trim()\n                                      // Clean up any leftover pipes or double spaces\n                                      displayMessage = displayMessage.replace(/\\|\\s*\\|/g, '|').replace(/\\s+/g, ' ').replace(/^\\|/, '').trim()\n                                      // Replace |Lambda - with just Lambda -\n                                      displayMessage = displayMessage.replace(/\\|Lambda\\s+-\\s+/g, 'Lambda - ')\n                                    }\n                                    \n                                    const formatted = formatLogMessage(displayMessage)\n                                    const summary = getLogSummary(displayMessage)\n                                    \n                                    return (\n                                      <div \n                                        key={logIndex}\n                                        onClick={() => handleLogClick(log)}\n                                        className=\"px-2 py-1 hover:bg-card rounded cursor-pointer transition-colors text-xs\"\n                                      >\n                                        <div className=\"flex items-start gap-2\">\n                                          <span className=\"text-[9px] text-muted-foreground whitespace-nowrap flex-shrink-0 font-mono opacity-50\">\n                                            {new Date(log.timestamp).toLocaleTimeString('en-US', { \n                                              hour12: false, \n                                              hour: '2-digit', \n                                              minute: '2-digit', \n                                              second: '2-digit' \n                                            })}\n                                          </span>\n                                          <div className=\"flex-1 break-words\">\n                                            {summary}\n                                          </div>\n                                        </div>\n                                      </div>\n                                    )\n                                  })}\n                                </div>\n                              )}\n                            </div>\n                          )\n                        } else if (item.type === 'log' && item.log) {\n                          const log = item.log\n                          \n                          // Extract the actual message content\n                          let displayMessage = log.message\n                          const tabParts = log.message.split('\\t')\n                          if (tabParts.length >= 4) {\n                            displayMessage = tabParts.slice(3).join('\\t')\n                          }\n                          \n                          // Remove all occurrences of the request ID from the message\n                          const parsed = parseRequestInfo(log.message)\n                          if (parsed.requestId) {\n                            displayMessage = displayMessage.replace(new RegExp(parsed.requestId, 'g'), '').trim()\n                            // Clean up any leftover pipes or double spaces\n                            displayMessage = displayMessage.replace(/\\|\\s*\\|/g, '|').replace(/\\s+/g, ' ').replace(/^\\|/, '').trim()\n                            // Replace |Lambda - with just Lambda -\n                            displayMessage = displayMessage.replace(/\\|Lambda\\s+-\\s+/g, 'Lambda - ')\n                          }\n                          \n                          const formatted = formatLogMessage(displayMessage)\n                          const summary = getLogSummary(displayMessage)\n                          return (\n                            <div \n                              key={`log-${item.originalIndex}`}\n                              onClick={() => handleLogClick(log)}\n                              className={`px-3 py-2 rounded-md cursor-pointer transition-colors border-l-2 h-8 flex items-center opacity-60 ${\n                                formatted.type === 'error' ? 'bg-red-50/50 hover:bg-red-50 text-red-800 border-l-red-400 dark:bg-red-950/30 dark:hover:bg-red-950/50 dark:text-red-300 dark:border-l-red-600' :\n                                formatted.type === 'warning' ? 'bg-yellow-50/50 hover:bg-yellow-50 text-yellow-800 border-l-yellow-400 dark:bg-yellow-950/30 dark:hover:bg-yellow-950/50 dark:text-yellow-300 dark:border-l-yellow-600' :\n                                formatted.type === 'success' ? 'bg-green-50/50 hover:bg-green-50 text-green-800 border-l-green-400 dark:bg-green-950/30 dark:hover:bg-green-950/50 dark:text-green-300 dark:border-l-green-600' :\n                                'bg-muted/50 hover:bg-muted border-l-border'\n                              }`}\n                            >\n                              <span className=\"text-[10px] text-muted-foreground whitespace-nowrap flex-shrink-0 font-mono opacity-60\">\n                                {new Date(log.timestamp).toLocaleTimeString('en-US', { \n                                  hour12: false, \n                                  hour: '2-digit', \n                                  minute: '2-digit', \n                                  second: '2-digit' \n                                })}\n                              </span>\n                              <div className=\"font-medium text-xs flex-1 mx-2 break-words\">\n                                {summary}\n                              </div>\n                              <div className=\"flex items-center gap-1 flex-shrink-0\">\n                                <span className=\"text-[10px] text-muted-foreground opacity-60 font-mono\">\n                                  {log.message.split('\\n').length} lines\n                                </span>\n                                <div className=\"text-[10px] text-muted-foreground opacity-50\">\n                                  ↗\n                                </div>\n                              </div>\n                            </div>\n                          )\n                        }\n                        return null\n                      })}\n                    </>\n                  )\n                } else {\n                  // Individual log view (original)\n                  return filteredLogs.map((log, index) => {\n                    // Extract the actual message content\n                    let displayMessage = log.message\n                    const tabParts = log.message.split('\\t')\n                    if (tabParts.length >= 4) {\n                      displayMessage = tabParts.slice(3).join('\\t')\n                    }\n                    \n                    // Remove all occurrences of the request ID from the message\n                    const parsed = parseRequestInfo(log.message)\n                    if (parsed.requestId) {\n                      displayMessage = displayMessage.replace(new RegExp(parsed.requestId, 'g'), '').trim()\n                      // Clean up any leftover pipes or double spaces\n                      displayMessage = displayMessage.replace(/\\|\\s*\\|/g, '|').replace(/\\s+/g, ' ').replace(/^\\|/, '').trim()\n                      // Replace |Lambda - with just Lambda -\n                      displayMessage = displayMessage.replace(/\\|Lambda\\s+-\\s+/g, 'Lambda - ')\n                    }\n                    \n                    const formatted = formatLogMessage(displayMessage)\n                    const summary = getLogSummary(displayMessage)\n                    return (\n                      <div \n                        key={index} \n                        onClick={() => handleLogClick(log)}\n                        className={`px-3 py-2 rounded-md cursor-pointer transition-colors border-l-2 h-8 flex items-center ${\n                          formatted.type === 'error' ? 'bg-red-50/50 hover:bg-red-50 text-red-800 border-l-red-400 dark:bg-red-950/30 dark:hover:bg-red-950/50 dark:text-red-300 dark:border-l-red-600' :\n                          formatted.type === 'warning' ? 'bg-yellow-50/50 hover:bg-yellow-50 text-yellow-800 border-l-yellow-400 dark:bg-yellow-950/30 dark:hover:bg-yellow-950/50 dark:text-yellow-300 dark:border-l-yellow-600' :\n                          formatted.type === 'success' ? 'bg-green-50/50 hover:bg-green-50 text-green-800 border-l-green-400 dark:bg-green-950/30 dark:hover:bg-green-950/50 dark:text-green-300 dark:border-l-green-600' :\n                          'bg-muted/50 hover:bg-muted border-l-border'\n                        }`}\n                      >\n                        <span className=\"text-[10px] text-muted-foreground whitespace-nowrap flex-shrink-0 font-mono opacity-60\">\n                          {new Date(log.timestamp).toLocaleTimeString('en-US', { \n                            hour12: false, \n                            hour: '2-digit', \n                            minute: '2-digit', \n                            second: '2-digit' \n                          })}\n                        </span>\n                        <div className=\"font-medium text-xs truncate flex-1 mx-2\">\n                          {summary}\n                        </div>\n                        <div className=\"flex items-center gap-1 flex-shrink-0\">\n                          <span className=\"text-[10px] text-muted-foreground opacity-60 font-mono\">\n                            {log.message.split('\\n').length} lines\n                          </span>\n                          <div className=\"text-[10px] text-muted-foreground opacity-50\">\n                            ↗\n                          </div>\n                        </div>\n                      </div>\n                    )\n                  })\n                }\n              })()}\n              \n              {/* Loading indicator for infinite scroll */}\n              {isLoadingMore && (\n                <div className=\"flex items-center justify-center py-4\">\n                  <div className=\"flex items-center gap-2 text-xs text-muted-foreground\">\n                    <div className=\"w-4 h-4 border-2 border-muted-foreground border-t-transparent rounded-full animate-spin\"></div>\n                    Loading more logs...\n                  </div>\n                </div>\n              )}\n              \n              {/* Load More button */}\n              {hasMoreLogs && !isLoadingMore && logs.length > 0 && (\n                <div className=\"text-center py-4\">\n                  <Button variant=\"secondary\" size=\"sm\" onClick={loadMoreLogs}>\n                    Load More Logs\n                  </Button>\n                </div>\n              )}\n              \n              {/* End of logs indicator */}\n              {!hasMoreLogs && logs.length > 0 && (\n                <div className=\"text-center py-4 text-xs text-muted-foreground\">\n                  No more logs available\n                </div>\n              )}\n            </div>\n          </ScrollArea>\n        </TabsContent>\n\n        <TabsContent value=\"streams\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Log Streams</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-2\">\n                {logStreams.length === 0 ? (\n                  <div className=\"text-center text-muted-foreground py-8\">\n                    No log streams found\n                  </div>\n                ) : (\n                  logStreams.map((stream, index) => (\n                    <div key={index} className=\"flex items-center justify-between p-3 border rounded-lg\">\n                      <div>\n                        <div className=\"font-mono text-sm\">{stream.logStreamName}</div>\n                        <div className=\"text-xs text-muted-foreground\">\n                          Created: {formatTimestamp(stream.creationTime)}\n                        </div>\n                      </div>\n                      <div className=\"text-right\">\n                        {stream.lastEventTime && (\n                          <div className=\"text-xs text-muted-foreground\">\n                            Last event: {formatTimestamp(stream.lastEventTime)}\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  ))\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n\n      {/* Log Detail Sheet */}\n      <Sheet open={isSheetOpen} onOpenChange={setIsSheetOpen}>\n        <SheetContent side=\"bottom\" className=\"h-[80vh] flex flex-col\">\n          <SheetHeader className=\"pb-4\">\n            <div className=\"flex items-center justify-between\">\n              <SheetTitle>Log Details</SheetTitle>\n              <div className=\"text-sm text-muted-foreground\">\n                {selectedLog && formatTimestamp(selectedLog.timestamp)}\n              </div>\n            </div>\n            <div className=\"relative\">\n              <Magnifier2 width=\"16\" height=\"16\" className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground\" />\n              <Input\n                placeholder=\"Search in log...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10\"\n              />\n            </div>\n          </SheetHeader>\n          \n          <ScrollArea className=\"flex-1\">\n            <div className=\"font-mono text-sm space-y-1 p-4\">\n              {selectedLog && (\n                searchTerm ? (\n                  getFilteredLogLines().length > 0 ? (\n                    getFilteredLogLines().map((line, index) => (\n                      <div key={index} className=\"py-1 border-b border-border last:border-b-0\">\n                        <span className=\"text-muted-foreground text-xs mr-2\">\n                          {index + 1}\n                        </span>\n                        <span \n                          dangerouslySetInnerHTML={{\n                            __html: line.replace(\n                              new RegExp(searchTerm, 'gi'),\n                              `<mark class=\"bg-yellow-200 text-yellow-900 px-1 rounded dark:bg-yellow-800 dark:text-yellow-100\">$&</mark>`\n                            )\n                          }}\n                        />\n                      </div>\n                    ))\n                  ) : (\n                    <div className=\"text-center text-muted-foreground py-8\">\n                      No lines found matching \"{searchTerm}\"\n                    </div>\n                  )\n                ) : (\n                  selectedLog.message.split('\\n').map((line, index) => {\n                    const formatted = formatLogMessage(line)\n                    return (\n                      <div \n                        key={index} \n                        className={`py-1 border-b border-border last:border-b-0 ${\n                          formatted.type === 'error' ? 'bg-red-50 text-red-700 dark:bg-red-950/30 dark:text-red-300' :\n                          formatted.type === 'warning' ? 'bg-yellow-50 text-yellow-700 dark:bg-yellow-950/30 dark:text-yellow-300' :\n                          formatted.type === 'success' ? 'bg-green-50 text-green-700 dark:bg-green-950/30 dark:text-green-300' :\n                          ''\n                        }`}\n                      >\n                        <span className=\"text-muted-foreground text-xs mr-2 select-none\">\n                          {index + 1}\n                        </span>\n                        <span className=\"whitespace-pre-wrap break-words\">\n                          {line}\n                        </span>\n                      </div>\n                    )\n                  })\n                )\n              )}\n            </div>\n          </ScrollArea>\n        </SheetContent>\n      </Sheet>\n    </div>\n  )\n} "],"names":[],"mappings":"4MAQA,SAAoB,AAAX,MAAY,EAAO,cAcb,AAd2B,eAAE,CAAa,OAAE,EAAQ,UAAU,CAAE,GAAG,EAAiB,EAGlG,OAFA,EAAgB,GAAiB,EAGhC,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,OAAO,KAAK,MAAM,KAAM,GAAG,CAAK,CAAE,QAAQ,YAAY,MAAM,uCAClE,CAAA,EAAA,EAAA,GAAA,EAAC,QAAA,UAAO,IACR,CAAA,EAAA,EAAA,IAAA,EAAC,IAAA,CAAE,KAAM,YACR,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,OAAO,KAAK,MAAM,IAAI,KAAM,EAAM,GAAG,OAAO,GAAG,OAAO,EAAE,IAAI,EAAE,MACpE,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,OAAO,KAAK,MAAM,IAAI,KAAM,EAAe,GAAG,OAAO,GAAG,OAAO,EAAE,KAAK,EAAE,WAIhF,gGCZA,SAAS,AAAc,MAAC,EAAO,cAahB,AAb8B,eAAE,CAAa,OAAE,EAAQ,UAAU,CAAE,GAAG,EAAiB,EAGrG,OAFA,EAAgB,GAAiB,EAGhC,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,OAAO,KAAK,MAAM,KAAM,GAAG,CAAK,CAAE,QAAQ,YAAY,MAAM,uCAClE,CAAA,EAAA,EAAA,GAAA,EAAC,QAAA,UAAO,IACR,CAAA,EAAA,EAAA,GAAA,EAAC,IAAA,CAAE,KAAM,WACR,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,EAAE,+dAA+d,KAAM,QAI/e,iGCXA,SAAS,AAAW,MAAC,EAAO,cAAc,AAkB3B,eAlB6B,CAAa,OAAE,EAAQ,UAAU,CAAE,GAAG,EAAiB,EAGlG,OAFA,EAAgB,GAAiB,EAGhC,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,OAAO,KAAK,MAAM,KAAM,GAAG,CAAK,CAAE,QAAQ,YAAY,MAAM,uCAClE,CAAA,EAAA,EAAA,GAAA,EAAC,QAAA,UAAO,IACR,CAAA,EAAA,EAAA,IAAA,EAAC,IAAA,CAAE,KAAM,YACR,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,EAAE,oJAAoJ,KAAM,IAClK,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,EAAE,kJAAkJ,KAAM,IAChK,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,EAAE,uIAAuI,KAAM,IACrJ,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,EAAE,qIAAqI,KAAM,IACnJ,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,EAAE,yHAAyH,KAAM,IACvI,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,EAAE,mIAAmI,KAAM,SAInJ,gGChBA,SAAS,AAAM,MAAC,EAAO,cAAc,AAgBtB,eAhBwB,CAAa,OAAE,EAAQ,UAAU,CAAE,GAAG,EAAiB,EAG7F,OAFA,EAAgB,GAAiB,EAGhC,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,OAAO,KAAK,MAAM,KAAM,GAAG,CAAK,CAAE,QAAQ,YAAY,MAAM,uCAClE,CAAA,EAAA,EAAA,GAAA,EAAC,QAAA,UAAO,IACR,CAAA,EAAA,EAAA,IAAA,EAAC,IAAA,CAAE,KAAM,YACR,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,OAAO,IAAI,MAAM,IAAI,KAAM,EAAM,GAAG,OAAO,GAAG,OAAO,EAAE,IAAI,EAAE,OACnE,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,OAAO,IAAI,MAAM,IAAI,KAAM,EAAM,GAAG,OAAO,GAAG,OAAO,EAAE,KAAK,EAAE,OACpE,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,OAAO,IAAI,MAAM,IAAI,KAAM,EAAM,GAAG,OAAO,GAAG,OAAO,EAAE,IAAI,EAAE,MACnE,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,EAAE,yNAAyN,KAAM,SAIzO,mDCtB8J,EAAA,CAAA,CAAA,+BAAkC,IAAA,EAAA,EAAA,CAAA,CAAA,QAAiH,EAAmC,CAAA,EAAA,EAAA,iBAAb,IAAiC,AAApB,EAAsB,KAAxB,SAAE,+BAAmE,EAAA,UAAU,CAAC,KAAK,EAAE,EAAA,gBAAgB,CAAC,AAAnC,oBAAkB,qDCA7Q,EAAA,CAAA,CAAA,6BAAkC,IAAA,EAAA,EAAA,CAAA,CAAA,QAAiH,EAAiC,CAAA,EAAA,EAAA,eAAb,MAAa,AAAoB,EAAE,GAAxB,WAAE,+BAAmE,EAAA,UAAU,CAAC,KAAK,EAAE,EAAA,gBAAgB,CAAC,AAAnC,oBAAkB,mDCA3Q,EAAA,CAAA,CAAA,2BAAkC,IAAA,EAAA,EAAA,CAAA,CAAA,QAAiH,EAA+B,GAAA,EAAA,aAAb,QAAa,AAAoB,EAAE,CAAxB,aAAE,+BAAmE,EAAA,UAAU,CAAC,KAAK,EAAE,EAAA,gBAAgB,CAAlC,AAAmC,oBAAjB,iDCArQ,EAAA,CAAA,CAAA,6BAAkC,IAAA,EAAA,EAAA,CAAA,CAAA,QAAiH,EAAiC,CAAA,EAAA,EAAA,eAAb,MAAa,AAAoB,EAAE,GAAxB,WAAE,+BAAmE,EAAA,UAAU,CAAC,KAAK,EAAE,EAAA,gBAAgB,CAAC,AAAnC,oBAAkB,mDCA1Q,EAAA,CAAA,CAAA,4BAAkC,IAAA,EAAA,EAAA,CAAA,CAAA,QAAiH,EAAgC,CAAA,EAAA,EAAA,cAAb,OAAa,AAAoB,EAAE,EAAxB,YAAE,+BAAmE,EAAA,UAAU,CAAC,KAAK,EAAE,EAAA,gBAAgB,CAAlC,AAAmC,oBAAjB,yFCEnae,SAAS,IACtB,IA+esB,EA/ehB,CAAC,EAAc,EAAgB,CAAG,CAAA,EAAA,EAAA,QAAO,AAAP,EAAoC,MACtE,CAAC,EAAY,EAAc,CAAG,CAAA,EAAA,EAAA,QAAA,AAAO,EAAmB,AADtB,EACwB,EAC1D,CAAC,EAAM,EAAQ,CAAG,CAAA,EAAA,EAAA,QAAA,AAAO,EAAc,EAAE,AADX,EAE9B,CAAC,EAAW,EAAa,CAAG,CAAA,EAAA,EAAA,QAAA,AAAO,GAAE,CADnB,EAElB,CAAC,EAAe,EAAiB,CAAG,CAAA,EAAA,EAAA,QAAA,AAAO,GAAE,CADjB,EAE5B,CAAC,EAAmB,EAAqB,CAAG,CAAA,EAAA,EAAA,QAAO,AAAP,EAAS,EADjB,IAEpC,CAAC,EAAc,EAAgB,CAAG,CAAA,EAAA,EAAA,QAAA,AAAO,EADG,CACD,GAC3C,CAAC,EAAO,EAAS,CAAG,CAAA,EAAA,EAAA,QAAA,AAAO,EAAiB,EADV,IAElC,CAAC,EAAa,EAAe,CAAG,CAAA,EAAA,EAAA,QAAA,AAAO,EAAe,AADlC,MAEpB,CAAC,EAAa,EAAe,CAAG,CAAA,EAAA,EAAA,QAAA,AAAO,EAAmB,AAD1B,MAEhC,CAAC,EAAa,EAAe,CAAG,CAAA,EAAA,EAAA,QAAA,AAAO,EADP,CACS,GACzC,CAAC,EAAY,EAAc,CAAG,CAAA,EAAA,EAAA,QAAA,AAAO,EAAE,EADP,EAEhC,CAAC,EAAe,EAAiB,CAAG,CAAA,EAAA,EAAA,QAAA,AAAO,EAAE,EADf,EAE9B,CAAC,EAAW,EAAa,CAAG,GAAA,EAAA,QAAO,AAAP,EAAwB,EADhB,IAEpC,CAAC,GAAe,GAAiB,CAAG,CAAA,EAAA,EAAA,QAAA,AAAO,AADf,GACiB,GAC7C,CAAC,GAAa,GAAe,CAAG,CAAA,EAAA,EAAA,QAAA,AAAO,EADH,CACK,GACzC,GAAgB,CAAA,EAAA,EAAA,MAAA,AAAK,EAAkB,MACvC,CAAC,AAF+B,GAElB,GAAe,CAAG,CAAA,EAAA,EAAA,QAAA,AAAO,EADvB,CACyB,GACzC,CAAC,GAAkB,GAAoB,CAAG,GAAA,EAAA,QAAA,AAAO,EAAe,AADhC,IACoC,KACpE,CAAC,GAAc,GAAgB,CAAG,CAAA,EAAA,EAAA,KADQ,GACR,AAAO,EAA8D,CAAE,KAAM,KAAM,MAAO,IAAK,GAGvI,CAAA,EAHwC,AAGxC,EAAA,SAAA,AAAQ,EAAE,KACR,IACF,EAAG,EAAE,EAGL,CAAA,EAAA,EAAA,MALA,GAKA,AAAQ,EAAE,KACJ,IAEF,EAAa,MACb,EAHgB,EAGD,GACf,EALJ,GAOA,EAAG,CAAC,EAAc,EAAkB,EAGpC,CAAA,EAAA,EAAA,SAAA,AAAQ,EAAE,KACR,IAAI,EAAkC,KAQtC,OANI,GAAiB,AAHvB,IAII,EAAW,QADsB,IACV,KACrB,IACF,EAAG,IAAA,EAAM,AAGJ,KACD,GAAU,cAAc,EAC9B,CACF,EAAG,CAAC,EAAe,EAAc,EAAkB,EAGnD,CAAA,EAAA,EAAA,SAAA,AAAQ,EAAE,AATuD,KAU/D,IAAM,EAAa,GAAc,OAAO,CACxC,GAAI,CAFN,AAEO,EAAY,OAEjB,IAAM,EAAe,AAAC,IAEpB,GAAM,WAAE,CAAS,cAAE,CAAY,cAAE,CAAY,CAAE,CADhC,EACmC,AAD7B,MAAM,CAIvB,EAAe,EAAY,EAAe,KAAK,AAC7C,IAAe,CAAC,IAClB,IAGN,EAGM,EAAoB,EAAW,CAPE,YAOW,CAAC,qCACnD,GAAI,EAEF,OADA,EAAkB,QADG,QACa,CAAC,SAAU,GACtC,KACL,EAAkB,mBAAmB,CAAC,SAAU,EAClD,CAEJ,EAAG,CAAC,GAAa,GAAc,EAE/B,IAAM,GAAkB,UACtB,GAAI,CACF,IAAM,EAAS,MAAM,CAAA,EAAA,EAAA,kBAAA,AAAiB,IACtC,EAAgB,EAAO,OAAO,EACzB,AAAD,EAAQ,AAFS,OAEF,EACjB,AADmB,EACV,EAAO,KAAK,EAAI,wBAE7B,CAAE,MAAO,EAAK,CACZ,EAAS,kCACT,GAAgB,EAClB,CACF,EAEM,GAAc,UAClB,GAAa,GACb,EAAS,MAET,GAAI,CAEF,GAAM,CAAC,EAAgB,EAAY,EAAc,CAAG,MAAM,QAAQ,GAAG,CAAC,CACpE,CAAA,EAAA,EAAA,qBAAoB,AAApB,IACA,CAAA,EAAA,EAAA,OADA,YACA,AAAkB,EAAE,SAAS,IAC7B,CAAA,EADA,AACA,EAAA,mBAAA,AAAkB,IACnB,EAQD,GANI,EAAe,OAHjB,AAGwB,EAAI,EAAe,IAAI,CAC/C,CADiD,CACjC,EAAe,IAAI,EAEnC,EAAS,EAAe,KAAK,EAAI,gCAG/B,EAAW,OAAO,EAAI,EAAW,IAAI,CAAE,CAEzC,IAAM,EAAa,EAAW,IAAI,CAAC,IAAI,CAAC,CAAC,EAAG,IAAM,EAAE,SAAS,CAAG,EAAE,SAAS,EAC3E,EAAQ,GACR,EAAa,EAAW,SAAS,EAAI,MACrC,GAAe,CAAC,CAAC,EAAW,SAAS,CACvC,MACE,CADK,CACI,EAAW,KAAK,EAAI,uBAG3B,EAAc,OAAO,EAAI,EAAc,IAAI,EAC7C,AAD+C,EACjC,EAAc,IAAI,EAGlC,EAAe,IAAI,KACrB,CAAE,MAAO,EAAK,CACZ,EAAS,6BACX,QAAU,CACR,GAAa,EACf,CACF,EAEM,GAAW,UACf,GAAI,CACF,IAAM,EAAS,MAAM,CAAA,EAAA,EAAA,mBAAkB,AAAlB,EAAoB,SAAS,IAClD,GAAI,AADiB,EACV,OAAO,EAAI,EAAO,IAAI,CAAE,CAEjC,IAAM,EAAa,EAAO,IAAI,CAAC,IAAI,CAAC,CAAC,EAAG,IAAM,EAAE,SAAS,CAAG,EAAE,SAAS,EACvE,EAAQ,GACR,EAAa,EAAO,SAAS,EAAI,MACjC,GAAe,CAAC,CAAC,EAAO,SAAS,EACjC,EAAe,IAAI,KACrB,CACF,CAAE,MAAO,EAAK,CACZ,QAAQ,KAAK,CAAC,0BAA2B,EAC3C,CACF,EAEM,GAAe,UACnB,GAAI,AAAC,IAAa,IAElB,IAAiB,GACjB,GAAI,CACF,AAJ+B,IAIzB,EAAS,MAAM,CAAA,EAAA,EAAA,iBAAgB,AAAhB,EAAkB,SAAS,GAAoB,GACpE,GAAI,AADiB,EACV,OAAO,EAAI,EAAO,IAAI,CAAE,CAEjC,IAAM,EAAU,EAAO,IAAI,CAAC,IAAI,CAAC,CAAC,EAAG,IAAM,EAAE,SAAS,CAAG,EAAE,SAAS,EACpE,EAAQ,GAGS,AAGR,AAJU,IAAI,KAAa,EAAQ,CAClB,MAAM,CAAC,CAAC,EAAK,EAAO,IAC1C,IAAU,EAAK,SAAS,CAAC,GAAK,EAAE,SAAS,GAAK,EAAI,SAAS,EAAI,EAAE,OAAO,GAAK,EAAI,OAAO,GAE5E,IAAI,CAAC,CAAC,EAAG,IAAM,EAAE,SAAS,CAAG,EAAE,SAAS,GAExD,EAAa,EAAO,SAAS,EAAI,MACjC,GAAe,CAAC,CAAC,EAAO,SAAS,CACnC,CACF,CAAE,MAAO,EAAK,CACZ,QAAQ,KAAK,CAAC,4BAA6B,EAC7C,QAAU,CACR,IAAiB,EACnB,EACF,EAMM,GAAkB,AAAC,GAChB,IAAI,KAAK,GAAW,cAAc,GAGrC,GAAoB,AAAD,GAEnB,AAAJ,EAAY,QAAQ,CAAC,UAAY,EAAQ,QAAQ,CAAC,KACzC,CAD+C,AAC7C,KAAM,QAAS,QAAS,CAAQ,EAEvC,EAAQ,QAAQ,CAAC,SAAW,EAAQ,QAAQ,CAAC,MACxC,CAD+C,AAC7C,KAAM,UAAW,QAAS,CAAQ,EAEzC,EAAQ,QAAQ,CAAC,MAAQ,EAAQ,QAAQ,CAAC,WACrC,CADiD,AAC/C,KAAM,UAAW,QAAS,CAAQ,EAEtC,CAAE,KAAM,OAAQ,QAAS,CAAQ,EAGpC,GAAgB,AAAC,GAErB,AAAI,EAAQ,QAAQ,CAAC,wCACZ,CADqD,6BAG1D,EAAQ,QAAQ,CAAC,sCACZ,CADmD,2BAGxD,EAAQ,QAAQ,CAAC,iDACZ,CAD8D,yBAGnE,EAAQ,QAAQ,CAAC,uCACZ,CADoD,4BAGzD,EAAQ,QAAQ,CAAC,+BACZ,CAD4C,6BAGjD,EAAQ,QAAQ,CAAC,YACZ,CADyB,yBAG9B,EAAQ,QAAQ,CAAC,cACZ,CAD2B,iCAGhC,EAAQ,QAAQ,CAAC,mBACZ,CADgC,oBAGrC,EAAQ,QAAQ,CAAC,iBACZ,CAD8B,qBAGnC,EAAQ,QAAQ,CAAC,qBAAqB,AAGtC,EAAQ,KAAK,CAAC,wBAFT,CAEkC,oBAKpC,EAAQ,MAAM,CAAG,GAAK,EAAQ,SAAS,CAAC,EAAG,IAAM,MAAQ,EAG5D,GAAiB,AAAC,IACtB,EAAe,GACf,GAAe,GACf,EAAc,GAChB,CADoB,CAGd,GAAsB,IAC1B,AAAI,AAAC,GAAgB,EAEd,EAAY,OAAO,CAFO,AAAb,AAEO,KAAK,CAAC,MAAM,CANe,KAMT,CAAC,GAC5C,EAAK,WAAW,GAAG,QAAQ,CAAC,EAAW,WAAW,KAHZ,GAAa,QAAQ,MAAM,OAAS,EAAE,CAO1E,GAAmB,AAAC,IAMxB,IAAM,EAAW,EAAQ,KAAK,CAAC,KAC3B,EAAgB,EAChB,EAAmC,IAEnC,GAAS,MAAM,EAAI,GAGrB,AAHwB,EAGJ,CAAQ,CAAC,EAAE,CAC/B,EAAgB,EAAS,KAAK,CAAC,GAAG,IAAI,CAAC,MAAM,AACpC,AAAoB,GAAG,GAAd,MAAM,GAExB,EAAgB,CAAQ,CAAC,EAAA,AAAE,EAI7B,IAAM,EAAoB,EAAc,KAAK,CAAC,IAP0C,sCAQxF,GAAI,EACF,MAAO,CAAE,KAAM,KADM,WACW,UAAW,CAAiB,CAAC,EAAE,CAAE,QAAS,CAAiB,CAAC,EAAE,AAAC,EAIjG,IAAM,EAAmB,EAAc,KAAK,CAAC,kDAC7C,GAAI,EACF,MAAO,CAAE,KAAM,IADK,WACW,UAAW,CAAgB,CAAC,EAAE,CAAE,MAAO,CAAgB,CAAC,EAAE,CAAE,QAAS,CAAgB,CAAC,EAAE,AAAC,EAI1H,IAAM,EAAuB,EAAc,KAAK,CAAC,qDACjD,GAAI,EACF,MAAO,CAAE,KAAM,QADS,WACW,UAAW,CAAoB,CAAC,EAAE,CAAE,OAAQ,CAAoB,CAAC,EAAE,CAAE,QAAS,CAAoB,CAAC,EAAE,AAAC,EAI3I,IAAM,EAAqB,EAAc,KAAK,CAAC,yDAC/C,GAAI,EACF,MAAO,CAAE,KAAM,MADO,OACO,UAAW,CAAkB,CAAC,EAAE,CAAE,QAAS,CAAkB,CAAC,EAAE,AAAC,EAIhG,GAAI,EACF,MAAO,CAAE,KAAM,KADM,QACQ,UAAW,EAAmB,QAAS,CAAc,EAMpF,GADuB,CACnB,CADiC,KAAK,CAAC,SACvB,uEAClB,MAAO,CAAE,KAAM,mBAAoB,UAAW,KAAM,QAAS,CAAc,EAI7E,IAAM,EAAyB,EAAc,KAAK,CAAC,uBACnD,GAAI,EACF,MAAO,CAAE,KAAM,UADW,GACG,UAAW,CAAsB,CAAC,EAAE,CAAE,QAAS,CAAsB,CAAC,EAAE,AAAC,EAKxG,IAAM,EAAiB,EAAc,KAAK,CAAC,oCAC3C,AAAI,EACK,CAAE,KAAM,QADG,KACW,UAAW,CAAc,CAAC,EAAE,CAAE,QAAS,CAAc,EAG7E,CAAE,KAAM,QAAS,UAAW,KAAM,QAAS,CAAc,CAClE,EAEM,GAAqB,AAAC,IAC1B,IAAM,EAQA,CAAC,EAgCP,OA9BA,EAAK,OAAO,CAAC,IACX,IAAM,EAAS,GAAiB,EAAI,OAAO,CAEvC,GAAO,SAAS,EAAE,CAChB,AAAC,CAAM,CAAC,EAAO,SAAS,CAAC,EAAE,CAC7B,CAAM,CAAC,EAAO,SAAS,CAAC,CAAG,CACzB,UAAW,EAAO,SAAS,CAC3B,KAAM,EAAE,CACR,UAAW,EAAI,SAAS,CACxB,QAAS,EAAI,SAAS,CACtB,OAAQ,UACR,QAAS,wBACX,EAGF,CAAM,CAAC,EAAO,SAAS,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,GACnC,CAAM,CAAC,EAAO,SAAS,CAAC,CAAC,SAAS,CAAG,KAAK,GAAG,CAAC,CAAM,CAAC,EAAO,SAAS,CAAC,CAAC,SAAS,CAAE,EAAI,SAAS,EAC/F,CAAM,CAAC,EAAO,SAAS,CAAC,CAAC,OAAO,CAAG,KAAK,GAAG,CAAC,CAAM,CAAC,EAAO,SAAS,CAAC,CAAC,OAAO,CAAE,EAAI,SAAS,EAGvF,AAAgB,gBAAgB,GAAzB,IAAI,EACb,CAAM,CAAC,EAAO,SAAS,CAAC,CAAC,WAAW,CAAG,EAAO,KAAK,CACnD,CAAM,CAAC,EAAO,SAAS,CAAC,CAAC,OAAO,CAAG,CAAC,qBAAqB,EAAE,EAAO,KAAK,CAAA,CAAE,EAChD,oBAAoB,CAApC,EAAO,IAAI,GACpB,CAAM,CAAC,EAAO,SAAS,CAAC,CAAC,MAAM,CAAqB,YAAlB,EAAO,MAAM,CAAiB,UAAY,SAC5E,CAAM,CAAC,EAAO,SAAS,CAAC,CAAC,OAAO,CAAqB,YAAlB,EAAO,MAAM,CAAiB,iCAAmC,kBAG1G,GAEO,OAAO,MAAM,CAAC,GAAQ,IAAI,CAAC,CAAC,EAAG,IAAM,EAAE,SAAS,CAAG,EAAE,SAAS,CACvE,EAEM,GAAyB,AAAC,IAC9B,GAAoB,IAClB,IAAM,EAAS,IAAI,IAAI,GAMvB,OALI,EAAO,GAAG,CAAC,GACb,EAAO,MAAM,CAAC,AADW,GAGzB,EAAO,GAAG,CAAC,GAEN,CACT,EACF,EAEM,GAAkB,AAAC,IACvB,GAAgB,CAAE,KAAM,UAAW,MAAO,CAAU,GACpD,EAAiB,GACnB,CADuB,CAGjB,GAAgB,AAAC,IACrB,GAAgB,CAAE,KAAM,QAAS,KAJkB,CAIX,CAAM,GAC9C,EAAiB,GACnB,CADuB,QAuBvB,AAAK,EA+BH,CAAA,CA/BE,CA+BF,EAAA,IAAA,EAAC,CA/BgB,KA+BhB,CAAI,EAtD8C,QAsDpC,kDAEb,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,4DACb,CAAA,EAAA,EAAA,GAAA,EAAC,MAAA,UACC,CAAA,EAAA,EAAA,IAAA,EAAC,KAAA,CAAG,UAAU,sEACZ,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,OAAK,CAAA,CAAC,MAAM,KAAK,OAAO,OAAO,EAA/B,uBAIL,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,oCACZ,GACC,CAAA,EAAA,EAAA,IAAA,EAAC,OAAA,CAAK,UAAU,kEACb,GACC,CAAA,EAAA,EAAA,GAAA,EAAC,MAAA,CAAI,UAAU,oDACf,iBACa,EAAY,kBAAkB,MAGjD,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,MAAM,CAAA,CACL,QAAQ,YACR,QA7RgB,CA2RjB,AAEU,IA5RjB,EAAiB,CAAC,EACpB,EA4RU,UAAW,EAAgB,0GAA4G,YAEtI,EACC,CAAA,EAAA,EAAA,IAAA,EAAA,EAAA,QAAA,CAAA,WACE,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,OAAU,CAAA,CAAC,MAAM,KAAK,OAAO,KAAK,KAAlC,KAA4C,SAAS,oBAIxD,CAAA,EAAA,EAAA,IAAA,EAAA,EAAA,QAAA,CAAA,WACE,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,OAAU,CAAA,CAAC,MAAM,KAAK,OAAO,KAAK,KAAlC,KAA4C,SAAS,yBAK5D,CAAA,EAAA,EAAA,IAAA,EAAC,EAAA,MAAM,CAAA,CAAC,QAAQ,YAAY,QAAS,CAApC,EAAiD,SAAU,YAC1D,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,OAAQ,CAAA,CAAC,MAAM,KAAK,OAAO,KAAK,KAAhC,KAA0C,SAAS,mBAO1D,CAAA,EAAA,EAAA,IAAA,EAAC,EAAA,IAAI,CAAA,CAAC,aAAa,OAAO,UAAU,CAAnC,sCACC,CAAA,EAAA,EAAA,IAAA,EAAC,EAAA,QAAQ,CAAA,WACP,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,KADF,MACa,CAAA,CAAC,MAAM,gBAAO,EAAzB,cACD,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,WAAW,CAAA,CAAC,MAAM,kBAAlB,CAA4B,mBAG/B,CAAA,EAAA,EAAA,IAAA,EAAC,EAAA,WAAW,CAAA,CAAC,MAAM,OAAO,UAAU,CAAnC,sCACC,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,4DACb,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,oCACb,CAAA,EAAA,EAAA,GAAA,EAAC,KAAA,CAAG,UAAU,iCAAwB,gBACtC,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,oCACb,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,UAAU,kFACb,CAAC,CACmB,EACf,GAAa,IAAI,EAAI,GAAa,KAAK,EAAE,CACjB,WAAW,CAAjC,GAAa,IAAI,CACnB,EAAe,EAAK,MAAM,CAAC,GACV,AACR,GADyB,EAAI,OAAO,EAC7B,SAAS,GAAK,GAAa,KAAK,EAEjB,SAAS,CAA/B,GAAa,IAAI,GAC1B,EAAe,EAAK,MAAM,CAAC,IACzB,IAAM,EAAS,GAAiB,EAAI,OAAO,EAC3C,MAAuB,iBAAhB,EAAO,IAAI,EAAuB,EAAO,KAAK,GAAK,GAAa,KAAK,EACrE,EAAI,OAAO,CAAC,QAAQ,CAAC,GAAa,KAAK,CAChD,EAAA,GAGJ,EAAe,EAAa,MAAM,CAAC,GACf,KAAlB,GACA,EAAI,OAAO,CAAC,WAAW,GAAG,QAAQ,CAAC,EAAc,WAAW,KAC5D,GAAc,EAAI,OAAO,EAAE,WAAW,GAAG,QAAQ,CAAC,EAAc,WAAW,KAEtE,CAAA,EAAG,EAAa,MAAM,CAAC,KAAK,CAAC,IAGxC,CAAA,EAAA,EAAA,IAAA,EAAC,EAAA,MAAM,CAAA,CACL,QAAQ,YACR,KAAK,IAFN,CAGC,QAAS,IAAM,GAAe,CAAC,IAC/B,UAAU,oCAET,GAAc,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,OAAU,CAAA,CAAC,MAAM,KAAK,OAAO,OAAU,CAAA,EAAvC,AAAuC,EAAA,GAAA,EAAC,EAAA,OAAK,CAAA,CAAC,MAAM,KAAK,OAAO,OAC/E,EADuD,CACzC,UAAY,sBAIjC,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,oCACZ,GAAa,IAAI,EAChB,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,sIACb,CAAA,EAAA,EAAA,IAAA,EAAC,OAAA,CAAK,UAAU,6CACS,YAAtB,GAAa,IAAI,CAAiB,cAAgB,YAAY,IAAE,GAAa,KAAK,IAErF,CAAA,EAAA,EAAA,GAAA,EAAC,SAAA,CAAO,QAnJJ,CAmJa,IAlJ/B,GAAgB,CAAE,KAAM,KAAM,MAAO,IAAK,EAC5C,EAiJ8C,UAAU,yFAAgF,SAG5H,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,qBACb,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,OAAU,CAAA,CAAC,MAAM,KAAK,OAAO,KAAK,KAAlC,KAA4C,6EAC7C,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,KAAK,CAAA,CACJ,YAAa,GAAa,IAAI,CAAG,UADlC,gBAC8D,iBAC7D,MAAO,EACP,SAAU,AAAC,GAAM,EAAiB,EAAE,MAAM,CAAC,KAAK,EAChD,UAAU,kBAGd,CAAA,EAAA,EAAA,IAAA,EAAC,EAAA,MAAM,CAAA,CAAC,MAAO,EAAmB,cAAe,OAAhD,KACC,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,aAAa,CAAA,CAAC,UAAU,YAAxB,IACC,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,WAAW,CAAA,CAAA,KAEd,CAAA,EAAA,EAAA,IAAA,EAAC,EAAA,MAFE,OAEW,CAAA,WACZ,CAAA,EAAA,EAAA,GAAA,EAAC,EADF,AACE,UAAU,CAAA,CAAC,MAAM,cAAK,KAAtB,WACD,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,UAAU,CAAA,CAAC,MAAM,cAAK,KAAtB,WACD,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,UAAU,CAAA,CAAC,MAAM,cAAK,KAAtB,WACD,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,UAAU,CAAA,CAAC,MAAM,eAAM,IAAvB,aACD,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,UAAU,CAAA,CAAC,MAAM,eAAM,IAAvB,oBAGL,CAAA,EAAA,EAAA,IAAA,EAAC,EAAA,MAAM,CAAA,CAAC,QAAQ,YAAY,QAvKnB,CAuK4B,AAApC,IAlKX,IAAM,EAAO,IAAI,KAAK,CAJL,EAAK,GAAG,CAAC,GACxB,CAAA,EAAG,GAAgB,EAAI,SAAS,EAAE,GAAG,EAAE,EAAI,OAAO,CAAA,CAAE,EACpD,IAAI,CAAC,MAEyB,CAAE,CAAE,KAAM,YAAa,GACjD,EAAM,IAAI,eAAe,CAAC,GAC1B,EAAI,SAAS,aAAa,CAAC,KACjC,EAAE,IAAI,CAAG,EACT,EAAE,QAAQ,CAAG,CAAC,YAAY,EAAE,IAAI,OAAO,WAAW,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,CACxE,SAAS,IAAI,CAAC,WAAW,CAAC,GAC1B,EAAE,KAAK,GACP,SAAS,IAAI,CAAC,WAAW,CAAC,GAC1B,IAAI,eAAe,CAAC,EACtB,YA0Jc,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,OAAa,CAAA,CAAC,MAAM,KAAK,OAAO,KAAK,IAArC,MAA+C,SAAS,oBAM/D,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,UAAU,CAAA,CAAC,UAAU,eAArB,CAAqC,IAAK,YACzC,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,8CACZ,CAAC,KACA,IAAI,EAAe,EAyBnB,GAtBI,GAAa,IAAI,EAAI,GAAa,KAAK,EAAE,CACjB,WAAW,CAAjC,GAAa,IAAI,CACnB,EAAe,EAAK,MAAM,CAAC,GACV,AACR,GADyB,EAAI,OAAO,EAC7B,SAAS,GAAK,GAAa,KAAK,EAEjB,SAAS,CAA/B,GAAa,IAAI,GAC1B,EAAe,EAAK,MAAM,CAAC,IACzB,IAAM,EAAS,GAAiB,EAAI,OAAO,EAC3C,MAAuB,iBAAhB,EAAO,IAAI,EAAuB,EAAO,KAAK,GAAK,GAAa,KAAK,EACrE,EAAI,OAAO,CAAC,QAAQ,CAAC,GAAa,KAAK,CAChD,EAAA,GAWwB,IAAxB,CANJ,EAAe,EAAa,MAAM,CAAC,GACf,KAAlB,GACA,EAAI,OAAO,CAAC,WAAW,GAAG,QAAQ,CAAC,EAAc,WAAW,KAC5D,GAAc,EAAI,OAAO,EAAE,WAAW,GAAG,QAAQ,CAAC,EAAc,WAAW,IAAA,EAG5D,MAAM,CAAQ,CAC7B,IAAI,EAAU,4CASd,OARI,GAAa,IAAI,EAAI,EACvB,EAAU,CAAC,UAD2B,cACH,EAAE,EAAc,qBAAqB,CAAC,CAChE,GAAa,IAAI,CAC1B,CAD4B,CAClB,CAAC,kBAAkB,EAAwB,YAAtB,GAAa,IAAI,CAAiB,UAAY,QAAQ,EAAE,EAAE,GAAa,KAAK,CAAA,CAAE,CACpG,GACT,GAAU,CAAC,QADa,gBACW,EAAE,EAAc,EAAC,AAAC,EAIrD,CAAA,EAAA,EAAA,GAAA,EAAC,MAAA,CAAI,UAAU,0DACZ,GAGP,CAEA,IAAI,GA+NF,OAAO,EAAa,GAAG,CAAC,CAAC,EAAK,KAE5B,IAAI,EAAiB,EAAI,OAAO,CAC1B,EAAW,EAAI,OAAO,CAAC,KAAK,CAAC,KAC/B,EAAS,MAAM,EAAI,GAAG,AACxB,GAAiB,EAAS,KAAK,CAAC,GAAG,IAAI,CAAC,IAAA,EAI1C,IAAM,EAAS,GAAiB,EAAI,OAAO,CACvC,GAAO,SAAS,EAAE,CAKpB,EAAiB,CAFjB,EAAiB,CAFjB,EAAiB,EAAe,OAAO,CAAC,AAAI,OAAO,EAAO,SAAS,CAAE,KAAM,IAAI,IAAI,EAAA,EAEnD,OAAO,CAAC,WAAY,KAAK,OAAO,CAAC,OAAQ,KAAK,OAAO,CAAC,MAAO,IAAI,IAAI,EAAA,EAErE,OAAO,CAAC,mBAAoB,YAAA,EAG9D,IAAM,EAAY,GAAiB,GAC7B,EAAU,GAAc,GAC9B,MACE,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAEC,QAAS,IAAM,GAAe,GAC9B,UAAW,CAAC,uFAAuF,EAC9E,UAAnB,EAAU,IAAI,CAAe,iJACV,YAAnB,EAAU,IAAI,CAAiB,yKACZ,YAAnB,EAAU,IAAI,CAAiB,iKAC/B,6CAAA,CACA,WAEF,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,UAAU,kGACb,IAAI,KAAK,EAAI,SAAS,EAAE,kBAAkB,CAAC,QAAS,CACnD,OAAQ,GACR,KAAM,UACN,OAAQ,UACR,OAAQ,SACV,KAEF,CAAA,EAAA,EAAA,GAAA,EAAC,MAAA,CAAI,UAAU,oDACZ,IAEH,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,kDACb,CAAA,EAAA,EAAA,IAAA,EAAC,OAAA,CAAK,UAAU,mEACb,EAAI,OAAO,CAAC,KAAK,CAAC,MAAM,MAAM,CAAC,YAElC,CAAA,EAAA,EAAA,GAAA,EAAC,MAAA,CAAI,UAAU,wDAA+C,WAxB3D,EA8BX,EAnRe,EAEf,IAAM,EAAgB,GAAmB,GACnC,EAAgB,EAAa,MAAM,CAAC,GAAO,CAAC,GAAiB,EAAI,OAAO,EAAE,SAAS,EAGnF,EAMD,IACA,EAAc,GAAG,CAAC,GAAU,EAC7B,GAD4B,EACtB,QACN,UAAW,EAAM,SAAS,CAC1B,QACF,CAAC,KACE,EAAc,GAAG,CAAC,CAAC,EAAK,KAAW,CACpC,EADmC,GAC7B,MACN,UAAW,EAAI,SAAS,KACxB,EACA,cAAe,EACjB,CAAC,EACF,CAKD,OAFA,EAAc,IAAI,CAAC,CAAC,EAAG,IAAM,EAAE,SAAS,CAAG,EAAE,SAAS,EAGpD,CAAA,EAAA,EAAA,GAAA,EAAA,EAAA,QAAA,CAAA,UACG,EAAc,GAAG,CAAC,CAAC,EAAM,KACxB,GAAkB,UAAd,EAAK,IAAI,EAAgB,EAAK,KAAK,CAAE,CACvC,IAAM,EAAQ,EAAK,KAAK,CACxB,MACE,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAqC,UAAU,sCAE9C,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CACC,UAAW,CAAC,+DAA+D,EACxD,YAAjB,EAAM,MAAM,CAAiB,iKAC7B,AAAiB,aAAX,MAAM,CAAgB,iJAC5B,yJAAA,CACA,WAEF,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CACC,UAAU,yCACV,QAAS,IAAM,GAAuB,EAAM,SAAS,YAEpD,GAAiB,GAAG,CAAC,EAAM,SAAS,EACnC,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,OAAW,CAAA,CAAC,MAAM,KAAK,OAAO,OAC/B,CAAA,EAAA,AADC,EACD,GAAA,EAAC,EAAA,OAAY,CAAA,CAAC,MAAM,KAAK,OAAO,OAElC,CAAA,EAFG,AAEH,EAAA,GAAA,EAAC,OAAA,CAAK,UAAU,mFACb,IAAI,KAAK,EAAM,SAAS,EAAE,kBAAkB,QAGjD,CAAA,EAAA,EAAA,GAAA,EAAC,MAAA,CACC,UAAU,4CACV,QAAS,IAAM,GAAuB,EAAM,SAAS,WAEpD,EAAM,WAAW,CAAG,CAAC,YAAY,EAAE,EAAM,WAAW,CAAA,CAAE,CAAG,EAAM,OAAO,GAEzE,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,oDACZ,EAAM,WAAW,EAChB,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,MAAM,CAAA,CACL,QAAQ,YACR,KAAK,IAFN,CAGC,QAAS,AAAC,IACR,EAAE,eAAe,GACjB,GAAc,EAAM,WAAW,CACjC,EACA,UAAU,uIACX,aAIH,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,MAAM,CAAA,CACL,QAAQ,YACR,KAAK,IAFN,CAGC,QAAS,AAAC,IACR,EAAE,eAAe,GACjB,GAAgB,EAAM,SAAS,CACjC,EACA,UAAU,mJACX,cAGD,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,MAAM,CAAA,CACL,QAAQ,YACR,KAAK,IAFN,CAGC,QAAS,AAAC,IACR,EAAE,eAAe,GACjB,UAAU,SAAS,CAAC,SAAS,CAAC,EAAM,SAAS,EAC7C,EAAA,KAAK,CAAC,OAAO,CAAC,sBAAd,WACF,EACA,UAAU,wEACV,MAAO,CAAC,iBAAiB,EAAE,EAAM,SAAS,CAAA,CAAE,UAC7C,eAGD,CAAA,EAAA,EAAA,IAAA,EAAC,OAAA,CAAK,UAAU,kEACb,EAAM,IAAI,CAAC,MAAM,CAAC,WAErB,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,UAAU,qDACI,YAAjB,EAAM,MAAM,CAAiB,IAAuB,WAAjB,EAAM,MAAM,CAAgB,IAAM,YAM3E,GAAiB,GAAG,CAAC,EAAM,SAAS,GACnC,CAAA,EAAA,EAAA,GAAA,EAAC,MAAA,CAAI,UAAU,gDACZ,EAAM,IAAI,CAAC,GAAG,CAAC,CAAC,EAAK,KAEL,GAAiB,EAAI,OAAO,EAC3C,IAAI,EAAiB,EAAI,OAAO,CAG1B,EAAW,EAAI,OAAO,CAAC,KAAK,CAAC,KAC/B,EAAS,MAAM,EAAI,GAAG,CAExB,EAAiB,EAAS,KAAK,CAAC,GAAG,IAAI,CAAC,IAAA,EAItC,EAAM,SAAS,EAAE,CAKnB,EAFA,AAEiB,GAFA,CAFjB,EAAiB,EAAe,OAAO,CAAC,AAAI,OAAO,EAAM,SAAS,CAAE,KAAM,IAAI,IAAI,EAAA,EAElD,OAAO,CAAC,WAAY,KAAK,OAAO,CAAC,OAAQ,KAAK,OAAO,CAAC,MAAO,IAAI,IAAI,EAAA,EAErE,OAAO,CAAC,mBAAoB,YAAA,EAG5C,GAAiB,GACnC,IAAM,EAAU,GAAc,GAE9B,MACE,CAAA,EAAA,EAAA,GAAA,EAAC,MAAA,CAEC,QAAS,IAAM,GAAe,GAC9B,UAAU,oFAEV,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,mCACb,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,UAAU,iGACb,IAAI,KAAK,EAAI,SAAS,EAAE,kBAAkB,CAAC,QAAS,CACnD,OAAQ,GACR,KAAM,UACN,OAAQ,UACR,OAAQ,SACV,KAEF,CAAA,EAAA,EAAA,GAAA,EAAC,MAAA,CAAI,UAAU,8BACZ,QAdA,EAmBX,OA1HI,CAAC,MAAM,EAAE,EAAM,SAAS,CAAA,CAAE,CA+HxC,CAAO,GAAkB,QAAd,EAAK,IAAI,EAAc,EAAK,GAAG,CAAE,CAC1C,IAAM,EAAM,EAAK,GAAG,CAGhB,EAAiB,EAAI,OAAO,CAC1B,EAAW,EAAI,OAAO,CAAC,KAAK,CAAC,KAC/B,EAAS,MAAM,EAAI,GAAG,CACxB,EAAiB,EAAS,KAAK,CAAC,GAAG,IAAI,CAAC,IAAA,EAI1C,IAAM,EAAS,GAAiB,EAAI,OAAO,EACvC,EAAO,SAAS,EAAE,CAKpB,EAAiB,CAFjB,EAAiB,CAFjB,EAAiB,EAAe,OAAO,CAAC,AAAI,OAAO,EAAO,SAAS,CAAE,KAAM,IAAI,IAAI,EAAA,EAEnD,OAAO,CAAC,WAAY,KAAK,OAAO,CAAC,OAAQ,KAAK,OAAO,CAAC,MAAO,IAAI,IAAI,EAAA,EAErE,OAAO,CAAC,mBAAoB,YAAA,EAG9D,IAAM,EAAY,GAAiB,GAC7B,EAAU,GAAc,GAC9B,MACE,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAEC,QAAS,IAAM,GAAe,GAC9B,UAAW,CAAC,kGAAkG,EACzF,UAAnB,EAAU,IAAI,CAAe,iJACV,YAAnB,EAAU,IAAI,CAAiB,yKACZ,YAAnB,EAAU,IAAI,CAAiB,iKAC/B,6CAAA,CACA,WAEF,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,UAAU,kGACb,IAAI,KAAK,EAAI,SAAS,EAAE,kBAAkB,CAAC,QAAS,CACnD,QAAQ,EACR,KAAM,UACN,OAAQ,UACR,OAAQ,SACV,KAEF,CAAA,EAAA,EAAA,GAAA,EAAC,MAAA,CAAI,UAAU,uDACZ,IAEH,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,kDACb,CAAA,EAAA,EAAA,IAAA,EAAC,OAAA,CAAK,UAAU,mEACb,EAAI,OAAO,CAAC,KAAK,CAAC,MAAM,MAAM,CAAC,YAElC,CAAA,EAAA,EAAA,GAAA,EAAC,MAAA,CAAI,UAAU,wDAA+C,WAxB3D,CAAC,IAAI,EAAE,EAAK,aAAa,CAAA,CAAE,CA8BtC,CACA,OAAO,IACT,IAGN,EAwDF,CAAC,GAGA,CA3DQ,GA4DP,CAAA,EAAA,EAAA,GAAA,EAAC,MAAA,CAAI,UAAU,iDACb,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,kEACb,CAAA,EAAA,EAAA,GAAA,EAAC,MAAA,CAAI,UAAU,4FAAgG,4BAOpH,IAAe,CAAC,IAAiB,EAAK,MAAM,CAAG,GAC9C,CAAA,EAAA,EAAA,GAAA,EAAC,MAAA,CAAI,UAAU,4BACb,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,MAAM,CAAA,CAAC,QAAQ,YAAY,KAAK,IAAhC,CAAqC,QAAS,YAAc,qBAOhE,CAAC,IAAe,EAAK,MAAM,CAAG,GAC7B,CAAA,EAAA,EAAA,GAAA,EAAC,MAAA,CAAI,UAAU,0DAAiD,mCAQxE,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,WAAW,CAAA,CAAC,MAAM,UAAU,QAA5B,EAAsC,qBACrC,CAAA,EAAA,EAAA,IAAA,EAAC,EAAA,IAAI,CAAA,WACH,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,SADF,CACY,CAAA,UACT,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,IADF,KACW,CAAA,UAAC,iBAAV,CAEH,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,WAAW,CAAA,UACV,CAAA,EAAA,EAAA,GAAA,EAAC,KADF,CACE,CAAI,UAAU,qBACU,IAAtB,EAAW,MAAM,CAChB,CAAA,EAAA,EAAA,GAAA,EAAC,MAAA,CAAI,UAAU,kDAAyC,yBAIxD,EAAW,GAAG,CAAC,CAAC,EAAQ,IACtB,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAgB,UAAU,oEACzB,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,WACC,CAAA,EAAA,EAAA,GAAA,EAAC,MAAA,CAAI,UAAU,6BAAqB,EAAO,aAAa,GACxD,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,0CAAgC,YACnC,GAAgB,EAAO,YAAY,QAGjD,CAAA,EAAA,EAAA,GAAA,EAAC,MAAA,CAAI,UAAU,sBACZ,EAAO,aAAa,EACnB,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,0CAAgC,eAChC,GAAgB,EAAO,aAAa,SAV/C,gBAwBxB,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,KAAK,CAAA,CAAC,KAAM,EAAa,aAAc,UAAvC,CACC,CAAA,EAAA,EAAA,IAAA,EAAC,EAAA,YAAY,CAAA,CAAC,KAAK,SAAS,SAA3B,CAAqC,mCACpC,CAAA,EAAA,EAAA,IAAA,EAAC,EAAA,WAAW,CAAA,CAAC,UAAU,cAAtB,GACC,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,8CACb,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,UAAU,CAAA,UAAC,gBAAX,AACD,CAAA,EAAA,EAAA,GAAA,EAAC,MAAA,CAAI,UAAU,yCACZ,GAAe,GAAgB,EAAY,SAAS,OAGzD,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,qBACb,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,OAAU,CAAA,CAAC,MAAM,KAAK,OAAO,KAAK,KAAlC,KAA4C,6EAC7C,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,KAAK,CAAA,CACJ,YAAY,kBADb,CAEC,MAAO,EACP,SAAU,AAAC,GAAM,EAAc,EAAE,MAAM,CAAC,KAAK,EAC7C,UAAU,gBAKhB,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,UAAU,CAAA,CAAC,UAAU,eAArB,GACC,CAAA,EAAA,EAAA,GAAA,EAAC,MAAA,CAAI,UAAU,2CACZ,IACC,EACE,KAAsB,IAFV,EAEgB,CAAG,EAC7B,KAAsB,GAAG,CAAC,CAAC,EAAM,IAC/B,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAgB,UAAU,wDACzB,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,UAAU,8CACb,EAAQ,IAEX,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CACC,wBAAyB,CACvB,OAAQ,EAAK,OAAO,CAClB,AAAI,OAAO,EAAY,MACvB,CAAC,0GAA0G,CAAC,CAEhH,MAVM,IAeZ,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,mDAAyC,4BAC5B,EAAW,OAIzC,EAAY,OAAO,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,EAAM,KACzC,IAAM,EAAY,GAAiB,GACnC,MACE,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAEC,UAAW,CAAC,4CAA4C,EACnC,UAAnB,EAAU,IAAI,CAAe,8DACV,YAAnB,EAAU,IAAI,CAAiB,0EACZ,YAAnB,EAAU,IAAI,CAAiB,sEAC/B,GAAA,CACA,WAEF,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,UAAU,0DACb,EAAQ,IAEX,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,UAAU,2CACb,MAZE,EAgBX,EAAA,CAEJ,aAtmBR,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,2CACb,CAAA,EAAA,EAAA,GAAA,EAAC,MAAA,CAAI,UAAU,6CACb,CAAA,EAAA,EAAA,GAAA,EAAC,MAAA,UACC,CAAA,EAAA,EAAA,IAAA,EAAC,KAAA,CAAG,UAAU,sEACZ,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,OAAK,CAAA,CAAC,MAAM,KAAK,OAAO,OAAO,EAA/B,yBAMP,CAAA,EAAA,EAAA,IAAA,EAAC,EAAA,IAAI,CAAA,WACH,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,SADF,CACY,CAAA,UACT,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,IADF,KACW,CAAA,CAAC,UAAU,gBAApB,YAAuC,2BAE1C,CAAA,EAAA,EAAA,IAAA,EAAC,EAAA,WAAW,CAAA,WACV,CAAA,EAAA,EAAA,GAAA,EAAC,IAAA,AADF,CACI,UAAU,sCACV,GAAS,4FAEZ,CAAA,EAAA,EAAA,IAAA,EAAC,EAAA,MAAM,CAAA,CAAC,QAAS,aACf,CAAA,EAAA,EAAA,GAAA,AADD,EACE,EAAA,OAAQ,CAAA,CAAC,MAAM,KAAK,OAAO,KAAK,KAAhC,KAA0C,SAAS,8BA0lBlE"}