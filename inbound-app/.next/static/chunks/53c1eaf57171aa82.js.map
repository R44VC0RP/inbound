{"version":3,"sources":["turbopack:///[project]/node_modules/next/src/shared/lib/router/utils/handle-smooth-scroll.ts","turbopack:///[project]/node_modules/next/src/shared/lib/head-manager-context.shared-runtime.ts","turbopack:///[project]/node_modules/next/src/shared/lib/router-context.shared-runtime.ts"],"sourcesContent":["/**\n * Run function with `scroll-behavior: auto` applied to `<html/>`.\n * This css change will be reverted after the function finishes.\n */\nexport function handleSmoothScroll(\n  fn: () => void,\n  options: { dontForceLayout?: boolean; onlyHashChange?: boolean } = {}\n) {\n  // if only the hash is changed, we don't need to disable smooth scrolling\n  // we only care to prevent smooth scrolling when navigating to a new page to avoid jarring UX\n  if (options.onlyHashChange) {\n    fn()\n    return\n  }\n  const htmlElement = document.documentElement\n  const existing = htmlElement.style.scrollBehavior\n  htmlElement.style.scrollBehavior = 'auto'\n  if (!options.dontForceLayout) {\n    // In Chrome-based browsers we need to force reflow before calling `scrollTo`.\n    // Otherwise it will not pickup the change in scrollBehavior\n    // More info here: https://github.com/vercel/next.js/issues/40719#issuecomment-1336248042\n    htmlElement.getClientRects()\n  }\n  fn()\n  htmlElement.style.scrollBehavior = existing\n}\n","import React from 'react'\n\nexport const HeadManagerContext: React.Context<{\n  updateHead?: (state: any) => void\n  mountedInstances?: any\n  updateScripts?: (state: any) => void\n  scripts?: any\n  getIsSsr?: () => boolean\n\n  // Used in app directory, to render script tags as server components.\n  appDir?: boolean\n  nonce?: string\n}> = React.createContext({})\n\nif (process.env.NODE_ENV !== 'production') {\n  HeadManagerContext.displayName = 'HeadManagerContext'\n}\n","import React from 'react'\nimport type { NextRouter } from './router/router'\n\nexport const RouterContext = React.createContext<NextRouter | null>(null)\n\nif (process.env.NODE_ENV !== 'production') {\n  RouterContext.displayName = 'RouterContext'\n}\n"],"names":["handleSmoothScroll","fn","options","onlyHashChange","htmlElement","document","documentElement","existing","style","scrollBehavior","dontForceLayout","getClientRects","process","env","NODE_ENV","HeadManagerContext","React","createContext","RouterContext"],"mappings":"iKAGC,aACM,SAASA,EACdC,CAAc,CACdC,CAAqE,EAIrE,GAJAA,KAAAA,IAAAA,IAAAA,EAAmE,EAAC,EAIhEA,EAAQC,cAAc,CAAE,YAC1BF,IAGF,IAAMG,EAAcC,SAASC,eAAe,CACtCC,EAAWH,EAAYI,KAAK,CAACC,cAAc,CACjDL,EAAYI,KAAK,CAACC,cAAc,CAAG,OAC/B,AAACP,EAAQQ,eAAe,EAAE,AAI5BN,EAAYO,cAAc,GAE5BV,IACAG,EAAYI,KAAK,CAACC,cAAc,CAAGF,CACrC,0EArBgBP,qBAAAA,qCAAAA,sECUa,EAAA,CAAA,CAAA,iFAZhBe,qBAAAA,qCAAAA,KAAN,IAAMA,EAURC,gBAZa,CAAA,CAAA,IAAA,KAYbA,OAAK,CAACC,aAAa,CAAC,CAAC,qECPG,EAAA,CAAA,CAAA,iFAFhBC,gBAAAA,qCAAAA,KAAN,IAAMA,EAAgBF,gBAHX,CAAA,CAAA,IAAA,KAGWA,OAAK,CAACC,aAAa,CAAoB","ignoreList":[0,1,2]}