{"version":3,"sources":["turbopack:///[project]/node_modules/@sentry/core/src/utils-hoist/instrument/handlers.ts","turbopack:///[project]/node_modules/@sentry/core/src/utils-hoist/instrument/globalError.ts","turbopack:///[project]/node_modules/@sentry/core/src/utils-hoist/instrument/globalUnhandledRejection.ts","turbopack:///[project]/node_modules/@sentry/core/src/tracing/errors.ts","turbopack:///[project]/node_modules/@sentry/core/src/utils/sdkMetadata.ts","turbopack:///[project]/node_modules/@sentry/core/src/utils-hoist/url.ts","turbopack:///[project]/node_modules/@sentry/core/src/utils-hoist/envelope.ts","turbopack:///[project]/node_modules/@sentry/core/src/checkin.ts","turbopack:///[project]/node_modules/@sentry/core/src/api.ts","turbopack:///[project]/node_modules/@sentry/core/src/envelope.ts","turbopack:///[project]/node_modules/@sentry/core/src/integration.ts","turbopack:///[project]/node_modules/@sentry/core/src/utils/eventUtils.ts","turbopack:///[project]/node_modules/@sentry/core/src/utils/transactionEvent.ts","turbopack:///[project]/node_modules/@sentry/core/src/utils-hoist/clientreport.ts","turbopack:///[project]/node_modules/@sentry/core/src/client.ts","turbopack:///[project]/node_modules/@sentry/core/src/logs/constants.ts","turbopack:///[project]/node_modules/@sentry/core/src/logs/envelope.ts","turbopack:///[project]/node_modules/@sentry/core/src/logs/exports.ts","turbopack:///[project]/node_modules/@sentry/core/src/utils-hoist/eventbuilder.ts","turbopack:///[project]/node_modules/@sentry/core/src/server-runtime-client.ts","turbopack:///[project]/node_modules/@sentry/core/src/utils/handleCallbackErrors.ts","turbopack:///[project]/node_modules/@sentry/core/src/tracing/sampling.ts","turbopack:///[project]/node_modules/@sentry/core/src/utils-hoist/lru.ts","turbopack:///[project]/node_modules/@sentry/core/src/tracing/measurement.ts","turbopack:///[project]/node_modules/@sentry/core/src/tracing/logSpans.ts","turbopack:///[project]/node_modules/@sentry/core/src/utils-hoist/supports.ts","turbopack:///[project]/node_modules/@sentry/core/src/utils-hoist/instrument/fetch.ts","turbopack:///[project]/node_modules/@sentry/core/src/utils/isSentryRequestUrl.ts","turbopack:///[project]/node_modules/@sentry/core/src/tracing/sentryNonRecordingSpan.ts","turbopack:///[project]/node_modules/@sentry/core/src/tracing/sentrySpan.ts","turbopack:///[project]/node_modules/@sentry/core/src/tracing/trace.ts","turbopack:///[project]/node_modules/@sentry/core/src/utils/traceData.ts","turbopack:///[project]/node_modules/@sentry/core/src/fetch.ts","turbopack:///[project]/node_modules/@sentry/core/src/breadcrumbs.ts","turbopack:///[project]/node_modules/@sentry/core/src/utils-hoist/breadcrumb-log-level.ts","turbopack:///[project]/node_modules/@sentry/core/src/utils-hoist/promisebuffer.ts","turbopack:///[project]/node_modules/@sentry/core/src/utils-hoist/ratelimit.ts","turbopack:///[project]/node_modules/@sentry/core/src/transports/base.ts","turbopack:///[project]/node_modules/@sentry/core/src/utils-hoist/node-stack-trace.ts","turbopack:///[project]/node_modules/@sentry/core/src/integrations/dedupe.ts","turbopack:///[project]/node_modules/@sentry/core/src/integrations/eventFilters.ts","turbopack:///[project]/node_modules/@sentry/core/src/integrations/functiontostring.ts","turbopack:///[project]/node_modules/@sentry/core/src/utils-hoist/aggregate-errors.ts","turbopack:///[project]/node_modules/@sentry/core/src/integrations/linkederrors.ts","turbopack:///[project]/node_modules/@sentry/core/src/utils-hoist/instrument/console.ts","turbopack:///[project]/node_modules/@sentry/core/src/utils-hoist/severity.ts","turbopack:///[project]/node_modules/@sentry/core/src/integrations/console.ts","turbopack:///[project]/node_modules/@sentry/core/src/utils/cookie.ts","turbopack:///[project]/node_modules/@sentry/core/src/vendor/getIpAddress.ts","turbopack:///[project]/node_modules/@sentry/core/src/integrations/requestdata.ts","turbopack:///[project]/node_modules/@sentry/core/src/utils/parameterize.ts","turbopack:///[project]/node_modules/next/dist/compiled/@opentelemetry/api/index.js","turbopack:///[project]/node_modules/node_modules/@opentelemetry/sdk-trace-base/build/esm/platform/node/RandomIdGenerator.js","turbopack:///[project]/node_modules/@sentry/vercel-edge/src/client.ts","turbopack:///[project]/node_modules/node_modules/@opentelemetry/resources/node_modules/@opentelemetry/semantic-conventions/build/esm/resource/SemanticResourceAttributes.js","turbopack:///[project]/node_modules/node_modules/@opentelemetry/core/build/esm/trace/suppress-tracing.js","turbopack:///[project]/node_modules/node_modules/@opentelemetry/core/build/esm/baggage/constants.js","turbopack:///[project]/node_modules/node_modules/@opentelemetry/core/build/esm/baggage/utils.js","turbopack:///[project]/node_modules/node_modules/@opentelemetry/core/build/esm/baggage/propagation/W3CBaggagePropagator.js","turbopack:///[project]/node_modules/node_modules/@opentelemetry/core/build/esm/common/attributes.js","turbopack:///[project]/node_modules/node_modules/@opentelemetry/core/build/esm/common/logging-error-handler.js","turbopack:///[project]/node_modules/node_modules/@opentelemetry/core/build/esm/common/global-error-handler.js","turbopack:///[project]/node_modules/node_modules/@opentelemetry/core/build/esm/utils/sampling.js","turbopack:///[project]/node_modules/node_modules/@opentelemetry/core/build/esm/utils/environment.js","turbopack:///[project]/node_modules/node_modules/@opentelemetry/core/build/esm/platform/node/environment.js","turbopack:///[project]/node_modules/node_modules/@opentelemetry/core/build/esm/platform/node/performance.js","turbopack:///[project]/node_modules/node_modules/@opentelemetry/core/build/esm/version.js","turbopack:///[project]/node_modules/node_modules/@opentelemetry/core/node_modules/@opentelemetry/semantic-conventions/build/esm/resource/SemanticResourceAttributes.js","turbopack:///[project]/node_modules/node_modules/@opentelemetry/core/build/esm/platform/node/sdk-info.js","turbopack:///[project]/node_modules/node_modules/@opentelemetry/core/build/esm/platform/node/timer-util.js","turbopack:///[project]/node_modules/node_modules/@opentelemetry/core/build/esm/common/time.js","turbopack:///[project]/node_modules/node_modules/@opentelemetry/core/build/esm/ExportResult.js","turbopack:///[project]/node_modules/node_modules/@opentelemetry/core/build/esm/propagation/composite.js","turbopack:///[project]/node_modules/node_modules/@opentelemetry/core/build/esm/internal/validators.js","turbopack:///[project]/node_modules/node_modules/@opentelemetry/core/build/esm/trace/TraceState.js","turbopack:///[project]/node_modules/node_modules/@opentelemetry/core/build/esm/trace/W3CTraceContextPropagator.js","turbopack:///[project]/node_modules/node_modules/@opentelemetry/core/build/esm/utils/lodash.merge.js","turbopack:///[project]/node_modules/node_modules/@opentelemetry/core/build/esm/utils/merge.js","turbopack:///[project]/node_modules/node_modules/@opentelemetry/core/build/esm/utils/promise.js","turbopack:///[project]/node_modules/node_modules/@opentelemetry/core/build/esm/utils/callback.js","turbopack:///[project]/node_modules/node_modules/@opentelemetry/resources/build/esm/platform/node/default-service-name.js","turbopack:///[project]/node_modules/node_modules/@opentelemetry/resources/build/esm/Resource.js","turbopack:///[project]/node_modules/node_modules/@opentelemetry/sdk-trace-base/node_modules/@opentelemetry/semantic-conventions/build/esm/trace/SemanticAttributes.js","turbopack:///[project]/node_modules/node_modules/@opentelemetry/sdk-trace-base/build/esm/enums.js","turbopack:///[project]/node_modules/node_modules/@opentelemetry/sdk-trace-base/build/esm/Span.js","turbopack:///[project]/node_modules/node_modules/@opentelemetry/sdk-trace-base/build/esm/Sampler.js","turbopack:///[project]/node_modules/node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/AlwaysOffSampler.js","turbopack:///[project]/node_modules/node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/AlwaysOnSampler.js","turbopack:///[project]/node_modules/node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/ParentBasedSampler.js","turbopack:///[project]/node_modules/node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/TraceIdRatioBasedSampler.js","turbopack:///[project]/node_modules/node_modules/@opentelemetry/sdk-trace-base/build/esm/config.js","turbopack:///[project]/node_modules/node_modules/@opentelemetry/sdk-trace-base/build/esm/utility.js","turbopack:///[project]/node_modules/node_modules/@opentelemetry/sdk-trace-base/build/esm/export/BatchSpanProcessorBase.js","turbopack:///[project]/node_modules/node_modules/@opentelemetry/sdk-trace-base/build/esm/platform/node/export/BatchSpanProcessor.js","turbopack:///[project]/node_modules/node_modules/@opentelemetry/sdk-trace-base/build/esm/Tracer.js","turbopack:///[project]/node_modules/node_modules/@opentelemetry/sdk-trace-base/build/esm/MultiSpanProcessor.js","turbopack:///[project]/node_modules/node_modules/@opentelemetry/sdk-trace-base/build/esm/export/NoopSpanProcessor.js","turbopack:///[project]/node_modules/node_modules/@opentelemetry/sdk-trace-base/build/esm/BasicTracerProvider.js","turbopack:///[project]/node_modules/node_modules/@opentelemetry/semantic-conventions/build/esm/trace/SemanticAttributes.js","turbopack:///[project]/node_modules/node_modules/@opentelemetry/semantic-conventions/build/esm/resource/SemanticResourceAttributes.js","turbopack:///[project]/node_modules/node_modules/@opentelemetry/semantic-conventions/build/esm/stable_attributes.js","turbopack:///[project]/node_modules/@sentry/opentelemetry/build/esm/index.js","turbopack:///[project]/node_modules/@sentry/vercel-edge/src/debug-build.ts","turbopack:///[project]/node_modules/@sentry/vercel-edge/src/integrations/wintercg-fetch.ts","turbopack:///[project]/node_modules/@sentry/vercel-edge/src/transports/index.ts","turbopack:///[project]/node_modules/@sentry/vercel-edge/src/utils/vercel.ts","turbopack:///[project]/node_modules/@sentry/vercel-edge/src/vendored/abstract-async-hooks-context-manager.ts","turbopack:///[project]/node_modules/@sentry/vercel-edge/src/vendored/async-local-storage-context-manager.ts","turbopack:///[project]/node_modules/@sentry/vercel-edge/src/sdk.ts","turbopack:///[project]/node_modules/@sentry/vercel-edge/src/logs/exports.ts","turbopack:///[project]/node_modules/@swc/helpers/cjs/_interop_require_default.cjs","turbopack:///[project]/node_modules/next/src/shared/lib/modern-browserslist-target.js","turbopack:///[project]/node_modules/next/src/shared/lib/constants.ts","turbopack:///[project]/node_modules/next/constants.js","turbopack:///[project]/node_modules/@sentry/nextjs/src/common/utils/isBuild.ts","turbopack:///[project]/node_modules/@sentry/core/src/utils-hoist/vendor/escapeStringForRegex.ts","turbopack:///[project]/node_modules/@sentry/core/src/utils-hoist/path.ts","turbopack:///[project]/node_modules/@sentry/core/src/integrations/rewriteframes.ts","turbopack:///[project]/node_modules/@sentry/nextjs/src/edge/distDirRewriteFramesIntegration.ts","turbopack:///[project]/node_modules/@sentry/nextjs/src/edge/index.ts","turbopack:///[project]/sentry.edge.config.ts"],"sourcesContent":["import { DEBUG_BUILD } from '../../debug-build';\nimport { logger } from '../logger';\nimport { getFunctionName } from '../stacktrace';\n\nexport type InstrumentHandlerType =\n  | 'console'\n  | 'dom'\n  | 'fetch'\n  | 'fetch-body-resolved'\n  | 'history'\n  | 'xhr'\n  | 'error'\n  | 'unhandledrejection';\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type InstrumentHandlerCallback = (data: any) => void;\n\n// We keep the handlers globally\nconst handlers: { [key in InstrumentHandlerType]?: InstrumentHandlerCallback[] } = {};\nconst instrumented: { [key in InstrumentHandlerType]?: boolean } = {};\n\n/** Add a handler function. */\nexport function addHandler(type: InstrumentHandlerType, handler: InstrumentHandlerCallback): void {\n  handlers[type] = handlers[type] || [];\n  (handlers[type] as InstrumentHandlerCallback[]).push(handler);\n}\n\n/**\n * Reset all instrumentation handlers.\n * This can be used by tests to ensure we have a clean slate of instrumentation handlers.\n */\nexport function resetInstrumentationHandlers(): void {\n  Object.keys(handlers).forEach(key => {\n    handlers[key as InstrumentHandlerType] = undefined;\n  });\n}\n\n/** Maybe run an instrumentation function, unless it was already called. */\nexport function maybeInstrument(type: InstrumentHandlerType, instrumentFn: () => void): void {\n  if (!instrumented[type]) {\n    instrumented[type] = true;\n    try {\n      instrumentFn();\n    } catch (e) {\n      DEBUG_BUILD && logger.error(`Error while instrumenting ${type}`, e);\n    }\n  }\n}\n\n/** Trigger handlers for a given instrumentation type. */\nexport function triggerHandlers(type: InstrumentHandlerType, data: unknown): void {\n  const typeHandlers = type && handlers[type];\n  if (!typeHandlers) {\n    return;\n  }\n\n  for (const handler of typeHandlers) {\n    try {\n      handler(data);\n    } catch (e) {\n      DEBUG_BUILD &&\n        logger.error(\n          `Error while triggering instrumentation handler.\\nType: ${type}\\nName: ${getFunctionName(handler)}\\nError:`,\n          e,\n        );\n    }\n  }\n}\n","import type { HandlerDataError } from '../../types-hoist/instrument';\nimport { GLOBAL_OBJ } from '../worldwide';\nimport { addHandler, maybeInstrument, triggerHandlers } from './handlers';\n\nlet _oldOnErrorHandler: (typeof GLOBAL_OBJ)['onerror'] | null = null;\n\n/**\n * Add an instrumentation handler for when an error is captured by the global error handler.\n *\n * Use at your own risk, this might break without changelog notice, only used internally.\n * @hidden\n */\nexport function addGlobalErrorInstrumentationHandler(handler: (data: HandlerDataError) => void): void {\n  const type = 'error';\n  addHandler(type, handler);\n  maybeInstrument(type, instrumentError);\n}\n\nfunction instrumentError(): void {\n  _oldOnErrorHandler = GLOBAL_OBJ.onerror;\n\n  // Note: The reason we are doing window.onerror instead of window.addEventListener('error')\n  // is that we are using this handler in the Loader Script, to handle buffered errors consistently\n  GLOBAL_OBJ.onerror = function (\n    msg: string | object,\n    url?: string,\n    line?: number,\n    column?: number,\n    error?: Error,\n  ): boolean {\n    const handlerData: HandlerDataError = {\n      column,\n      error,\n      line,\n      msg,\n      url,\n    };\n    triggerHandlers('error', handlerData);\n\n    if (_oldOnErrorHandler) {\n      // eslint-disable-next-line prefer-rest-params\n      return _oldOnErrorHandler.apply(this, arguments);\n    }\n\n    return false;\n  };\n\n  GLOBAL_OBJ.onerror.__SENTRY_INSTRUMENTED__ = true;\n}\n","import type { HandlerDataUnhandledRejection } from '../../types-hoist/instrument';\nimport { GLOBAL_OBJ } from '../worldwide';\nimport { addHandler, maybeInstrument, triggerHandlers } from './handlers';\n\nlet _oldOnUnhandledRejectionHandler: (typeof GLOBAL_OBJ)['onunhandledrejection'] | null = null;\n\n/**\n * Add an instrumentation handler for when an unhandled promise rejection is captured.\n *\n * Use at your own risk, this might break without changelog notice, only used internally.\n * @hidden\n */\nexport function addGlobalUnhandledRejectionInstrumentationHandler(\n  handler: (data: HandlerDataUnhandledRejection) => void,\n): void {\n  const type = 'unhandledrejection';\n  addHandler(type, handler);\n  maybeInstrument(type, instrumentUnhandledRejection);\n}\n\nfunction instrumentUnhandledRejection(): void {\n  _oldOnUnhandledRejectionHandler = GLOBAL_OBJ.onunhandledrejection;\n\n  // Note: The reason we are doing window.onunhandledrejection instead of window.addEventListener('unhandledrejection')\n  // is that we are using this handler in the Loader Script, to handle buffered rejections consistently\n  GLOBAL_OBJ.onunhandledrejection = function (e: unknown): boolean {\n    const handlerData: HandlerDataUnhandledRejection = e;\n    triggerHandlers('unhandledrejection', handlerData);\n\n    if (_oldOnUnhandledRejectionHandler) {\n      // eslint-disable-next-line prefer-rest-params\n      return _oldOnUnhandledRejectionHandler.apply(this, arguments);\n    }\n\n    return true;\n  };\n\n  GLOBAL_OBJ.onunhandledrejection.__SENTRY_INSTRUMENTED__ = true;\n}\n","import { DEBUG_BUILD } from '../debug-build';\nimport { getActiveSpan, getRootSpan } from '../utils/spanUtils';\nimport { addGlobalErrorInstrumentationHandler } from '../utils-hoist/instrument/globalError';\nimport { addGlobalUnhandledRejectionInstrumentationHandler } from '../utils-hoist/instrument/globalUnhandledRejection';\nimport { logger } from '../utils-hoist/logger';\nimport { SPAN_STATUS_ERROR } from './spanstatus';\n\nlet errorsInstrumented = false;\n\n/**  Only exposed for testing */\nexport function _resetErrorsInstrumented(): void {\n  errorsInstrumented = false;\n}\n\n/**\n * Ensure that global errors automatically set the active span status.\n */\nexport function registerSpanErrorInstrumentation(): void {\n  if (errorsInstrumented) {\n    return;\n  }\n\n  errorsInstrumented = true;\n  addGlobalErrorInstrumentationHandler(errorCallback);\n  addGlobalUnhandledRejectionInstrumentationHandler(errorCallback);\n}\n\n/**\n * If an error or unhandled promise occurs, we mark the active root span as failed\n */\nfunction errorCallback(): void {\n  const activeSpan = getActiveSpan();\n  const rootSpan = activeSpan && getRootSpan(activeSpan);\n  if (rootSpan) {\n    const message = 'internal_error';\n    DEBUG_BUILD && logger.log(`[Tracing] Root span: ${message} -> Global error occurred`);\n    rootSpan.setStatus({ code: SPAN_STATUS_ERROR, message });\n  }\n}\n\n// The function name will be lost when bundling but we need to be able to identify this listener later to maintain the\n// node.js default exit behaviour\nerrorCallback.tag = 'sentry_tracingErrorCallback';\n","import type { Options } from '../types-hoist/options';\nimport { SDK_VERSION } from '../utils-hoist/version';\n\n/**\n * A builder for the SDK metadata in the options for the SDK initialization.\n *\n * Note: This function is identical to `buildMetadata` in Remix and NextJS and SvelteKit.\n * We don't extract it for bundle size reasons.\n * @see https://github.com/getsentry/sentry-javascript/pull/7404\n * @see https://github.com/getsentry/sentry-javascript/pull/4196\n *\n * If you make changes to this function consider updating the others as well.\n *\n * @param options SDK options object that gets mutated\n * @param names list of package names\n */\nexport function applySdkMetadata(options: Options, name: string, names = [name], source = 'npm'): void {\n  const metadata = options._metadata || {};\n\n  if (!metadata.sdk) {\n    metadata.sdk = {\n      name: `sentry.javascript.${name}`,\n      packages: names.map(name => ({\n        name: `${source}:@sentry/${name}`,\n        version: SDK_VERSION,\n      })),\n      version: SDK_VERSION,\n    };\n  }\n\n  options._metadata = metadata;\n}\n","import {\n  SEMANTIC_ATTRIBUTE_HTTP_REQUEST_METHOD,\n  SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN,\n  SEMANTIC_ATTRIBUTE_SENTRY_SOURCE,\n  SEMANTIC_ATTRIBUTE_URL_FULL,\n} from '../semanticAttributes';\nimport type { SpanAttributes } from '../types-hoist/span';\n\ntype PartialURL = {\n  host?: string;\n  path?: string;\n  protocol?: string;\n  relative?: string;\n  search?: string;\n  hash?: string;\n};\n\ninterface URLwithCanParse extends URL {\n  canParse: (url: string, base?: string | URL | undefined) => boolean;\n}\n\n// A subset of the URL object that is valid for relative URLs\n// The URL object cannot handle relative URLs, so we need to handle them separately\ntype RelativeURL = {\n  isRelative: true;\n  pathname: URL['pathname'];\n  search: URL['search'];\n  hash: URL['hash'];\n};\n\ntype URLObject = RelativeURL | URL;\n\n// Curious about `thismessage:/`? See: https://www.rfc-editor.org/rfc/rfc2557.html\n//  > When the methods above do not yield an absolute URI, a base URL\n//  > of \"thismessage:/\" MUST be employed. This base URL has been\n//  > defined for the sole purpose of resolving relative references\n//  > within a multipart/related structure when no other base URI is\n//  > specified.\n//\n// We need to provide a base URL to `parseStringToURLObject` because the fetch API gives us a\n// relative URL sometimes.\n//\n// This is the only case where we need to provide a base URL to `parseStringToURLObject`\n// because the relative URL is not valid on its own.\nconst DEFAULT_BASE_URL = 'thismessage:/';\n\n/**\n * Checks if the URL object is relative\n *\n * @param url - The URL object to check\n * @returns True if the URL object is relative, false otherwise\n */\nexport function isURLObjectRelative(url: URLObject): url is RelativeURL {\n  return 'isRelative' in url;\n}\n\n/**\n * Parses string to a URL object\n *\n * @param url - The URL to parse\n * @returns The parsed URL object or undefined if the URL is invalid\n */\nexport function parseStringToURLObject(url: string, urlBase?: string | URL | undefined): URLObject | undefined {\n  const isRelative = url.indexOf('://') <= 0 && url.indexOf('//') !== 0;\n  const base = urlBase ?? (isRelative ? DEFAULT_BASE_URL : undefined);\n  try {\n    // Use `canParse` to short-circuit the URL constructor if it's not a valid URL\n    // This is faster than trying to construct the URL and catching the error\n    // Node 20+, Chrome 120+, Firefox 115+, Safari 17+\n    if ('canParse' in URL && !(URL as unknown as URLwithCanParse).canParse(url, base)) {\n      return undefined;\n    }\n\n    const fullUrlObject = new URL(url, base);\n    if (isRelative) {\n      // Because we used a fake base URL, we need to return a relative URL object.\n      // We cannot return anything about the origin, host, etc. because it will refer to the fake base URL.\n      return {\n        isRelative,\n        pathname: fullUrlObject.pathname,\n        search: fullUrlObject.search,\n        hash: fullUrlObject.hash,\n      };\n    }\n    return fullUrlObject;\n  } catch {\n    // empty body\n  }\n\n  return undefined;\n}\n\n/**\n * Takes a URL object and returns a sanitized string which is safe to use as span name\n * see: https://develop.sentry.dev/sdk/data-handling/#structuring-data\n */\nexport function getSanitizedUrlStringFromUrlObject(url: URLObject): string {\n  if (isURLObjectRelative(url)) {\n    return url.pathname;\n  }\n\n  const newUrl = new URL(url);\n  newUrl.search = '';\n  newUrl.hash = '';\n  if (['80', '443'].includes(newUrl.port)) {\n    newUrl.port = '';\n  }\n  if (newUrl.password) {\n    newUrl.password = '%filtered%';\n  }\n  if (newUrl.username) {\n    newUrl.username = '%filtered%';\n  }\n\n  return newUrl.toString();\n}\n\ntype PartialRequest = {\n  method?: string;\n};\n\nfunction getHttpSpanNameFromUrlObject(\n  urlObject: URLObject | undefined,\n  kind: 'server' | 'client',\n  request?: PartialRequest,\n  routeName?: string,\n): string {\n  const method = request?.method?.toUpperCase() ?? 'GET';\n  const route = routeName\n    ? routeName\n    : urlObject\n      ? kind === 'client'\n        ? getSanitizedUrlStringFromUrlObject(urlObject)\n        : urlObject.pathname\n      : '/';\n\n  return `${method} ${route}`;\n}\n\n/**\n * Takes a parsed URL object and returns a set of attributes for the span\n * that represents the HTTP request for that url. This is used for both server\n * and client http spans.\n *\n * Follows https://opentelemetry.io/docs/specs/semconv/http/.\n *\n * @param urlObject - see {@link parseStringToURLObject}\n * @param kind - The type of HTTP operation (server or client)\n * @param spanOrigin - The origin of the span\n * @param request - The request object, see {@link PartialRequest}\n * @param routeName - The name of the route, must be low cardinality\n * @returns The span name and attributes for the HTTP operation\n */\nexport function getHttpSpanDetailsFromUrlObject(\n  urlObject: URLObject | undefined,\n  kind: 'server' | 'client',\n  spanOrigin: string,\n  request?: PartialRequest,\n  routeName?: string,\n): [name: string, attributes: SpanAttributes] {\n  const attributes: SpanAttributes = {\n    [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: spanOrigin,\n    [SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'url',\n  };\n\n  if (routeName) {\n    // This is based on https://opentelemetry.io/docs/specs/semconv/http/http-spans/#name\n    attributes[kind === 'server' ? 'http.route' : 'url.template'] = routeName;\n    attributes[SEMANTIC_ATTRIBUTE_SENTRY_SOURCE] = 'route';\n  }\n\n  if (request?.method) {\n    attributes[SEMANTIC_ATTRIBUTE_HTTP_REQUEST_METHOD] = request.method.toUpperCase();\n  }\n\n  if (urlObject) {\n    if (urlObject.search) {\n      attributes['url.query'] = urlObject.search;\n    }\n    if (urlObject.hash) {\n      attributes['url.fragment'] = urlObject.hash;\n    }\n    if (urlObject.pathname) {\n      attributes['url.path'] = urlObject.pathname;\n      if (urlObject.pathname === '/') {\n        attributes[SEMANTIC_ATTRIBUTE_SENTRY_SOURCE] = 'route';\n      }\n    }\n\n    if (!isURLObjectRelative(urlObject)) {\n      attributes[SEMANTIC_ATTRIBUTE_URL_FULL] = urlObject.href;\n      if (urlObject.port) {\n        attributes['url.port'] = urlObject.port;\n      }\n      if (urlObject.protocol) {\n        attributes['url.scheme'] = urlObject.protocol;\n      }\n      if (urlObject.hostname) {\n        attributes[kind === 'server' ? 'server.address' : 'url.domain'] = urlObject.hostname;\n      }\n    }\n  }\n\n  return [getHttpSpanNameFromUrlObject(urlObject, kind, request, routeName), attributes];\n}\n\n/**\n * Parses string form of URL into an object\n * // borrowed from https://tools.ietf.org/html/rfc3986#appendix-B\n * // intentionally using regex and not <a/> href parsing trick because React Native and other\n * // environments where DOM might not be available\n * @returns parsed URL object\n */\nexport function parseUrl(url: string): PartialURL {\n  if (!url) {\n    return {};\n  }\n\n  const match = url.match(/^(([^:/?#]+):)?(\\/\\/([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?$/);\n\n  if (!match) {\n    return {};\n  }\n\n  // coerce to undefined values to empty string so we don't get 'undefined'\n  const query = match[6] || '';\n  const fragment = match[8] || '';\n  return {\n    host: match[4],\n    path: match[5],\n    protocol: match[2],\n    search: query,\n    hash: fragment,\n    relative: match[5] + query + fragment, // everything minus origin\n  };\n}\n\n/**\n * Strip the query string and fragment off of a given URL or path (if present)\n *\n * @param urlPath Full URL or path, including possible query string and/or fragment\n * @returns URL or path without query string or fragment\n */\nexport function stripUrlQueryAndFragment(urlPath: string): string {\n  return (urlPath.split(/[?#]/, 1) as [string, ...string[]])[0];\n}\n\n/**\n * Takes a URL object and returns a sanitized string which is safe to use as span name\n * see: https://develop.sentry.dev/sdk/data-handling/#structuring-data\n */\nexport function getSanitizedUrlString(url: PartialURL): string {\n  const { protocol, host, path } = url;\n\n  const filteredHost =\n    host\n      // Always filter out authority\n      ?.replace(/^.*@/, '[filtered]:[filtered]@')\n      // Don't show standard :80 (http) and :443 (https) ports to reduce the noise\n      // TODO: Use new URL global if it exists\n      .replace(/(:80)$/, '')\n      .replace(/(:443)$/, '') || '';\n\n  return `${protocol ? `${protocol}://` : ''}${filteredHost}${path}`;\n}\n","import { getSentryCarrier } from '../carrier';\nimport type { Attachment } from '../types-hoist/attachment';\nimport type { DataCategory } from '../types-hoist/datacategory';\nimport type { DsnComponents } from '../types-hoist/dsn';\nimport type {\n  AttachmentItem,\n  BaseEnvelopeHeaders,\n  BaseEnvelopeItemHeaders,\n  Envelope,\n  EnvelopeItemType,\n  EventEnvelopeHeaders,\n  SpanItem,\n} from '../types-hoist/envelope';\nimport type { Event } from '../types-hoist/event';\nimport type { SdkInfo } from '../types-hoist/sdkinfo';\nimport type { SdkMetadata } from '../types-hoist/sdkmetadata';\nimport type { SpanJSON } from '../types-hoist/span';\nimport { dsnToString } from './dsn';\nimport { normalize } from './normalize';\nimport { GLOBAL_OBJ } from './worldwide';\n\n/**\n * Creates an envelope.\n * Make sure to always explicitly provide the generic to this function\n * so that the envelope types resolve correctly.\n */\nexport function createEnvelope<E extends Envelope>(headers: E[0], items: E[1] = []): E {\n  return [headers, items] as E;\n}\n\n/**\n * Add an item to an envelope.\n * Make sure to always explicitly provide the generic to this function\n * so that the envelope types resolve correctly.\n */\nexport function addItemToEnvelope<E extends Envelope>(envelope: E, newItem: E[1][number]): E {\n  const [headers, items] = envelope;\n  return [headers, [...items, newItem]] as unknown as E;\n}\n\n/**\n * Convenience function to loop through the items and item types of an envelope.\n * (This function was mostly created because working with envelope types is painful at the moment)\n *\n * If the callback returns true, the rest of the items will be skipped.\n */\nexport function forEachEnvelopeItem<E extends Envelope>(\n  envelope: Envelope,\n  callback: (envelopeItem: E[1][number], envelopeItemType: E[1][number][0]['type']) => boolean | void,\n): boolean {\n  const envelopeItems = envelope[1];\n\n  for (const envelopeItem of envelopeItems) {\n    const envelopeItemType = envelopeItem[0].type;\n    const result = callback(envelopeItem, envelopeItemType);\n\n    if (result) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\n/**\n * Returns true if the envelope contains any of the given envelope item types\n */\nexport function envelopeContainsItemType(envelope: Envelope, types: EnvelopeItemType[]): boolean {\n  return forEachEnvelopeItem(envelope, (_, type) => types.includes(type));\n}\n\n/**\n * Encode a string to UTF8 array.\n */\nfunction encodeUTF8(input: string): Uint8Array {\n  const carrier = getSentryCarrier(GLOBAL_OBJ);\n  return carrier.encodePolyfill ? carrier.encodePolyfill(input) : new TextEncoder().encode(input);\n}\n\n/**\n * Decode a UTF8 array to string.\n */\nfunction decodeUTF8(input: Uint8Array): string {\n  const carrier = getSentryCarrier(GLOBAL_OBJ);\n  return carrier.decodePolyfill ? carrier.decodePolyfill(input) : new TextDecoder().decode(input);\n}\n\n/**\n * Serializes an envelope.\n */\nexport function serializeEnvelope(envelope: Envelope): string | Uint8Array {\n  const [envHeaders, items] = envelope;\n  // Initially we construct our envelope as a string and only convert to binary chunks if we encounter binary data\n  let parts: string | Uint8Array[] = JSON.stringify(envHeaders);\n\n  function append(next: string | Uint8Array): void {\n    if (typeof parts === 'string') {\n      parts = typeof next === 'string' ? parts + next : [encodeUTF8(parts), next];\n    } else {\n      parts.push(typeof next === 'string' ? encodeUTF8(next) : next);\n    }\n  }\n\n  for (const item of items) {\n    const [itemHeaders, payload] = item;\n\n    append(`\\n${JSON.stringify(itemHeaders)}\\n`);\n\n    if (typeof payload === 'string' || payload instanceof Uint8Array) {\n      append(payload);\n    } else {\n      let stringifiedPayload: string;\n      try {\n        stringifiedPayload = JSON.stringify(payload);\n      } catch (e) {\n        // In case, despite all our efforts to keep `payload` circular-dependency-free, `JSON.stringify()` still\n        // fails, we try again after normalizing it again with infinite normalization depth. This of course has a\n        // performance impact but in this case a performance hit is better than throwing.\n        stringifiedPayload = JSON.stringify(normalize(payload));\n      }\n      append(stringifiedPayload);\n    }\n  }\n\n  return typeof parts === 'string' ? parts : concatBuffers(parts);\n}\n\nfunction concatBuffers(buffers: Uint8Array[]): Uint8Array {\n  const totalLength = buffers.reduce((acc, buf) => acc + buf.length, 0);\n\n  const merged = new Uint8Array(totalLength);\n  let offset = 0;\n  for (const buffer of buffers) {\n    merged.set(buffer, offset);\n    offset += buffer.length;\n  }\n\n  return merged;\n}\n\n/**\n * Parses an envelope\n */\nexport function parseEnvelope(env: string | Uint8Array): Envelope {\n  let buffer = typeof env === 'string' ? encodeUTF8(env) : env;\n\n  function readBinary(length: number): Uint8Array {\n    const bin = buffer.subarray(0, length);\n    // Replace the buffer with the remaining data excluding trailing newline\n    buffer = buffer.subarray(length + 1);\n    return bin;\n  }\n\n  function readJson<T>(): T {\n    let i = buffer.indexOf(0xa);\n    // If we couldn't find a newline, we must have found the end of the buffer\n    if (i < 0) {\n      i = buffer.length;\n    }\n\n    return JSON.parse(decodeUTF8(readBinary(i))) as T;\n  }\n\n  const envelopeHeader = readJson<BaseEnvelopeHeaders>();\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const items: [any, any][] = [];\n\n  while (buffer.length) {\n    const itemHeader = readJson<BaseEnvelopeItemHeaders>();\n    const binaryLength = typeof itemHeader.length === 'number' ? itemHeader.length : undefined;\n\n    items.push([itemHeader, binaryLength ? readBinary(binaryLength) : readJson()]);\n  }\n\n  return [envelopeHeader, items];\n}\n\n/**\n * Creates envelope item for a single span\n */\nexport function createSpanEnvelopeItem(spanJson: Partial<SpanJSON>): SpanItem {\n  const spanHeaders: SpanItem[0] = {\n    type: 'span',\n  };\n\n  return [spanHeaders, spanJson];\n}\n\n/**\n * Creates attachment envelope items\n */\nexport function createAttachmentEnvelopeItem(attachment: Attachment): AttachmentItem {\n  const buffer = typeof attachment.data === 'string' ? encodeUTF8(attachment.data) : attachment.data;\n\n  return [\n    {\n      type: 'attachment',\n      length: buffer.length,\n      filename: attachment.filename,\n      content_type: attachment.contentType,\n      attachment_type: attachment.attachmentType,\n    },\n    buffer,\n  ];\n}\n\nconst ITEM_TYPE_TO_DATA_CATEGORY_MAP: Record<EnvelopeItemType, DataCategory> = {\n  session: 'session',\n  sessions: 'session',\n  attachment: 'attachment',\n  transaction: 'transaction',\n  event: 'error',\n  client_report: 'internal',\n  user_report: 'default',\n  profile: 'profile',\n  profile_chunk: 'profile',\n  replay_event: 'replay',\n  replay_recording: 'replay',\n  check_in: 'monitor',\n  feedback: 'feedback',\n  span: 'span',\n  raw_security: 'security',\n  log: 'log_item',\n};\n\n/**\n * Maps the type of an envelope item to a data category.\n */\nexport function envelopeItemTypeToDataCategory(type: EnvelopeItemType): DataCategory {\n  return ITEM_TYPE_TO_DATA_CATEGORY_MAP[type];\n}\n\n/** Extracts the minimal SDK info from the metadata or an events */\nexport function getSdkMetadataForEnvelopeHeader(metadataOrEvent?: SdkMetadata | Event): SdkInfo | undefined {\n  if (!metadataOrEvent?.sdk) {\n    return;\n  }\n  const { name, version } = metadataOrEvent.sdk;\n  return { name, version };\n}\n\n/**\n * Creates event envelope headers, based on event, sdk info and tunnel\n * Note: This function was extracted from the core package to make it available in Replay\n */\nexport function createEventEnvelopeHeaders(\n  event: Event,\n  sdkInfo: SdkInfo | undefined,\n  tunnel: string | undefined,\n  dsn?: DsnComponents,\n): EventEnvelopeHeaders {\n  const dynamicSamplingContext = event.sdkProcessingMetadata?.dynamicSamplingContext;\n  return {\n    event_id: event.event_id as string,\n    sent_at: new Date().toISOString(),\n    ...(sdkInfo && { sdk: sdkInfo }),\n    ...(!!tunnel && dsn && { dsn: dsnToString(dsn) }),\n    ...(dynamicSamplingContext && {\n      trace: dynamicSamplingContext,\n    }),\n  };\n}\n","import type { SerializedCheckIn } from './types-hoist/checkin';\nimport type { DsnComponents } from './types-hoist/dsn';\nimport type { CheckInEnvelope, CheckInItem, DynamicSamplingContext } from './types-hoist/envelope';\nimport type { SdkMetadata } from './types-hoist/sdkmetadata';\nimport { dsnToString } from './utils-hoist/dsn';\nimport { createEnvelope } from './utils-hoist/envelope';\n\n/**\n * Create envelope from check in item.\n */\nexport function createCheckInEnvelope(\n  checkIn: SerializedCheckIn,\n  dynamicSamplingContext?: Partial<DynamicSamplingContext>,\n  metadata?: SdkMetadata,\n  tunnel?: string,\n  dsn?: DsnComponents,\n): CheckInEnvelope {\n  const headers: CheckInEnvelope[0] = {\n    sent_at: new Date().toISOString(),\n  };\n\n  if (metadata?.sdk) {\n    headers.sdk = {\n      name: metadata.sdk.name,\n      version: metadata.sdk.version,\n    };\n  }\n\n  if (!!tunnel && !!dsn) {\n    headers.dsn = dsnToString(dsn);\n  }\n\n  if (dynamicSamplingContext) {\n    headers.trace = dynamicSamplingContext as DynamicSamplingContext;\n  }\n\n  const item = createCheckInEnvelopeItem(checkIn);\n  return createEnvelope<CheckInEnvelope>(headers, [item]);\n}\n\nfunction createCheckInEnvelopeItem(checkIn: SerializedCheckIn): CheckInItem {\n  const checkInHeaders: CheckInItem[0] = {\n    type: 'check_in',\n  };\n  return [checkInHeaders, checkIn];\n}\n","import type { ReportDialogOptions } from './report-dialog';\nimport type { DsnComponents, DsnLike } from './types-hoist/dsn';\nimport type { SdkInfo } from './types-hoist/sdkinfo';\nimport { dsnToString, makeDsn } from './utils-hoist/dsn';\n\nconst SENTRY_API_VERSION = '7';\n\n/** Returns the prefix to construct Sentry ingestion API endpoints. */\nfunction getBaseApiEndpoint(dsn: DsnComponents): string {\n  const protocol = dsn.protocol ? `${dsn.protocol}:` : '';\n  const port = dsn.port ? `:${dsn.port}` : '';\n  return `${protocol}//${dsn.host}${port}${dsn.path ? `/${dsn.path}` : ''}/api/`;\n}\n\n/** Returns the ingest API endpoint for target. */\nfunction _getIngestEndpoint(dsn: DsnComponents): string {\n  return `${getBaseApiEndpoint(dsn)}${dsn.projectId}/envelope/`;\n}\n\n/** Returns a URL-encoded string with auth config suitable for a query string. */\nfunction _encodedAuth(dsn: DsnComponents, sdkInfo: SdkInfo | undefined): string {\n  const params: Record<string, string> = {\n    sentry_version: SENTRY_API_VERSION,\n  };\n\n  if (dsn.publicKey) {\n    // We send only the minimum set of required information. See\n    // https://github.com/getsentry/sentry-javascript/issues/2572.\n    params.sentry_key = dsn.publicKey;\n  }\n\n  if (sdkInfo) {\n    params.sentry_client = `${sdkInfo.name}/${sdkInfo.version}`;\n  }\n\n  return new URLSearchParams(params).toString();\n}\n\n/**\n * Returns the envelope endpoint URL with auth in the query string.\n *\n * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.\n */\nexport function getEnvelopeEndpointWithUrlEncodedAuth(dsn: DsnComponents, tunnel?: string, sdkInfo?: SdkInfo): string {\n  return tunnel ? tunnel : `${_getIngestEndpoint(dsn)}?${_encodedAuth(dsn, sdkInfo)}`;\n}\n\n/** Returns the url to the report dialog endpoint. */\nexport function getReportDialogEndpoint(dsnLike: DsnLike, dialogOptions: ReportDialogOptions): string {\n  const dsn = makeDsn(dsnLike);\n  if (!dsn) {\n    return '';\n  }\n\n  const endpoint = `${getBaseApiEndpoint(dsn)}embed/error-page/`;\n\n  let encodedOptions = `dsn=${dsnToString(dsn)}`;\n  for (const key in dialogOptions) {\n    if (key === 'dsn') {\n      continue;\n    }\n\n    if (key === 'onClose') {\n      continue;\n    }\n\n    if (key === 'user') {\n      const user = dialogOptions.user;\n      if (!user) {\n        continue;\n      }\n      if (user.name) {\n        encodedOptions += `&name=${encodeURIComponent(user.name)}`;\n      }\n      if (user.email) {\n        encodedOptions += `&email=${encodeURIComponent(user.email)}`;\n      }\n    } else {\n      encodedOptions += `&${encodeURIComponent(key)}=${encodeURIComponent(dialogOptions[key] as string)}`;\n    }\n  }\n\n  return `${endpoint}?${encodedOptions}`;\n}\n","import type { Client } from './client';\nimport { getDynamicSamplingContextFromSpan } from './tracing/dynamicSamplingContext';\nimport type { SentrySpan } from './tracing/sentrySpan';\nimport type { LegacyCSPReport } from './types-hoist/csp';\nimport type { DsnComponents } from './types-hoist/dsn';\nimport type {\n  DynamicSamplingContext,\n  EventEnvelope,\n  EventItem,\n  RawSecurityEnvelope,\n  RawSecurityItem,\n  SessionEnvelope,\n  SessionItem,\n  SpanEnvelope,\n  SpanItem,\n} from './types-hoist/envelope';\nimport type { Event } from './types-hoist/event';\nimport type { SdkInfo } from './types-hoist/sdkinfo';\nimport type { SdkMetadata } from './types-hoist/sdkmetadata';\nimport type { Session, SessionAggregates } from './types-hoist/session';\nimport { showSpanDropWarning, spanToJSON } from './utils/spanUtils';\nimport { dsnToString } from './utils-hoist/dsn';\nimport {\n  createEnvelope,\n  createEventEnvelopeHeaders,\n  createSpanEnvelopeItem,\n  getSdkMetadataForEnvelopeHeader,\n} from './utils-hoist/envelope';\nimport { uuid4 } from './utils-hoist/misc';\n\n/**\n * Apply SdkInfo (name, version, packages, integrations) to the corresponding event key.\n * Merge with existing data if any.\n **/\nfunction enhanceEventWithSdkInfo(event: Event, sdkInfo?: SdkInfo): Event {\n  if (!sdkInfo) {\n    return event;\n  }\n  event.sdk = event.sdk || {};\n  event.sdk.name = event.sdk.name || sdkInfo.name;\n  event.sdk.version = event.sdk.version || sdkInfo.version;\n  event.sdk.integrations = [...(event.sdk.integrations || []), ...(sdkInfo.integrations || [])];\n  event.sdk.packages = [...(event.sdk.packages || []), ...(sdkInfo.packages || [])];\n  return event;\n}\n\n/** Creates an envelope from a Session */\nexport function createSessionEnvelope(\n  session: Session | SessionAggregates,\n  dsn?: DsnComponents,\n  metadata?: SdkMetadata,\n  tunnel?: string,\n): SessionEnvelope {\n  const sdkInfo = getSdkMetadataForEnvelopeHeader(metadata);\n  const envelopeHeaders = {\n    sent_at: new Date().toISOString(),\n    ...(sdkInfo && { sdk: sdkInfo }),\n    ...(!!tunnel && dsn && { dsn: dsnToString(dsn) }),\n  };\n\n  const envelopeItem: SessionItem =\n    'aggregates' in session ? [{ type: 'sessions' }, session] : [{ type: 'session' }, session.toJSON()];\n\n  return createEnvelope<SessionEnvelope>(envelopeHeaders, [envelopeItem]);\n}\n\n/**\n * Create an Envelope from an event.\n */\nexport function createEventEnvelope(\n  event: Event,\n  dsn?: DsnComponents,\n  metadata?: SdkMetadata,\n  tunnel?: string,\n): EventEnvelope {\n  const sdkInfo = getSdkMetadataForEnvelopeHeader(metadata);\n\n  /*\n    Note: Due to TS, event.type may be `replay_event`, theoretically.\n    In practice, we never call `createEventEnvelope` with `replay_event` type,\n    and we'd have to adjust a looot of types to make this work properly.\n    We want to avoid casting this around, as that could lead to bugs (e.g. when we add another type)\n    So the safe choice is to really guard against the replay_event type here.\n  */\n  const eventType = event.type && event.type !== 'replay_event' ? event.type : 'event';\n\n  enhanceEventWithSdkInfo(event, metadata?.sdk);\n\n  const envelopeHeaders = createEventEnvelopeHeaders(event, sdkInfo, tunnel, dsn);\n\n  // Prevent this data (which, if it exists, was used in earlier steps in the processing pipeline) from being sent to\n  // sentry. (Note: Our use of this property comes and goes with whatever we might be debugging, whatever hacks we may\n  // have temporarily added, etc. Even if we don't happen to be using it at some point in the future, let's not get rid\n  // of this `delete`, lest we miss putting it back in the next time the property is in use.)\n  delete event.sdkProcessingMetadata;\n\n  const eventItem: EventItem = [{ type: eventType }, event];\n  return createEnvelope<EventEnvelope>(envelopeHeaders, [eventItem]);\n}\n\n/**\n * Create envelope from Span item.\n *\n * Takes an optional client and runs spans through `beforeSendSpan` if available.\n */\nexport function createSpanEnvelope(spans: [SentrySpan, ...SentrySpan[]], client?: Client): SpanEnvelope {\n  function dscHasRequiredProps(dsc: Partial<DynamicSamplingContext>): dsc is DynamicSamplingContext {\n    return !!dsc.trace_id && !!dsc.public_key;\n  }\n\n  // For the moment we'll obtain the DSC from the first span in the array\n  // This might need to be changed if we permit sending multiple spans from\n  // different segments in one envelope\n  const dsc = getDynamicSamplingContextFromSpan(spans[0]);\n\n  const dsn = client?.getDsn();\n  const tunnel = client?.getOptions().tunnel;\n\n  const headers: SpanEnvelope[0] = {\n    sent_at: new Date().toISOString(),\n    ...(dscHasRequiredProps(dsc) && { trace: dsc }),\n    ...(!!tunnel && dsn && { dsn: dsnToString(dsn) }),\n  };\n\n  const beforeSendSpan = client?.getOptions().beforeSendSpan;\n  const convertToSpanJSON = beforeSendSpan\n    ? (span: SentrySpan) => {\n        const spanJson = spanToJSON(span);\n        const processedSpan = beforeSendSpan(spanJson);\n\n        if (!processedSpan) {\n          showSpanDropWarning();\n          return spanJson;\n        }\n\n        return processedSpan;\n      }\n    : spanToJSON;\n\n  const items: SpanItem[] = [];\n  for (const span of spans) {\n    const spanJson = convertToSpanJSON(span);\n    if (spanJson) {\n      items.push(createSpanEnvelopeItem(spanJson));\n    }\n  }\n\n  return createEnvelope<SpanEnvelope>(headers, items);\n}\n\n/**\n * Create an Envelope from a CSP report.\n */\nexport function createRawSecurityEnvelope(\n  report: LegacyCSPReport,\n  dsn: DsnComponents,\n  tunnel?: string,\n  release?: string,\n  environment?: string,\n): RawSecurityEnvelope {\n  const envelopeHeaders = {\n    event_id: uuid4(),\n    ...(!!tunnel && dsn && { dsn: dsnToString(dsn) }),\n  };\n\n  const eventItem: RawSecurityItem = [\n    { type: 'raw_security', sentry_release: release, sentry_environment: environment },\n    report,\n  ];\n\n  return createEnvelope<RawSecurityEnvelope>(envelopeHeaders, [eventItem]);\n}\n","import type { Client } from './client';\nimport { getClient } from './currentScopes';\nimport { DEBUG_BUILD } from './debug-build';\nimport type { Event, EventHint } from './types-hoist/event';\nimport type { Integration, IntegrationFn } from './types-hoist/integration';\nimport type { Options } from './types-hoist/options';\nimport { logger } from './utils-hoist/logger';\n\nexport const installedIntegrations: string[] = [];\n\n/** Map of integrations assigned to a client */\nexport type IntegrationIndex = {\n  [key: string]: Integration;\n};\n\ntype IntegrationWithDefaultInstance = Integration & { isDefaultInstance?: true };\n\n/**\n * Remove duplicates from the given array, preferring the last instance of any duplicate. Not guaranteed to\n * preserve the order of integrations in the array.\n *\n * @private\n */\nfunction filterDuplicates(integrations: Integration[]): Integration[] {\n  const integrationsByName: { [key: string]: Integration } = {};\n\n  integrations.forEach((currentInstance: IntegrationWithDefaultInstance) => {\n    const { name } = currentInstance;\n\n    const existingInstance: IntegrationWithDefaultInstance | undefined = integrationsByName[name];\n\n    // We want integrations later in the array to overwrite earlier ones of the same type, except that we never want a\n    // default instance to overwrite an existing user instance\n    if (existingInstance && !existingInstance.isDefaultInstance && currentInstance.isDefaultInstance) {\n      return;\n    }\n\n    integrationsByName[name] = currentInstance;\n  });\n\n  return Object.values(integrationsByName);\n}\n\n/** Gets integrations to install */\nexport function getIntegrationsToSetup(options: Pick<Options, 'defaultIntegrations' | 'integrations'>): Integration[] {\n  const defaultIntegrations = options.defaultIntegrations || [];\n  const userIntegrations = options.integrations;\n\n  // We flag default instances, so that later we can tell them apart from any user-created instances of the same class\n  defaultIntegrations.forEach((integration: IntegrationWithDefaultInstance) => {\n    integration.isDefaultInstance = true;\n  });\n\n  let integrations: Integration[];\n\n  if (Array.isArray(userIntegrations)) {\n    integrations = [...defaultIntegrations, ...userIntegrations];\n  } else if (typeof userIntegrations === 'function') {\n    const resolvedUserIntegrations = userIntegrations(defaultIntegrations);\n    integrations = Array.isArray(resolvedUserIntegrations) ? resolvedUserIntegrations : [resolvedUserIntegrations];\n  } else {\n    integrations = defaultIntegrations;\n  }\n\n  return filterDuplicates(integrations);\n}\n\n/**\n * Given a list of integration instances this installs them all. When `withDefaults` is set to `true` then all default\n * integrations are added unless they were already provided before.\n * @param integrations array of integration instances\n * @param withDefault should enable default integrations\n */\nexport function setupIntegrations(client: Client, integrations: Integration[]): IntegrationIndex {\n  const integrationIndex: IntegrationIndex = {};\n\n  integrations.forEach((integration: Integration | undefined) => {\n    // guard against empty provided integrations\n    if (integration) {\n      setupIntegration(client, integration, integrationIndex);\n    }\n  });\n\n  return integrationIndex;\n}\n\n/**\n * Execute the `afterAllSetup` hooks of the given integrations.\n */\nexport function afterSetupIntegrations(client: Client, integrations: Integration[]): void {\n  for (const integration of integrations) {\n    // guard against empty provided integrations\n    if (integration?.afterAllSetup) {\n      integration.afterAllSetup(client);\n    }\n  }\n}\n\n/** Setup a single integration.  */\nexport function setupIntegration(client: Client, integration: Integration, integrationIndex: IntegrationIndex): void {\n  if (integrationIndex[integration.name]) {\n    DEBUG_BUILD && logger.log(`Integration skipped because it was already installed: ${integration.name}`);\n    return;\n  }\n  integrationIndex[integration.name] = integration;\n\n  // `setupOnce` is only called the first time\n  if (installedIntegrations.indexOf(integration.name) === -1 && typeof integration.setupOnce === 'function') {\n    integration.setupOnce();\n    installedIntegrations.push(integration.name);\n  }\n\n  // `setup` is run for each client\n  if (integration.setup && typeof integration.setup === 'function') {\n    integration.setup(client);\n  }\n\n  if (typeof integration.preprocessEvent === 'function') {\n    const callback = integration.preprocessEvent.bind(integration) as typeof integration.preprocessEvent;\n    client.on('preprocessEvent', (event, hint) => callback(event, hint, client));\n  }\n\n  if (typeof integration.processEvent === 'function') {\n    const callback = integration.processEvent.bind(integration) as typeof integration.processEvent;\n\n    const processor = Object.assign((event: Event, hint: EventHint) => callback(event, hint, client), {\n      id: integration.name,\n    });\n\n    client.addEventProcessor(processor);\n  }\n\n  DEBUG_BUILD && logger.log(`Integration installed: ${integration.name}`);\n}\n\n/** Add an integration to the current scope's client. */\nexport function addIntegration(integration: Integration): void {\n  const client = getClient();\n\n  if (!client) {\n    DEBUG_BUILD && logger.warn(`Cannot add integration \"${integration.name}\" because no SDK Client is available.`);\n    return;\n  }\n\n  client.addIntegration(integration);\n}\n\n/**\n * Define an integration function that can be used to create an integration instance.\n * Note that this by design hides the implementation details of the integration, as they are considered internal.\n */\nexport function defineIntegration<Fn extends IntegrationFn>(fn: Fn): (...args: Parameters<Fn>) => Integration {\n  return fn;\n}\n","import type { Event } from '../types-hoist/event';\n\n/**\n * Get a list of possible event messages from a Sentry event.\n */\nexport function getPossibleEventMessages(event: Event): string[] {\n  const possibleMessages: string[] = [];\n\n  if (event.message) {\n    possibleMessages.push(event.message);\n  }\n\n  try {\n    // @ts-expect-error Try catching to save bundle size\n    const lastException = event.exception.values[event.exception.values.length - 1];\n    if (lastException?.value) {\n      possibleMessages.push(lastException.value);\n      if (lastException.type) {\n        possibleMessages.push(`${lastException.type}: ${lastException.value}`);\n      }\n    }\n  } catch (e) {\n    // ignore errors here\n  }\n\n  return possibleMessages;\n}\n","import { SEMANTIC_ATTRIBUTE_EXCLUSIVE_TIME, SEMANTIC_ATTRIBUTE_PROFILE_ID } from '../semanticAttributes';\nimport type { TransactionEvent } from '../types-hoist/event';\nimport type { SpanJSON } from '../types-hoist/span';\n\n/**\n * Converts a transaction event to a span JSON object.\n */\nexport function convertTransactionEventToSpanJson(event: TransactionEvent): SpanJSON {\n  const { trace_id, parent_span_id, span_id, status, origin, data, op } = event.contexts?.trace ?? {};\n\n  return {\n    data: data ?? {},\n    description: event.transaction,\n    op,\n    parent_span_id,\n    span_id: span_id ?? '',\n    start_timestamp: event.start_timestamp ?? 0,\n    status,\n    timestamp: event.timestamp,\n    trace_id: trace_id ?? '',\n    origin,\n    profile_id: data?.[SEMANTIC_ATTRIBUTE_PROFILE_ID] as string | undefined,\n    exclusive_time: data?.[SEMANTIC_ATTRIBUTE_EXCLUSIVE_TIME] as number | undefined,\n    measurements: event.measurements,\n    is_segment: true,\n  };\n}\n\n/**\n * Converts a span JSON object to a transaction event.\n */\nexport function convertSpanJsonToTransactionEvent(span: SpanJSON): TransactionEvent {\n  return {\n    type: 'transaction',\n    timestamp: span.timestamp,\n    start_timestamp: span.start_timestamp,\n    transaction: span.description,\n    contexts: {\n      trace: {\n        trace_id: span.trace_id,\n        span_id: span.span_id,\n        parent_span_id: span.parent_span_id,\n        op: span.op,\n        status: span.status,\n        origin: span.origin,\n        data: {\n          ...span.data,\n          ...(span.profile_id && { [SEMANTIC_ATTRIBUTE_PROFILE_ID]: span.profile_id }),\n          ...(span.exclusive_time && { [SEMANTIC_ATTRIBUTE_EXCLUSIVE_TIME]: span.exclusive_time }),\n        },\n      },\n    },\n    measurements: span.measurements,\n  };\n}\n","import type { ClientReport } from '../types-hoist/clientreport';\nimport type { ClientReportEnvelope, ClientReportItem } from '../types-hoist/envelope';\nimport { createEnvelope } from './envelope';\nimport { dateTimestampInSeconds } from './time';\n\n/**\n * Creates client report envelope\n * @param discarded_events An array of discard events\n * @param dsn A DSN that can be set on the header. Optional.\n */\nexport function createClientReportEnvelope(\n  discarded_events: ClientReport['discarded_events'],\n  dsn?: string,\n  timestamp?: number,\n): ClientReportEnvelope {\n  const clientReportItem: ClientReportItem = [\n    { type: 'client_report' },\n    {\n      timestamp: timestamp || dateTimestampInSeconds(),\n      discarded_events,\n    },\n  ];\n  return createEnvelope<ClientReportEnvelope>(dsn ? { dsn } : {}, [clientReportItem]);\n}\n","/* eslint-disable max-lines */\nimport { getEnvelopeEndpointWithUrlEncodedAuth } from './api';\nimport { DEFAULT_ENVIRONMENT } from './constants';\nimport { getCurrentScope, getIsolationScope, getTraceContextFromScope, withScope } from './currentScopes';\nimport { DEBUG_BUILD } from './debug-build';\nimport { createEventEnvelope, createSessionEnvelope } from './envelope';\nimport type { IntegrationIndex } from './integration';\nimport { afterSetupIntegrations, setupIntegration, setupIntegrations } from './integration';\nimport type { Scope } from './scope';\nimport { updateSession } from './session';\nimport {\n  getDynamicSamplingContextFromScope,\n  getDynamicSamplingContextFromSpan,\n} from './tracing/dynamicSamplingContext';\nimport type { Breadcrumb, BreadcrumbHint, FetchBreadcrumbHint, XhrBreadcrumbHint } from './types-hoist/breadcrumb';\nimport type { CheckIn, MonitorConfig } from './types-hoist/checkin';\nimport type { EventDropReason, Outcome } from './types-hoist/clientreport';\nimport type { TraceContext } from './types-hoist/context';\nimport type { DataCategory } from './types-hoist/datacategory';\nimport type { DsnComponents } from './types-hoist/dsn';\nimport type { DynamicSamplingContext, Envelope } from './types-hoist/envelope';\nimport type { ErrorEvent, Event, EventHint, TransactionEvent } from './types-hoist/event';\nimport type { EventProcessor } from './types-hoist/eventprocessor';\nimport type { FeedbackEvent } from './types-hoist/feedback';\nimport type { Integration } from './types-hoist/integration';\nimport type { Log } from './types-hoist/log';\nimport type { ClientOptions } from './types-hoist/options';\nimport type { ParameterizedString } from './types-hoist/parameterize';\nimport type { SdkMetadata } from './types-hoist/sdkmetadata';\nimport type { Session, SessionAggregates } from './types-hoist/session';\nimport type { SeverityLevel } from './types-hoist/severity';\nimport type { Span, SpanAttributes, SpanContextData, SpanJSON } from './types-hoist/span';\nimport type { StartSpanOptions } from './types-hoist/startSpanOptions';\nimport type { Transport, TransportMakeRequestResponse } from './types-hoist/transport';\nimport { getPossibleEventMessages } from './utils/eventUtils';\nimport { merge } from './utils/merge';\nimport { parseSampleRate } from './utils/parseSampleRate';\nimport { prepareEvent } from './utils/prepareEvent';\nimport { getActiveSpan, showSpanDropWarning, spanToTraceContext } from './utils/spanUtils';\nimport { convertSpanJsonToTransactionEvent, convertTransactionEventToSpanJson } from './utils/transactionEvent';\nimport { createClientReportEnvelope } from './utils-hoist/clientreport';\nimport { dsnToString, makeDsn } from './utils-hoist/dsn';\nimport { addItemToEnvelope, createAttachmentEnvelopeItem } from './utils-hoist/envelope';\nimport { isParameterizedString, isPlainObject, isPrimitive, isThenable } from './utils-hoist/is';\nimport { logger } from './utils-hoist/logger';\nimport { checkOrSetAlreadyCaught, uuid4 } from './utils-hoist/misc';\nimport { rejectedSyncPromise, resolvedSyncPromise, SyncPromise } from './utils-hoist/syncpromise';\n\nconst ALREADY_SEEN_ERROR = \"Not capturing exception because it's already been captured.\";\nconst MISSING_RELEASE_FOR_SESSION_ERROR = 'Discarded session because of missing or non-string release';\n\nconst INTERNAL_ERROR_SYMBOL = Symbol.for('SentryInternalError');\nconst DO_NOT_SEND_EVENT_SYMBOL = Symbol.for('SentryDoNotSendEventError');\n\ninterface InternalError {\n  message: string;\n  [INTERNAL_ERROR_SYMBOL]: true;\n}\n\ninterface DoNotSendEventError {\n  message: string;\n  [DO_NOT_SEND_EVENT_SYMBOL]: true;\n}\n\nfunction _makeInternalError(message: string): InternalError {\n  return {\n    message,\n    [INTERNAL_ERROR_SYMBOL]: true,\n  };\n}\n\nfunction _makeDoNotSendEventError(message: string): DoNotSendEventError {\n  return {\n    message,\n    [DO_NOT_SEND_EVENT_SYMBOL]: true,\n  };\n}\n\nfunction _isInternalError(error: unknown): error is InternalError {\n  return !!error && typeof error === 'object' && INTERNAL_ERROR_SYMBOL in error;\n}\n\nfunction _isDoNotSendEventError(error: unknown): error is DoNotSendEventError {\n  return !!error && typeof error === 'object' && DO_NOT_SEND_EVENT_SYMBOL in error;\n}\n\n/**\n * Base implementation for all JavaScript SDK clients.\n *\n * Call the constructor with the corresponding options\n * specific to the client subclass. To access these options later, use\n * {@link Client.getOptions}.\n *\n * If a Dsn is specified in the options, it will be parsed and stored. Use\n * {@link Client.getDsn} to retrieve the Dsn at any moment. In case the Dsn is\n * invalid, the constructor will throw a {@link SentryException}. Note that\n * without a valid Dsn, the SDK will not send any events to Sentry.\n *\n * Before sending an event, it is passed through\n * {@link Client._prepareEvent} to add SDK information and scope data\n * (breadcrumbs and context). To add more custom information, override this\n * method and extend the resulting prepared event.\n *\n * To issue automatically created events (e.g. via instrumentation), use\n * {@link Client.captureEvent}. It will prepare the event and pass it through\n * the callback lifecycle. To issue auto-breadcrumbs, use\n * {@link Client.addBreadcrumb}.\n *\n * @example\n * class NodeClient extends Client<NodeOptions> {\n *   public constructor(options: NodeOptions) {\n *     super(options);\n *   }\n *\n *   // ...\n * }\n */\nexport abstract class Client<O extends ClientOptions = ClientOptions> {\n  /** Options passed to the SDK. */\n  protected readonly _options: O;\n\n  /** The client Dsn, if specified in options. Without this Dsn, the SDK will be disabled. */\n  protected readonly _dsn?: DsnComponents;\n\n  protected readonly _transport?: Transport;\n\n  /** Array of set up integrations. */\n  protected _integrations: IntegrationIndex;\n\n  /** Number of calls being processed */\n  protected _numProcessing: number;\n\n  protected _eventProcessors: EventProcessor[];\n\n  /** Holds flushable  */\n  private _outcomes: { [key: string]: number };\n\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  private _hooks: Record<string, Function[]>;\n\n  /**\n   * Initializes this client instance.\n   *\n   * @param options Options for the client.\n   */\n  protected constructor(options: O) {\n    this._options = options;\n    this._integrations = {};\n    this._numProcessing = 0;\n    this._outcomes = {};\n    this._hooks = {};\n    this._eventProcessors = [];\n\n    if (options.dsn) {\n      this._dsn = makeDsn(options.dsn);\n    } else {\n      DEBUG_BUILD && logger.warn('No DSN provided, client will not send events.');\n    }\n\n    if (this._dsn) {\n      const url = getEnvelopeEndpointWithUrlEncodedAuth(\n        this._dsn,\n        options.tunnel,\n        options._metadata ? options._metadata.sdk : undefined,\n      );\n      this._transport = options.transport({\n        tunnel: this._options.tunnel,\n        recordDroppedEvent: this.recordDroppedEvent.bind(this),\n        ...options.transportOptions,\n        url,\n      });\n    }\n  }\n\n  /**\n   * Captures an exception event and sends it to Sentry.\n   *\n   * Unlike `captureException` exported from every SDK, this method requires that you pass it the current scope.\n   */\n  public captureException(exception: unknown, hint?: EventHint, scope?: Scope): string {\n    const eventId = uuid4();\n\n    // ensure we haven't captured this very object before\n    if (checkOrSetAlreadyCaught(exception)) {\n      DEBUG_BUILD && logger.log(ALREADY_SEEN_ERROR);\n      return eventId;\n    }\n\n    const hintWithEventId = {\n      event_id: eventId,\n      ...hint,\n    };\n\n    this._process(\n      this.eventFromException(exception, hintWithEventId).then(event =>\n        this._captureEvent(event, hintWithEventId, scope),\n      ),\n    );\n\n    return hintWithEventId.event_id;\n  }\n\n  /**\n   * Captures a message event and sends it to Sentry.\n   *\n   * Unlike `captureMessage` exported from every SDK, this method requires that you pass it the current scope.\n   */\n  public captureMessage(\n    message: ParameterizedString,\n    level?: SeverityLevel,\n    hint?: EventHint,\n    currentScope?: Scope,\n  ): string {\n    const hintWithEventId = {\n      event_id: uuid4(),\n      ...hint,\n    };\n\n    const eventMessage = isParameterizedString(message) ? message : String(message);\n\n    const promisedEvent = isPrimitive(message)\n      ? this.eventFromMessage(eventMessage, level, hintWithEventId)\n      : this.eventFromException(message, hintWithEventId);\n\n    this._process(promisedEvent.then(event => this._captureEvent(event, hintWithEventId, currentScope)));\n\n    return hintWithEventId.event_id;\n  }\n\n  /**\n   * Captures a manually created event and sends it to Sentry.\n   *\n   * Unlike `captureEvent` exported from every SDK, this method requires that you pass it the current scope.\n   */\n  public captureEvent(event: Event, hint?: EventHint, currentScope?: Scope): string {\n    const eventId = uuid4();\n\n    // ensure we haven't captured this very object before\n    if (hint?.originalException && checkOrSetAlreadyCaught(hint.originalException)) {\n      DEBUG_BUILD && logger.log(ALREADY_SEEN_ERROR);\n      return eventId;\n    }\n\n    const hintWithEventId = {\n      event_id: eventId,\n      ...hint,\n    };\n\n    const sdkProcessingMetadata = event.sdkProcessingMetadata || {};\n    const capturedSpanScope: Scope | undefined = sdkProcessingMetadata.capturedSpanScope;\n    const capturedSpanIsolationScope: Scope | undefined = sdkProcessingMetadata.capturedSpanIsolationScope;\n\n    this._process(\n      this._captureEvent(event, hintWithEventId, capturedSpanScope || currentScope, capturedSpanIsolationScope),\n    );\n\n    return hintWithEventId.event_id;\n  }\n\n  /**\n   * Captures a session.\n   */\n  public captureSession(session: Session): void {\n    this.sendSession(session);\n    // After sending, we set init false to indicate it's not the first occurrence\n    updateSession(session, { init: false });\n  }\n\n  /**\n   * Create a cron monitor check in and send it to Sentry. This method is not available on all clients.\n   *\n   * @param checkIn An object that describes a check in.\n   * @param upsertMonitorConfig An optional object that describes a monitor config. Use this if you want\n   * to create a monitor automatically when sending a check in.\n   * @param scope An optional scope containing event metadata.\n   * @returns A string representing the id of the check in.\n   */\n  public captureCheckIn?(checkIn: CheckIn, monitorConfig?: MonitorConfig, scope?: Scope): string;\n\n  /**\n   * Get the current Dsn.\n   */\n  public getDsn(): DsnComponents | undefined {\n    return this._dsn;\n  }\n\n  /**\n   * Get the current options.\n   */\n  public getOptions(): O {\n    return this._options;\n  }\n\n  /**\n   * Get the SDK metadata.\n   * @see SdkMetadata\n   */\n  public getSdkMetadata(): SdkMetadata | undefined {\n    return this._options._metadata;\n  }\n\n  /**\n   * Returns the transport that is used by the client.\n   * Please note that the transport gets lazy initialized so it will only be there once the first event has been sent.\n   */\n  public getTransport(): Transport | undefined {\n    return this._transport;\n  }\n\n  /**\n   * Wait for all events to be sent or the timeout to expire, whichever comes first.\n   *\n   * @param timeout Maximum time in ms the client should wait for events to be flushed. Omitting this parameter will\n   *   cause the client to wait until all events are sent before resolving the promise.\n   * @returns A promise that will resolve with `true` if all events are sent before the timeout, or `false` if there are\n   * still events in the queue when the timeout is reached.\n   */\n  public flush(timeout?: number): PromiseLike<boolean> {\n    const transport = this._transport;\n    if (transport) {\n      this.emit('flush');\n      return this._isClientDoneProcessing(timeout).then(clientFinished => {\n        return transport.flush(timeout).then(transportFlushed => clientFinished && transportFlushed);\n      });\n    } else {\n      return resolvedSyncPromise(true);\n    }\n  }\n\n  /**\n   * Flush the event queue and set the client to `enabled = false`. See {@link Client.flush}.\n   *\n   * @param {number} timeout Maximum time in ms the client should wait before shutting down. Omitting this parameter will cause\n   *   the client to wait until all events are sent before disabling itself.\n   * @returns {Promise<boolean>} A promise which resolves to `true` if the flush completes successfully before the timeout, or `false` if\n   * it doesn't.\n   */\n  public close(timeout?: number): PromiseLike<boolean> {\n    return this.flush(timeout).then(result => {\n      this.getOptions().enabled = false;\n      this.emit('close');\n      return result;\n    });\n  }\n\n  /**\n   * Get all installed event processors.\n   */\n  public getEventProcessors(): EventProcessor[] {\n    return this._eventProcessors;\n  }\n\n  /**\n   * Adds an event processor that applies to any event processed by this client.\n   */\n  public addEventProcessor(eventProcessor: EventProcessor): void {\n    this._eventProcessors.push(eventProcessor);\n  }\n\n  /**\n   * Initialize this client.\n   * Call this after the client was set on a scope.\n   */\n  public init(): void {\n    if (\n      this._isEnabled() ||\n      // Force integrations to be setup even if no DSN was set when we have\n      // Spotlight enabled. This is particularly important for browser as we\n      // don't support the `spotlight` option there and rely on the users\n      // adding the `spotlightBrowserIntegration()` to their integrations which\n      // wouldn't get initialized with the check below when there's no DSN set.\n      this._options.integrations.some(({ name }) => name.startsWith('Spotlight'))\n    ) {\n      this._setupIntegrations();\n    }\n  }\n\n  /**\n   * Gets an installed integration by its name.\n   *\n   * @returns {Integration|undefined} The installed integration or `undefined` if no integration with that `name` was installed.\n   */\n  public getIntegrationByName<T extends Integration = Integration>(integrationName: string): T | undefined {\n    return this._integrations[integrationName] as T | undefined;\n  }\n\n  /**\n   * Add an integration to the client.\n   * This can be used to e.g. lazy load integrations.\n   * In most cases, this should not be necessary,\n   * and you're better off just passing the integrations via `integrations: []` at initialization time.\n   * However, if you find the need to conditionally load & add an integration, you can use `addIntegration` to do so.\n   */\n  public addIntegration(integration: Integration): void {\n    const isAlreadyInstalled = this._integrations[integration.name];\n\n    // This hook takes care of only installing if not already installed\n    setupIntegration(this, integration, this._integrations);\n    // Here we need to check manually to make sure to not run this multiple times\n    if (!isAlreadyInstalled) {\n      afterSetupIntegrations(this, [integration]);\n    }\n  }\n\n  /**\n   * Send a fully prepared event to Sentry.\n   */\n  public sendEvent(event: Event, hint: EventHint = {}): void {\n    this.emit('beforeSendEvent', event, hint);\n\n    let env = createEventEnvelope(event, this._dsn, this._options._metadata, this._options.tunnel);\n\n    for (const attachment of hint.attachments || []) {\n      env = addItemToEnvelope(env, createAttachmentEnvelopeItem(attachment));\n    }\n\n    const promise = this.sendEnvelope(env);\n    if (promise) {\n      promise.then(sendResponse => this.emit('afterSendEvent', event, sendResponse), null);\n    }\n  }\n\n  /**\n   * Send a session or session aggregrates to Sentry.\n   */\n  public sendSession(session: Session | SessionAggregates): void {\n    // Backfill release and environment on session\n    const { release: clientReleaseOption, environment: clientEnvironmentOption = DEFAULT_ENVIRONMENT } = this._options;\n    if ('aggregates' in session) {\n      const sessionAttrs = session.attrs || {};\n      if (!sessionAttrs.release && !clientReleaseOption) {\n        DEBUG_BUILD && logger.warn(MISSING_RELEASE_FOR_SESSION_ERROR);\n        return;\n      }\n      sessionAttrs.release = sessionAttrs.release || clientReleaseOption;\n      sessionAttrs.environment = sessionAttrs.environment || clientEnvironmentOption;\n      session.attrs = sessionAttrs;\n    } else {\n      if (!session.release && !clientReleaseOption) {\n        DEBUG_BUILD && logger.warn(MISSING_RELEASE_FOR_SESSION_ERROR);\n        return;\n      }\n      session.release = session.release || clientReleaseOption;\n      session.environment = session.environment || clientEnvironmentOption;\n    }\n\n    this.emit('beforeSendSession', session);\n\n    const env = createSessionEnvelope(session, this._dsn, this._options._metadata, this._options.tunnel);\n\n    // sendEnvelope should not throw\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.sendEnvelope(env);\n  }\n\n  /**\n   * Record on the client that an event got dropped (ie, an event that will not be sent to Sentry).\n   */\n  public recordDroppedEvent(reason: EventDropReason, category: DataCategory, count: number = 1): void {\n    if (this._options.sendClientReports) {\n      // We want to track each category (error, transaction, session, replay_event) separately\n      // but still keep the distinction between different type of outcomes.\n      // We could use nested maps, but it's much easier to read and type this way.\n      // A correct type for map-based implementation if we want to go that route\n      // would be `Partial<Record<SentryRequestType, Partial<Record<Outcome, number>>>>`\n      // With typescript 4.1 we could even use template literal types\n      const key = `${reason}:${category}`;\n      DEBUG_BUILD && logger.log(`Recording outcome: \"${key}\"${count > 1 ? ` (${count} times)` : ''}`);\n      this._outcomes[key] = (this._outcomes[key] || 0) + count;\n    }\n  }\n\n  /* eslint-disable @typescript-eslint/unified-signatures */\n  /**\n   * Register a callback for whenever a span is started.\n   * Receives the span as argument.\n   * @returns {() => void} A function that, when executed, removes the registered callback.\n   */\n  public on(hook: 'spanStart', callback: (span: Span) => void): () => void;\n\n  /**\n   * Register a callback before span sampling runs. Receives a `samplingDecision` object argument with a `decision`\n   * property that can be used to make a sampling decision that will be enforced, before any span sampling runs.\n   * @returns {() => void} A function that, when executed, removes the registered callback.\n   */\n  public on(\n    hook: 'beforeSampling',\n    callback: (\n      samplingData: {\n        spanAttributes: SpanAttributes;\n        spanName: string;\n        parentSampled?: boolean;\n        parentSampleRate?: number;\n        parentContext?: SpanContextData;\n      },\n      samplingDecision: { decision: boolean },\n    ) => void,\n  ): void;\n\n  /**\n   * Register a callback for whenever a span is ended.\n   * Receives the span as argument.\n   * @returns {() => void} A function that, when executed, removes the registered callback.\n   */\n  public on(hook: 'spanEnd', callback: (span: Span) => void): () => void;\n\n  /**\n   * Register a callback for when an idle span is allowed to auto-finish.\n   * @returns {() => void} A function that, when executed, removes the registered callback.\n   */\n  public on(hook: 'idleSpanEnableAutoFinish', callback: (span: Span) => void): () => void;\n\n  /**\n   * Register a callback for transaction start and finish.\n   * @returns {() => void} A function that, when executed, removes the registered callback.\n   */\n  public on(hook: 'beforeEnvelope', callback: (envelope: Envelope) => void): () => void;\n\n  /**\n   * Register a callback that runs when stack frame metadata should be applied to an event.\n   * @returns {() => void} A function that, when executed, removes the registered callback.\n   */\n  public on(hook: 'applyFrameMetadata', callback: (event: Event) => void): () => void;\n\n  /**\n   * Register a callback for before sending an event.\n   * This is called right before an event is sent and should not be used to mutate the event.\n   * Receives an Event & EventHint as arguments.\n   * @returns {() => void} A function that, when executed, removes the registered callback.\n   */\n  public on(hook: 'beforeSendEvent', callback: (event: Event, hint?: EventHint | undefined) => void): () => void;\n\n  /**\n   * Register a callback for before sending a session or session aggregrates..\n   * Receives the session/aggregate as second argument.\n   * @returns {() => void} A function that, when executed, removes the registered callback.\n   */\n  public on(hook: 'beforeSendSession', callback: (session: Session | SessionAggregates) => void): () => void;\n\n  /**\n   * Register a callback for preprocessing an event,\n   * before it is passed to (global) event processors.\n   * Receives an Event & EventHint as arguments.\n   * @returns {() => void} A function that, when executed, removes the registered callback.\n   */\n  public on(hook: 'preprocessEvent', callback: (event: Event, hint?: EventHint | undefined) => void): () => void;\n\n  /**\n   * Register a callback for postprocessing an event,\n   * after it was passed to (global) event processors, before it is being sent.\n   * Receives an Event & EventHint as arguments.\n   * @returns {() => void} A function that, when executed, removes the registered callback.\n   */\n  public on(hook: 'postprocessEvent', callback: (event: Event, hint?: EventHint | undefined) => void): () => void;\n\n  /**\n   * Register a callback for when an event has been sent.\n   * @returns {() => void} A function that, when executed, removes the registered callback.\n   */\n  public on(\n    hook: 'afterSendEvent',\n    callback: (event: Event, sendResponse: TransportMakeRequestResponse) => void,\n  ): () => void;\n\n  /**\n   * Register a callback before a breadcrumb is added.\n   * @returns {() => void} A function that, when executed, removes the registered callback.\n   */\n  public on(hook: 'beforeAddBreadcrumb', callback: (breadcrumb: Breadcrumb, hint?: BreadcrumbHint) => void): () => void;\n\n  /**\n   * Register a callback when a DSC (Dynamic Sampling Context) is created.\n   * @returns {() => void} A function that, when executed, removes the registered callback.\n   */\n  public on(hook: 'createDsc', callback: (dsc: DynamicSamplingContext, rootSpan?: Span) => void): () => void;\n\n  /**\n   * Register a callback when a Feedback event has been prepared.\n   * This should be used to mutate the event. The options argument can hint\n   * about what kind of mutation it expects.\n   * @returns {() => void} A function that, when executed, removes the registered callback.\n   */\n  public on(\n    hook: 'beforeSendFeedback',\n    callback: (feedback: FeedbackEvent, options?: { includeReplay?: boolean }) => void,\n  ): () => void;\n\n  /**\n   * Register a callback when the feedback widget is opened in a user's browser\n   */\n  public on(hook: 'openFeedbackWidget', callback: () => void): () => void;\n\n  /**\n   * A hook for the browser tracing integrations to trigger a span start for a page load.\n   * @returns {() => void} A function that, when executed, removes the registered callback.\n   */\n  public on(\n    hook: 'startPageLoadSpan',\n    callback: (\n      options: StartSpanOptions,\n      traceOptions?: { sentryTrace?: string | undefined; baggage?: string | undefined },\n    ) => void,\n  ): () => void;\n\n  /**\n   * A hook for browser tracing integrations to trigger a span for a navigation.\n   * @returns {() => void} A function that, when executed, removes the registered callback.\n   */\n  public on(hook: 'startNavigationSpan', callback: (options: StartSpanOptions) => void): () => void;\n\n  /**\n   * A hook for GraphQL client integration to enhance a span with request data.\n   * @returns A function that, when executed, removes the registered callback.\n   */\n  public on(\n    hook: 'beforeOutgoingRequestSpan',\n    callback: (span: Span, hint: XhrBreadcrumbHint | FetchBreadcrumbHint) => void,\n  ): () => void;\n\n  /**\n   * A hook for GraphQL client integration to enhance a breadcrumb with request data.\n   * @returns A function that, when executed, removes the registered callback.\n   */\n  public on(\n    hook: 'beforeOutgoingRequestBreadcrumb',\n    callback: (breadcrumb: Breadcrumb, hint: XhrBreadcrumbHint | FetchBreadcrumbHint) => void,\n  ): () => void;\n\n  /**\n   * A hook that is called when the client is flushing\n   * @returns {() => void} A function that, when executed, removes the registered callback.\n   */\n  public on(hook: 'flush', callback: () => void): () => void;\n\n  /**\n   * A hook that is called when the client is closing\n   * @returns {() => void} A function that, when executed, removes the registered callback.\n   */\n  public on(hook: 'close', callback: () => void): () => void;\n\n  /**\n   * A hook that is called before a log is captured. This hooks runs before `beforeSendLog` is fired.\n   *\n   * @returns {() => void} A function that, when executed, removes the registered callback.\n   */\n  public on(hook: 'beforeCaptureLog', callback: (log: Log) => void): () => void;\n\n  /**\n   * A hook that is called after a log is captured\n   *\n   * @returns {() => void} A function that, when executed, removes the registered callback.\n   */\n  public on(hook: 'afterCaptureLog', callback: (log: Log) => void): () => void;\n\n  /**\n   * A hook that is called when the client is flushing logs\n   *\n   * @returns {() => void} A function that, when executed, removes the registered callback.\n   */\n  public on(hook: 'flushLogs', callback: () => void): () => void;\n\n  /**\n   * Register a hook on this client.\n   */\n  public on(hook: string, callback: unknown): () => void {\n    const hooks = (this._hooks[hook] = this._hooks[hook] || []);\n\n    // @ts-expect-error We assume the types are correct\n    hooks.push(callback);\n\n    // This function returns a callback execution handler that, when invoked,\n    // deregisters a callback. This is crucial for managing instances where callbacks\n    // need to be unregistered to prevent self-referencing in callback closures,\n    // ensuring proper garbage collection.\n    return () => {\n      // @ts-expect-error We assume the types are correct\n      const cbIndex = hooks.indexOf(callback);\n      if (cbIndex > -1) {\n        hooks.splice(cbIndex, 1);\n      }\n    };\n  }\n\n  /** Fire a hook whenever a span starts. */\n  public emit(hook: 'spanStart', span: Span): void;\n\n  /** A hook that is called every time before a span is sampled. */\n  public emit(\n    hook: 'beforeSampling',\n    samplingData: {\n      spanAttributes: SpanAttributes;\n      spanName: string;\n      parentSampled?: boolean;\n      parentSampleRate?: number;\n      parentContext?: SpanContextData;\n    },\n    samplingDecision: { decision: boolean },\n  ): void;\n\n  /** Fire a hook whenever a span ends. */\n  public emit(hook: 'spanEnd', span: Span): void;\n\n  /**\n   * Fire a hook indicating that an idle span is allowed to auto finish.\n   */\n  public emit(hook: 'idleSpanEnableAutoFinish', span: Span): void;\n\n  /*\n   * Fire a hook event for envelope creation and sending. Expects to be given an envelope as the\n   * second argument.\n   */\n  public emit(hook: 'beforeEnvelope', envelope: Envelope): void;\n\n  /*\n   * Fire a hook indicating that stack frame metadata should be applied to the event passed to the hook.\n   */\n  public emit(hook: 'applyFrameMetadata', event: Event): void;\n\n  /**\n   * Fire a hook event before sending an event.\n   * This is called right before an event is sent and should not be used to mutate the event.\n   * Expects to be given an Event & EventHint as the second/third argument.\n   */\n  public emit(hook: 'beforeSendEvent', event: Event, hint?: EventHint): void;\n\n  /**\n   * Fire a hook event before sending a session/aggregates.\n   * Expects to be given the prepared session/aggregates as second argument.\n   */\n  public emit(hook: 'beforeSendSession', session: Session | SessionAggregates): void;\n\n  /**\n   * Fire a hook event to process events before they are passed to (global) event processors.\n   * Expects to be given an Event & EventHint as the second/third argument.\n   */\n  public emit(hook: 'preprocessEvent', event: Event, hint?: EventHint): void;\n\n  /**\n   * Fire a hook event to process a user on an event before it is sent to Sentry, after all other processors have run.\n   * Expects to be given an Event & EventHint as the second/third argument.\n   */\n  public emit(hook: 'postprocessEvent', event: Event, hint?: EventHint): void;\n\n  /*\n   * Fire a hook event after sending an event. Expects to be given an Event as the\n   * second argument.\n   */\n  public emit(hook: 'afterSendEvent', event: Event, sendResponse: TransportMakeRequestResponse): void;\n\n  /**\n   * Fire a hook for when a breadcrumb is added. Expects the breadcrumb as second argument.\n   */\n  public emit(hook: 'beforeAddBreadcrumb', breadcrumb: Breadcrumb, hint?: BreadcrumbHint): void;\n\n  /**\n   * Fire a hook for when a DSC (Dynamic Sampling Context) is created. Expects the DSC as second argument.\n   */\n  public emit(hook: 'createDsc', dsc: DynamicSamplingContext, rootSpan?: Span): void;\n\n  /**\n   * Fire a hook event for after preparing a feedback event. Events to be given\n   * a feedback event as the second argument, and an optional options object as\n   * third argument.\n   */\n  public emit(hook: 'beforeSendFeedback', feedback: FeedbackEvent, options?: { includeReplay?: boolean }): void;\n\n  /**\n   * Fire a hook event for when the feedback widget is opened in a user's browser\n   */\n  public emit(hook: 'openFeedbackWidget'): void;\n\n  /**\n   * Emit a hook event for browser tracing integrations to trigger a span start for a page load.\n   */\n  public emit(\n    hook: 'startPageLoadSpan',\n    options: StartSpanOptions,\n    traceOptions?: { sentryTrace?: string | undefined; baggage?: string | undefined },\n  ): void;\n\n  /**\n   * Emit a hook event for browser tracing integrations to trigger a span for a navigation.\n   */\n  public emit(hook: 'startNavigationSpan', options: StartSpanOptions): void;\n\n  /**\n   * Emit a hook event for GraphQL client integration to enhance a span with request data.\n   */\n  public emit(hook: 'beforeOutgoingRequestSpan', span: Span, hint: XhrBreadcrumbHint | FetchBreadcrumbHint): void;\n\n  /**\n   * Emit a hook event for GraphQL client integration to enhance a breadcrumb with request data.\n   */\n  public emit(\n    hook: 'beforeOutgoingRequestBreadcrumb',\n    breadcrumb: Breadcrumb,\n    hint: XhrBreadcrumbHint | FetchBreadcrumbHint,\n  ): void;\n\n  /**\n   * Emit a hook event for client flush\n   */\n  public emit(hook: 'flush'): void;\n\n  /**\n   * Emit a hook event for client close\n   */\n  public emit(hook: 'close'): void;\n\n  /**\n   * Emit a hook event for client before capturing a log. This hooks runs before `beforeSendLog` is fired.\n   */\n  public emit(hook: 'beforeCaptureLog', log: Log): void;\n\n  /**\n   * Emit a hook event for client after capturing a log.\n   */\n  public emit(hook: 'afterCaptureLog', log: Log): void;\n\n  /**\n   * Emit a hook event for client flush logs\n   */\n  public emit(hook: 'flushLogs'): void;\n\n  /**\n   * Emit a hook that was previously registered via `on()`.\n   */\n  public emit(hook: string, ...rest: unknown[]): void {\n    const callbacks = this._hooks[hook];\n    if (callbacks) {\n      callbacks.forEach(callback => callback(...rest));\n    }\n  }\n\n  /**\n   * Send an envelope to Sentry.\n   */\n  public sendEnvelope(envelope: Envelope): PromiseLike<TransportMakeRequestResponse> {\n    this.emit('beforeEnvelope', envelope);\n\n    if (this._isEnabled() && this._transport) {\n      return this._transport.send(envelope).then(null, reason => {\n        DEBUG_BUILD && logger.error('Error while sending envelope:', reason);\n        return reason;\n      });\n    }\n\n    DEBUG_BUILD && logger.error('Transport disabled');\n\n    return resolvedSyncPromise({});\n  }\n\n  /* eslint-enable @typescript-eslint/unified-signatures */\n\n  /** Setup integrations for this client. */\n  protected _setupIntegrations(): void {\n    const { integrations } = this._options;\n    this._integrations = setupIntegrations(this, integrations);\n    afterSetupIntegrations(this, integrations);\n  }\n\n  /** Updates existing session based on the provided event */\n  protected _updateSessionFromEvent(session: Session, event: Event): void {\n    let crashed = event.level === 'fatal';\n    let errored = false;\n    const exceptions = event.exception?.values;\n\n    if (exceptions) {\n      errored = true;\n\n      for (const ex of exceptions) {\n        const mechanism = ex.mechanism;\n        if (mechanism?.handled === false) {\n          crashed = true;\n          break;\n        }\n      }\n    }\n\n    // A session is updated and that session update is sent in only one of the two following scenarios:\n    // 1. Session with non terminal status and 0 errors + an error occurred -> Will set error count to 1 and send update\n    // 2. Session with non terminal status and 1 error + a crash occurred -> Will set status crashed and send update\n    const sessionNonTerminal = session.status === 'ok';\n    const shouldUpdateAndSend = (sessionNonTerminal && session.errors === 0) || (sessionNonTerminal && crashed);\n\n    if (shouldUpdateAndSend) {\n      updateSession(session, {\n        ...(crashed && { status: 'crashed' }),\n        errors: session.errors || Number(errored || crashed),\n      });\n      this.captureSession(session);\n    }\n  }\n\n  /**\n   * Determine if the client is finished processing. Returns a promise because it will wait `timeout` ms before saying\n   * \"no\" (resolving to `false`) in order to give the client a chance to potentially finish first.\n   *\n   * @param timeout The time, in ms, after which to resolve to `false` if the client is still busy. Passing `0` (or not\n   * passing anything) will make the promise wait as long as it takes for processing to finish before resolving to\n   * `true`.\n   * @returns A promise which will resolve to `true` if processing is already done or finishes before the timeout, and\n   * `false` otherwise\n   */\n  protected _isClientDoneProcessing(timeout?: number): PromiseLike<boolean> {\n    return new SyncPromise(resolve => {\n      let ticked: number = 0;\n      const tick: number = 1;\n\n      const interval = setInterval(() => {\n        if (this._numProcessing == 0) {\n          clearInterval(interval);\n          resolve(true);\n        } else {\n          ticked += tick;\n          if (timeout && ticked >= timeout) {\n            clearInterval(interval);\n            resolve(false);\n          }\n        }\n      }, tick);\n    });\n  }\n\n  /** Determines whether this SDK is enabled and a transport is present. */\n  protected _isEnabled(): boolean {\n    return this.getOptions().enabled !== false && this._transport !== undefined;\n  }\n\n  /**\n   * Adds common information to events.\n   *\n   * The information includes release and environment from `options`,\n   * breadcrumbs and context (extra, tags and user) from the scope.\n   *\n   * Information that is already present in the event is never overwritten. For\n   * nested objects, such as the context, keys are merged.\n   *\n   * @param event The original event.\n   * @param hint May contain additional information about the original exception.\n   * @param currentScope A scope containing event metadata.\n   * @returns A new event with more information.\n   */\n  protected _prepareEvent(\n    event: Event,\n    hint: EventHint,\n    currentScope: Scope,\n    isolationScope: Scope,\n  ): PromiseLike<Event | null> {\n    const options = this.getOptions();\n    const integrations = Object.keys(this._integrations);\n    if (!hint.integrations && integrations?.length) {\n      hint.integrations = integrations;\n    }\n\n    this.emit('preprocessEvent', event, hint);\n\n    if (!event.type) {\n      isolationScope.setLastEventId(event.event_id || hint.event_id);\n    }\n\n    return prepareEvent(options, event, hint, currentScope, this, isolationScope).then(evt => {\n      if (evt === null) {\n        return evt;\n      }\n\n      this.emit('postprocessEvent', evt, hint);\n\n      evt.contexts = {\n        trace: getTraceContextFromScope(currentScope),\n        ...evt.contexts,\n      };\n\n      const dynamicSamplingContext = getDynamicSamplingContextFromScope(this, currentScope);\n\n      evt.sdkProcessingMetadata = {\n        dynamicSamplingContext,\n        ...evt.sdkProcessingMetadata,\n      };\n\n      return evt;\n    });\n  }\n\n  /**\n   * Processes the event and logs an error in case of rejection\n   * @param event\n   * @param hint\n   * @param scope\n   */\n  protected _captureEvent(\n    event: Event,\n    hint: EventHint = {},\n    currentScope = getCurrentScope(),\n    isolationScope = getIsolationScope(),\n  ): PromiseLike<string | undefined> {\n    if (DEBUG_BUILD && isErrorEvent(event)) {\n      logger.log(`Captured error event \\`${getPossibleEventMessages(event)[0] || '<unknown>'}\\``);\n    }\n\n    return this._processEvent(event, hint, currentScope, isolationScope).then(\n      finalEvent => {\n        return finalEvent.event_id;\n      },\n      reason => {\n        if (DEBUG_BUILD) {\n          if (_isDoNotSendEventError(reason)) {\n            logger.log(reason.message);\n          } else if (_isInternalError(reason)) {\n            logger.warn(reason.message);\n          } else {\n            logger.warn(reason);\n          }\n        }\n        return undefined;\n      },\n    );\n  }\n\n  /**\n   * Processes an event (either error or message) and sends it to Sentry.\n   *\n   * This also adds breadcrumbs and context information to the event. However,\n   * platform specific meta data (such as the User's IP address) must be added\n   * by the SDK implementor.\n   *\n   *\n   * @param event The event to send to Sentry.\n   * @param hint May contain additional information about the original exception.\n   * @param currentScope A scope containing event metadata.\n   * @returns A SyncPromise that resolves with the event or rejects in case event was/will not be send.\n   */\n  protected _processEvent(\n    event: Event,\n    hint: EventHint,\n    currentScope: Scope,\n    isolationScope: Scope,\n  ): PromiseLike<Event> {\n    const options = this.getOptions();\n    const { sampleRate } = options;\n\n    const isTransaction = isTransactionEvent(event);\n    const isError = isErrorEvent(event);\n    const eventType = event.type || 'error';\n    const beforeSendLabel = `before send for type \\`${eventType}\\``;\n\n    // 1.0 === 100% events are sent\n    // 0.0 === 0% events are sent\n    // Sampling for transaction happens somewhere else\n    const parsedSampleRate = typeof sampleRate === 'undefined' ? undefined : parseSampleRate(sampleRate);\n    if (isError && typeof parsedSampleRate === 'number' && Math.random() > parsedSampleRate) {\n      this.recordDroppedEvent('sample_rate', 'error');\n      return rejectedSyncPromise(\n        _makeDoNotSendEventError(\n          `Discarding event because it's not included in the random sample (sampling rate = ${sampleRate})`,\n        ),\n      );\n    }\n\n    const dataCategory = (eventType === 'replay_event' ? 'replay' : eventType) satisfies DataCategory;\n\n    return this._prepareEvent(event, hint, currentScope, isolationScope)\n      .then(prepared => {\n        if (prepared === null) {\n          this.recordDroppedEvent('event_processor', dataCategory);\n          throw _makeDoNotSendEventError('An event processor returned `null`, will not send event.');\n        }\n\n        const isInternalException = hint.data && (hint.data as { __sentry__: boolean }).__sentry__ === true;\n        if (isInternalException) {\n          return prepared;\n        }\n\n        const result = processBeforeSend(this, options, prepared, hint);\n        return _validateBeforeSendResult(result, beforeSendLabel);\n      })\n      .then(processedEvent => {\n        if (processedEvent === null) {\n          this.recordDroppedEvent('before_send', dataCategory);\n          if (isTransaction) {\n            const spans = event.spans || [];\n            // the transaction itself counts as one span, plus all the child spans that are added\n            const spanCount = 1 + spans.length;\n            this.recordDroppedEvent('before_send', 'span', spanCount);\n          }\n          throw _makeDoNotSendEventError(`${beforeSendLabel} returned \\`null\\`, will not send event.`);\n        }\n\n        const session = currentScope.getSession() || isolationScope.getSession();\n        if (isError && session) {\n          this._updateSessionFromEvent(session, processedEvent);\n        }\n\n        if (isTransaction) {\n          const spanCountBefore = processedEvent.sdkProcessingMetadata?.spanCountBeforeProcessing || 0;\n          const spanCountAfter = processedEvent.spans ? processedEvent.spans.length : 0;\n\n          const droppedSpanCount = spanCountBefore - spanCountAfter;\n          if (droppedSpanCount > 0) {\n            this.recordDroppedEvent('before_send', 'span', droppedSpanCount);\n          }\n        }\n\n        // None of the Sentry built event processor will update transaction name,\n        // so if the transaction name has been changed by an event processor, we know\n        // it has to come from custom event processor added by a user\n        const transactionInfo = processedEvent.transaction_info;\n        if (isTransaction && transactionInfo && processedEvent.transaction !== event.transaction) {\n          const source = 'custom';\n          processedEvent.transaction_info = {\n            ...transactionInfo,\n            source,\n          };\n        }\n\n        this.sendEvent(processedEvent, hint);\n        return processedEvent;\n      })\n      .then(null, reason => {\n        if (_isDoNotSendEventError(reason) || _isInternalError(reason)) {\n          throw reason;\n        }\n\n        this.captureException(reason, {\n          data: {\n            __sentry__: true,\n          },\n          originalException: reason,\n        });\n        throw _makeInternalError(\n          `Event processing pipeline threw an error, original event will not be sent. Details have been sent as a new event.\\nReason: ${reason}`,\n        );\n      });\n  }\n\n  /**\n   * Occupies the client with processing and event\n   */\n  protected _process<T>(promise: PromiseLike<T>): void {\n    this._numProcessing++;\n    void promise.then(\n      value => {\n        this._numProcessing--;\n        return value;\n      },\n      reason => {\n        this._numProcessing--;\n        return reason;\n      },\n    );\n  }\n\n  /**\n   * Clears outcomes on this client and returns them.\n   */\n  protected _clearOutcomes(): Outcome[] {\n    const outcomes = this._outcomes;\n    this._outcomes = {};\n    return Object.entries(outcomes).map(([key, quantity]) => {\n      const [reason, category] = key.split(':') as [EventDropReason, DataCategory];\n      return {\n        reason,\n        category,\n        quantity,\n      };\n    });\n  }\n\n  /**\n   * Sends client reports as an envelope.\n   */\n  protected _flushOutcomes(): void {\n    DEBUG_BUILD && logger.log('Flushing outcomes...');\n\n    const outcomes = this._clearOutcomes();\n\n    if (outcomes.length === 0) {\n      DEBUG_BUILD && logger.log('No outcomes to send');\n      return;\n    }\n\n    // This is really the only place where we want to check for a DSN and only send outcomes then\n    if (!this._dsn) {\n      DEBUG_BUILD && logger.log('No dsn provided, will not send outcomes');\n      return;\n    }\n\n    DEBUG_BUILD && logger.log('Sending outcomes:', outcomes);\n\n    const envelope = createClientReportEnvelope(outcomes, this._options.tunnel && dsnToString(this._dsn));\n\n    // sendEnvelope should not throw\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.sendEnvelope(envelope);\n  }\n\n  /**\n   * Creates an {@link Event} from all inputs to `captureException` and non-primitive inputs to `captureMessage`.\n   */\n  public abstract eventFromException(_exception: unknown, _hint?: EventHint): PromiseLike<Event>;\n\n  /**\n   * Creates an {@link Event} from primitive inputs to `captureMessage`.\n   */\n  public abstract eventFromMessage(\n    _message: ParameterizedString,\n    _level?: SeverityLevel,\n    _hint?: EventHint,\n  ): PromiseLike<Event>;\n}\n\n/**\n * @deprecated Use `Client` instead. This alias may be removed in a future major version.\n */\n// TODO(v10): Remove\nexport type BaseClient = Client;\n\n/**\n * @deprecated Use `Client` instead. This alias may be removed in a future major version.\n */\n// TODO(v10): Remove\nexport const BaseClient = Client;\n\n/**\n * Verifies that return value of configured `beforeSend` or `beforeSendTransaction` is of expected type, and returns the value if so.\n */\nfunction _validateBeforeSendResult(\n  beforeSendResult: PromiseLike<Event | null> | Event | null,\n  beforeSendLabel: string,\n): PromiseLike<Event | null> | Event | null {\n  const invalidValueError = `${beforeSendLabel} must return \\`null\\` or a valid event.`;\n  if (isThenable(beforeSendResult)) {\n    return beforeSendResult.then(\n      event => {\n        if (!isPlainObject(event) && event !== null) {\n          throw _makeInternalError(invalidValueError);\n        }\n        return event;\n      },\n      e => {\n        throw _makeInternalError(`${beforeSendLabel} rejected with ${e}`);\n      },\n    );\n  } else if (!isPlainObject(beforeSendResult) && beforeSendResult !== null) {\n    throw _makeInternalError(invalidValueError);\n  }\n  return beforeSendResult;\n}\n\n/**\n * Process the matching `beforeSendXXX` callback.\n */\nfunction processBeforeSend(\n  client: Client,\n  options: ClientOptions,\n  event: Event,\n  hint: EventHint,\n): PromiseLike<Event | null> | Event | null {\n  const { beforeSend, beforeSendTransaction, beforeSendSpan } = options;\n  let processedEvent = event;\n\n  if (isErrorEvent(processedEvent) && beforeSend) {\n    return beforeSend(processedEvent, hint);\n  }\n\n  if (isTransactionEvent(processedEvent)) {\n    if (beforeSendSpan) {\n      // process root span\n      const processedRootSpanJson = beforeSendSpan(convertTransactionEventToSpanJson(processedEvent));\n      if (!processedRootSpanJson) {\n        showSpanDropWarning();\n      } else {\n        // update event with processed root span values\n        processedEvent = merge(event, convertSpanJsonToTransactionEvent(processedRootSpanJson));\n      }\n\n      // process child spans\n      if (processedEvent.spans) {\n        const processedSpans: SpanJSON[] = [];\n        for (const span of processedEvent.spans) {\n          const processedSpan = beforeSendSpan(span);\n          if (!processedSpan) {\n            showSpanDropWarning();\n            processedSpans.push(span);\n          } else {\n            processedSpans.push(processedSpan);\n          }\n        }\n        processedEvent.spans = processedSpans;\n      }\n    }\n\n    if (beforeSendTransaction) {\n      if (processedEvent.spans) {\n        // We store the # of spans before processing in SDK metadata,\n        // so we can compare it afterwards to determine how many spans were dropped\n        const spanCountBefore = processedEvent.spans.length;\n        processedEvent.sdkProcessingMetadata = {\n          ...event.sdkProcessingMetadata,\n          spanCountBeforeProcessing: spanCountBefore,\n        };\n      }\n      return beforeSendTransaction(processedEvent as TransactionEvent, hint);\n    }\n  }\n\n  return processedEvent;\n}\n\nfunction isErrorEvent(event: Event): event is ErrorEvent {\n  return event.type === undefined;\n}\n\nfunction isTransactionEvent(event: Event): event is TransactionEvent {\n  return event.type === 'transaction';\n}\n\n/** Extract trace information from scope */\nexport function _getTraceInfoFromScope(\n  client: Client,\n  scope: Scope | undefined,\n): [dynamicSamplingContext: Partial<DynamicSamplingContext> | undefined, traceContext: TraceContext | undefined] {\n  if (!scope) {\n    return [undefined, undefined];\n  }\n\n  return withScope(scope, () => {\n    const span = getActiveSpan();\n    const traceContext = span ? spanToTraceContext(span) : getTraceContextFromScope(scope);\n    const dynamicSamplingContext = span\n      ? getDynamicSamplingContextFromSpan(span)\n      : getDynamicSamplingContextFromScope(client, scope);\n    return [dynamicSamplingContext, traceContext];\n  });\n}\n","import type { LogSeverityLevel } from '../types-hoist/log';\n\n/**\n * Maps a log severity level to a log severity number.\n *\n * @see LogSeverityLevel\n */\nexport const SEVERITY_TEXT_TO_SEVERITY_NUMBER: Partial<Record<LogSeverityLevel, number>> = {\n  trace: 1,\n  debug: 5,\n  info: 9,\n  warn: 13,\n  error: 17,\n  fatal: 21,\n};\n","import type { DsnComponents } from '../types-hoist/dsn';\nimport type { LogContainerItem, LogEnvelope } from '../types-hoist/envelope';\nimport type { SerializedLog } from '../types-hoist/log';\nimport type { SdkMetadata } from '../types-hoist/sdkmetadata';\nimport { dsnToString } from '../utils-hoist/dsn';\nimport { createEnvelope } from '../utils-hoist/envelope';\n\n/**\n * Creates a log container envelope item for a list of logs.\n *\n * @param items - The logs to include in the envelope.\n * @returns The created log container envelope item.\n */\nexport function createLogContainerEnvelopeItem(items: Array<SerializedLog>): LogContainerItem {\n  return [\n    {\n      type: 'log',\n      item_count: items.length,\n      content_type: 'application/vnd.sentry.items.log+json',\n    },\n    {\n      items,\n    },\n  ];\n}\n\n/**\n * Creates an envelope for a list of logs.\n *\n * Logs from multiple traces can be included in the same envelope.\n *\n * @param logs - The logs to include in the envelope.\n * @param metadata - The metadata to include in the envelope.\n * @param tunnel - The tunnel to include in the envelope.\n * @param dsn - The DSN to include in the envelope.\n * @returns The created envelope.\n */\nexport function createLogEnvelope(\n  logs: Array<SerializedLog>,\n  metadata?: SdkMetadata,\n  tunnel?: string,\n  dsn?: DsnComponents,\n): LogEnvelope {\n  const headers: LogEnvelope[0] = {};\n\n  if (metadata?.sdk) {\n    headers.sdk = {\n      name: metadata.sdk.name,\n      version: metadata.sdk.version,\n    };\n  }\n\n  if (!!tunnel && !!dsn) {\n    headers.dsn = dsnToString(dsn);\n  }\n\n  return createEnvelope<LogEnvelope>(headers, [createLogContainerEnvelopeItem(logs)]);\n}\n","import type { Client } from '../client';\nimport { _getTraceInfoFromScope } from '../client';\nimport { getClient, getCurrentScope, getGlobalScope, getIsolationScope } from '../currentScopes';\nimport { DEBUG_BUILD } from '../debug-build';\nimport type { Scope, ScopeData } from '../scope';\nimport type { Log, SerializedLog, SerializedLogAttributeValue } from '../types-hoist/log';\nimport { mergeScopeData } from '../utils/applyScopeDataToEvent';\nimport { _getSpanForScope } from '../utils/spanOnScope';\nimport { isParameterizedString } from '../utils-hoist/is';\nimport { logger } from '../utils-hoist/logger';\nimport { timestampInSeconds } from '../utils-hoist/time';\nimport { GLOBAL_OBJ } from '../utils-hoist/worldwide';\nimport { SEVERITY_TEXT_TO_SEVERITY_NUMBER } from './constants';\nimport { createLogEnvelope } from './envelope';\n\nconst MAX_LOG_BUFFER_SIZE = 100;\n\n// The reference to the Client <> LogBuffer map is stored to ensure it's always the same\nGLOBAL_OBJ._sentryClientToLogBufferMap = new WeakMap<Client, Array<SerializedLog>>();\n\n/**\n * Converts a log attribute to a serialized log attribute.\n *\n * @param key - The key of the log attribute.\n * @param value - The value of the log attribute.\n * @returns The serialized log attribute.\n */\nexport function logAttributeToSerializedLogAttribute(value: unknown): SerializedLogAttributeValue {\n  switch (typeof value) {\n    case 'number':\n      if (Number.isInteger(value)) {\n        return {\n          value,\n          type: 'integer',\n        };\n      }\n      return {\n        value,\n        type: 'double',\n      };\n    case 'boolean':\n      return {\n        value,\n        type: 'boolean',\n      };\n    case 'string':\n      return {\n        value,\n        type: 'string',\n      };\n    default: {\n      let stringValue = '';\n      try {\n        stringValue = JSON.stringify(value) ?? '';\n      } catch {\n        // Do nothing\n      }\n      return {\n        value: stringValue,\n        type: 'string',\n      };\n    }\n  }\n}\n\n/**\n * Sets a log attribute if the value exists and the attribute key is not already present.\n *\n * @param logAttributes - The log attributes object to modify.\n * @param key - The attribute key to set.\n * @param value - The value to set (only sets if truthy and key not present).\n * @param setEvenIfPresent - Whether to set the attribute if it is present. Defaults to true.\n */\nfunction setLogAttribute(\n  logAttributes: Record<string, unknown>,\n  key: string,\n  value: unknown,\n  setEvenIfPresent = true,\n): void {\n  if (value && (!logAttributes[key] || setEvenIfPresent)) {\n    logAttributes[key] = value;\n  }\n}\n\n/**\n * Captures a serialized log event and adds it to the log buffer for the given client.\n *\n * @param client - A client. Uses the current client if not provided.\n * @param serializedLog - The serialized log event to capture.\n *\n * @experimental This method will experience breaking changes. This is not yet part of\n * the stable Sentry SDK API and can be changed or removed without warning.\n */\nexport function _INTERNAL_captureSerializedLog(client: Client, serializedLog: SerializedLog): void {\n  const logBuffer = _INTERNAL_getLogBuffer(client);\n  if (logBuffer === undefined) {\n    GLOBAL_OBJ._sentryClientToLogBufferMap?.set(client, [serializedLog]);\n  } else {\n    GLOBAL_OBJ._sentryClientToLogBufferMap?.set(client, [...logBuffer, serializedLog]);\n    if (logBuffer.length >= MAX_LOG_BUFFER_SIZE) {\n      _INTERNAL_flushLogsBuffer(client, logBuffer);\n    }\n  }\n}\n\n/**\n * Captures a log event and sends it to Sentry.\n *\n * @param log - The log event to capture.\n * @param scope - A scope. Uses the current scope if not provided.\n * @param client - A client. Uses the current client if not provided.\n * @param captureSerializedLog - A function to capture the serialized log.\n *\n * @experimental This method will experience breaking changes. This is not yet part of\n * the stable Sentry SDK API and can be changed or removed without warning.\n */\nexport function _INTERNAL_captureLog(\n  beforeLog: Log,\n  client: Client | undefined = getClient(),\n  currentScope = getCurrentScope(),\n  captureSerializedLog: (client: Client, log: SerializedLog) => void = _INTERNAL_captureSerializedLog,\n): void {\n  if (!client) {\n    DEBUG_BUILD && logger.warn('No client available to capture log.');\n    return;\n  }\n\n  const { _experiments, release, environment } = client.getOptions();\n  const { enableLogs = false, beforeSendLog } = _experiments ?? {};\n  if (!enableLogs) {\n    DEBUG_BUILD && logger.warn('logging option not enabled, log will not be captured.');\n    return;\n  }\n\n  const [, traceContext] = _getTraceInfoFromScope(client, currentScope);\n\n  const processedLogAttributes = {\n    ...beforeLog.attributes,\n  };\n\n  const { user } = getMergedScopeData(currentScope);\n  // Only attach user to log attributes if sendDefaultPii is enabled\n  if (client.getOptions().sendDefaultPii) {\n    const { id, email, username } = user;\n    setLogAttribute(processedLogAttributes, 'user.id', id, false);\n    setLogAttribute(processedLogAttributes, 'user.email', email, false);\n    setLogAttribute(processedLogAttributes, 'user.name', username, false);\n  }\n\n  setLogAttribute(processedLogAttributes, 'sentry.release', release);\n  setLogAttribute(processedLogAttributes, 'sentry.environment', environment);\n\n  const { name, version } = client.getSdkMetadata()?.sdk ?? {};\n  setLogAttribute(processedLogAttributes, 'sentry.sdk.name', name);\n  setLogAttribute(processedLogAttributes, 'sentry.sdk.version', version);\n\n  const beforeLogMessage = beforeLog.message;\n  if (isParameterizedString(beforeLogMessage)) {\n    const { __sentry_template_string__, __sentry_template_values__ = [] } = beforeLogMessage;\n    processedLogAttributes['sentry.message.template'] = __sentry_template_string__;\n    __sentry_template_values__.forEach((param, index) => {\n      processedLogAttributes[`sentry.message.parameter.${index}`] = param;\n    });\n  }\n\n  const span = _getSpanForScope(currentScope);\n  // Add the parent span ID to the log attributes for trace context\n  setLogAttribute(processedLogAttributes, 'sentry.trace.parent_span_id', span?.spanContext().spanId);\n\n  const processedLog = { ...beforeLog, attributes: processedLogAttributes };\n\n  client.emit('beforeCaptureLog', processedLog);\n\n  const log = beforeSendLog ? beforeSendLog(processedLog) : processedLog;\n  if (!log) {\n    client.recordDroppedEvent('before_send', 'log_item', 1);\n    DEBUG_BUILD && logger.warn('beforeSendLog returned null, log will not be captured.');\n    return;\n  }\n\n  const { level, message, attributes = {}, severityNumber } = log;\n\n  const serializedLog: SerializedLog = {\n    timestamp: timestampInSeconds(),\n    level,\n    body: message,\n    trace_id: traceContext?.trace_id,\n    severity_number: severityNumber ?? SEVERITY_TEXT_TO_SEVERITY_NUMBER[level],\n    attributes: Object.keys(attributes).reduce(\n      (acc, key) => {\n        acc[key] = logAttributeToSerializedLogAttribute(attributes[key]);\n        return acc;\n      },\n      {} as Record<string, SerializedLogAttributeValue>,\n    ),\n  };\n\n  captureSerializedLog(client, serializedLog);\n\n  client.emit('afterCaptureLog', log);\n}\n\n/**\n * Flushes the logs buffer to Sentry.\n *\n * @param client - A client.\n * @param maybeLogBuffer - A log buffer. Uses the log buffer for the given client if not provided.\n *\n * @experimental This method will experience breaking changes. This is not yet part of\n * the stable Sentry SDK API and can be changed or removed without warning.\n */\nexport function _INTERNAL_flushLogsBuffer(client: Client, maybeLogBuffer?: Array<SerializedLog>): void {\n  const logBuffer = maybeLogBuffer ?? _INTERNAL_getLogBuffer(client) ?? [];\n  if (logBuffer.length === 0) {\n    return;\n  }\n\n  const clientOptions = client.getOptions();\n  const envelope = createLogEnvelope(logBuffer, clientOptions._metadata, clientOptions.tunnel, client.getDsn());\n\n  // Clear the log buffer after envelopes have been constructed.\n  GLOBAL_OBJ._sentryClientToLogBufferMap?.set(client, []);\n\n  client.emit('flushLogs');\n\n  // sendEnvelope should not throw\n  // eslint-disable-next-line @typescript-eslint/no-floating-promises\n  client.sendEnvelope(envelope);\n}\n\n/**\n * Returns the log buffer for a given client.\n *\n * Exported for testing purposes.\n *\n * @param client - The client to get the log buffer for.\n * @returns The log buffer for the given client.\n */\nexport function _INTERNAL_getLogBuffer(client: Client): Array<SerializedLog> | undefined {\n  return GLOBAL_OBJ._sentryClientToLogBufferMap?.get(client);\n}\n\n/**\n * Get the scope data for the current scope after merging with the\n * global scope and isolation scope.\n *\n * @param currentScope - The current scope.\n * @returns The scope data.\n */\nfunction getMergedScopeData(currentScope: Scope): ScopeData {\n  const scopeData = getGlobalScope().getScopeData();\n  mergeScopeData(scopeData, getIsolationScope().getScopeData());\n  mergeScopeData(scopeData, currentScope.getScopeData());\n  return scopeData;\n}\n","import type { Client } from '../client';\nimport type { Event, EventHint } from '../types-hoist/event';\nimport type { Exception } from '../types-hoist/exception';\nimport type { Extras } from '../types-hoist/extra';\nimport type { Mechanism } from '../types-hoist/mechanism';\nimport type { ParameterizedString } from '../types-hoist/parameterize';\nimport type { SeverityLevel } from '../types-hoist/severity';\nimport type { StackFrame } from '../types-hoist/stackframe';\nimport type { StackParser } from '../types-hoist/stacktrace';\nimport { isError, isErrorEvent, isParameterizedString, isPlainObject } from './is';\nimport { addExceptionMechanism, addExceptionTypeValue } from './misc';\nimport { normalizeToSize } from './normalize';\nimport { extractExceptionKeysForMessage } from './object';\n\n/**\n * Extracts stack frames from the error.stack string\n */\nexport function parseStackFrames(stackParser: StackParser, error: Error): StackFrame[] {\n  return stackParser(error.stack || '', 1);\n}\n\n/**\n * Extracts stack frames from the error and builds a Sentry Exception\n */\nexport function exceptionFromError(stackParser: StackParser, error: Error): Exception {\n  const exception: Exception = {\n    type: error.name || error.constructor.name,\n    value: error.message,\n  };\n\n  const frames = parseStackFrames(stackParser, error);\n  if (frames.length) {\n    exception.stacktrace = { frames };\n  }\n\n  return exception;\n}\n\n/** If a plain object has a property that is an `Error`, return this error. */\nfunction getErrorPropertyFromObject(obj: Record<string, unknown>): Error | undefined {\n  for (const prop in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, prop)) {\n      const value = obj[prop];\n      if (value instanceof Error) {\n        return value;\n      }\n    }\n  }\n\n  return undefined;\n}\n\nfunction getMessageForObject(exception: Record<string, unknown>): string {\n  if ('name' in exception && typeof exception.name === 'string') {\n    let message = `'${exception.name}' captured as exception`;\n\n    if ('message' in exception && typeof exception.message === 'string') {\n      message += ` with message '${exception.message}'`;\n    }\n\n    return message;\n  } else if ('message' in exception && typeof exception.message === 'string') {\n    return exception.message;\n  }\n\n  const keys = extractExceptionKeysForMessage(exception);\n\n  // Some ErrorEvent instances do not have an `error` property, which is why they are not handled before\n  // We still want to try to get a decent message for these cases\n  if (isErrorEvent(exception)) {\n    return `Event \\`ErrorEvent\\` captured as exception with message \\`${exception.message}\\``;\n  }\n\n  const className = getObjectClassName(exception);\n\n  return `${\n    className && className !== 'Object' ? `'${className}'` : 'Object'\n  } captured as exception with keys: ${keys}`;\n}\n\nfunction getObjectClassName(obj: unknown): string | undefined | void {\n  try {\n    const prototype: unknown | null = Object.getPrototypeOf(obj);\n    return prototype ? prototype.constructor.name : undefined;\n  } catch (e) {\n    // ignore errors here\n  }\n}\n\nfunction getException(\n  client: Client,\n  mechanism: Mechanism,\n  exception: unknown,\n  hint?: EventHint,\n): [Error, Extras | undefined] {\n  if (isError(exception)) {\n    return [exception, undefined];\n  }\n\n  // Mutate this!\n  mechanism.synthetic = true;\n\n  if (isPlainObject(exception)) {\n    const normalizeDepth = client?.getOptions().normalizeDepth;\n    const extras = { ['__serialized__']: normalizeToSize(exception as Record<string, unknown>, normalizeDepth) };\n\n    const errorFromProp = getErrorPropertyFromObject(exception);\n    if (errorFromProp) {\n      return [errorFromProp, extras];\n    }\n\n    const message = getMessageForObject(exception);\n    const ex = hint?.syntheticException || new Error(message);\n    ex.message = message;\n\n    return [ex, extras];\n  }\n\n  // This handles when someone does: `throw \"something awesome\";`\n  // We use synthesized Error here so we can extract a (rough) stack trace.\n  const ex = hint?.syntheticException || new Error(exception as string);\n  ex.message = `${exception}`;\n\n  return [ex, undefined];\n}\n\n/**\n * Builds and Event from a Exception\n * @hidden\n */\nexport function eventFromUnknownInput(\n  client: Client,\n  stackParser: StackParser,\n  exception: unknown,\n  hint?: EventHint,\n): Event {\n  const providedMechanism: Mechanism | undefined = hint?.data && (hint.data as { mechanism: Mechanism }).mechanism;\n  const mechanism: Mechanism = providedMechanism || {\n    handled: true,\n    type: 'generic',\n  };\n\n  const [ex, extras] = getException(client, mechanism, exception, hint);\n\n  const event: Event = {\n    exception: {\n      values: [exceptionFromError(stackParser, ex)],\n    },\n  };\n\n  if (extras) {\n    event.extra = extras;\n  }\n\n  addExceptionTypeValue(event, undefined, undefined);\n  addExceptionMechanism(event, mechanism);\n\n  return {\n    ...event,\n    event_id: hint?.event_id,\n  };\n}\n\n/**\n * Builds and Event from a Message\n * @hidden\n */\nexport function eventFromMessage(\n  stackParser: StackParser,\n  message: ParameterizedString,\n  level: SeverityLevel = 'info',\n  hint?: EventHint,\n  attachStacktrace?: boolean,\n): Event {\n  const event: Event = {\n    event_id: hint?.event_id,\n    level,\n  };\n\n  if (attachStacktrace && hint?.syntheticException) {\n    const frames = parseStackFrames(stackParser, hint.syntheticException);\n    if (frames.length) {\n      event.exception = {\n        values: [\n          {\n            value: message,\n            stacktrace: { frames },\n          },\n        ],\n      };\n      addExceptionMechanism(event, { synthetic: true });\n    }\n  }\n\n  if (isParameterizedString(message)) {\n    const { __sentry_template_string__, __sentry_template_values__ } = message;\n\n    event.logentry = {\n      message: __sentry_template_string__,\n      params: __sentry_template_values__,\n    };\n    return event;\n  }\n\n  event.message = message;\n  return event;\n}\n","import { createCheckInEnvelope } from './checkin';\nimport { _getTraceInfoFromScope, Client } from './client';\nimport { getIsolationScope } from './currentScopes';\nimport { DEBUG_BUILD } from './debug-build';\nimport { _INTERNAL_flushLogsBuffer } from './logs/exports';\nimport type { Scope } from './scope';\nimport { registerSpanErrorInstrumentation } from './tracing';\nimport type { CheckIn, MonitorConfig, SerializedCheckIn } from './types-hoist/checkin';\nimport type { Event, EventHint } from './types-hoist/event';\nimport type { Log } from './types-hoist/log';\nimport type { Primitive } from './types-hoist/misc';\nimport type { ClientOptions } from './types-hoist/options';\nimport type { ParameterizedString } from './types-hoist/parameterize';\nimport type { SeverityLevel } from './types-hoist/severity';\nimport type { BaseTransportOptions } from './types-hoist/transport';\nimport { eventFromMessage, eventFromUnknownInput } from './utils-hoist/eventbuilder';\nimport { isPrimitive } from './utils-hoist/is';\nimport { logger } from './utils-hoist/logger';\nimport { uuid4 } from './utils-hoist/misc';\nimport { resolvedSyncPromise } from './utils-hoist/syncpromise';\n\n// TODO: Make this configurable\nconst DEFAULT_LOG_FLUSH_INTERVAL = 5000;\n\nexport interface ServerRuntimeClientOptions extends ClientOptions<BaseTransportOptions> {\n  platform?: string;\n  runtime?: { name: string; version?: string };\n  serverName?: string;\n}\n\n/**\n * The Sentry Server Runtime Client SDK.\n */\nexport class ServerRuntimeClient<\n  O extends ClientOptions & ServerRuntimeClientOptions = ServerRuntimeClientOptions,\n> extends Client<O> {\n  private _logFlushIdleTimeout: ReturnType<typeof setTimeout> | undefined;\n  private _logWeight: number;\n\n  /**\n   * Creates a new Edge SDK instance.\n   * @param options Configuration options for this SDK.\n   */\n  public constructor(options: O) {\n    // Server clients always support tracing\n    registerSpanErrorInstrumentation();\n\n    super(options);\n\n    this._logWeight = 0;\n\n    if (this._options._experiments?.enableLogs) {\n      // eslint-disable-next-line @typescript-eslint/no-this-alias\n      const client = this;\n\n      client.on('flushLogs', () => {\n        client._logWeight = 0;\n        clearTimeout(client._logFlushIdleTimeout);\n      });\n\n      client.on('afterCaptureLog', log => {\n        client._logWeight += estimateLogSizeInBytes(log);\n\n        // We flush the logs buffer if it exceeds 0.8 MB\n        // The log weight is a rough estimate, so we flush way before\n        // the payload gets too big.\n        if (client._logWeight >= 800_000) {\n          _INTERNAL_flushLogsBuffer(client);\n        } else {\n          // start an idle timeout to flush the logs buffer if no logs are captured for a while\n          client._logFlushIdleTimeout = setTimeout(() => {\n            _INTERNAL_flushLogsBuffer(client);\n          }, DEFAULT_LOG_FLUSH_INTERVAL);\n        }\n      });\n\n      client.on('flush', () => {\n        _INTERNAL_flushLogsBuffer(client);\n      });\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public eventFromException(exception: unknown, hint?: EventHint): PromiseLike<Event> {\n    const event = eventFromUnknownInput(this, this._options.stackParser, exception, hint);\n    event.level = 'error';\n\n    return resolvedSyncPromise(event);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public eventFromMessage(\n    message: ParameterizedString,\n    level: SeverityLevel = 'info',\n    hint?: EventHint,\n  ): PromiseLike<Event> {\n    return resolvedSyncPromise(\n      eventFromMessage(this._options.stackParser, message, level, hint, this._options.attachStacktrace),\n    );\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureException(exception: unknown, hint?: EventHint, scope?: Scope): string {\n    setCurrentRequestSessionErroredOrCrashed(hint);\n    return super.captureException(exception, hint, scope);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureEvent(event: Event, hint?: EventHint, scope?: Scope): string {\n    // If the event is of type Exception, then a request session should be captured\n    const isException = !event.type && event.exception?.values && event.exception.values.length > 0;\n    if (isException) {\n      setCurrentRequestSessionErroredOrCrashed(hint);\n    }\n\n    return super.captureEvent(event, hint, scope);\n  }\n\n  /**\n   * Create a cron monitor check in and send it to Sentry.\n   *\n   * @param checkIn An object that describes a check in.\n   * @param upsertMonitorConfig An optional object that describes a monitor config. Use this if you want\n   * to create a monitor automatically when sending a check in.\n   */\n  public captureCheckIn(checkIn: CheckIn, monitorConfig?: MonitorConfig, scope?: Scope): string {\n    const id = 'checkInId' in checkIn && checkIn.checkInId ? checkIn.checkInId : uuid4();\n    if (!this._isEnabled()) {\n      DEBUG_BUILD && logger.warn('SDK not enabled, will not capture check-in.');\n      return id;\n    }\n\n    const options = this.getOptions();\n    const { release, environment, tunnel } = options;\n\n    const serializedCheckIn: SerializedCheckIn = {\n      check_in_id: id,\n      monitor_slug: checkIn.monitorSlug,\n      status: checkIn.status,\n      release,\n      environment,\n    };\n\n    if ('duration' in checkIn) {\n      serializedCheckIn.duration = checkIn.duration;\n    }\n\n    if (monitorConfig) {\n      serializedCheckIn.monitor_config = {\n        schedule: monitorConfig.schedule,\n        checkin_margin: monitorConfig.checkinMargin,\n        max_runtime: monitorConfig.maxRuntime,\n        timezone: monitorConfig.timezone,\n        failure_issue_threshold: monitorConfig.failureIssueThreshold,\n        recovery_threshold: monitorConfig.recoveryThreshold,\n      };\n    }\n\n    const [dynamicSamplingContext, traceContext] = _getTraceInfoFromScope(this, scope);\n    if (traceContext) {\n      serializedCheckIn.contexts = {\n        trace: traceContext,\n      };\n    }\n\n    const envelope = createCheckInEnvelope(\n      serializedCheckIn,\n      dynamicSamplingContext,\n      this.getSdkMetadata(),\n      tunnel,\n      this.getDsn(),\n    );\n\n    DEBUG_BUILD && logger.info('Sending checkin:', checkIn.monitorSlug, checkIn.status);\n\n    // sendEnvelope should not throw\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.sendEnvelope(envelope);\n\n    return id;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected _prepareEvent(\n    event: Event,\n    hint: EventHint,\n    currentScope: Scope,\n    isolationScope: Scope,\n  ): PromiseLike<Event | null> {\n    if (this._options.platform) {\n      event.platform = event.platform || this._options.platform;\n    }\n\n    if (this._options.runtime) {\n      event.contexts = {\n        ...event.contexts,\n        runtime: event.contexts?.runtime || this._options.runtime,\n      };\n    }\n\n    if (this._options.serverName) {\n      event.server_name = event.server_name || this._options.serverName;\n    }\n\n    return super._prepareEvent(event, hint, currentScope, isolationScope);\n  }\n}\n\nfunction setCurrentRequestSessionErroredOrCrashed(eventHint?: EventHint): void {\n  const requestSession = getIsolationScope().getScopeData().sdkProcessingMetadata.requestSession;\n  if (requestSession) {\n    // We mutate instead of doing `setSdkProcessingMetadata` because the http integration stores away a particular\n    // isolationScope. If that isolation scope is forked, setting the processing metadata here will not mutate the\n    // original isolation scope that the http integration stored away.\n    const isHandledException = eventHint?.mechanism?.handled ?? true;\n    // A request session can go from \"errored\" -> \"crashed\" but not \"crashed\" -> \"errored\".\n    // Crashed (unhandled exception) is worse than errored (handled exception).\n    if (isHandledException && requestSession.status !== 'crashed') {\n      requestSession.status = 'errored';\n    } else if (!isHandledException) {\n      requestSession.status = 'crashed';\n    }\n  }\n}\n\n/**\n * Estimate the size of a log in bytes.\n *\n * @param log - The log to estimate the size of.\n * @returns The estimated size of the log in bytes.\n */\nfunction estimateLogSizeInBytes(log: Log): number {\n  let weight = 0;\n\n  // Estimate byte size of 2 bytes per character. This is a rough estimate JS strings are stored as UTF-16.\n  if (log.message) {\n    weight += log.message.length * 2;\n  }\n\n  if (log.attributes) {\n    Object.values(log.attributes).forEach(value => {\n      if (Array.isArray(value)) {\n        weight += value.length * estimatePrimitiveSizeInBytes(value[0]);\n      } else if (isPrimitive(value)) {\n        weight += estimatePrimitiveSizeInBytes(value);\n      } else {\n        // For objects values, we estimate the size of the object as 100 bytes\n        weight += 100;\n      }\n    });\n  }\n\n  return weight;\n}\n\nfunction estimatePrimitiveSizeInBytes(value: Primitive): number {\n  if (typeof value === 'string') {\n    return value.length * 2;\n  } else if (typeof value === 'number') {\n    return 8;\n  } else if (typeof value === 'boolean') {\n    return 4;\n  }\n\n  return 0;\n}\n","import { isThenable } from '../utils-hoist/is';\n\n/**\n * Wrap a callback function with error handling.\n * If an error is thrown, it will be passed to the `onError` callback and re-thrown.\n *\n * If the return value of the function is a promise, it will be handled with `maybeHandlePromiseRejection`.\n *\n * If an `onFinally` callback is provided, this will be called when the callback has finished\n * - so if it returns a promise, once the promise resolved/rejected,\n * else once the callback has finished executing.\n * The `onFinally` callback will _always_ be called, no matter if an error was thrown or not.\n */\nexport function handleCallbackErrors<\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  Fn extends () => any,\n>(\n  fn: Fn,\n  onError: (error: unknown) => void,\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  onFinally: () => void = () => {},\n): ReturnType<Fn> {\n  let maybePromiseResult: ReturnType<Fn>;\n  try {\n    maybePromiseResult = fn();\n  } catch (e) {\n    onError(e);\n    onFinally();\n    throw e;\n  }\n\n  return maybeHandlePromiseRejection(maybePromiseResult, onError, onFinally);\n}\n\n/**\n * Maybe handle a promise rejection.\n * This expects to be given a value that _may_ be a promise, or any other value.\n * If it is a promise, and it rejects, it will call the `onError` callback.\n * Other than this, it will generally return the given value as-is.\n */\nfunction maybeHandlePromiseRejection<MaybePromise>(\n  value: MaybePromise,\n  onError: (error: unknown) => void,\n  onFinally: () => void,\n): MaybePromise {\n  if (isThenable(value)) {\n    // @ts-expect-error - the isThenable check returns the \"wrong\" type here\n    return value.then(\n      res => {\n        onFinally();\n        return res;\n      },\n      e => {\n        onError(e);\n        onFinally();\n        throw e;\n      },\n    );\n  }\n\n  onFinally();\n  return value;\n}\n","import { DEBUG_BUILD } from '../debug-build';\nimport type { Options } from '../types-hoist/options';\nimport type { SamplingContext } from '../types-hoist/samplingcontext';\nimport { hasSpansEnabled } from '../utils/hasSpansEnabled';\nimport { parseSampleRate } from '../utils/parseSampleRate';\nimport { logger } from '../utils-hoist/logger';\n\n/**\n * Makes a sampling decision for the given options.\n *\n * Called every time a root span is created. Only root spans which emerge with a `sampled` value of `true` will be\n * sent to Sentry.\n */\nexport function sampleSpan(\n  options: Pick<Options, 'tracesSampleRate' | 'tracesSampler'>,\n  samplingContext: SamplingContext,\n  sampleRand: number,\n): [sampled: boolean, sampleRate?: number, localSampleRateWasApplied?: boolean] {\n  // nothing to do if span recording is not enabled\n  if (!hasSpansEnabled(options)) {\n    return [false];\n  }\n\n  let localSampleRateWasApplied = undefined;\n\n  // we would have bailed already if neither `tracesSampler` nor `tracesSampleRate` were defined, so one of these should\n  // work; prefer the hook if so\n  let sampleRate;\n  if (typeof options.tracesSampler === 'function') {\n    sampleRate = options.tracesSampler({\n      ...samplingContext,\n      inheritOrSampleWith: fallbackSampleRate => {\n        // If we have an incoming parent sample rate, we'll just use that one.\n        // The sampling decision will be inherited because of the sample_rand that was generated when the trace reached the incoming boundaries of the SDK.\n        if (typeof samplingContext.parentSampleRate === 'number') {\n          return samplingContext.parentSampleRate;\n        }\n\n        // Fallback if parent sample rate is not on the incoming trace (e.g. if there is no baggage)\n        // This is to provide backwards compatibility if there are incoming traces from older SDKs that don't send a parent sample rate or a sample rand. In these cases we just want to force either a sampling decision on the downstream traces via the sample rate.\n        if (typeof samplingContext.parentSampled === 'boolean') {\n          return Number(samplingContext.parentSampled);\n        }\n\n        return fallbackSampleRate;\n      },\n    });\n    localSampleRateWasApplied = true;\n  } else if (samplingContext.parentSampled !== undefined) {\n    sampleRate = samplingContext.parentSampled;\n  } else if (typeof options.tracesSampleRate !== 'undefined') {\n    sampleRate = options.tracesSampleRate;\n    localSampleRateWasApplied = true;\n  }\n\n  // Since this is coming from the user (or from a function provided by the user), who knows what we might get.\n  // (The only valid values are booleans or numbers between 0 and 1.)\n  const parsedSampleRate = parseSampleRate(sampleRate);\n\n  if (parsedSampleRate === undefined) {\n    DEBUG_BUILD &&\n      logger.warn(\n        `[Tracing] Discarding root span because of invalid sample rate. Sample rate must be a boolean or a number between 0 and 1. Got ${JSON.stringify(\n          sampleRate,\n        )} of type ${JSON.stringify(typeof sampleRate)}.`,\n      );\n    return [false];\n  }\n\n  // if the function returned 0 (or false), or if `tracesSampleRate` is 0, it's a sign the transaction should be dropped\n  if (!parsedSampleRate) {\n    DEBUG_BUILD &&\n      logger.log(\n        `[Tracing] Discarding transaction because ${\n          typeof options.tracesSampler === 'function'\n            ? 'tracesSampler returned 0 or false'\n            : 'a negative sampling decision was inherited or tracesSampleRate is set to 0'\n        }`,\n      );\n    return [false, parsedSampleRate, localSampleRateWasApplied];\n  }\n\n  // We always compare the sample rand for the current execution context against the chosen sample rate.\n  // Read more: https://develop.sentry.dev/sdk/telemetry/traces/#propagated-random-value\n  const shouldSample = sampleRand < parsedSampleRate;\n\n  // if we're not going to keep it, we're done\n  if (!shouldSample) {\n    DEBUG_BUILD &&\n      logger.log(\n        `[Tracing] Discarding transaction because it's not included in the random sample (sampling rate = ${Number(\n          sampleRate,\n        )})`,\n      );\n  }\n\n  return [shouldSample, parsedSampleRate, localSampleRateWasApplied];\n}\n","/** A simple Least Recently Used map */\nexport class LRUMap<K, V> {\n  private readonly _cache: Map<K, V>;\n\n  public constructor(private readonly _maxSize: number) {\n    this._cache = new Map<K, V>();\n  }\n\n  /** Get the current size of the cache */\n  public get size(): number {\n    return this._cache.size;\n  }\n\n  /** Get an entry or undefined if it was not in the cache. Re-inserts to update the recently used order */\n  public get(key: K): V | undefined {\n    const value = this._cache.get(key);\n    if (value === undefined) {\n      return undefined;\n    }\n    // Remove and re-insert to update the order\n    this._cache.delete(key);\n    this._cache.set(key, value);\n    return value;\n  }\n\n  /** Insert an entry and evict an older entry if we've reached maxSize */\n  public set(key: K, value: V): void {\n    if (this._cache.size >= this._maxSize) {\n      // keys() returns an iterator in insertion order so keys().next() gives us the oldest key\n      this._cache.delete(this._cache.keys().next().value);\n    }\n    this._cache.set(key, value);\n  }\n\n  /** Remove an entry and return the entry if it was in the cache */\n  public remove(key: K): V | undefined {\n    const value = this._cache.get(key);\n    if (value) {\n      this._cache.delete(key);\n    }\n    return value;\n  }\n\n  /** Clear all entries */\n  public clear(): void {\n    this._cache.clear();\n  }\n\n  /** Get all the keys */\n  public keys(): Array<K> {\n    return Array.from(this._cache.keys());\n  }\n\n  /** Get all the values */\n  public values(): Array<V> {\n    const values: V[] = [];\n    this._cache.forEach(value => values.push(value));\n    return values;\n  }\n}\n","import { DEBUG_BUILD } from '../debug-build';\nimport {\n  SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_UNIT,\n  SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_VALUE,\n} from '../semanticAttributes';\nimport type { Measurements, MeasurementUnit } from '../types-hoist/measurement';\nimport type { TimedEvent } from '../types-hoist/timedEvent';\nimport { getActiveSpan, getRootSpan } from '../utils/spanUtils';\nimport { logger } from '../utils-hoist/logger';\n\n/**\n * Adds a measurement to the active transaction on the current global scope. You can optionally pass in a different span\n * as the 4th parameter.\n */\nexport function setMeasurement(name: string, value: number, unit: MeasurementUnit, activeSpan = getActiveSpan()): void {\n  const rootSpan = activeSpan && getRootSpan(activeSpan);\n\n  if (rootSpan) {\n    DEBUG_BUILD && logger.log(`[Measurement] Setting measurement on root span: ${name} = ${value} ${unit}`);\n    rootSpan.addEvent(name, {\n      [SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_VALUE]: value,\n      [SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_UNIT]: unit as string,\n    });\n  }\n}\n\n/**\n * Convert timed events to measurements.\n */\nexport function timedEventsToMeasurements(events: TimedEvent[]): Measurements | undefined {\n  if (!events || events.length === 0) {\n    return undefined;\n  }\n\n  const measurements: Measurements = {};\n  events.forEach(event => {\n    const attributes = event.attributes || {};\n    const unit = attributes[SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_UNIT] as MeasurementUnit | undefined;\n    const value = attributes[SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_VALUE] as number | undefined;\n\n    if (typeof unit === 'string' && typeof value === 'number') {\n      measurements[event.name] = { value, unit };\n    }\n  });\n\n  return measurements;\n}\n","import { DEBUG_BUILD } from '../debug-build';\nimport type { Span } from '../types-hoist/span';\nimport { getRootSpan, spanIsSampled, spanToJSON } from '../utils/spanUtils';\nimport { logger } from '../utils-hoist/logger';\n\n/**\n * Print a log message for a started span.\n */\nexport function logSpanStart(span: Span): void {\n  if (!DEBUG_BUILD) return;\n\n  const { description = '< unknown name >', op = '< unknown op >', parent_span_id: parentSpanId } = spanToJSON(span);\n  const { spanId } = span.spanContext();\n\n  const sampled = spanIsSampled(span);\n  const rootSpan = getRootSpan(span);\n  const isRootSpan = rootSpan === span;\n\n  const header = `[Tracing] Starting ${sampled ? 'sampled' : 'unsampled'} ${isRootSpan ? 'root ' : ''}span`;\n\n  const infoParts: string[] = [`op: ${op}`, `name: ${description}`, `ID: ${spanId}`];\n\n  if (parentSpanId) {\n    infoParts.push(`parent ID: ${parentSpanId}`);\n  }\n\n  if (!isRootSpan) {\n    const { op, description } = spanToJSON(rootSpan);\n    infoParts.push(`root ID: ${rootSpan.spanContext().spanId}`);\n    if (op) {\n      infoParts.push(`root op: ${op}`);\n    }\n    if (description) {\n      infoParts.push(`root description: ${description}`);\n    }\n  }\n\n  logger.log(`${header}\n  ${infoParts.join('\\n  ')}`);\n}\n\n/**\n * Print a log message for an ended span.\n */\nexport function logSpanEnd(span: Span): void {\n  if (!DEBUG_BUILD) return;\n\n  const { description = '< unknown name >', op = '< unknown op >' } = spanToJSON(span);\n  const { spanId } = span.spanContext();\n  const rootSpan = getRootSpan(span);\n  const isRootSpan = rootSpan === span;\n\n  const msg = `[Tracing] Finishing \"${op}\" ${isRootSpan ? 'root ' : ''}span \"${description}\" with ID ${spanId}`;\n  logger.log(msg);\n}\n","import { DEBUG_BUILD } from './../debug-build';\nimport { logger } from './logger';\nimport { GLOBAL_OBJ } from './worldwide';\n\nconst WINDOW = GLOBAL_OBJ as unknown as Window;\n\ndeclare const EdgeRuntime: string | undefined;\n\n/**\n * Tells whether current environment supports ErrorEvent objects\n * {@link supportsErrorEvent}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsErrorEvent(): boolean {\n  try {\n    new ErrorEvent('');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports DOMError objects\n * {@link supportsDOMError}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsDOMError(): boolean {\n  try {\n    // Chrome: VM89:1 Uncaught TypeError: Failed to construct 'DOMError':\n    // 1 argument required, but only 0 present.\n    // @ts-expect-error It really needs 1 argument, not 0.\n    new DOMError('');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports DOMException objects\n * {@link supportsDOMException}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsDOMException(): boolean {\n  try {\n    new DOMException('');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports History API\n * {@link supportsHistory}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsHistory(): boolean {\n  return 'history' in WINDOW && !!WINDOW.history;\n}\n\n/**\n * Tells whether current environment supports Fetch API\n * {@link supportsFetch}.\n *\n * @returns Answer to the given question.\n * @deprecated This is no longer used and will be removed in a future major version.\n */\nexport const supportsFetch = _isFetchSupported;\n\nfunction _isFetchSupported(): boolean {\n  if (!('fetch' in WINDOW)) {\n    return false;\n  }\n\n  try {\n    new Headers();\n    new Request('http://www.example.com');\n    new Response();\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * isNative checks if the given function is a native implementation\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function isNativeFunction(func: Function): boolean {\n  return func && /^function\\s+\\w+\\(\\)\\s+\\{\\s+\\[native code\\]\\s+\\}$/.test(func.toString());\n}\n\n/**\n * Tells whether current environment supports Fetch API natively\n * {@link supportsNativeFetch}.\n *\n * @returns true if `window.fetch` is natively implemented, false otherwise\n */\nexport function supportsNativeFetch(): boolean {\n  if (typeof EdgeRuntime === 'string') {\n    return true;\n  }\n\n  if (!_isFetchSupported()) {\n    return false;\n  }\n\n  // Fast path to avoid DOM I/O\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  if (isNativeFunction(WINDOW.fetch)) {\n    return true;\n  }\n\n  // window.fetch is implemented, but is polyfilled or already wrapped (e.g: by a chrome extension)\n  // so create a \"pure\" iframe to see if that has native fetch\n  let result = false;\n  const doc = WINDOW.document;\n  // eslint-disable-next-line deprecation/deprecation\n  if (doc && typeof (doc.createElement as unknown) === 'function') {\n    try {\n      const sandbox = doc.createElement('iframe');\n      sandbox.hidden = true;\n      doc.head.appendChild(sandbox);\n      if (sandbox.contentWindow?.fetch) {\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        result = isNativeFunction(sandbox.contentWindow.fetch);\n      }\n      doc.head.removeChild(sandbox);\n    } catch (err) {\n      DEBUG_BUILD &&\n        logger.warn('Could not create sandbox iframe for pure fetch check, bailing to window.fetch: ', err);\n    }\n  }\n\n  return result;\n}\n\n/**\n * Tells whether current environment supports ReportingObserver API\n * {@link supportsReportingObserver}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsReportingObserver(): boolean {\n  return 'ReportingObserver' in WINDOW;\n}\n\n/**\n * Tells whether current environment supports Referrer Policy API\n * {@link supportsReferrerPolicy}.\n *\n * @returns Answer to the given question.\n * @deprecated This is no longer used and will be removed in a future major version.\n */\nexport function supportsReferrerPolicy(): boolean {\n  // Despite all stars in the sky saying that Edge supports old draft syntax, aka 'never', 'always', 'origin' and 'default'\n  // (see https://caniuse.com/#feat=referrer-policy),\n  // it doesn't. And it throws an exception instead of ignoring this parameter...\n  // REF: https://github.com/getsentry/raven-js/issues/1233\n\n  if (!_isFetchSupported()) {\n    return false;\n  }\n\n  try {\n    new Request('_', {\n      referrerPolicy: 'origin' as ReferrerPolicy,\n    });\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport type { HandlerDataFetch } from '../../types-hoist/instrument';\nimport type { WebFetchHeaders } from '../../types-hoist/webfetchapi';\nimport { isError, isRequest } from '../is';\nimport { addNonEnumerableProperty, fill } from '../object';\nimport { supportsNativeFetch } from '../supports';\nimport { timestampInSeconds } from '../time';\nimport { GLOBAL_OBJ } from '../worldwide';\nimport { addHandler, maybeInstrument, triggerHandlers } from './handlers';\n\ntype FetchResource = string | { toString(): string } | { url: string };\n\n/**\n * Add an instrumentation handler for when a fetch request happens.\n * The handler function is called once when the request starts and once when it ends,\n * which can be identified by checking if it has an `endTimestamp`.\n *\n * Use at your own risk, this might break without changelog notice, only used internally.\n * @hidden\n */\nexport function addFetchInstrumentationHandler(\n  handler: (data: HandlerDataFetch) => void,\n  skipNativeFetchCheck?: boolean,\n): void {\n  const type = 'fetch';\n  addHandler(type, handler);\n  maybeInstrument(type, () => instrumentFetch(undefined, skipNativeFetchCheck));\n}\n\n/**\n * Add an instrumentation handler for long-lived fetch requests, like consuming server-sent events (SSE) via fetch.\n * The handler will resolve the request body and emit the actual `endTimestamp`, so that the\n * span can be updated accordingly.\n *\n * Only used internally\n * @hidden\n */\nexport function addFetchEndInstrumentationHandler(handler: (data: HandlerDataFetch) => void): void {\n  const type = 'fetch-body-resolved';\n  addHandler(type, handler);\n  maybeInstrument(type, () => instrumentFetch(streamHandler));\n}\n\nfunction instrumentFetch(onFetchResolved?: (response: Response) => void, skipNativeFetchCheck: boolean = false): void {\n  if (skipNativeFetchCheck && !supportsNativeFetch()) {\n    return;\n  }\n\n  fill(GLOBAL_OBJ, 'fetch', function (originalFetch: () => void): () => void {\n    return function (...args: any[]): void {\n      // We capture the error right here and not in the Promise error callback because Safari (and probably other\n      // browsers too) will wipe the stack trace up to this point, only leaving us with this file which is useless.\n\n      // NOTE: If you are a Sentry user, and you are seeing this stack frame,\n      //       it means the error, that was caused by your fetch call did not\n      //       have a stack trace, so the SDK backfilled the stack trace so\n      //       you can see which fetch call failed.\n      const virtualError = new Error();\n\n      const { method, url } = parseFetchArgs(args);\n      const handlerData: HandlerDataFetch = {\n        args,\n        fetchData: {\n          method,\n          url,\n        },\n        startTimestamp: timestampInSeconds() * 1000,\n        // // Adding the error to be able to fingerprint the failed fetch event in HttpClient instrumentation\n        virtualError,\n        headers: getHeadersFromFetchArgs(args),\n      };\n\n      // if there is no callback, fetch is instrumented directly\n      if (!onFetchResolved) {\n        triggerHandlers('fetch', {\n          ...handlerData,\n        });\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      return originalFetch.apply(GLOBAL_OBJ, args).then(\n        async (response: Response) => {\n          if (onFetchResolved) {\n            onFetchResolved(response);\n          } else {\n            triggerHandlers('fetch', {\n              ...handlerData,\n              endTimestamp: timestampInSeconds() * 1000,\n              response,\n            });\n          }\n\n          return response;\n        },\n        (error: Error) => {\n          triggerHandlers('fetch', {\n            ...handlerData,\n            endTimestamp: timestampInSeconds() * 1000,\n            error,\n          });\n\n          if (isError(error) && error.stack === undefined) {\n            // NOTE: If you are a Sentry user, and you are seeing this stack frame,\n            //       it means the error, that was caused by your fetch call did not\n            //       have a stack trace, so the SDK backfilled the stack trace so\n            //       you can see which fetch call failed.\n            error.stack = virtualError.stack;\n            addNonEnumerableProperty(error, 'framesToPop', 1);\n          }\n\n          // We enhance the not-so-helpful \"Failed to fetch\" error messages with the host\n          // Possible messages we handle here:\n          // * \"Failed to fetch\" (chromium)\n          // * \"Load failed\" (webkit)\n          // * \"NetworkError when attempting to fetch resource.\" (firefox)\n          if (\n            error instanceof TypeError &&\n            (error.message === 'Failed to fetch' ||\n              error.message === 'Load failed' ||\n              error.message === 'NetworkError when attempting to fetch resource.')\n          ) {\n            try {\n              const url = new URL(handlerData.fetchData.url);\n              error.message = `${error.message} (${url.host})`;\n            } catch {\n              // ignore it if errors happen here\n            }\n          }\n\n          // NOTE: If you are a Sentry user, and you are seeing this stack frame,\n          //       it means the sentry.javascript SDK caught an error invoking your application code.\n          //       This is expected behavior and NOT indicative of a bug with sentry.javascript.\n          throw error;\n        },\n      );\n    };\n  });\n}\n\nasync function resolveResponse(res: Response | undefined, onFinishedResolving: () => void): Promise<void> {\n  if (res?.body) {\n    const body = res.body;\n    const responseReader = body.getReader();\n\n    // Define a maximum duration after which we just cancel\n    const maxFetchDurationTimeout = setTimeout(\n      () => {\n        body.cancel().then(null, () => {\n          // noop\n        });\n      },\n      90 * 1000, // 90s\n    );\n\n    let readingActive = true;\n    while (readingActive) {\n      let chunkTimeout;\n      try {\n        // abort reading if read op takes more than 5s\n        chunkTimeout = setTimeout(() => {\n          body.cancel().then(null, () => {\n            // noop on error\n          });\n        }, 5000);\n\n        // This .read() call will reject/throw when we abort due to timeouts through `body.cancel()`\n        const { done } = await responseReader.read();\n\n        clearTimeout(chunkTimeout);\n\n        if (done) {\n          onFinishedResolving();\n          readingActive = false;\n        }\n      } catch (error) {\n        readingActive = false;\n      } finally {\n        clearTimeout(chunkTimeout);\n      }\n    }\n\n    clearTimeout(maxFetchDurationTimeout);\n\n    responseReader.releaseLock();\n    body.cancel().then(null, () => {\n      // noop on error\n    });\n  }\n}\n\nfunction streamHandler(response: Response): void {\n  // clone response for awaiting stream\n  let clonedResponseForResolving: Response;\n  try {\n    clonedResponseForResolving = response.clone();\n  } catch {\n    return;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-floating-promises\n  resolveResponse(clonedResponseForResolving, () => {\n    triggerHandlers('fetch-body-resolved', {\n      endTimestamp: timestampInSeconds() * 1000,\n      response,\n    });\n  });\n}\n\nfunction hasProp<T extends string>(obj: unknown, prop: T): obj is Record<string, string> {\n  return !!obj && typeof obj === 'object' && !!(obj as Record<string, string>)[prop];\n}\n\nfunction getUrlFromResource(resource: FetchResource): string {\n  if (typeof resource === 'string') {\n    return resource;\n  }\n\n  if (!resource) {\n    return '';\n  }\n\n  if (hasProp(resource, 'url')) {\n    return resource.url;\n  }\n\n  if (resource.toString) {\n    return resource.toString();\n  }\n\n  return '';\n}\n\n/**\n * Parses the fetch arguments to find the used Http method and the url of the request.\n * Exported for tests only.\n */\nexport function parseFetchArgs(fetchArgs: unknown[]): { method: string; url: string } {\n  if (fetchArgs.length === 0) {\n    return { method: 'GET', url: '' };\n  }\n\n  if (fetchArgs.length === 2) {\n    const [url, options] = fetchArgs as [FetchResource, object];\n\n    return {\n      url: getUrlFromResource(url),\n      method: hasProp(options, 'method') ? String(options.method).toUpperCase() : 'GET',\n    };\n  }\n\n  const arg = fetchArgs[0];\n  return {\n    url: getUrlFromResource(arg as FetchResource),\n    method: hasProp(arg, 'method') ? String(arg.method).toUpperCase() : 'GET',\n  };\n}\n\nfunction getHeadersFromFetchArgs(fetchArgs: unknown[]): WebFetchHeaders | undefined {\n  const [requestArgument, optionsArgument] = fetchArgs;\n\n  try {\n    if (\n      typeof optionsArgument === 'object' &&\n      optionsArgument !== null &&\n      'headers' in optionsArgument &&\n      optionsArgument.headers\n    ) {\n      return new Headers(optionsArgument.headers as any);\n    }\n\n    if (isRequest(requestArgument)) {\n      return new Headers(requestArgument.headers);\n    }\n  } catch {\n    // noop\n  }\n\n  return;\n}\n","import type { Client } from '../client';\nimport type { DsnComponents } from '../types-hoist/dsn';\n\n/**\n * Checks whether given url points to Sentry server\n *\n * @param url url to verify\n */\nexport function isSentryRequestUrl(url: string, client: Client | undefined): boolean {\n  const dsn = client?.getDsn();\n  const tunnel = client?.getOptions().tunnel;\n  return checkDsn(url, dsn) || checkTunnel(url, tunnel);\n}\n\nfunction checkTunnel(url: string, tunnel: string | undefined): boolean {\n  if (!tunnel) {\n    return false;\n  }\n\n  return removeTrailingSlash(url) === removeTrailingSlash(tunnel);\n}\n\nfunction checkDsn(url: string, dsn: DsnComponents | undefined): boolean {\n  return dsn ? url.includes(dsn.host) : false;\n}\n\nfunction removeTrailingSlash(str: string): string {\n  return str[str.length - 1] === '/' ? str.slice(0, -1) : str;\n}\n","import type {\n  SentrySpanArguments,\n  Span,\n  SpanAttributes,\n  SpanAttributeValue,\n  SpanContextData,\n  SpanTimeInput,\n} from '../types-hoist/span';\nimport type { SpanStatus } from '../types-hoist/spanStatus';\nimport { TRACE_FLAG_NONE } from '../utils/spanUtils';\nimport { generateSpanId, generateTraceId } from '../utils-hoist/propagationContext';\n\n/**\n * A Sentry Span that is non-recording, meaning it will not be sent to Sentry.\n */\nexport class SentryNonRecordingSpan implements Span {\n  private _traceId: string;\n  private _spanId: string;\n\n  public constructor(spanContext: SentrySpanArguments = {}) {\n    this._traceId = spanContext.traceId || generateTraceId();\n    this._spanId = spanContext.spanId || generateSpanId();\n  }\n\n  /** @inheritdoc */\n  public spanContext(): SpanContextData {\n    return {\n      spanId: this._spanId,\n      traceId: this._traceId,\n      traceFlags: TRACE_FLAG_NONE,\n    };\n  }\n\n  /** @inheritdoc */\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  public end(_timestamp?: SpanTimeInput): void {}\n\n  /** @inheritdoc */\n  public setAttribute(_key: string, _value: SpanAttributeValue | undefined): this {\n    return this;\n  }\n\n  /** @inheritdoc */\n  public setAttributes(_values: SpanAttributes): this {\n    return this;\n  }\n\n  /** @inheritdoc */\n  public setStatus(_status: SpanStatus): this {\n    return this;\n  }\n\n  /** @inheritdoc */\n  public updateName(_name: string): this {\n    return this;\n  }\n\n  /** @inheritdoc */\n  public isRecording(): boolean {\n    return false;\n  }\n\n  /** @inheritdoc */\n  public addEvent(\n    _name: string,\n    _attributesOrStartTime?: SpanAttributes | SpanTimeInput,\n    _startTime?: SpanTimeInput,\n  ): this {\n    return this;\n  }\n\n  /** @inheritDoc */\n  public addLink(_link: unknown): this {\n    return this;\n  }\n\n  /** @inheritDoc */\n  public addLinks(_links: unknown[]): this {\n    return this;\n  }\n\n  /**\n   * This should generally not be used,\n   * but we need it for being compliant with the OTEL Span interface.\n   *\n   * @hidden\n   * @internal\n   */\n  public recordException(_exception: unknown, _time?: number | undefined): void {\n    // noop\n  }\n}\n","import { getClient, getCurrentScope } from '../currentScopes';\nimport { DEBUG_BUILD } from '../debug-build';\nimport { createSpanEnvelope } from '../envelope';\nimport {\n  SEMANTIC_ATTRIBUTE_EXCLUSIVE_TIME,\n  SEMANTIC_ATTRIBUTE_PROFILE_ID,\n  SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME,\n  SEMANTIC_ATTRIBUTE_SENTRY_OP,\n  SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN,\n  SEMANTIC_ATTRIBUTE_SENTRY_SOURCE,\n} from '../semanticAttributes';\nimport type { SpanEnvelope } from '../types-hoist/envelope';\nimport type { TransactionEvent } from '../types-hoist/event';\nimport type { SpanLink } from '../types-hoist/link';\nimport type {\n  SentrySpanArguments,\n  Span,\n  SpanAttributes,\n  SpanAttributeValue,\n  SpanContextData,\n  SpanJSON,\n  SpanOrigin,\n  SpanTimeInput,\n} from '../types-hoist/span';\nimport type { SpanStatus } from '../types-hoist/spanStatus';\nimport type { TimedEvent } from '../types-hoist/timedEvent';\nimport type { TransactionSource } from '../types-hoist/transaction';\nimport {\n  convertSpanLinksForEnvelope,\n  getRootSpan,\n  getSpanDescendants,\n  getStatusMessage,\n  spanTimeInputToSeconds,\n  spanToJSON,\n  spanToTransactionTraceContext,\n  TRACE_FLAG_NONE,\n  TRACE_FLAG_SAMPLED,\n} from '../utils/spanUtils';\nimport { logger } from '../utils-hoist/logger';\nimport { generateSpanId, generateTraceId } from '../utils-hoist/propagationContext';\nimport { timestampInSeconds } from '../utils-hoist/time';\nimport { getDynamicSamplingContextFromSpan } from './dynamicSamplingContext';\nimport { logSpanEnd } from './logSpans';\nimport { timedEventsToMeasurements } from './measurement';\nimport { getCapturedScopesOnSpan } from './utils';\n\nconst MAX_SPAN_COUNT = 1000;\n\n/**\n * Span contains all data about a span\n */\nexport class SentrySpan implements Span {\n  protected _traceId: string;\n  protected _spanId: string;\n  protected _parentSpanId?: string | undefined;\n  protected _sampled: boolean | undefined;\n  protected _name?: string | undefined;\n  protected _attributes: SpanAttributes;\n  protected _links?: SpanLink[];\n  /** Epoch timestamp in seconds when the span started. */\n  protected _startTime: number;\n  /** Epoch timestamp in seconds when the span ended. */\n  protected _endTime?: number | undefined;\n  /** Internal keeper of the status */\n  protected _status?: SpanStatus;\n  /** The timed events added to this span. */\n  protected _events: TimedEvent[];\n\n  /** if true, treat span as a standalone span (not part of a transaction) */\n  private _isStandaloneSpan?: boolean;\n\n  /**\n   * You should never call the constructor manually, always use `Sentry.startSpan()`\n   * or other span methods.\n   * @internal\n   * @hideconstructor\n   * @hidden\n   */\n  public constructor(spanContext: SentrySpanArguments = {}) {\n    this._traceId = spanContext.traceId || generateTraceId();\n    this._spanId = spanContext.spanId || generateSpanId();\n    this._startTime = spanContext.startTimestamp || timestampInSeconds();\n    this._links = spanContext.links;\n\n    this._attributes = {};\n    this.setAttributes({\n      [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'manual',\n      [SEMANTIC_ATTRIBUTE_SENTRY_OP]: spanContext.op,\n      ...spanContext.attributes,\n    });\n\n    this._name = spanContext.name;\n\n    if (spanContext.parentSpanId) {\n      this._parentSpanId = spanContext.parentSpanId;\n    }\n    // We want to include booleans as well here\n    if ('sampled' in spanContext) {\n      this._sampled = spanContext.sampled;\n    }\n    if (spanContext.endTimestamp) {\n      this._endTime = spanContext.endTimestamp;\n    }\n\n    this._events = [];\n\n    this._isStandaloneSpan = spanContext.isStandalone;\n\n    // If the span is already ended, ensure we finalize the span immediately\n    if (this._endTime) {\n      this._onSpanEnded();\n    }\n  }\n\n  /** @inheritDoc */\n  public addLink(link: SpanLink): this {\n    if (this._links) {\n      this._links.push(link);\n    } else {\n      this._links = [link];\n    }\n    return this;\n  }\n\n  /** @inheritDoc */\n  public addLinks(links: SpanLink[]): this {\n    if (this._links) {\n      this._links.push(...links);\n    } else {\n      this._links = links;\n    }\n    return this;\n  }\n\n  /**\n   * This should generally not be used,\n   * but it is needed for being compliant with the OTEL Span interface.\n   *\n   * @hidden\n   * @internal\n   */\n  public recordException(_exception: unknown, _time?: number | undefined): void {\n    // noop\n  }\n\n  /** @inheritdoc */\n  public spanContext(): SpanContextData {\n    const { _spanId: spanId, _traceId: traceId, _sampled: sampled } = this;\n    return {\n      spanId,\n      traceId,\n      traceFlags: sampled ? TRACE_FLAG_SAMPLED : TRACE_FLAG_NONE,\n    };\n  }\n\n  /** @inheritdoc */\n  public setAttribute(key: string, value: SpanAttributeValue | undefined): this {\n    if (value === undefined) {\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete this._attributes[key];\n    } else {\n      this._attributes[key] = value;\n    }\n\n    return this;\n  }\n\n  /** @inheritdoc */\n  public setAttributes(attributes: SpanAttributes): this {\n    Object.keys(attributes).forEach(key => this.setAttribute(key, attributes[key]));\n    return this;\n  }\n\n  /**\n   * This should generally not be used,\n   * but we need it for browser tracing where we want to adjust the start time afterwards.\n   * USE THIS WITH CAUTION!\n   *\n   * @hidden\n   * @internal\n   */\n  public updateStartTime(timeInput: SpanTimeInput): void {\n    this._startTime = spanTimeInputToSeconds(timeInput);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setStatus(value: SpanStatus): this {\n    this._status = value;\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public updateName(name: string): this {\n    this._name = name;\n    this.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_SOURCE, 'custom');\n    return this;\n  }\n\n  /** @inheritdoc */\n  public end(endTimestamp?: SpanTimeInput): void {\n    // If already ended, skip\n    if (this._endTime) {\n      return;\n    }\n\n    this._endTime = spanTimeInputToSeconds(endTimestamp);\n    logSpanEnd(this);\n\n    this._onSpanEnded();\n  }\n\n  /**\n   * Get JSON representation of this span.\n   *\n   * @hidden\n   * @internal This method is purely for internal purposes and should not be used outside\n   * of SDK code. If you need to get a JSON representation of a span,\n   * use `spanToJSON(span)` instead.\n   */\n  public getSpanJSON(): SpanJSON {\n    return {\n      data: this._attributes,\n      description: this._name,\n      op: this._attributes[SEMANTIC_ATTRIBUTE_SENTRY_OP],\n      parent_span_id: this._parentSpanId,\n      span_id: this._spanId,\n      start_timestamp: this._startTime,\n      status: getStatusMessage(this._status),\n      timestamp: this._endTime,\n      trace_id: this._traceId,\n      origin: this._attributes[SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN] as SpanOrigin | undefined,\n      profile_id: this._attributes[SEMANTIC_ATTRIBUTE_PROFILE_ID] as string | undefined,\n      exclusive_time: this._attributes[SEMANTIC_ATTRIBUTE_EXCLUSIVE_TIME] as number | undefined,\n      measurements: timedEventsToMeasurements(this._events),\n      is_segment: (this._isStandaloneSpan && getRootSpan(this) === this) || undefined,\n      segment_id: this._isStandaloneSpan ? getRootSpan(this).spanContext().spanId : undefined,\n      links: convertSpanLinksForEnvelope(this._links),\n    };\n  }\n\n  /** @inheritdoc */\n  public isRecording(): boolean {\n    return !this._endTime && !!this._sampled;\n  }\n\n  /**\n   * @inheritdoc\n   */\n  public addEvent(\n    name: string,\n    attributesOrStartTime?: SpanAttributes | SpanTimeInput,\n    startTime?: SpanTimeInput,\n  ): this {\n    DEBUG_BUILD && logger.log('[Tracing] Adding an event to span:', name);\n\n    const time = isSpanTimeInput(attributesOrStartTime) ? attributesOrStartTime : startTime || timestampInSeconds();\n    const attributes = isSpanTimeInput(attributesOrStartTime) ? {} : attributesOrStartTime || {};\n\n    const event: TimedEvent = {\n      name,\n      time: spanTimeInputToSeconds(time),\n      attributes,\n    };\n\n    this._events.push(event);\n\n    return this;\n  }\n\n  /**\n   * This method should generally not be used,\n   * but for now we need a way to publicly check if the `_isStandaloneSpan` flag is set.\n   * USE THIS WITH CAUTION!\n   * @internal\n   * @hidden\n   * @experimental\n   */\n  public isStandaloneSpan(): boolean {\n    return !!this._isStandaloneSpan;\n  }\n\n  /** Emit `spanEnd` when the span is ended. */\n  private _onSpanEnded(): void {\n    const client = getClient();\n    if (client) {\n      client.emit('spanEnd', this);\n    }\n\n    // A segment span is basically the root span of a local span tree.\n    // So for now, this is either what we previously refer to as the root span,\n    // or a standalone span.\n    const isSegmentSpan = this._isStandaloneSpan || this === getRootSpan(this);\n\n    if (!isSegmentSpan) {\n      return;\n    }\n\n    // if this is a standalone span, we send it immediately\n    if (this._isStandaloneSpan) {\n      if (this._sampled) {\n        sendSpanEnvelope(createSpanEnvelope([this], client));\n      } else {\n        DEBUG_BUILD &&\n          logger.log('[Tracing] Discarding standalone span because its trace was not chosen to be sampled.');\n        if (client) {\n          client.recordDroppedEvent('sample_rate', 'span');\n        }\n      }\n      return;\n    }\n\n    const transactionEvent = this._convertSpanToTransaction();\n    if (transactionEvent) {\n      const scope = getCapturedScopesOnSpan(this).scope || getCurrentScope();\n      scope.captureEvent(transactionEvent);\n    }\n  }\n\n  /**\n   * Finish the transaction & prepare the event to send to Sentry.\n   */\n  private _convertSpanToTransaction(): TransactionEvent | undefined {\n    // We can only convert finished spans\n    if (!isFullFinishedSpan(spanToJSON(this))) {\n      return undefined;\n    }\n\n    if (!this._name) {\n      DEBUG_BUILD && logger.warn('Transaction has no name, falling back to `<unlabeled transaction>`.');\n      this._name = '<unlabeled transaction>';\n    }\n\n    const { scope: capturedSpanScope, isolationScope: capturedSpanIsolationScope } = getCapturedScopesOnSpan(this);\n\n    const normalizedRequest = capturedSpanScope?.getScopeData().sdkProcessingMetadata?.normalizedRequest;\n\n    if (this._sampled !== true) {\n      return undefined;\n    }\n\n    // The transaction span itself as well as any potential standalone spans should be filtered out\n    const finishedSpans = getSpanDescendants(this).filter(span => span !== this && !isStandaloneSpan(span));\n\n    const spans = finishedSpans.map(span => spanToJSON(span)).filter(isFullFinishedSpan);\n\n    const source = this._attributes[SEMANTIC_ATTRIBUTE_SENTRY_SOURCE] as TransactionSource | undefined;\n\n    // remove internal root span attributes we don't need to send.\n    /* eslint-disable @typescript-eslint/no-dynamic-delete */\n    delete this._attributes[SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME];\n    spans.forEach(span => {\n      delete span.data[SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME];\n    });\n    // eslint-enabled-next-line @typescript-eslint/no-dynamic-delete\n\n    const transaction: TransactionEvent = {\n      contexts: {\n        trace: spanToTransactionTraceContext(this),\n      },\n      spans:\n        // spans.sort() mutates the array, but `spans` is already a copy so we can safely do this here\n        // we do not use spans anymore after this point\n        spans.length > MAX_SPAN_COUNT\n          ? spans.sort((a, b) => a.start_timestamp - b.start_timestamp).slice(0, MAX_SPAN_COUNT)\n          : spans,\n      start_timestamp: this._startTime,\n      timestamp: this._endTime,\n      transaction: this._name,\n      type: 'transaction',\n      sdkProcessingMetadata: {\n        capturedSpanScope,\n        capturedSpanIsolationScope,\n        dynamicSamplingContext: getDynamicSamplingContextFromSpan(this),\n      },\n      request: normalizedRequest,\n      ...(source && {\n        transaction_info: {\n          source,\n        },\n      }),\n    };\n\n    const measurements = timedEventsToMeasurements(this._events);\n    const hasMeasurements = measurements && Object.keys(measurements).length;\n\n    if (hasMeasurements) {\n      DEBUG_BUILD &&\n        logger.log(\n          '[Measurements] Adding measurements to transaction event',\n          JSON.stringify(measurements, undefined, 2),\n        );\n      transaction.measurements = measurements;\n    }\n\n    return transaction;\n  }\n}\n\nfunction isSpanTimeInput(value: undefined | SpanAttributes | SpanTimeInput): value is SpanTimeInput {\n  return (value && typeof value === 'number') || value instanceof Date || Array.isArray(value);\n}\n\n// We want to filter out any incomplete SpanJSON objects\nfunction isFullFinishedSpan(input: Partial<SpanJSON>): input is SpanJSON {\n  return !!input.start_timestamp && !!input.timestamp && !!input.span_id && !!input.trace_id;\n}\n\n/** `SentrySpan`s can be sent as a standalone span rather than belonging to a transaction */\nfunction isStandaloneSpan(span: Span): boolean {\n  return span instanceof SentrySpan && span.isStandaloneSpan();\n}\n\n/**\n * Sends a `SpanEnvelope`.\n *\n * Note: If the envelope's spans are dropped, e.g. via `beforeSendSpan`,\n * the envelope will not be sent either.\n */\nfunction sendSpanEnvelope(envelope: SpanEnvelope): void {\n  const client = getClient();\n  if (!client) {\n    return;\n  }\n\n  const spanItems = envelope[1];\n  if (!spanItems || spanItems.length === 0) {\n    client.recordDroppedEvent('before_send', 'span');\n    return;\n  }\n\n  // sendEnvelope should not throw\n  // eslint-disable-next-line @typescript-eslint/no-floating-promises\n  client.sendEnvelope(envelope);\n}\n","/* eslint-disable max-lines */\n\nimport { getAsyncContextStrategy } from '../asyncContext';\nimport type { AsyncContextStrategy } from '../asyncContext/types';\nimport { getMainCarrier } from '../carrier';\nimport { getClient, getCurrentScope, getIsolationScope, withScope } from '../currentScopes';\nimport { DEBUG_BUILD } from '../debug-build';\nimport type { Scope } from '../scope';\nimport { SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE, SEMANTIC_ATTRIBUTE_SENTRY_SOURCE } from '../semanticAttributes';\nimport type { DynamicSamplingContext } from '../types-hoist/envelope';\nimport type { ClientOptions } from '../types-hoist/options';\nimport type { SentrySpanArguments, Span, SpanTimeInput } from '../types-hoist/span';\nimport type { StartSpanOptions } from '../types-hoist/startSpanOptions';\nimport { handleCallbackErrors } from '../utils/handleCallbackErrors';\nimport { hasSpansEnabled } from '../utils/hasSpansEnabled';\nimport { parseSampleRate } from '../utils/parseSampleRate';\nimport { _getSpanForScope, _setSpanForScope } from '../utils/spanOnScope';\nimport { addChildSpanToSpan, getRootSpan, spanIsSampled, spanTimeInputToSeconds, spanToJSON } from '../utils/spanUtils';\nimport { logger } from '../utils-hoist/logger';\nimport { generateTraceId } from '../utils-hoist/propagationContext';\nimport { propagationContextFromHeaders } from '../utils-hoist/tracing';\nimport { freezeDscOnSpan, getDynamicSamplingContextFromSpan } from './dynamicSamplingContext';\nimport { logSpanStart } from './logSpans';\nimport { sampleSpan } from './sampling';\nimport { SentryNonRecordingSpan } from './sentryNonRecordingSpan';\nimport { SentrySpan } from './sentrySpan';\nimport { SPAN_STATUS_ERROR } from './spanstatus';\nimport { setCapturedScopesOnSpan } from './utils';\n\nconst SUPPRESS_TRACING_KEY = '__SENTRY_SUPPRESS_TRACING__';\n\n/**\n * Wraps a function with a transaction/span and finishes the span after the function is done.\n * The created span is the active span and will be used as parent by other spans created inside the function\n * and can be accessed via `Sentry.getActiveSpan()`, as long as the function is executed while the scope is active.\n *\n * If you want to create a span that is not set as active, use {@link startInactiveSpan}.\n *\n * You'll always get a span passed to the callback,\n * it may just be a non-recording span if the span is not sampled or if tracing is disabled.\n */\nexport function startSpan<T>(options: StartSpanOptions, callback: (span: Span) => T): T {\n  const acs = getAcs();\n  if (acs.startSpan) {\n    return acs.startSpan(options, callback);\n  }\n\n  const spanArguments = parseSentrySpanArguments(options);\n  const { forceTransaction, parentSpan: customParentSpan, scope: customScope } = options;\n\n  // We still need to fork a potentially passed scope, as we set the active span on it\n  // and we need to ensure that it is cleaned up properly once the span ends.\n  const customForkedScope = customScope?.clone();\n\n  return withScope(customForkedScope, () => {\n    // If `options.parentSpan` is defined, we want to wrap the callback in `withActiveSpan`\n    const wrapper = getActiveSpanWrapper<T>(customParentSpan);\n\n    return wrapper(() => {\n      const scope = getCurrentScope();\n      const parentSpan = getParentSpan(scope);\n\n      const shouldSkipSpan = options.onlyIfParent && !parentSpan;\n      const activeSpan = shouldSkipSpan\n        ? new SentryNonRecordingSpan()\n        : createChildOrRootSpan({\n            parentSpan,\n            spanArguments,\n            forceTransaction,\n            scope,\n          });\n\n      _setSpanForScope(scope, activeSpan);\n\n      return handleCallbackErrors(\n        () => callback(activeSpan),\n        () => {\n          // Only update the span status if it hasn't been changed yet, and the span is not yet finished\n          const { status } = spanToJSON(activeSpan);\n          if (activeSpan.isRecording() && (!status || status === 'ok')) {\n            activeSpan.setStatus({ code: SPAN_STATUS_ERROR, message: 'internal_error' });\n          }\n        },\n        () => {\n          activeSpan.end();\n        },\n      );\n    });\n  });\n}\n\n/**\n * Similar to `Sentry.startSpan`. Wraps a function with a transaction/span, but does not finish the span\n * after the function is done automatically. Use `span.end()` to end the span.\n *\n * The created span is the active span and will be used as parent by other spans created inside the function\n * and can be accessed via `Sentry.getActiveSpan()`, as long as the function is executed while the scope is active.\n *\n * You'll always get a span passed to the callback,\n * it may just be a non-recording span if the span is not sampled or if tracing is disabled.\n */\nexport function startSpanManual<T>(options: StartSpanOptions, callback: (span: Span, finish: () => void) => T): T {\n  const acs = getAcs();\n  if (acs.startSpanManual) {\n    return acs.startSpanManual(options, callback);\n  }\n\n  const spanArguments = parseSentrySpanArguments(options);\n  const { forceTransaction, parentSpan: customParentSpan, scope: customScope } = options;\n\n  const customForkedScope = customScope?.clone();\n\n  return withScope(customForkedScope, () => {\n    // If `options.parentSpan` is defined, we want to wrap the callback in `withActiveSpan`\n    const wrapper = getActiveSpanWrapper<T>(customParentSpan);\n\n    return wrapper(() => {\n      const scope = getCurrentScope();\n      const parentSpan = getParentSpan(scope);\n\n      const shouldSkipSpan = options.onlyIfParent && !parentSpan;\n      const activeSpan = shouldSkipSpan\n        ? new SentryNonRecordingSpan()\n        : createChildOrRootSpan({\n            parentSpan,\n            spanArguments,\n            forceTransaction,\n            scope,\n          });\n\n      _setSpanForScope(scope, activeSpan);\n\n      return handleCallbackErrors(\n        // We pass the `finish` function to the callback, so the user can finish the span manually\n        // this is mainly here for historic purposes because previously, we instructed users to call\n        // `finish` instead of `span.end()` to also clean up the scope. Nowadays, calling `span.end()`\n        // or `finish` has the same effect and we simply leave it here to avoid breaking user code.\n        () => callback(activeSpan, () => activeSpan.end()),\n        () => {\n          // Only update the span status if it hasn't been changed yet, and the span is not yet finished\n          const { status } = spanToJSON(activeSpan);\n          if (activeSpan.isRecording() && (!status || status === 'ok')) {\n            activeSpan.setStatus({ code: SPAN_STATUS_ERROR, message: 'internal_error' });\n          }\n        },\n      );\n    });\n  });\n}\n\n/**\n * Creates a span. This span is not set as active, so will not get automatic instrumentation spans\n * as children or be able to be accessed via `Sentry.getActiveSpan()`.\n *\n * If you want to create a span that is set as active, use {@link startSpan}.\n *\n * This function will always return a span,\n * it may just be a non-recording span if the span is not sampled or if tracing is disabled.\n */\nexport function startInactiveSpan(options: StartSpanOptions): Span {\n  const acs = getAcs();\n  if (acs.startInactiveSpan) {\n    return acs.startInactiveSpan(options);\n  }\n\n  const spanArguments = parseSentrySpanArguments(options);\n  const { forceTransaction, parentSpan: customParentSpan } = options;\n\n  // If `options.scope` is defined, we use this as as a wrapper,\n  // If `options.parentSpan` is defined, we want to wrap the callback in `withActiveSpan`\n  const wrapper = options.scope\n    ? (callback: () => Span) => withScope(options.scope, callback)\n    : customParentSpan !== undefined\n      ? (callback: () => Span) => withActiveSpan(customParentSpan, callback)\n      : (callback: () => Span) => callback();\n\n  return wrapper(() => {\n    const scope = getCurrentScope();\n    const parentSpan = getParentSpan(scope);\n\n    const shouldSkipSpan = options.onlyIfParent && !parentSpan;\n\n    if (shouldSkipSpan) {\n      return new SentryNonRecordingSpan();\n    }\n\n    return createChildOrRootSpan({\n      parentSpan,\n      spanArguments,\n      forceTransaction,\n      scope,\n    });\n  });\n}\n\n/**\n * Continue a trace from `sentry-trace` and `baggage` values.\n * These values can be obtained from incoming request headers, or in the browser from `<meta name=\"sentry-trace\">`\n * and `<meta name=\"baggage\">` HTML tags.\n *\n * Spans started with `startSpan`, `startSpanManual` and `startInactiveSpan`, within the callback will automatically\n * be attached to the incoming trace.\n */\nexport const continueTrace = <V>(\n  options: {\n    sentryTrace: Parameters<typeof propagationContextFromHeaders>[0];\n    baggage: Parameters<typeof propagationContextFromHeaders>[1];\n  },\n  callback: () => V,\n): V => {\n  const carrier = getMainCarrier();\n  const acs = getAsyncContextStrategy(carrier);\n  if (acs.continueTrace) {\n    return acs.continueTrace(options, callback);\n  }\n\n  const { sentryTrace, baggage } = options;\n\n  return withScope(scope => {\n    const propagationContext = propagationContextFromHeaders(sentryTrace, baggage);\n    scope.setPropagationContext(propagationContext);\n    return callback();\n  });\n};\n\n/**\n * Forks the current scope and sets the provided span as active span in the context of the provided callback. Can be\n * passed `null` to start an entirely new span tree.\n *\n * @param span Spans started in the context of the provided callback will be children of this span. If `null` is passed,\n * spans started within the callback will not be attached to a parent span.\n * @param callback Execution context in which the provided span will be active. Is passed the newly forked scope.\n * @returns the value returned from the provided callback function.\n */\nexport function withActiveSpan<T>(span: Span | null, callback: (scope: Scope) => T): T {\n  const acs = getAcs();\n  if (acs.withActiveSpan) {\n    return acs.withActiveSpan(span, callback);\n  }\n\n  return withScope(scope => {\n    _setSpanForScope(scope, span || undefined);\n    return callback(scope);\n  });\n}\n\n/** Suppress tracing in the given callback, ensuring no spans are generated inside of it. */\nexport function suppressTracing<T>(callback: () => T): T {\n  const acs = getAcs();\n\n  if (acs.suppressTracing) {\n    return acs.suppressTracing(callback);\n  }\n\n  return withScope(scope => {\n    scope.setSDKProcessingMetadata({ [SUPPRESS_TRACING_KEY]: true });\n    return callback();\n  });\n}\n\n/**\n * Starts a new trace for the duration of the provided callback. Spans started within the\n * callback will be part of the new trace instead of a potentially previously started trace.\n *\n * Important: Only use this function if you want to override the default trace lifetime and\n * propagation mechanism of the SDK for the duration and scope of the provided callback.\n * The newly created trace will also be the root of a new distributed trace, for example if\n * you make http requests within the callback.\n * This function might be useful if the operation you want to instrument should not be part\n * of a potentially ongoing trace.\n *\n * Default behavior:\n * - Server-side: A new trace is started for each incoming request.\n * - Browser: A new trace is started for each page our route. Navigating to a new route\n *            or page will automatically create a new trace.\n */\nexport function startNewTrace<T>(callback: () => T): T {\n  return withScope(scope => {\n    scope.setPropagationContext({\n      traceId: generateTraceId(),\n      sampleRand: Math.random(),\n    });\n    DEBUG_BUILD && logger.info(`Starting a new trace with id ${scope.getPropagationContext().traceId}`);\n    return withActiveSpan(null, callback);\n  });\n}\n\nfunction createChildOrRootSpan({\n  parentSpan,\n  spanArguments,\n  forceTransaction,\n  scope,\n}: {\n  parentSpan: SentrySpan | undefined;\n  spanArguments: SentrySpanArguments;\n  forceTransaction?: boolean;\n  scope: Scope;\n}): Span {\n  if (!hasSpansEnabled()) {\n    const span = new SentryNonRecordingSpan();\n\n    // If this is a root span, we ensure to freeze a DSC\n    // So we can have at least partial data here\n    if (forceTransaction || !parentSpan) {\n      const dsc = {\n        sampled: 'false',\n        sample_rate: '0',\n        transaction: spanArguments.name,\n        ...getDynamicSamplingContextFromSpan(span),\n      } satisfies Partial<DynamicSamplingContext>;\n      freezeDscOnSpan(span, dsc);\n    }\n\n    return span;\n  }\n\n  const isolationScope = getIsolationScope();\n\n  let span: Span;\n  if (parentSpan && !forceTransaction) {\n    span = _startChildSpan(parentSpan, scope, spanArguments);\n    addChildSpanToSpan(parentSpan, span);\n  } else if (parentSpan) {\n    // If we forced a transaction but have a parent span, make sure to continue from the parent span, not the scope\n    const dsc = getDynamicSamplingContextFromSpan(parentSpan);\n    const { traceId, spanId: parentSpanId } = parentSpan.spanContext();\n    const parentSampled = spanIsSampled(parentSpan);\n\n    span = _startRootSpan(\n      {\n        traceId,\n        parentSpanId,\n        ...spanArguments,\n      },\n      scope,\n      parentSampled,\n    );\n\n    freezeDscOnSpan(span, dsc);\n  } else {\n    const {\n      traceId,\n      dsc,\n      parentSpanId,\n      sampled: parentSampled,\n    } = {\n      ...isolationScope.getPropagationContext(),\n      ...scope.getPropagationContext(),\n    };\n\n    span = _startRootSpan(\n      {\n        traceId,\n        parentSpanId,\n        ...spanArguments,\n      },\n      scope,\n      parentSampled,\n    );\n\n    if (dsc) {\n      freezeDscOnSpan(span, dsc);\n    }\n  }\n\n  logSpanStart(span);\n\n  setCapturedScopesOnSpan(span, scope, isolationScope);\n\n  return span;\n}\n\n/**\n * This converts StartSpanOptions to SentrySpanArguments.\n * For the most part (for now) we accept the same options,\n * but some of them need to be transformed.\n */\nfunction parseSentrySpanArguments(options: StartSpanOptions): SentrySpanArguments {\n  const exp = options.experimental || {};\n  const initialCtx: SentrySpanArguments = {\n    isStandalone: exp.standalone,\n    ...options,\n  };\n\n  if (options.startTime) {\n    const ctx: SentrySpanArguments & { startTime?: SpanTimeInput } = { ...initialCtx };\n    ctx.startTimestamp = spanTimeInputToSeconds(options.startTime);\n    delete ctx.startTime;\n    return ctx;\n  }\n\n  return initialCtx;\n}\n\nfunction getAcs(): AsyncContextStrategy {\n  const carrier = getMainCarrier();\n  return getAsyncContextStrategy(carrier);\n}\n\nfunction _startRootSpan(spanArguments: SentrySpanArguments, scope: Scope, parentSampled?: boolean): SentrySpan {\n  const client = getClient();\n  const options: Partial<ClientOptions> = client?.getOptions() || {};\n\n  const { name = '' } = spanArguments;\n\n  const mutableSpanSamplingData = { spanAttributes: { ...spanArguments.attributes }, spanName: name, parentSampled };\n\n  // we don't care about the decision for the moment; this is just a placeholder\n  client?.emit('beforeSampling', mutableSpanSamplingData, { decision: false });\n\n  // If hook consumers override the parentSampled flag, we will use that value instead of the actual one\n  const finalParentSampled = mutableSpanSamplingData.parentSampled ?? parentSampled;\n  const finalAttributes = mutableSpanSamplingData.spanAttributes;\n\n  const currentPropagationContext = scope.getPropagationContext();\n  const [sampled, sampleRate, localSampleRateWasApplied] = scope.getScopeData().sdkProcessingMetadata[\n    SUPPRESS_TRACING_KEY\n  ]\n    ? [false]\n    : sampleSpan(\n        options,\n        {\n          name,\n          parentSampled: finalParentSampled,\n          attributes: finalAttributes,\n          parentSampleRate: parseSampleRate(currentPropagationContext.dsc?.sample_rate),\n        },\n        currentPropagationContext.sampleRand,\n      );\n\n  const rootSpan = new SentrySpan({\n    ...spanArguments,\n    attributes: {\n      [SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'custom',\n      [SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE]:\n        sampleRate !== undefined && localSampleRateWasApplied ? sampleRate : undefined,\n      ...finalAttributes,\n    },\n    sampled,\n  });\n\n  if (!sampled && client) {\n    DEBUG_BUILD && logger.log('[Tracing] Discarding root span because its trace was not chosen to be sampled.');\n    client.recordDroppedEvent('sample_rate', 'transaction');\n  }\n\n  if (client) {\n    client.emit('spanStart', rootSpan);\n  }\n\n  return rootSpan;\n}\n\n/**\n * Creates a new `Span` while setting the current `Span.id` as `parentSpanId`.\n * This inherits the sampling decision from the parent span.\n */\nfunction _startChildSpan(parentSpan: Span, scope: Scope, spanArguments: SentrySpanArguments): Span {\n  const { spanId, traceId } = parentSpan.spanContext();\n  const sampled = scope.getScopeData().sdkProcessingMetadata[SUPPRESS_TRACING_KEY] ? false : spanIsSampled(parentSpan);\n\n  const childSpan = sampled\n    ? new SentrySpan({\n        ...spanArguments,\n        parentSpanId: spanId,\n        traceId,\n        sampled,\n      })\n    : new SentryNonRecordingSpan({ traceId });\n\n  addChildSpanToSpan(parentSpan, childSpan);\n\n  const client = getClient();\n  if (client) {\n    client.emit('spanStart', childSpan);\n    // If it has an endTimestamp, it's already ended\n    if (spanArguments.endTimestamp) {\n      client.emit('spanEnd', childSpan);\n    }\n  }\n\n  return childSpan;\n}\n\nfunction getParentSpan(scope: Scope): SentrySpan | undefined {\n  const span = _getSpanForScope(scope) as SentrySpan | undefined;\n\n  if (!span) {\n    return undefined;\n  }\n\n  const client = getClient();\n  const options: Partial<ClientOptions> = client ? client.getOptions() : {};\n  if (options.parentSpanIsAlwaysRootSpan) {\n    return getRootSpan(span) as SentrySpan;\n  }\n\n  return span;\n}\n\nfunction getActiveSpanWrapper<T>(parentSpan: Span | undefined | null): (callback: () => T) => T {\n  return parentSpan !== undefined\n    ? (callback: () => T) => {\n        return withActiveSpan(parentSpan, callback);\n      }\n    : (callback: () => T) => callback();\n}\n","import { getAsyncContextStrategy } from '../asyncContext';\nimport { getMainCarrier } from '../carrier';\nimport { getClient, getCurrentScope } from '../currentScopes';\nimport { isEnabled } from '../exports';\nimport type { Scope } from '../scope';\nimport { getDynamicSamplingContextFromScope, getDynamicSamplingContextFromSpan } from '../tracing';\nimport type { Span } from '../types-hoist/span';\nimport type { SerializedTraceData } from '../types-hoist/tracing';\nimport { dynamicSamplingContextToSentryBaggageHeader } from '../utils-hoist/baggage';\nimport { logger } from '../utils-hoist/logger';\nimport { generateSentryTraceHeader, TRACEPARENT_REGEXP } from '../utils-hoist/tracing';\nimport { getActiveSpan, spanToTraceHeader } from './spanUtils';\n\n/**\n * Extracts trace propagation data from the current span or from the client's scope (via transaction or propagation\n * context) and serializes it to `sentry-trace` and `baggage` values to strings. These values can be used to propagate\n * a trace via our tracing Http headers or Html `<meta>` tags.\n *\n * This function also applies some validation to the generated sentry-trace and baggage values to ensure that\n * only valid strings are returned.\n *\n * @returns an object with the tracing data values. The object keys are the name of the tracing key to be used as header\n * or meta tag name.\n */\nexport function getTraceData(options: { span?: Span } = {}): SerializedTraceData {\n  const client = getClient();\n  if (!isEnabled() || !client) {\n    return {};\n  }\n\n  const carrier = getMainCarrier();\n  const acs = getAsyncContextStrategy(carrier);\n  if (acs.getTraceData) {\n    return acs.getTraceData(options);\n  }\n\n  const scope = getCurrentScope();\n  const span = options.span || getActiveSpan();\n  const sentryTrace = span ? spanToTraceHeader(span) : scopeToTraceHeader(scope);\n  const dsc = span ? getDynamicSamplingContextFromSpan(span) : getDynamicSamplingContextFromScope(client, scope);\n  const baggage = dynamicSamplingContextToSentryBaggageHeader(dsc);\n\n  const isValidSentryTraceHeader = TRACEPARENT_REGEXP.test(sentryTrace);\n  if (!isValidSentryTraceHeader) {\n    logger.warn('Invalid sentry-trace data. Cannot generate trace data');\n    return {};\n  }\n\n  return {\n    'sentry-trace': sentryTrace,\n    baggage,\n  };\n}\n\n/**\n * Get a sentry-trace header value for the given scope.\n */\nfunction scopeToTraceHeader(scope: Scope): string {\n  const { traceId, sampled, propagationSpanId } = scope.getPropagationContext();\n  return generateSentryTraceHeader(traceId, propagationSpanId, sampled);\n}\n","import { getClient } from './currentScopes';\nimport { SEMANTIC_ATTRIBUTE_SENTRY_OP, SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN } from './semanticAttributes';\nimport { setHttpStatus, SPAN_STATUS_ERROR, startInactiveSpan } from './tracing';\nimport { SentryNonRecordingSpan } from './tracing/sentryNonRecordingSpan';\nimport type { FetchBreadcrumbHint } from './types-hoist/breadcrumb';\nimport type { HandlerDataFetch } from './types-hoist/instrument';\nimport type { Span, SpanAttributes, SpanOrigin } from './types-hoist/span';\nimport { hasSpansEnabled } from './utils/hasSpansEnabled';\nimport { getActiveSpan } from './utils/spanUtils';\nimport { getTraceData } from './utils/traceData';\nimport { SENTRY_BAGGAGE_KEY_PREFIX } from './utils-hoist/baggage';\nimport { isInstanceOf, isRequest } from './utils-hoist/is';\nimport { getSanitizedUrlStringFromUrlObject, isURLObjectRelative, parseStringToURLObject } from './utils-hoist/url';\n\ntype PolymorphicRequestHeaders =\n  | Record<string, string | undefined>\n  | Array<[string, string]>\n  // the below is not precisely the Header type used in Request, but it'll pass duck-typing\n  | {\n      append: (key: string, value: string) => void;\n      get: (key: string) => string | null | undefined;\n    };\n\n/**\n * Create and track fetch request spans for usage in combination with `addFetchInstrumentationHandler`.\n *\n * @returns Span if a span was created, otherwise void.\n */\nexport function instrumentFetchRequest(\n  handlerData: HandlerDataFetch,\n  shouldCreateSpan: (url: string) => boolean,\n  shouldAttachHeaders: (url: string) => boolean,\n  spans: Record<string, Span>,\n  spanOrigin: SpanOrigin = 'auto.http.browser',\n): Span | undefined {\n  if (!handlerData.fetchData) {\n    return undefined;\n  }\n\n  const { method, url } = handlerData.fetchData;\n\n  const shouldCreateSpanResult = hasSpansEnabled() && shouldCreateSpan(url);\n\n  if (handlerData.endTimestamp && shouldCreateSpanResult) {\n    const spanId = handlerData.fetchData.__span;\n    if (!spanId) return;\n\n    const span = spans[spanId];\n    if (span) {\n      endSpan(span, handlerData);\n\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete spans[spanId];\n    }\n    return undefined;\n  }\n\n  const hasParent = !!getActiveSpan();\n\n  const span =\n    shouldCreateSpanResult && hasParent\n      ? startInactiveSpan(getSpanStartOptions(url, method, spanOrigin))\n      : new SentryNonRecordingSpan();\n\n  handlerData.fetchData.__span = span.spanContext().spanId;\n  spans[span.spanContext().spanId] = span;\n\n  if (shouldAttachHeaders(handlerData.fetchData.url)) {\n    const request: string | Request = handlerData.args[0];\n\n    const options: { [key: string]: unknown } = handlerData.args[1] || {};\n\n    const headers = _addTracingHeadersToFetchRequest(\n      request,\n      options,\n      // If performance is disabled (TWP) or there's no active root span (pageload/navigation/interaction),\n      // we do not want to use the span as base for the trace headers,\n      // which means that the headers will be generated from the scope and the sampling decision is deferred\n      hasSpansEnabled() && hasParent ? span : undefined,\n    );\n    if (headers) {\n      // Ensure this is actually set, if no options have been passed previously\n      handlerData.args[1] = options;\n      options.headers = headers;\n    }\n  }\n\n  const client = getClient();\n\n  if (client) {\n    const fetchHint = {\n      input: handlerData.args,\n      response: handlerData.response,\n      startTimestamp: handlerData.startTimestamp,\n      endTimestamp: handlerData.endTimestamp,\n    } satisfies FetchBreadcrumbHint;\n\n    client.emit('beforeOutgoingRequestSpan', span, fetchHint);\n  }\n\n  return span;\n}\n\n/**\n * Adds sentry-trace and baggage headers to the various forms of fetch headers.\n * exported only for testing purposes\n *\n * When we determine if we should add a baggage header, there are 3 cases:\n * 1. No previous baggage header -> add baggage\n * 2. Previous baggage header has no sentry baggage values -> add our baggage\n * 3. Previous baggage header has sentry baggage values -> do nothing (might have been added manually by users)\n */\n// eslint-disable-next-line complexity -- yup it's this complicated :(\nexport function _addTracingHeadersToFetchRequest(\n  request: string | Request,\n  fetchOptionsObj: {\n    headers?:\n      | {\n          [key: string]: string[] | string | undefined;\n        }\n      | PolymorphicRequestHeaders;\n  },\n  span?: Span,\n): PolymorphicRequestHeaders | undefined {\n  const traceHeaders = getTraceData({ span });\n  const sentryTrace = traceHeaders['sentry-trace'];\n  const baggage = traceHeaders.baggage;\n\n  // Nothing to do, when we return undefined here, the original headers will be used\n  if (!sentryTrace) {\n    return undefined;\n  }\n\n  const originalHeaders = fetchOptionsObj.headers || (isRequest(request) ? request.headers : undefined);\n\n  if (!originalHeaders) {\n    return { ...traceHeaders };\n  } else if (isHeaders(originalHeaders)) {\n    const newHeaders = new Headers(originalHeaders);\n\n    // We don't want to override manually added sentry headers\n    if (!newHeaders.get('sentry-trace')) {\n      newHeaders.set('sentry-trace', sentryTrace);\n    }\n\n    if (baggage) {\n      const prevBaggageHeader = newHeaders.get('baggage');\n\n      if (!prevBaggageHeader) {\n        newHeaders.set('baggage', baggage);\n      } else if (!baggageHeaderHasSentryBaggageValues(prevBaggageHeader)) {\n        newHeaders.set('baggage', `${prevBaggageHeader},${baggage}`);\n      }\n    }\n\n    return newHeaders;\n  } else if (Array.isArray(originalHeaders)) {\n    const newHeaders = [...originalHeaders];\n\n    if (!originalHeaders.find(header => header[0] === 'sentry-trace')) {\n      newHeaders.push(['sentry-trace', sentryTrace]);\n    }\n\n    const prevBaggageHeaderWithSentryValues = originalHeaders.find(\n      header => header[0] === 'baggage' && baggageHeaderHasSentryBaggageValues(header[1]),\n    );\n\n    if (baggage && !prevBaggageHeaderWithSentryValues) {\n      // If there are multiple entries with the same key, the browser will merge the values into a single request header.\n      // Its therefore safe to simply push a \"baggage\" entry, even though there might already be another baggage header.\n      newHeaders.push(['baggage', baggage]);\n    }\n\n    return newHeaders as PolymorphicRequestHeaders;\n  } else {\n    const existingSentryTraceHeader = 'sentry-trace' in originalHeaders ? originalHeaders['sentry-trace'] : undefined;\n\n    const existingBaggageHeader = 'baggage' in originalHeaders ? originalHeaders.baggage : undefined;\n    const newBaggageHeaders: string[] = existingBaggageHeader\n      ? Array.isArray(existingBaggageHeader)\n        ? [...existingBaggageHeader]\n        : [existingBaggageHeader]\n      : [];\n\n    const prevBaggageHeaderWithSentryValues =\n      existingBaggageHeader &&\n      (Array.isArray(existingBaggageHeader)\n        ? existingBaggageHeader.find(headerItem => baggageHeaderHasSentryBaggageValues(headerItem))\n        : baggageHeaderHasSentryBaggageValues(existingBaggageHeader));\n\n    if (baggage && !prevBaggageHeaderWithSentryValues) {\n      newBaggageHeaders.push(baggage);\n    }\n\n    return {\n      ...(originalHeaders as Exclude<typeof originalHeaders, Headers>),\n      'sentry-trace': (existingSentryTraceHeader as string | undefined) ?? sentryTrace,\n      baggage: newBaggageHeaders.length > 0 ? newBaggageHeaders.join(',') : undefined,\n    };\n  }\n}\n\nfunction endSpan(span: Span, handlerData: HandlerDataFetch): void {\n  if (handlerData.response) {\n    setHttpStatus(span, handlerData.response.status);\n\n    const contentLength = handlerData.response?.headers && handlerData.response.headers.get('content-length');\n\n    if (contentLength) {\n      const contentLengthNum = parseInt(contentLength);\n      if (contentLengthNum > 0) {\n        span.setAttribute('http.response_content_length', contentLengthNum);\n      }\n    }\n  } else if (handlerData.error) {\n    span.setStatus({ code: SPAN_STATUS_ERROR, message: 'internal_error' });\n  }\n  span.end();\n}\n\nfunction baggageHeaderHasSentryBaggageValues(baggageHeader: string): boolean {\n  return baggageHeader.split(',').some(baggageEntry => baggageEntry.trim().startsWith(SENTRY_BAGGAGE_KEY_PREFIX));\n}\n\nfunction isHeaders(headers: unknown): headers is Headers {\n  return typeof Headers !== 'undefined' && isInstanceOf(headers, Headers);\n}\n\nfunction getSpanStartOptions(\n  url: string,\n  method: string,\n  spanOrigin: SpanOrigin,\n): Parameters<typeof startInactiveSpan>[0] {\n  const parsedUrl = parseStringToURLObject(url);\n  return {\n    name: parsedUrl ? `${method} ${getSanitizedUrlStringFromUrlObject(parsedUrl)}` : method,\n    attributes: getFetchSpanAttributes(url, parsedUrl, method, spanOrigin),\n  };\n}\n\nfunction getFetchSpanAttributes(\n  url: string,\n  parsedUrl: ReturnType<typeof parseStringToURLObject>,\n  method: string,\n  spanOrigin: SpanOrigin,\n): SpanAttributes {\n  const attributes: SpanAttributes = {\n    url,\n    type: 'fetch',\n    'http.method': method,\n    [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: spanOrigin,\n    [SEMANTIC_ATTRIBUTE_SENTRY_OP]: 'http.client',\n  };\n  if (parsedUrl) {\n    if (!isURLObjectRelative(parsedUrl)) {\n      attributes['http.url'] = parsedUrl.href;\n      attributes['server.address'] = parsedUrl.host;\n    }\n    if (parsedUrl.search) {\n      attributes['http.query'] = parsedUrl.search;\n    }\n    if (parsedUrl.hash) {\n      attributes['http.fragment'] = parsedUrl.hash;\n    }\n  }\n  return attributes;\n}\n","import { getClient, getIsolationScope } from './currentScopes';\nimport type { Breadcrumb, BreadcrumbHint } from './types-hoist/breadcrumb';\nimport { consoleSandbox } from './utils-hoist/logger';\nimport { dateTimestampInSeconds } from './utils-hoist/time';\n\n/**\n * Default maximum number of breadcrumbs added to an event. Can be overwritten\n * with {@link Options.maxBreadcrumbs}.\n */\nconst DEFAULT_BREADCRUMBS = 100;\n\n/**\n * Records a new breadcrumb which will be attached to future events.\n *\n * Breadcrumbs will be added to subsequent events to provide more context on\n * user's actions prior to an error or crash.\n */\nexport function addBreadcrumb(breadcrumb: Breadcrumb, hint?: BreadcrumbHint): void {\n  const client = getClient();\n  const isolationScope = getIsolationScope();\n\n  if (!client) return;\n\n  const { beforeBreadcrumb = null, maxBreadcrumbs = DEFAULT_BREADCRUMBS } = client.getOptions();\n\n  if (maxBreadcrumbs <= 0) return;\n\n  const timestamp = dateTimestampInSeconds();\n  const mergedBreadcrumb = { timestamp, ...breadcrumb };\n  const finalBreadcrumb = beforeBreadcrumb\n    ? (consoleSandbox(() => beforeBreadcrumb(mergedBreadcrumb, hint)) as Breadcrumb | null)\n    : mergedBreadcrumb;\n\n  if (finalBreadcrumb === null) return;\n\n  if (client.emit) {\n    client.emit('beforeAddBreadcrumb', finalBreadcrumb, hint);\n  }\n\n  isolationScope.addBreadcrumb(finalBreadcrumb, maxBreadcrumbs);\n}\n","import type { SeverityLevel } from '../types-hoist/severity';\n\n/**\n * Determine a breadcrumb's log level (only `warning` or `error`) based on an HTTP status code.\n */\nexport function getBreadcrumbLogLevelFromHttpStatusCode(statusCode: number | undefined): SeverityLevel | undefined {\n  // NOTE: undefined defaults to 'info' in Sentry\n  if (statusCode === undefined) {\n    return undefined;\n  } else if (statusCode >= 400 && statusCode < 500) {\n    return 'warning';\n  } else if (statusCode >= 500) {\n    return 'error';\n  } else {\n    return undefined;\n  }\n}\n","import { rejectedSyncPromise, resolvedSyncPromise, SyncPromise } from './syncpromise';\n\nexport interface PromiseBuffer<T> {\n  // exposes the internal array so tests can assert on the state of it.\n  // XXX: this really should not be public api.\n  $: Array<PromiseLike<T>>;\n  add(taskProducer: () => PromiseLike<T>): PromiseLike<T>;\n  drain(timeout?: number): PromiseLike<boolean>;\n}\n\nexport const SENTRY_BUFFER_FULL_ERROR = Symbol.for('SentryBufferFullError');\n\n/**\n * Creates an new PromiseBuffer object with the specified limit\n * @param limit max number of promises that can be stored in the buffer\n */\nexport function makePromiseBuffer<T>(limit?: number): PromiseBuffer<T> {\n  const buffer: Array<PromiseLike<T>> = [];\n\n  function isReady(): boolean {\n    return limit === undefined || buffer.length < limit;\n  }\n\n  /**\n   * Remove a promise from the queue.\n   *\n   * @param task Can be any PromiseLike<T>\n   * @returns Removed promise.\n   */\n  function remove(task: PromiseLike<T>): PromiseLike<T | void> {\n    return buffer.splice(buffer.indexOf(task), 1)[0] || Promise.resolve(undefined);\n  }\n\n  /**\n   * Add a promise (representing an in-flight action) to the queue, and set it to remove itself on fulfillment.\n   *\n   * @param taskProducer A function producing any PromiseLike<T>; In previous versions this used to be `task:\n   *        PromiseLike<T>`, but under that model, Promises were instantly created on the call-site and their executor\n   *        functions therefore ran immediately. Thus, even if the buffer was full, the action still happened. By\n   *        requiring the promise to be wrapped in a function, we can defer promise creation until after the buffer\n   *        limit check.\n   * @returns The original promise.\n   */\n  function add(taskProducer: () => PromiseLike<T>): PromiseLike<T> {\n    if (!isReady()) {\n      return rejectedSyncPromise(SENTRY_BUFFER_FULL_ERROR);\n    }\n\n    // start the task and add its promise to the queue\n    const task = taskProducer();\n    if (buffer.indexOf(task) === -1) {\n      buffer.push(task);\n    }\n    void task\n      .then(() => remove(task))\n      // Use `then(null, rejectionHandler)` rather than `catch(rejectionHandler)` so that we can use `PromiseLike`\n      // rather than `Promise`. `PromiseLike` doesn't have a `.catch` method, making its polyfill smaller. (ES5 didn't\n      // have promises, so TS has to polyfill when down-compiling.)\n      .then(null, () =>\n        remove(task).then(null, () => {\n          // We have to add another catch here because `remove()` starts a new promise chain.\n        }),\n      );\n    return task;\n  }\n\n  /**\n   * Wait for all promises in the queue to resolve or for timeout to expire, whichever comes first.\n   *\n   * @param timeout The time, in ms, after which to resolve to `false` if the queue is still non-empty. Passing `0` (or\n   * not passing anything) will make the promise wait as long as it takes for the queue to drain before resolving to\n   * `true`.\n   * @returns A promise which will resolve to `true` if the queue is already empty or drains before the timeout, and\n   * `false` otherwise\n   */\n  function drain(timeout?: number): PromiseLike<boolean> {\n    return new SyncPromise<boolean>((resolve, reject) => {\n      let counter = buffer.length;\n\n      if (!counter) {\n        return resolve(true);\n      }\n\n      // wait for `timeout` ms and then resolve to `false` (if not cancelled first)\n      const capturedSetTimeout = setTimeout(() => {\n        if (timeout && timeout > 0) {\n          resolve(false);\n        }\n      }, timeout);\n\n      // if all promises resolve in time, cancel the timer and resolve to `true`\n      buffer.forEach(item => {\n        void resolvedSyncPromise(item).then(() => {\n          if (!--counter) {\n            clearTimeout(capturedSetTimeout);\n            resolve(true);\n          }\n        }, reject);\n      });\n    });\n  }\n\n  return {\n    $: buffer,\n    add,\n    drain,\n  };\n}\n","import type { DataCategory } from '../types-hoist/datacategory';\nimport type { TransportMakeRequestResponse } from '../types-hoist/transport';\n\n// Intentionally keeping the key broad, as we don't know for sure what rate limit headers get returned from backend\nexport type RateLimits = Record<string, number>;\n\nexport const DEFAULT_RETRY_AFTER = 60 * 1000; // 60 seconds\n\n/**\n * Extracts Retry-After value from the request header or returns default value\n * @param header string representation of 'Retry-After' header\n * @param now current unix timestamp\n *\n */\nexport function parseRetryAfterHeader(header: string, now: number = Date.now()): number {\n  const headerDelay = parseInt(`${header}`, 10);\n  if (!isNaN(headerDelay)) {\n    return headerDelay * 1000;\n  }\n\n  const headerDate = Date.parse(`${header}`);\n  if (!isNaN(headerDate)) {\n    return headerDate - now;\n  }\n\n  return DEFAULT_RETRY_AFTER;\n}\n\n/**\n * Gets the time that the given category is disabled until for rate limiting.\n * In case no category-specific limit is set but a general rate limit across all categories is active,\n * that time is returned.\n *\n * @return the time in ms that the category is disabled until or 0 if there's no active rate limit.\n */\nexport function disabledUntil(limits: RateLimits, dataCategory: DataCategory): number {\n  return limits[dataCategory] || limits.all || 0;\n}\n\n/**\n * Checks if a category is rate limited\n */\nexport function isRateLimited(limits: RateLimits, dataCategory: DataCategory, now: number = Date.now()): boolean {\n  return disabledUntil(limits, dataCategory) > now;\n}\n\n/**\n * Update ratelimits from incoming headers.\n *\n * @return the updated RateLimits object.\n */\nexport function updateRateLimits(\n  limits: RateLimits,\n  { statusCode, headers }: TransportMakeRequestResponse,\n  now: number = Date.now(),\n): RateLimits {\n  const updatedRateLimits: RateLimits = {\n    ...limits,\n  };\n\n  // \"The name is case-insensitive.\"\n  // https://developer.mozilla.org/en-US/docs/Web/API/Headers/get\n  const rateLimitHeader = headers?.['x-sentry-rate-limits'];\n  const retryAfterHeader = headers?.['retry-after'];\n\n  if (rateLimitHeader) {\n    /**\n     * rate limit headers are of the form\n     *     <header>,<header>,..\n     * where each <header> is of the form\n     *     <retry_after>: <categories>: <scope>: <reason_code>: <namespaces>\n     * where\n     *     <retry_after> is a delay in seconds\n     *     <categories> is the event type(s) (error, transaction, etc) being rate limited and is of the form\n     *         <category>;<category>;...\n     *     <scope> is what's being limited (org, project, or key) - ignored by SDK\n     *     <reason_code> is an arbitrary string like \"org_quota\" - ignored by SDK\n     *     <namespaces> Semicolon-separated list of metric namespace identifiers. Defines which namespace(s) will be affected.\n     *         Only present if rate limit applies to the metric_bucket data category.\n     */\n    for (const limit of rateLimitHeader.trim().split(',')) {\n      const [retryAfter, categories, , , namespaces] = limit.split(':', 5) as [string, ...string[]];\n      const headerDelay = parseInt(retryAfter, 10);\n      const delay = (!isNaN(headerDelay) ? headerDelay : 60) * 1000; // 60sec default\n      if (!categories) {\n        updatedRateLimits.all = now + delay;\n      } else {\n        for (const category of categories.split(';')) {\n          if (category === 'metric_bucket') {\n            // namespaces will be present when category === 'metric_bucket'\n            if (!namespaces || namespaces.split(';').includes('custom')) {\n              updatedRateLimits[category] = now + delay;\n            }\n          } else {\n            updatedRateLimits[category] = now + delay;\n          }\n        }\n      }\n    }\n  } else if (retryAfterHeader) {\n    updatedRateLimits.all = now + parseRetryAfterHeader(retryAfterHeader, now);\n  } else if (statusCode === 429) {\n    updatedRateLimits.all = now + 60 * 1000;\n  }\n\n  return updatedRateLimits;\n}\n","import { DEBUG_BUILD } from '../debug-build';\nimport type { EventDropReason } from '../types-hoist/clientreport';\nimport type { Envelope, EnvelopeItem } from '../types-hoist/envelope';\nimport type {\n  InternalBaseTransportOptions,\n  Transport,\n  TransportMakeRequestResponse,\n  TransportRequestExecutor,\n} from '../types-hoist/transport';\nimport {\n  createEnvelope,\n  envelopeItemTypeToDataCategory,\n  forEachEnvelopeItem,\n  serializeEnvelope,\n} from '../utils-hoist/envelope';\nimport { logger } from '../utils-hoist/logger';\nimport { type PromiseBuffer, makePromiseBuffer, SENTRY_BUFFER_FULL_ERROR } from '../utils-hoist/promisebuffer';\nimport { type RateLimits, isRateLimited, updateRateLimits } from '../utils-hoist/ratelimit';\nimport { resolvedSyncPromise } from '../utils-hoist/syncpromise';\n\nexport const DEFAULT_TRANSPORT_BUFFER_SIZE = 64;\n\n/**\n * Creates an instance of a Sentry `Transport`\n *\n * @param options\n * @param makeRequest\n */\nexport function createTransport(\n  options: InternalBaseTransportOptions,\n  makeRequest: TransportRequestExecutor,\n  buffer: PromiseBuffer<TransportMakeRequestResponse> = makePromiseBuffer(\n    options.bufferSize || DEFAULT_TRANSPORT_BUFFER_SIZE,\n  ),\n): Transport {\n  let rateLimits: RateLimits = {};\n  const flush = (timeout?: number): PromiseLike<boolean> => buffer.drain(timeout);\n\n  function send(envelope: Envelope): PromiseLike<TransportMakeRequestResponse> {\n    const filteredEnvelopeItems: EnvelopeItem[] = [];\n\n    // Drop rate limited items from envelope\n    forEachEnvelopeItem(envelope, (item, type) => {\n      const dataCategory = envelopeItemTypeToDataCategory(type);\n      if (isRateLimited(rateLimits, dataCategory)) {\n        options.recordDroppedEvent('ratelimit_backoff', dataCategory);\n      } else {\n        filteredEnvelopeItems.push(item);\n      }\n    });\n\n    // Skip sending if envelope is empty after filtering out rate limited events\n    if (filteredEnvelopeItems.length === 0) {\n      return resolvedSyncPromise({});\n    }\n\n    const filteredEnvelope: Envelope = createEnvelope(envelope[0], filteredEnvelopeItems as (typeof envelope)[1]);\n\n    // Creates client report for each item in an envelope\n    const recordEnvelopeLoss = (reason: EventDropReason): void => {\n      forEachEnvelopeItem(filteredEnvelope, (item, type) => {\n        options.recordDroppedEvent(reason, envelopeItemTypeToDataCategory(type));\n      });\n    };\n\n    const requestTask = (): PromiseLike<TransportMakeRequestResponse> =>\n      makeRequest({ body: serializeEnvelope(filteredEnvelope) }).then(\n        response => {\n          // We don't want to throw on NOK responses, but we want to at least log them\n          if (response.statusCode !== undefined && (response.statusCode < 200 || response.statusCode >= 300)) {\n            DEBUG_BUILD && logger.warn(`Sentry responded with status code ${response.statusCode} to sent event.`);\n          }\n\n          rateLimits = updateRateLimits(rateLimits, response);\n          return response;\n        },\n        error => {\n          recordEnvelopeLoss('network_error');\n          DEBUG_BUILD && logger.error('Encountered error running transport request:', error);\n          throw error;\n        },\n      );\n\n    return buffer.add(requestTask).then(\n      result => result,\n      error => {\n        if (error === SENTRY_BUFFER_FULL_ERROR) {\n          DEBUG_BUILD && logger.error('Skipped sending event because buffer is full.');\n          recordEnvelopeLoss('queue_overflow');\n          return resolvedSyncPromise({});\n        } else {\n          throw error;\n        }\n      },\n    );\n  }\n\n  return {\n    send,\n    flush,\n  };\n}\n","// This code was originally forked from https://github.com/felixge/node-stack-trace\n// Since then it has been highly modified to fit our needs.\n\n// Copyright (c) 2011 Felix Geisendörfer (felix@debuggable.com)//\n//\n//  Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the \"Software\"), to deal\n//  in the Software without restriction, including without limitation the rights\n//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n//  copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions://\n//\n//  The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.//\n//\n//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport type { StackLineParser, StackLineParserFn } from '../types-hoist/stacktrace';\nimport { UNKNOWN_FUNCTION } from './stacktrace';\n\nexport type GetModuleFn = (filename: string | undefined) => string | undefined;\n\n/**\n * Does this filename look like it's part of the app code?\n */\nexport function filenameIsInApp(filename: string, isNative: boolean = false): boolean {\n  const isInternal =\n    isNative ||\n    (filename &&\n      // It's not internal if it's an absolute linux path\n      !filename.startsWith('/') &&\n      // It's not internal if it's an absolute windows path\n      !filename.match(/^[A-Z]:/) &&\n      // It's not internal if the path is starting with a dot\n      !filename.startsWith('.') &&\n      // It's not internal if the frame has a protocol. In node, this is usually the case if the file got pre-processed with a bundler like webpack\n      !filename.match(/^[a-zA-Z]([a-zA-Z0-9.\\-+])*:\\/\\//)); // Schema from: https://stackoverflow.com/a/3641782\n\n  // in_app is all that's not an internal Node function or a module within node_modules\n  // note that isNative appears to return true even for node core libraries\n  // see https://github.com/getsentry/raven-node/issues/176\n\n  return !isInternal && filename !== undefined && !filename.includes('node_modules/');\n}\n\n/** Node Stack line parser */\nexport function node(getModule?: GetModuleFn): StackLineParserFn {\n  const FILENAME_MATCH = /^\\s*[-]{4,}$/;\n  const FULL_MATCH = /at (?:async )?(?:(.+?)\\s+\\()?(?:(.+):(\\d+):(\\d+)?|([^)]+))\\)?/;\n\n  // eslint-disable-next-line complexity\n  return (line: string) => {\n    const lineMatch = line.match(FULL_MATCH);\n\n    if (lineMatch) {\n      let object: string | undefined;\n      let method: string | undefined;\n      let functionName: string | undefined;\n      let typeName: string | undefined;\n      let methodName: string | undefined;\n\n      if (lineMatch[1]) {\n        functionName = lineMatch[1];\n\n        let methodStart = functionName.lastIndexOf('.');\n        if (functionName[methodStart - 1] === '.') {\n          methodStart--;\n        }\n\n        if (methodStart > 0) {\n          object = functionName.slice(0, methodStart);\n          method = functionName.slice(methodStart + 1);\n          const objectEnd = object.indexOf('.Module');\n          if (objectEnd > 0) {\n            functionName = functionName.slice(objectEnd + 1);\n            object = object.slice(0, objectEnd);\n          }\n        }\n        typeName = undefined;\n      }\n\n      if (method) {\n        typeName = object;\n        methodName = method;\n      }\n\n      if (method === '<anonymous>') {\n        methodName = undefined;\n        functionName = undefined;\n      }\n\n      if (functionName === undefined) {\n        methodName = methodName || UNKNOWN_FUNCTION;\n        functionName = typeName ? `${typeName}.${methodName}` : methodName;\n      }\n\n      let filename = lineMatch[2]?.startsWith('file://') ? lineMatch[2].slice(7) : lineMatch[2];\n      const isNative = lineMatch[5] === 'native';\n\n      // If it's a Windows path, trim the leading slash so that `/C:/foo` becomes `C:/foo`\n      if (filename?.match(/\\/[A-Z]:/)) {\n        filename = filename.slice(1);\n      }\n\n      if (!filename && lineMatch[5] && !isNative) {\n        filename = lineMatch[5];\n      }\n\n      return {\n        filename: filename ? decodeURI(filename) : undefined,\n        module: getModule ? getModule(filename) : undefined,\n        function: functionName,\n        lineno: _parseIntOrUndefined(lineMatch[3]),\n        colno: _parseIntOrUndefined(lineMatch[4]),\n        in_app: filenameIsInApp(filename || '', isNative),\n      };\n    }\n\n    if (line.match(FILENAME_MATCH)) {\n      return {\n        filename: line,\n      };\n    }\n\n    return undefined;\n  };\n}\n\n/**\n * Node.js stack line parser\n *\n * This is in @sentry/core so it can be used from the Electron SDK in the browser for when `nodeIntegration == true`.\n * This allows it to be used without referencing or importing any node specific code which causes bundlers to complain\n */\nexport function nodeStackLineParser(getModule?: GetModuleFn): StackLineParser {\n  return [90, node(getModule)];\n}\n\nfunction _parseIntOrUndefined(input: string | undefined): number | undefined {\n  return parseInt(input || '', 10) || undefined;\n}\n","import { DEBUG_BUILD } from '../debug-build';\nimport { defineIntegration } from '../integration';\nimport type { Event } from '../types-hoist/event';\nimport type { Exception } from '../types-hoist/exception';\nimport type { IntegrationFn } from '../types-hoist/integration';\nimport type { StackFrame } from '../types-hoist/stackframe';\nimport { logger } from '../utils-hoist/logger';\nimport { getFramesFromEvent } from '../utils-hoist/stacktrace';\n\nconst INTEGRATION_NAME = 'Dedupe';\n\nconst _dedupeIntegration = (() => {\n  let previousEvent: Event | undefined;\n\n  return {\n    name: INTEGRATION_NAME,\n    processEvent(currentEvent) {\n      // We want to ignore any non-error type events, e.g. transactions or replays\n      // These should never be deduped, and also not be compared against as _previousEvent.\n      if (currentEvent.type) {\n        return currentEvent;\n      }\n\n      // Juuust in case something goes wrong\n      try {\n        if (_shouldDropEvent(currentEvent, previousEvent)) {\n          DEBUG_BUILD && logger.warn('Event dropped due to being a duplicate of previously captured event.');\n          return null;\n        }\n      } catch (_oO) {} // eslint-disable-line no-empty\n\n      return (previousEvent = currentEvent);\n    },\n  };\n}) satisfies IntegrationFn;\n\n/**\n * Deduplication filter.\n */\nexport const dedupeIntegration = defineIntegration(_dedupeIntegration);\n\n/** only exported for tests. */\nexport function _shouldDropEvent(currentEvent: Event, previousEvent?: Event): boolean {\n  if (!previousEvent) {\n    return false;\n  }\n\n  if (_isSameMessageEvent(currentEvent, previousEvent)) {\n    return true;\n  }\n\n  if (_isSameExceptionEvent(currentEvent, previousEvent)) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction _isSameMessageEvent(currentEvent: Event, previousEvent: Event): boolean {\n  const currentMessage = currentEvent.message;\n  const previousMessage = previousEvent.message;\n\n  // If neither event has a message property, they were both exceptions, so bail out\n  if (!currentMessage && !previousMessage) {\n    return false;\n  }\n\n  // If only one event has a stacktrace, but not the other one, they are not the same\n  if ((currentMessage && !previousMessage) || (!currentMessage && previousMessage)) {\n    return false;\n  }\n\n  if (currentMessage !== previousMessage) {\n    return false;\n  }\n\n  if (!_isSameFingerprint(currentEvent, previousEvent)) {\n    return false;\n  }\n\n  if (!_isSameStacktrace(currentEvent, previousEvent)) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction _isSameExceptionEvent(currentEvent: Event, previousEvent: Event): boolean {\n  const previousException = _getExceptionFromEvent(previousEvent);\n  const currentException = _getExceptionFromEvent(currentEvent);\n\n  if (!previousException || !currentException) {\n    return false;\n  }\n\n  if (previousException.type !== currentException.type || previousException.value !== currentException.value) {\n    return false;\n  }\n\n  if (!_isSameFingerprint(currentEvent, previousEvent)) {\n    return false;\n  }\n\n  if (!_isSameStacktrace(currentEvent, previousEvent)) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction _isSameStacktrace(currentEvent: Event, previousEvent: Event): boolean {\n  let currentFrames = getFramesFromEvent(currentEvent);\n  let previousFrames = getFramesFromEvent(previousEvent);\n\n  // If neither event has a stacktrace, they are assumed to be the same\n  if (!currentFrames && !previousFrames) {\n    return true;\n  }\n\n  // If only one event has a stacktrace, but not the other one, they are not the same\n  if ((currentFrames && !previousFrames) || (!currentFrames && previousFrames)) {\n    return false;\n  }\n\n  currentFrames = currentFrames as StackFrame[];\n  previousFrames = previousFrames as StackFrame[];\n\n  // If number of frames differ, they are not the same\n  if (previousFrames.length !== currentFrames.length) {\n    return false;\n  }\n\n  // Otherwise, compare the two\n  for (let i = 0; i < previousFrames.length; i++) {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const frameA = previousFrames[i]!;\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const frameB = currentFrames[i]!;\n\n    if (\n      frameA.filename !== frameB.filename ||\n      frameA.lineno !== frameB.lineno ||\n      frameA.colno !== frameB.colno ||\n      frameA.function !== frameB.function\n    ) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction _isSameFingerprint(currentEvent: Event, previousEvent: Event): boolean {\n  let currentFingerprint = currentEvent.fingerprint;\n  let previousFingerprint = previousEvent.fingerprint;\n\n  // If neither event has a fingerprint, they are assumed to be the same\n  if (!currentFingerprint && !previousFingerprint) {\n    return true;\n  }\n\n  // If only one event has a fingerprint, but not the other one, they are not the same\n  if ((currentFingerprint && !previousFingerprint) || (!currentFingerprint && previousFingerprint)) {\n    return false;\n  }\n\n  currentFingerprint = currentFingerprint as string[];\n  previousFingerprint = previousFingerprint as string[];\n\n  // Otherwise, compare the two\n  try {\n    return !!(currentFingerprint.join('') === previousFingerprint.join(''));\n  } catch (_oO) {\n    return false;\n  }\n}\n\nfunction _getExceptionFromEvent(event: Event): Exception | undefined {\n  return event.exception?.values && event.exception.values[0];\n}\n","import { DEBUG_BUILD } from '../debug-build';\nimport { defineIntegration } from '../integration';\nimport type { Event } from '../types-hoist/event';\nimport type { IntegrationFn } from '../types-hoist/integration';\nimport type { StackFrame } from '../types-hoist/stackframe';\nimport { getPossibleEventMessages } from '../utils/eventUtils';\nimport { logger } from '../utils-hoist/logger';\nimport { getEventDescription } from '../utils-hoist/misc';\nimport { stringMatchesSomePattern } from '../utils-hoist/string';\n\n// \"Script error.\" is hard coded into browsers for errors that it can't read.\n// this is the result of a script being pulled in from an external domain and CORS.\nconst DEFAULT_IGNORE_ERRORS = [\n  /^Script error\\.?$/,\n  /^Javascript error: Script error\\.? on line 0$/,\n  /^ResizeObserver loop completed with undelivered notifications.$/, // The browser logs this when a ResizeObserver handler takes a bit longer. Usually this is not an actual issue though. It indicates slowness.\n  /^Cannot redefine property: googletag$/, // This is thrown when google tag manager is used in combination with an ad blocker\n  /^Can't find variable: gmo$/, // Error from Google Search App https://issuetracker.google.com/issues/396043331\n  /^undefined is not an object \\(evaluating 'a\\.[A-Z]'\\)$/, // Random error that happens but not actionable or noticeable to end-users.\n  'can\\'t redefine non-configurable property \"solana\"', // Probably a browser extension or custom browser (Brave) throwing this error\n  \"vv().getRestrictions is not a function. (In 'vv().getRestrictions(1,a)', 'vv().getRestrictions' is undefined)\", // Error thrown by GTM, seemingly not affecting end-users\n  \"Can't find variable: _AutofillCallbackHandler\", // Unactionable error in instagram webview https://developers.facebook.com/community/threads/320013549791141/\n  /^Non-Error promise rejection captured with value: Object Not Found Matching Id:\\d+, MethodName:simulateEvent, ParamCount:\\d+$/, // unactionable error from CEFSharp, a .NET library that embeds chromium in .NET apps\n  /^Java exception was raised during method invocation$/, // error from Facebook Mobile browser (https://github.com/getsentry/sentry-javascript/issues/15065)\n];\n\n/** Options for the EventFilters integration */\nexport interface EventFiltersOptions {\n  allowUrls: Array<string | RegExp>;\n  denyUrls: Array<string | RegExp>;\n  ignoreErrors: Array<string | RegExp>;\n  ignoreTransactions: Array<string | RegExp>;\n  ignoreInternal: boolean;\n  disableErrorDefaults: boolean;\n}\n\nconst INTEGRATION_NAME = 'EventFilters';\n\n/**\n * An integration that filters out events (errors and transactions) based on:\n *\n * - (Errors) A curated list of known low-value or irrelevant errors (see {@link DEFAULT_IGNORE_ERRORS})\n * - (Errors) A list of error messages or urls/filenames passed in via\n *   - Top level Sentry.init options (`ignoreErrors`, `denyUrls`, `allowUrls`)\n *   - The same options passed to the integration directly via @param options\n * - (Transactions/Spans) A list of root span (transaction) names passed in via\n *   - Top level Sentry.init option (`ignoreTransactions`)\n *   - The same option passed to the integration directly via @param options\n *\n * Events filtered by this integration will not be sent to Sentry.\n */\nexport const eventFiltersIntegration = defineIntegration((options: Partial<EventFiltersOptions> = {}) => {\n  let mergedOptions: Partial<EventFiltersOptions> | undefined;\n  return {\n    name: INTEGRATION_NAME,\n    setup(client) {\n      const clientOptions = client.getOptions();\n      mergedOptions = _mergeOptions(options, clientOptions);\n    },\n    processEvent(event, _hint, client) {\n      if (!mergedOptions) {\n        const clientOptions = client.getOptions();\n        mergedOptions = _mergeOptions(options, clientOptions);\n      }\n      return _shouldDropEvent(event, mergedOptions) ? null : event;\n    },\n  };\n});\n\n/**\n * An integration that filters out events (errors and transactions) based on:\n *\n * - (Errors) A curated list of known low-value or irrelevant errors (see {@link DEFAULT_IGNORE_ERRORS})\n * - (Errors) A list of error messages or urls/filenames passed in via\n *   - Top level Sentry.init options (`ignoreErrors`, `denyUrls`, `allowUrls`)\n *   - The same options passed to the integration directly via @param options\n * - (Transactions/Spans) A list of root span (transaction) names passed in via\n *   - Top level Sentry.init option (`ignoreTransactions`)\n *   - The same option passed to the integration directly via @param options\n *\n * Events filtered by this integration will not be sent to Sentry.\n *\n * @deprecated this integration was renamed and will be removed in a future major version.\n * Use `eventFiltersIntegration` instead.\n */\nexport const inboundFiltersIntegration = defineIntegration(((options: Partial<EventFiltersOptions> = {}) => {\n  return {\n    ...eventFiltersIntegration(options),\n    name: 'InboundFilters',\n  };\n}) satisfies IntegrationFn);\n\nfunction _mergeOptions(\n  internalOptions: Partial<EventFiltersOptions> = {},\n  clientOptions: Partial<EventFiltersOptions> = {},\n): Partial<EventFiltersOptions> {\n  return {\n    allowUrls: [...(internalOptions.allowUrls || []), ...(clientOptions.allowUrls || [])],\n    denyUrls: [...(internalOptions.denyUrls || []), ...(clientOptions.denyUrls || [])],\n    ignoreErrors: [\n      ...(internalOptions.ignoreErrors || []),\n      ...(clientOptions.ignoreErrors || []),\n      ...(internalOptions.disableErrorDefaults ? [] : DEFAULT_IGNORE_ERRORS),\n    ],\n    ignoreTransactions: [...(internalOptions.ignoreTransactions || []), ...(clientOptions.ignoreTransactions || [])],\n  };\n}\n\nfunction _shouldDropEvent(event: Event, options: Partial<EventFiltersOptions>): boolean {\n  if (!event.type) {\n    // Filter errors\n    if (_isIgnoredError(event, options.ignoreErrors)) {\n      DEBUG_BUILD &&\n        logger.warn(\n          `Event dropped due to being matched by \\`ignoreErrors\\` option.\\nEvent: ${getEventDescription(event)}`,\n        );\n      return true;\n    }\n    if (_isUselessError(event)) {\n      DEBUG_BUILD &&\n        logger.warn(\n          `Event dropped due to not having an error message, error type or stacktrace.\\nEvent: ${getEventDescription(\n            event,\n          )}`,\n        );\n      return true;\n    }\n    if (_isDeniedUrl(event, options.denyUrls)) {\n      DEBUG_BUILD &&\n        logger.warn(\n          `Event dropped due to being matched by \\`denyUrls\\` option.\\nEvent: ${getEventDescription(\n            event,\n          )}.\\nUrl: ${_getEventFilterUrl(event)}`,\n        );\n      return true;\n    }\n    if (!_isAllowedUrl(event, options.allowUrls)) {\n      DEBUG_BUILD &&\n        logger.warn(\n          `Event dropped due to not being matched by \\`allowUrls\\` option.\\nEvent: ${getEventDescription(\n            event,\n          )}.\\nUrl: ${_getEventFilterUrl(event)}`,\n        );\n      return true;\n    }\n  } else if (event.type === 'transaction') {\n    // Filter transactions\n\n    if (_isIgnoredTransaction(event, options.ignoreTransactions)) {\n      DEBUG_BUILD &&\n        logger.warn(\n          `Event dropped due to being matched by \\`ignoreTransactions\\` option.\\nEvent: ${getEventDescription(event)}`,\n        );\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction _isIgnoredError(event: Event, ignoreErrors?: Array<string | RegExp>): boolean {\n  if (!ignoreErrors?.length) {\n    return false;\n  }\n\n  return getPossibleEventMessages(event).some(message => stringMatchesSomePattern(message, ignoreErrors));\n}\n\nfunction _isIgnoredTransaction(event: Event, ignoreTransactions?: Array<string | RegExp>): boolean {\n  if (!ignoreTransactions?.length) {\n    return false;\n  }\n\n  const name = event.transaction;\n  return name ? stringMatchesSomePattern(name, ignoreTransactions) : false;\n}\n\nfunction _isDeniedUrl(event: Event, denyUrls?: Array<string | RegExp>): boolean {\n  if (!denyUrls?.length) {\n    return false;\n  }\n  const url = _getEventFilterUrl(event);\n  return !url ? false : stringMatchesSomePattern(url, denyUrls);\n}\n\nfunction _isAllowedUrl(event: Event, allowUrls?: Array<string | RegExp>): boolean {\n  if (!allowUrls?.length) {\n    return true;\n  }\n  const url = _getEventFilterUrl(event);\n  return !url ? true : stringMatchesSomePattern(url, allowUrls);\n}\n\nfunction _getLastValidUrl(frames: StackFrame[] = []): string | null {\n  for (let i = frames.length - 1; i >= 0; i--) {\n    const frame = frames[i];\n\n    if (frame && frame.filename !== '<anonymous>' && frame.filename !== '[native code]') {\n      return frame.filename || null;\n    }\n  }\n\n  return null;\n}\n\nfunction _getEventFilterUrl(event: Event): string | null {\n  try {\n    // If there are linked exceptions or exception aggregates we only want to match against the top frame of the \"root\" (the main exception)\n    // The root always comes last in linked exceptions\n    const rootException = [...(event.exception?.values ?? [])]\n      .reverse()\n      .find(value => value.mechanism?.parent_id === undefined && value.stacktrace?.frames?.length);\n    const frames = rootException?.stacktrace?.frames;\n    return frames ? _getLastValidUrl(frames) : null;\n  } catch (oO) {\n    DEBUG_BUILD && logger.error(`Cannot extract url for event ${getEventDescription(event)}`);\n    return null;\n  }\n}\n\nfunction _isUselessError(event: Event): boolean {\n  // We only want to consider events for dropping that actually have recorded exception values.\n  if (!event.exception?.values?.length) {\n    return false;\n  }\n\n  return (\n    // No top-level message\n    !event.message &&\n    // There are no exception values that have a stacktrace, a non-generic-Error type or value\n    !event.exception.values.some(value => value.stacktrace || (value.type && value.type !== 'Error') || value.value)\n  );\n}\n","import type { Client } from '../client';\nimport { getClient } from '../currentScopes';\nimport { defineIntegration } from '../integration';\nimport type { IntegrationFn } from '../types-hoist/integration';\nimport type { WrappedFunction } from '../types-hoist/wrappedfunction';\nimport { getOriginalFunction } from '../utils-hoist/object';\n\nlet originalFunctionToString: () => void;\n\nconst INTEGRATION_NAME = 'FunctionToString';\n\nconst SETUP_CLIENTS = new WeakMap<Client, boolean>();\n\nconst _functionToStringIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      // eslint-disable-next-line @typescript-eslint/unbound-method\n      originalFunctionToString = Function.prototype.toString;\n\n      // intrinsics (like Function.prototype) might be immutable in some environments\n      // e.g. Node with --frozen-intrinsics, XS (an embedded JavaScript engine) or SES (a JavaScript proposal)\n      try {\n        Function.prototype.toString = function (this: WrappedFunction, ...args: unknown[]): string {\n          const originalFunction = getOriginalFunction(this);\n          const context =\n            SETUP_CLIENTS.has(getClient() as Client) && originalFunction !== undefined ? originalFunction : this;\n          return originalFunctionToString.apply(context, args);\n        };\n      } catch {\n        // ignore errors here, just don't patch this\n      }\n    },\n    setup(client) {\n      SETUP_CLIENTS.set(client, true);\n    },\n  };\n}) satisfies IntegrationFn;\n\n/**\n * Patch toString calls to return proper name for wrapped functions.\n *\n * ```js\n * Sentry.init({\n *   integrations: [\n *     functionToStringIntegration(),\n *   ],\n * });\n * ```\n */\nexport const functionToStringIntegration = defineIntegration(_functionToStringIntegration);\n","import type { ExtendedError } from '../types-hoist/error';\nimport type { Event, EventHint } from '../types-hoist/event';\nimport type { Exception } from '../types-hoist/exception';\nimport type { StackParser } from '../types-hoist/stacktrace';\nimport { isInstanceOf } from './is';\n\n/**\n * Creates exceptions inside `event.exception.values` for errors that are nested on properties based on the `key` parameter.\n */\nexport function applyAggregateErrorsToEvent(\n  exceptionFromErrorImplementation: (stackParser: StackParser, ex: Error) => Exception,\n  parser: StackParser,\n  key: string,\n  limit: number,\n  event: Event,\n  hint?: EventHint,\n): void {\n  if (!event.exception?.values || !hint || !isInstanceOf(hint.originalException, Error)) {\n    return;\n  }\n\n  // Generally speaking the last item in `event.exception.values` is the exception originating from the original Error\n  const originalException: Exception | undefined =\n    event.exception.values.length > 0 ? event.exception.values[event.exception.values.length - 1] : undefined;\n\n  // We only create exception grouping if there is an exception in the event.\n  if (originalException) {\n    event.exception.values = aggregateExceptionsFromError(\n      exceptionFromErrorImplementation,\n      parser,\n      limit,\n      hint.originalException as ExtendedError,\n      key,\n      event.exception.values,\n      originalException,\n      0,\n    );\n  }\n}\n\nfunction aggregateExceptionsFromError(\n  exceptionFromErrorImplementation: (stackParser: StackParser, ex: Error) => Exception,\n  parser: StackParser,\n  limit: number,\n  error: ExtendedError,\n  key: string,\n  prevExceptions: Exception[],\n  exception: Exception,\n  exceptionId: number,\n): Exception[] {\n  if (prevExceptions.length >= limit + 1) {\n    return prevExceptions;\n  }\n\n  let newExceptions = [...prevExceptions];\n\n  // Recursively call this function in order to walk down a chain of errors\n  if (isInstanceOf(error[key], Error)) {\n    applyExceptionGroupFieldsForParentException(exception, exceptionId);\n    const newException = exceptionFromErrorImplementation(parser, error[key]);\n    const newExceptionId = newExceptions.length;\n    applyExceptionGroupFieldsForChildException(newException, key, newExceptionId, exceptionId);\n    newExceptions = aggregateExceptionsFromError(\n      exceptionFromErrorImplementation,\n      parser,\n      limit,\n      error[key],\n      key,\n      [newException, ...newExceptions],\n      newException,\n      newExceptionId,\n    );\n  }\n\n  // This will create exception grouping for AggregateErrors\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AggregateError\n  if (Array.isArray(error.errors)) {\n    error.errors.forEach((childError, i) => {\n      if (isInstanceOf(childError, Error)) {\n        applyExceptionGroupFieldsForParentException(exception, exceptionId);\n        const newException = exceptionFromErrorImplementation(parser, childError);\n        const newExceptionId = newExceptions.length;\n        applyExceptionGroupFieldsForChildException(newException, `errors[${i}]`, newExceptionId, exceptionId);\n        newExceptions = aggregateExceptionsFromError(\n          exceptionFromErrorImplementation,\n          parser,\n          limit,\n          childError,\n          key,\n          [newException, ...newExceptions],\n          newException,\n          newExceptionId,\n        );\n      }\n    });\n  }\n\n  return newExceptions;\n}\n\nfunction applyExceptionGroupFieldsForParentException(exception: Exception, exceptionId: number): void {\n  // Don't know if this default makes sense. The protocol requires us to set these values so we pick *some* default.\n  exception.mechanism = exception.mechanism || { type: 'generic', handled: true };\n\n  exception.mechanism = {\n    ...exception.mechanism,\n    ...(exception.type === 'AggregateError' && { is_exception_group: true }),\n    exception_id: exceptionId,\n  };\n}\n\nfunction applyExceptionGroupFieldsForChildException(\n  exception: Exception,\n  source: string,\n  exceptionId: number,\n  parentId: number | undefined,\n): void {\n  // Don't know if this default makes sense. The protocol requires us to set these values so we pick *some* default.\n  exception.mechanism = exception.mechanism || { type: 'generic', handled: true };\n\n  exception.mechanism = {\n    ...exception.mechanism,\n    type: 'chained',\n    source,\n    exception_id: exceptionId,\n    parent_id: parentId,\n  };\n}\n","import { defineIntegration } from '../integration';\nimport type { IntegrationFn } from '../types-hoist/integration';\nimport { applyAggregateErrorsToEvent } from '../utils-hoist/aggregate-errors';\nimport { exceptionFromError } from '../utils-hoist/eventbuilder';\n\ninterface LinkedErrorsOptions {\n  key?: string;\n  limit?: number;\n}\n\nconst DEFAULT_KEY = 'cause';\nconst DEFAULT_LIMIT = 5;\n\nconst INTEGRATION_NAME = 'LinkedErrors';\n\nconst _linkedErrorsIntegration = ((options: LinkedErrorsOptions = {}) => {\n  const limit = options.limit || DEFAULT_LIMIT;\n  const key = options.key || DEFAULT_KEY;\n\n  return {\n    name: INTEGRATION_NAME,\n    preprocessEvent(event, hint, client) {\n      const options = client.getOptions();\n\n      applyAggregateErrorsToEvent(exceptionFromError, options.stackParser, key, limit, event, hint);\n    },\n  };\n}) satisfies IntegrationFn;\n\nexport const linkedErrorsIntegration = defineIntegration(_linkedErrorsIntegration);\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/ban-types */\nimport type { ConsoleLevel, HandlerDataConsole } from '../../types-hoist/instrument';\nimport { CONSOLE_LEVELS, originalConsoleMethods } from '../logger';\nimport { fill } from '../object';\nimport { GLOBAL_OBJ } from '../worldwide';\nimport { addHandler, maybeInstrument, triggerHandlers } from './handlers';\n\n/**\n * Add an instrumentation handler for when a console.xxx method is called.\n *\n * Use at your own risk, this might break without changelog notice, only used internally.\n * @hidden\n */\nexport function addConsoleInstrumentationHandler(handler: (data: HandlerDataConsole) => void): void {\n  const type = 'console';\n  addHandler(type, handler);\n  maybeInstrument(type, instrumentConsole);\n}\n\nfunction instrumentConsole(): void {\n  if (!('console' in GLOBAL_OBJ)) {\n    return;\n  }\n\n  CONSOLE_LEVELS.forEach(function (level: ConsoleLevel): void {\n    if (!(level in GLOBAL_OBJ.console)) {\n      return;\n    }\n\n    fill(GLOBAL_OBJ.console, level, function (originalConsoleMethod: () => any): Function {\n      originalConsoleMethods[level] = originalConsoleMethod;\n\n      return function (...args: any[]): void {\n        const handlerData: HandlerDataConsole = { args, level };\n        triggerHandlers('console', handlerData);\n\n        const log = originalConsoleMethods[level];\n        log?.apply(GLOBAL_OBJ.console, args);\n      };\n    });\n  });\n}\n","import type { SeverityLevel } from '../types-hoist/severity';\n\n/**\n * Converts a string-based level into a `SeverityLevel`, normalizing it along the way.\n *\n * @param level String representation of desired `SeverityLevel`.\n * @returns The `SeverityLevel` corresponding to the given string, or 'log' if the string isn't a valid level.\n */\nexport function severityLevelFromString(level: SeverityLevel | string): SeverityLevel {\n  return (\n    level === 'warn' ? 'warning' : ['fatal', 'error', 'warning', 'log', 'info', 'debug'].includes(level) ? level : 'log'\n  ) as SeverityLevel;\n}\n","import { addBreadcrumb } from '../breadcrumbs';\nimport { getClient } from '../currentScopes';\nimport { defineIntegration } from '../integration';\nimport type { ConsoleLevel } from '../types-hoist/instrument';\nimport { addConsoleInstrumentationHandler } from '../utils-hoist/instrument/console';\nimport { CONSOLE_LEVELS } from '../utils-hoist/logger';\nimport { severityLevelFromString } from '../utils-hoist/severity';\nimport { safeJoin } from '../utils-hoist/string';\nimport { GLOBAL_OBJ } from '../utils-hoist/worldwide';\n\ninterface ConsoleIntegrationOptions {\n  levels: ConsoleLevel[];\n}\n\ntype GlobalObjectWithUtil = typeof GLOBAL_OBJ & {\n  util: {\n    format: (...args: unknown[]) => string;\n  };\n};\n\nconst INTEGRATION_NAME = 'Console';\n\n/**\n * Captures calls to the `console` API as breadcrumbs in Sentry.\n *\n * By default the integration instruments `console.debug`, `console.info`, `console.warn`, `console.error`,\n * `console.log`, `console.trace`, and `console.assert`. You can use the `levels` option to customize which\n * levels are captured.\n *\n * @example\n *\n * ```js\n * Sentry.init({\n *   integrations: [Sentry.consoleIntegration({ levels: ['error', 'warn'] })],\n * });\n * ```\n */\nexport const consoleIntegration = defineIntegration((options: Partial<ConsoleIntegrationOptions> = {}) => {\n  const levels = new Set(options.levels || CONSOLE_LEVELS);\n\n  return {\n    name: INTEGRATION_NAME,\n    setup(client) {\n      addConsoleInstrumentationHandler(({ args, level }) => {\n        if (getClient() !== client || !levels.has(level)) {\n          return;\n        }\n\n        addConsoleBreadcrumb(level, args);\n      });\n    },\n  };\n});\n\n/**\n * Capture a console breadcrumb.\n *\n * Exported just for tests.\n */\nexport function addConsoleBreadcrumb(level: ConsoleLevel, args: unknown[]): void {\n  const breadcrumb = {\n    category: 'console',\n    data: {\n      arguments: args,\n      logger: 'console',\n    },\n    level: severityLevelFromString(level),\n    message: formatConsoleArgs(args),\n  };\n\n  if (level === 'assert') {\n    if (args[0] === false) {\n      const assertionArgs = args.slice(1);\n      breadcrumb.message =\n        assertionArgs.length > 0 ? `Assertion failed: ${formatConsoleArgs(assertionArgs)}` : 'Assertion failed';\n      breadcrumb.data.arguments = assertionArgs;\n    } else {\n      // Don't capture a breadcrumb for passed assertions\n      return;\n    }\n  }\n\n  addBreadcrumb(breadcrumb, {\n    input: args,\n    level,\n  });\n}\n\nfunction formatConsoleArgs(values: unknown[]): string {\n  return 'util' in GLOBAL_OBJ && typeof (GLOBAL_OBJ as GlobalObjectWithUtil).util.format === 'function'\n    ? (GLOBAL_OBJ as GlobalObjectWithUtil).util.format(...values)\n    : safeJoin(values, ' ');\n}\n","/**\n * This code was originally copied from the 'cookie` module at v0.5.0 and was simplified for our use case.\n * https://github.com/jshttp/cookie/blob/a0c84147aab6266bdb3996cf4062e93907c0b0fc/index.js\n * It had the following license:\n *\n * (The MIT License)\n *\n * Copyright (c) 2012-2014 Roman Shtylman <shtylman@gmail.com>\n * Copyright (c) 2015 Douglas Christopher Wilson <doug@somethingdoug.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * 'Software'), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * Parses a cookie string\n */\nexport function parseCookie(str: string): Record<string, string> {\n  const obj: Record<string, string> = {};\n  let index = 0;\n\n  while (index < str.length) {\n    const eqIdx = str.indexOf('=', index);\n\n    // no more cookie pairs\n    if (eqIdx === -1) {\n      break;\n    }\n\n    let endIdx = str.indexOf(';', index);\n\n    if (endIdx === -1) {\n      endIdx = str.length;\n    } else if (endIdx < eqIdx) {\n      // backtrack on prior semicolon\n      index = str.lastIndexOf(';', eqIdx - 1) + 1;\n      continue;\n    }\n\n    const key = str.slice(index, eqIdx).trim();\n\n    // only assign once\n    if (undefined === obj[key]) {\n      let val = str.slice(eqIdx + 1, endIdx).trim();\n\n      // quoted values\n      if (val.charCodeAt(0) === 0x22) {\n        val = val.slice(1, -1);\n      }\n\n      try {\n        obj[key] = val.indexOf('%') !== -1 ? decodeURIComponent(val) : val;\n      } catch (e) {\n        obj[key] = val;\n      }\n    }\n\n    index = endIdx + 1;\n  }\n\n  return obj;\n}\n","// Vendored / modified from @sergiodxa/remix-utils\n\n// https://github.com/sergiodxa/remix-utils/blob/02af80e12829a53696bfa8f3c2363975cf59f55e/src/server/get-client-ip-address.ts\n// MIT License\n\n// Copyright (c) 2021 Sergio Xalambrí\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\n// The headers to check, in priority order\nexport const ipHeaderNames = [\n  'X-Client-IP',\n  'X-Forwarded-For',\n  'Fly-Client-IP',\n  'CF-Connecting-IP',\n  'Fastly-Client-Ip',\n  'True-Client-Ip',\n  'X-Real-IP',\n  'X-Cluster-Client-IP',\n  'X-Forwarded',\n  'Forwarded-For',\n  'Forwarded',\n  'X-Vercel-Forwarded-For',\n];\n\n/**\n * Get the IP address of the client sending a request.\n *\n * It receives a Request headers object and use it to get the\n * IP address from one of the following headers in order.\n *\n * If the IP address is valid, it will be returned. Otherwise, null will be\n * returned.\n *\n * If the header values contains more than one IP address, the first valid one\n * will be returned.\n */\nexport function getClientIPAddress(headers: { [key: string]: string | string[] | undefined }): string | null {\n  // This will end up being Array<string | string[] | undefined | null> because of the various possible values a header\n  // can take\n  const headerValues = ipHeaderNames.map((headerName: string) => {\n    const rawValue = headers[headerName];\n    const value = Array.isArray(rawValue) ? rawValue.join(';') : rawValue;\n\n    if (headerName === 'Forwarded') {\n      return parseForwardedHeader(value);\n    }\n\n    return value?.split(',').map((v: string) => v.trim());\n  });\n\n  // Flatten the array and filter out any falsy entries\n  const flattenedHeaderValues = headerValues.reduce((acc: string[], val) => {\n    if (!val) {\n      return acc;\n    }\n\n    return acc.concat(val);\n  }, []);\n\n  // Find the first value which is a valid IP address, if any\n  const ipAddress = flattenedHeaderValues.find(ip => ip !== null && isIP(ip));\n\n  return ipAddress || null;\n}\n\nfunction parseForwardedHeader(value: string | null | undefined): string | null {\n  if (!value) {\n    return null;\n  }\n\n  for (const part of value.split(';')) {\n    if (part.startsWith('for=')) {\n      return part.slice(4);\n    }\n  }\n\n  return null;\n}\n\n//\n/**\n * Custom method instead of importing this from `net` package, as this only exists in node\n * Accepts:\n * 127.0.0.1\n * 192.168.1.1\n * 192.168.1.255\n * 255.255.255.255\n * 10.1.1.1\n * 0.0.0.0\n * 2b01:cb19:8350:ed00:d0dd:fa5b:de31:8be5\n *\n * Rejects:\n * 1.1.1.01\n * 30.168.1.255.1\n * 127.1\n * 192.168.1.256\n * -1.2.3.4\n * 1.1.1.1.\n * 3...3\n * 192.168.1.099\n */\nfunction isIP(str: string): boolean {\n  const regex =\n    /(?:^(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}$)|(?:^(?:(?:[a-fA-F\\d]{1,4}:){7}(?:[a-fA-F\\d]{1,4}|:)|(?:[a-fA-F\\d]{1,4}:){6}(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|:[a-fA-F\\d]{1,4}|:)|(?:[a-fA-F\\d]{1,4}:){5}(?::(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-fA-F\\d]{1,4}){1,2}|:)|(?:[a-fA-F\\d]{1,4}:){4}(?:(?::[a-fA-F\\d]{1,4}){0,1}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-fA-F\\d]{1,4}){1,3}|:)|(?:[a-fA-F\\d]{1,4}:){3}(?:(?::[a-fA-F\\d]{1,4}){0,2}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-fA-F\\d]{1,4}){1,4}|:)|(?:[a-fA-F\\d]{1,4}:){2}(?:(?::[a-fA-F\\d]{1,4}){0,3}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-fA-F\\d]{1,4}){1,5}|:)|(?:[a-fA-F\\d]{1,4}:){1}(?:(?::[a-fA-F\\d]{1,4}){0,4}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-fA-F\\d]{1,4}){1,6}|:)|(?::(?:(?::[a-fA-F\\d]{1,4}){0,5}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-fA-F\\d]{1,4}){1,7}|:)))(?:%[0-9a-zA-Z]{1,})?$)/;\n  return regex.test(str);\n}\n","import { defineIntegration } from '../integration';\nimport type { Event } from '../types-hoist/event';\nimport type { IntegrationFn } from '../types-hoist/integration';\nimport type { RequestEventData } from '../types-hoist/request';\nimport { parseCookie } from '../utils/cookie';\nimport { getClientIPAddress, ipHeaderNames } from '../vendor/getIpAddress';\n\ninterface RequestDataIncludeOptions {\n  cookies?: boolean;\n  data?: boolean;\n  headers?: boolean;\n  ip?: boolean;\n  query_string?: boolean;\n  url?: boolean;\n}\n\ntype RequestDataIntegrationOptions = {\n  /**\n   * Controls what data is pulled from the request and added to the event.\n   */\n  include?: RequestDataIncludeOptions;\n};\n\n// TODO(v10): Change defaults based on `sendDefaultPii`\nconst DEFAULT_INCLUDE: RequestDataIncludeOptions = {\n  cookies: true,\n  data: true,\n  headers: true,\n  query_string: true,\n  url: true,\n};\n\nconst INTEGRATION_NAME = 'RequestData';\n\nconst _requestDataIntegration = ((options: RequestDataIntegrationOptions = {}) => {\n  const include = {\n    ...DEFAULT_INCLUDE,\n    ...options.include,\n  };\n\n  return {\n    name: INTEGRATION_NAME,\n    processEvent(event, _hint, client) {\n      const { sdkProcessingMetadata = {} } = event;\n      const { normalizedRequest, ipAddress } = sdkProcessingMetadata;\n\n      const includeWithDefaultPiiApplied: RequestDataIncludeOptions = {\n        ...include,\n        ip: include.ip ?? client.getOptions().sendDefaultPii,\n      };\n\n      if (normalizedRequest) {\n        addNormalizedRequestDataToEvent(event, normalizedRequest, { ipAddress }, includeWithDefaultPiiApplied);\n      }\n\n      return event;\n    },\n  };\n}) satisfies IntegrationFn;\n\n/**\n * Add data about a request to an event. Primarily for use in Node-based SDKs, but included in `@sentry/core`\n * so it can be used in cross-platform SDKs like `@sentry/nextjs`.\n */\nexport const requestDataIntegration = defineIntegration(_requestDataIntegration);\n\n/**\n * Add already normalized request data to an event.\n * This mutates the passed in event.\n */\nfunction addNormalizedRequestDataToEvent(\n  event: Event,\n  req: RequestEventData,\n  // Data that should not go into `event.request` but is somehow related to requests\n  additionalData: { ipAddress?: string },\n  include: RequestDataIncludeOptions,\n): void {\n  event.request = {\n    ...event.request,\n    ...extractNormalizedRequestData(req, include),\n  };\n\n  if (include.ip) {\n    const ip = (req.headers && getClientIPAddress(req.headers)) || additionalData.ipAddress;\n    if (ip) {\n      event.user = {\n        ...event.user,\n        ip_address: ip,\n      };\n    }\n  }\n}\n\nfunction extractNormalizedRequestData(\n  normalizedRequest: RequestEventData,\n  include: RequestDataIncludeOptions,\n): RequestEventData {\n  const requestData: RequestEventData = {};\n  const headers = { ...normalizedRequest.headers };\n\n  if (include.headers) {\n    requestData.headers = headers;\n\n    // Remove the Cookie header in case cookie data should not be included in the event\n    if (!include.cookies) {\n      delete (headers as { cookie?: string }).cookie;\n    }\n\n    // Remove IP headers in case IP data should not be included in the event\n    if (!include.ip) {\n      ipHeaderNames.forEach(ipHeaderName => {\n        // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n        delete (headers as Record<string, unknown>)[ipHeaderName];\n      });\n    }\n  }\n\n  requestData.method = normalizedRequest.method;\n\n  if (include.url) {\n    requestData.url = normalizedRequest.url;\n  }\n\n  if (include.cookies) {\n    const cookies = normalizedRequest.cookies || (headers?.cookie ? parseCookie(headers.cookie) : undefined);\n    requestData.cookies = cookies || {};\n  }\n\n  if (include.query_string) {\n    requestData.query_string = normalizedRequest.query_string;\n  }\n\n  if (include.data) {\n    requestData.data = normalizedRequest.data;\n  }\n\n  return requestData;\n}\n","import type { ParameterizedString } from '../types-hoist/parameterize';\n\n/**\n * Tagged template function which returns parameterized representation of the message\n * For example: parameterize`This is a log statement with ${x} and ${y} params`, would return:\n * \"__sentry_template_string__\": 'This is a log statement with %s and %s params',\n * \"__sentry_template_values__\": ['first', 'second']\n *\n * @param strings An array of string values splitted between expressions\n * @param values Expressions extracted from template string\n *\n * @returns A `ParameterizedString` object that can be passed into `captureMessage` or Sentry.logger.X methods.\n */\nexport function parameterize(strings: TemplateStringsArray, ...values: unknown[]): ParameterizedString {\n  const formatted = new String(String.raw(strings, ...values)) as ParameterizedString;\n  formatted.__sentry_template_string__ = strings.join('\\x00').replace(/%/g, '%%').replace(/\\0/g, '%s');\n  formatted.__sentry_template_values__ = values;\n  return formatted;\n}\n\n/**\n * Tagged template function which returns parameterized representation of the message.\n *\n * @param strings An array of string values splitted between expressions\n * @param values Expressions extracted from template string\n * @returns A `ParameterizedString` object that can be passed into `captureMessage` or Sentry.logger.X methods.\n */\nexport const fmt = parameterize;\n","(()=>{\"use strict\";var e={491:(e,t,r)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.ContextAPI=void 0;const n=r(223);const a=r(172);const o=r(930);const i=\"context\";const c=new n.NoopContextManager;class ContextAPI{constructor(){}static getInstance(){if(!this._instance){this._instance=new ContextAPI}return this._instance}setGlobalContextManager(e){return(0,a.registerGlobal)(i,e,o.DiagAPI.instance())}active(){return this._getContextManager().active()}with(e,t,r,...n){return this._getContextManager().with(e,t,r,...n)}bind(e,t){return this._getContextManager().bind(e,t)}_getContextManager(){return(0,a.getGlobal)(i)||c}disable(){this._getContextManager().disable();(0,a.unregisterGlobal)(i,o.DiagAPI.instance())}}t.ContextAPI=ContextAPI},930:(e,t,r)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.DiagAPI=void 0;const n=r(56);const a=r(912);const o=r(957);const i=r(172);const c=\"diag\";class DiagAPI{constructor(){function _logProxy(e){return function(...t){const r=(0,i.getGlobal)(\"diag\");if(!r)return;return r[e](...t)}}const e=this;const setLogger=(t,r={logLevel:o.DiagLogLevel.INFO})=>{var n,c,s;if(t===e){const t=new Error(\"Cannot use diag as the logger for itself. Please use a DiagLogger implementation like ConsoleDiagLogger or a custom implementation\");e.error((n=t.stack)!==null&&n!==void 0?n:t.message);return false}if(typeof r===\"number\"){r={logLevel:r}}const u=(0,i.getGlobal)(\"diag\");const l=(0,a.createLogLevelDiagLogger)((c=r.logLevel)!==null&&c!==void 0?c:o.DiagLogLevel.INFO,t);if(u&&!r.suppressOverrideMessage){const e=(s=(new Error).stack)!==null&&s!==void 0?s:\"<failed to generate stacktrace>\";u.warn(`Current logger will be overwritten from ${e}`);l.warn(`Current logger will overwrite one already registered from ${e}`)}return(0,i.registerGlobal)(\"diag\",l,e,true)};e.setLogger=setLogger;e.disable=()=>{(0,i.unregisterGlobal)(c,e)};e.createComponentLogger=e=>new n.DiagComponentLogger(e);e.verbose=_logProxy(\"verbose\");e.debug=_logProxy(\"debug\");e.info=_logProxy(\"info\");e.warn=_logProxy(\"warn\");e.error=_logProxy(\"error\")}static instance(){if(!this._instance){this._instance=new DiagAPI}return this._instance}}t.DiagAPI=DiagAPI},653:(e,t,r)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.MetricsAPI=void 0;const n=r(660);const a=r(172);const o=r(930);const i=\"metrics\";class MetricsAPI{constructor(){}static getInstance(){if(!this._instance){this._instance=new MetricsAPI}return this._instance}setGlobalMeterProvider(e){return(0,a.registerGlobal)(i,e,o.DiagAPI.instance())}getMeterProvider(){return(0,a.getGlobal)(i)||n.NOOP_METER_PROVIDER}getMeter(e,t,r){return this.getMeterProvider().getMeter(e,t,r)}disable(){(0,a.unregisterGlobal)(i,o.DiagAPI.instance())}}t.MetricsAPI=MetricsAPI},181:(e,t,r)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.PropagationAPI=void 0;const n=r(172);const a=r(874);const o=r(194);const i=r(277);const c=r(369);const s=r(930);const u=\"propagation\";const l=new a.NoopTextMapPropagator;class PropagationAPI{constructor(){this.createBaggage=c.createBaggage;this.getBaggage=i.getBaggage;this.getActiveBaggage=i.getActiveBaggage;this.setBaggage=i.setBaggage;this.deleteBaggage=i.deleteBaggage}static getInstance(){if(!this._instance){this._instance=new PropagationAPI}return this._instance}setGlobalPropagator(e){return(0,n.registerGlobal)(u,e,s.DiagAPI.instance())}inject(e,t,r=o.defaultTextMapSetter){return this._getGlobalPropagator().inject(e,t,r)}extract(e,t,r=o.defaultTextMapGetter){return this._getGlobalPropagator().extract(e,t,r)}fields(){return this._getGlobalPropagator().fields()}disable(){(0,n.unregisterGlobal)(u,s.DiagAPI.instance())}_getGlobalPropagator(){return(0,n.getGlobal)(u)||l}}t.PropagationAPI=PropagationAPI},997:(e,t,r)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.TraceAPI=void 0;const n=r(172);const a=r(846);const o=r(139);const i=r(607);const c=r(930);const s=\"trace\";class TraceAPI{constructor(){this._proxyTracerProvider=new a.ProxyTracerProvider;this.wrapSpanContext=o.wrapSpanContext;this.isSpanContextValid=o.isSpanContextValid;this.deleteSpan=i.deleteSpan;this.getSpan=i.getSpan;this.getActiveSpan=i.getActiveSpan;this.getSpanContext=i.getSpanContext;this.setSpan=i.setSpan;this.setSpanContext=i.setSpanContext}static getInstance(){if(!this._instance){this._instance=new TraceAPI}return this._instance}setGlobalTracerProvider(e){const t=(0,n.registerGlobal)(s,this._proxyTracerProvider,c.DiagAPI.instance());if(t){this._proxyTracerProvider.setDelegate(e)}return t}getTracerProvider(){return(0,n.getGlobal)(s)||this._proxyTracerProvider}getTracer(e,t){return this.getTracerProvider().getTracer(e,t)}disable(){(0,n.unregisterGlobal)(s,c.DiagAPI.instance());this._proxyTracerProvider=new a.ProxyTracerProvider}}t.TraceAPI=TraceAPI},277:(e,t,r)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.deleteBaggage=t.setBaggage=t.getActiveBaggage=t.getBaggage=void 0;const n=r(491);const a=r(780);const o=(0,a.createContextKey)(\"OpenTelemetry Baggage Key\");function getBaggage(e){return e.getValue(o)||undefined}t.getBaggage=getBaggage;function getActiveBaggage(){return getBaggage(n.ContextAPI.getInstance().active())}t.getActiveBaggage=getActiveBaggage;function setBaggage(e,t){return e.setValue(o,t)}t.setBaggage=setBaggage;function deleteBaggage(e){return e.deleteValue(o)}t.deleteBaggage=deleteBaggage},993:(e,t)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.BaggageImpl=void 0;class BaggageImpl{constructor(e){this._entries=e?new Map(e):new Map}getEntry(e){const t=this._entries.get(e);if(!t){return undefined}return Object.assign({},t)}getAllEntries(){return Array.from(this._entries.entries()).map((([e,t])=>[e,t]))}setEntry(e,t){const r=new BaggageImpl(this._entries);r._entries.set(e,t);return r}removeEntry(e){const t=new BaggageImpl(this._entries);t._entries.delete(e);return t}removeEntries(...e){const t=new BaggageImpl(this._entries);for(const r of e){t._entries.delete(r)}return t}clear(){return new BaggageImpl}}t.BaggageImpl=BaggageImpl},830:(e,t)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.baggageEntryMetadataSymbol=void 0;t.baggageEntryMetadataSymbol=Symbol(\"BaggageEntryMetadata\")},369:(e,t,r)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.baggageEntryMetadataFromString=t.createBaggage=void 0;const n=r(930);const a=r(993);const o=r(830);const i=n.DiagAPI.instance();function createBaggage(e={}){return new a.BaggageImpl(new Map(Object.entries(e)))}t.createBaggage=createBaggage;function baggageEntryMetadataFromString(e){if(typeof e!==\"string\"){i.error(`Cannot create baggage metadata from unknown type: ${typeof e}`);e=\"\"}return{__TYPE__:o.baggageEntryMetadataSymbol,toString(){return e}}}t.baggageEntryMetadataFromString=baggageEntryMetadataFromString},67:(e,t,r)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.context=void 0;const n=r(491);t.context=n.ContextAPI.getInstance()},223:(e,t,r)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.NoopContextManager=void 0;const n=r(780);class NoopContextManager{active(){return n.ROOT_CONTEXT}with(e,t,r,...n){return t.call(r,...n)}bind(e,t){return t}enable(){return this}disable(){return this}}t.NoopContextManager=NoopContextManager},780:(e,t)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.ROOT_CONTEXT=t.createContextKey=void 0;function createContextKey(e){return Symbol.for(e)}t.createContextKey=createContextKey;class BaseContext{constructor(e){const t=this;t._currentContext=e?new Map(e):new Map;t.getValue=e=>t._currentContext.get(e);t.setValue=(e,r)=>{const n=new BaseContext(t._currentContext);n._currentContext.set(e,r);return n};t.deleteValue=e=>{const r=new BaseContext(t._currentContext);r._currentContext.delete(e);return r}}}t.ROOT_CONTEXT=new BaseContext},506:(e,t,r)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.diag=void 0;const n=r(930);t.diag=n.DiagAPI.instance()},56:(e,t,r)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.DiagComponentLogger=void 0;const n=r(172);class DiagComponentLogger{constructor(e){this._namespace=e.namespace||\"DiagComponentLogger\"}debug(...e){return logProxy(\"debug\",this._namespace,e)}error(...e){return logProxy(\"error\",this._namespace,e)}info(...e){return logProxy(\"info\",this._namespace,e)}warn(...e){return logProxy(\"warn\",this._namespace,e)}verbose(...e){return logProxy(\"verbose\",this._namespace,e)}}t.DiagComponentLogger=DiagComponentLogger;function logProxy(e,t,r){const a=(0,n.getGlobal)(\"diag\");if(!a){return}r.unshift(t);return a[e](...r)}},972:(e,t)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.DiagConsoleLogger=void 0;const r=[{n:\"error\",c:\"error\"},{n:\"warn\",c:\"warn\"},{n:\"info\",c:\"info\"},{n:\"debug\",c:\"debug\"},{n:\"verbose\",c:\"trace\"}];class DiagConsoleLogger{constructor(){function _consoleFunc(e){return function(...t){if(console){let r=console[e];if(typeof r!==\"function\"){r=console.log}if(typeof r===\"function\"){return r.apply(console,t)}}}}for(let e=0;e<r.length;e++){this[r[e].n]=_consoleFunc(r[e].c)}}}t.DiagConsoleLogger=DiagConsoleLogger},912:(e,t,r)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.createLogLevelDiagLogger=void 0;const n=r(957);function createLogLevelDiagLogger(e,t){if(e<n.DiagLogLevel.NONE){e=n.DiagLogLevel.NONE}else if(e>n.DiagLogLevel.ALL){e=n.DiagLogLevel.ALL}t=t||{};function _filterFunc(r,n){const a=t[r];if(typeof a===\"function\"&&e>=n){return a.bind(t)}return function(){}}return{error:_filterFunc(\"error\",n.DiagLogLevel.ERROR),warn:_filterFunc(\"warn\",n.DiagLogLevel.WARN),info:_filterFunc(\"info\",n.DiagLogLevel.INFO),debug:_filterFunc(\"debug\",n.DiagLogLevel.DEBUG),verbose:_filterFunc(\"verbose\",n.DiagLogLevel.VERBOSE)}}t.createLogLevelDiagLogger=createLogLevelDiagLogger},957:(e,t)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.DiagLogLevel=void 0;var r;(function(e){e[e[\"NONE\"]=0]=\"NONE\";e[e[\"ERROR\"]=30]=\"ERROR\";e[e[\"WARN\"]=50]=\"WARN\";e[e[\"INFO\"]=60]=\"INFO\";e[e[\"DEBUG\"]=70]=\"DEBUG\";e[e[\"VERBOSE\"]=80]=\"VERBOSE\";e[e[\"ALL\"]=9999]=\"ALL\"})(r=t.DiagLogLevel||(t.DiagLogLevel={}))},172:(e,t,r)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.unregisterGlobal=t.getGlobal=t.registerGlobal=void 0;const n=r(200);const a=r(521);const o=r(130);const i=a.VERSION.split(\".\")[0];const c=Symbol.for(`opentelemetry.js.api.${i}`);const s=n._globalThis;function registerGlobal(e,t,r,n=false){var o;const i=s[c]=(o=s[c])!==null&&o!==void 0?o:{version:a.VERSION};if(!n&&i[e]){const t=new Error(`@opentelemetry/api: Attempted duplicate registration of API: ${e}`);r.error(t.stack||t.message);return false}if(i.version!==a.VERSION){const t=new Error(`@opentelemetry/api: Registration of version v${i.version} for ${e} does not match previously registered API v${a.VERSION}`);r.error(t.stack||t.message);return false}i[e]=t;r.debug(`@opentelemetry/api: Registered a global for ${e} v${a.VERSION}.`);return true}t.registerGlobal=registerGlobal;function getGlobal(e){var t,r;const n=(t=s[c])===null||t===void 0?void 0:t.version;if(!n||!(0,o.isCompatible)(n)){return}return(r=s[c])===null||r===void 0?void 0:r[e]}t.getGlobal=getGlobal;function unregisterGlobal(e,t){t.debug(`@opentelemetry/api: Unregistering a global for ${e} v${a.VERSION}.`);const r=s[c];if(r){delete r[e]}}t.unregisterGlobal=unregisterGlobal},130:(e,t,r)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.isCompatible=t._makeCompatibilityCheck=void 0;const n=r(521);const a=/^(\\d+)\\.(\\d+)\\.(\\d+)(-(.+))?$/;function _makeCompatibilityCheck(e){const t=new Set([e]);const r=new Set;const n=e.match(a);if(!n){return()=>false}const o={major:+n[1],minor:+n[2],patch:+n[3],prerelease:n[4]};if(o.prerelease!=null){return function isExactmatch(t){return t===e}}function _reject(e){r.add(e);return false}function _accept(e){t.add(e);return true}return function isCompatible(e){if(t.has(e)){return true}if(r.has(e)){return false}const n=e.match(a);if(!n){return _reject(e)}const i={major:+n[1],minor:+n[2],patch:+n[3],prerelease:n[4]};if(i.prerelease!=null){return _reject(e)}if(o.major!==i.major){return _reject(e)}if(o.major===0){if(o.minor===i.minor&&o.patch<=i.patch){return _accept(e)}return _reject(e)}if(o.minor<=i.minor){return _accept(e)}return _reject(e)}}t._makeCompatibilityCheck=_makeCompatibilityCheck;t.isCompatible=_makeCompatibilityCheck(n.VERSION)},886:(e,t,r)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.metrics=void 0;const n=r(653);t.metrics=n.MetricsAPI.getInstance()},901:(e,t)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.ValueType=void 0;var r;(function(e){e[e[\"INT\"]=0]=\"INT\";e[e[\"DOUBLE\"]=1]=\"DOUBLE\"})(r=t.ValueType||(t.ValueType={}))},102:(e,t)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.createNoopMeter=t.NOOP_OBSERVABLE_UP_DOWN_COUNTER_METRIC=t.NOOP_OBSERVABLE_GAUGE_METRIC=t.NOOP_OBSERVABLE_COUNTER_METRIC=t.NOOP_UP_DOWN_COUNTER_METRIC=t.NOOP_HISTOGRAM_METRIC=t.NOOP_COUNTER_METRIC=t.NOOP_METER=t.NoopObservableUpDownCounterMetric=t.NoopObservableGaugeMetric=t.NoopObservableCounterMetric=t.NoopObservableMetric=t.NoopHistogramMetric=t.NoopUpDownCounterMetric=t.NoopCounterMetric=t.NoopMetric=t.NoopMeter=void 0;class NoopMeter{constructor(){}createHistogram(e,r){return t.NOOP_HISTOGRAM_METRIC}createCounter(e,r){return t.NOOP_COUNTER_METRIC}createUpDownCounter(e,r){return t.NOOP_UP_DOWN_COUNTER_METRIC}createObservableGauge(e,r){return t.NOOP_OBSERVABLE_GAUGE_METRIC}createObservableCounter(e,r){return t.NOOP_OBSERVABLE_COUNTER_METRIC}createObservableUpDownCounter(e,r){return t.NOOP_OBSERVABLE_UP_DOWN_COUNTER_METRIC}addBatchObservableCallback(e,t){}removeBatchObservableCallback(e){}}t.NoopMeter=NoopMeter;class NoopMetric{}t.NoopMetric=NoopMetric;class NoopCounterMetric extends NoopMetric{add(e,t){}}t.NoopCounterMetric=NoopCounterMetric;class NoopUpDownCounterMetric extends NoopMetric{add(e,t){}}t.NoopUpDownCounterMetric=NoopUpDownCounterMetric;class NoopHistogramMetric extends NoopMetric{record(e,t){}}t.NoopHistogramMetric=NoopHistogramMetric;class NoopObservableMetric{addCallback(e){}removeCallback(e){}}t.NoopObservableMetric=NoopObservableMetric;class NoopObservableCounterMetric extends NoopObservableMetric{}t.NoopObservableCounterMetric=NoopObservableCounterMetric;class NoopObservableGaugeMetric extends NoopObservableMetric{}t.NoopObservableGaugeMetric=NoopObservableGaugeMetric;class NoopObservableUpDownCounterMetric extends NoopObservableMetric{}t.NoopObservableUpDownCounterMetric=NoopObservableUpDownCounterMetric;t.NOOP_METER=new NoopMeter;t.NOOP_COUNTER_METRIC=new NoopCounterMetric;t.NOOP_HISTOGRAM_METRIC=new NoopHistogramMetric;t.NOOP_UP_DOWN_COUNTER_METRIC=new NoopUpDownCounterMetric;t.NOOP_OBSERVABLE_COUNTER_METRIC=new NoopObservableCounterMetric;t.NOOP_OBSERVABLE_GAUGE_METRIC=new NoopObservableGaugeMetric;t.NOOP_OBSERVABLE_UP_DOWN_COUNTER_METRIC=new NoopObservableUpDownCounterMetric;function createNoopMeter(){return t.NOOP_METER}t.createNoopMeter=createNoopMeter},660:(e,t,r)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.NOOP_METER_PROVIDER=t.NoopMeterProvider=void 0;const n=r(102);class NoopMeterProvider{getMeter(e,t,r){return n.NOOP_METER}}t.NoopMeterProvider=NoopMeterProvider;t.NOOP_METER_PROVIDER=new NoopMeterProvider},200:function(e,t,r){var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){if(n===undefined)n=r;Object.defineProperty(e,n,{enumerable:true,get:function(){return t[r]}})}:function(e,t,r,n){if(n===undefined)n=r;e[n]=t[r]});var a=this&&this.__exportStar||function(e,t){for(var r in e)if(r!==\"default\"&&!Object.prototype.hasOwnProperty.call(t,r))n(t,e,r)};Object.defineProperty(t,\"__esModule\",{value:true});a(r(46),t)},651:(e,t)=>{Object.defineProperty(t,\"__esModule\",{value:true});t._globalThis=void 0;t._globalThis=typeof globalThis===\"object\"?globalThis:global},46:function(e,t,r){var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){if(n===undefined)n=r;Object.defineProperty(e,n,{enumerable:true,get:function(){return t[r]}})}:function(e,t,r,n){if(n===undefined)n=r;e[n]=t[r]});var a=this&&this.__exportStar||function(e,t){for(var r in e)if(r!==\"default\"&&!Object.prototype.hasOwnProperty.call(t,r))n(t,e,r)};Object.defineProperty(t,\"__esModule\",{value:true});a(r(651),t)},939:(e,t,r)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.propagation=void 0;const n=r(181);t.propagation=n.PropagationAPI.getInstance()},874:(e,t)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.NoopTextMapPropagator=void 0;class NoopTextMapPropagator{inject(e,t){}extract(e,t){return e}fields(){return[]}}t.NoopTextMapPropagator=NoopTextMapPropagator},194:(e,t)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.defaultTextMapSetter=t.defaultTextMapGetter=void 0;t.defaultTextMapGetter={get(e,t){if(e==null){return undefined}return e[t]},keys(e){if(e==null){return[]}return Object.keys(e)}};t.defaultTextMapSetter={set(e,t,r){if(e==null){return}e[t]=r}}},845:(e,t,r)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.trace=void 0;const n=r(997);t.trace=n.TraceAPI.getInstance()},403:(e,t,r)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.NonRecordingSpan=void 0;const n=r(476);class NonRecordingSpan{constructor(e=n.INVALID_SPAN_CONTEXT){this._spanContext=e}spanContext(){return this._spanContext}setAttribute(e,t){return this}setAttributes(e){return this}addEvent(e,t){return this}setStatus(e){return this}updateName(e){return this}end(e){}isRecording(){return false}recordException(e,t){}}t.NonRecordingSpan=NonRecordingSpan},614:(e,t,r)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.NoopTracer=void 0;const n=r(491);const a=r(607);const o=r(403);const i=r(139);const c=n.ContextAPI.getInstance();class NoopTracer{startSpan(e,t,r=c.active()){const n=Boolean(t===null||t===void 0?void 0:t.root);if(n){return new o.NonRecordingSpan}const s=r&&(0,a.getSpanContext)(r);if(isSpanContext(s)&&(0,i.isSpanContextValid)(s)){return new o.NonRecordingSpan(s)}else{return new o.NonRecordingSpan}}startActiveSpan(e,t,r,n){let o;let i;let s;if(arguments.length<2){return}else if(arguments.length===2){s=t}else if(arguments.length===3){o=t;s=r}else{o=t;i=r;s=n}const u=i!==null&&i!==void 0?i:c.active();const l=this.startSpan(e,o,u);const g=(0,a.setSpan)(u,l);return c.with(g,s,undefined,l)}}t.NoopTracer=NoopTracer;function isSpanContext(e){return typeof e===\"object\"&&typeof e[\"spanId\"]===\"string\"&&typeof e[\"traceId\"]===\"string\"&&typeof e[\"traceFlags\"]===\"number\"}},124:(e,t,r)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.NoopTracerProvider=void 0;const n=r(614);class NoopTracerProvider{getTracer(e,t,r){return new n.NoopTracer}}t.NoopTracerProvider=NoopTracerProvider},125:(e,t,r)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.ProxyTracer=void 0;const n=r(614);const a=new n.NoopTracer;class ProxyTracer{constructor(e,t,r,n){this._provider=e;this.name=t;this.version=r;this.options=n}startSpan(e,t,r){return this._getTracer().startSpan(e,t,r)}startActiveSpan(e,t,r,n){const a=this._getTracer();return Reflect.apply(a.startActiveSpan,a,arguments)}_getTracer(){if(this._delegate){return this._delegate}const e=this._provider.getDelegateTracer(this.name,this.version,this.options);if(!e){return a}this._delegate=e;return this._delegate}}t.ProxyTracer=ProxyTracer},846:(e,t,r)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.ProxyTracerProvider=void 0;const n=r(125);const a=r(124);const o=new a.NoopTracerProvider;class ProxyTracerProvider{getTracer(e,t,r){var a;return(a=this.getDelegateTracer(e,t,r))!==null&&a!==void 0?a:new n.ProxyTracer(this,e,t,r)}getDelegate(){var e;return(e=this._delegate)!==null&&e!==void 0?e:o}setDelegate(e){this._delegate=e}getDelegateTracer(e,t,r){var n;return(n=this._delegate)===null||n===void 0?void 0:n.getTracer(e,t,r)}}t.ProxyTracerProvider=ProxyTracerProvider},996:(e,t)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.SamplingDecision=void 0;var r;(function(e){e[e[\"NOT_RECORD\"]=0]=\"NOT_RECORD\";e[e[\"RECORD\"]=1]=\"RECORD\";e[e[\"RECORD_AND_SAMPLED\"]=2]=\"RECORD_AND_SAMPLED\"})(r=t.SamplingDecision||(t.SamplingDecision={}))},607:(e,t,r)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.getSpanContext=t.setSpanContext=t.deleteSpan=t.setSpan=t.getActiveSpan=t.getSpan=void 0;const n=r(780);const a=r(403);const o=r(491);const i=(0,n.createContextKey)(\"OpenTelemetry Context Key SPAN\");function getSpan(e){return e.getValue(i)||undefined}t.getSpan=getSpan;function getActiveSpan(){return getSpan(o.ContextAPI.getInstance().active())}t.getActiveSpan=getActiveSpan;function setSpan(e,t){return e.setValue(i,t)}t.setSpan=setSpan;function deleteSpan(e){return e.deleteValue(i)}t.deleteSpan=deleteSpan;function setSpanContext(e,t){return setSpan(e,new a.NonRecordingSpan(t))}t.setSpanContext=setSpanContext;function getSpanContext(e){var t;return(t=getSpan(e))===null||t===void 0?void 0:t.spanContext()}t.getSpanContext=getSpanContext},325:(e,t,r)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.TraceStateImpl=void 0;const n=r(564);const a=32;const o=512;const i=\",\";const c=\"=\";class TraceStateImpl{constructor(e){this._internalState=new Map;if(e)this._parse(e)}set(e,t){const r=this._clone();if(r._internalState.has(e)){r._internalState.delete(e)}r._internalState.set(e,t);return r}unset(e){const t=this._clone();t._internalState.delete(e);return t}get(e){return this._internalState.get(e)}serialize(){return this._keys().reduce(((e,t)=>{e.push(t+c+this.get(t));return e}),[]).join(i)}_parse(e){if(e.length>o)return;this._internalState=e.split(i).reverse().reduce(((e,t)=>{const r=t.trim();const a=r.indexOf(c);if(a!==-1){const o=r.slice(0,a);const i=r.slice(a+1,t.length);if((0,n.validateKey)(o)&&(0,n.validateValue)(i)){e.set(o,i)}else{}}return e}),new Map);if(this._internalState.size>a){this._internalState=new Map(Array.from(this._internalState.entries()).reverse().slice(0,a))}}_keys(){return Array.from(this._internalState.keys()).reverse()}_clone(){const e=new TraceStateImpl;e._internalState=new Map(this._internalState);return e}}t.TraceStateImpl=TraceStateImpl},564:(e,t)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.validateValue=t.validateKey=void 0;const r=\"[_0-9a-z-*/]\";const n=`[a-z]${r}{0,255}`;const a=`[a-z0-9]${r}{0,240}@[a-z]${r}{0,13}`;const o=new RegExp(`^(?:${n}|${a})$`);const i=/^[ -~]{0,255}[!-~]$/;const c=/,|=/;function validateKey(e){return o.test(e)}t.validateKey=validateKey;function validateValue(e){return i.test(e)&&!c.test(e)}t.validateValue=validateValue},98:(e,t,r)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.createTraceState=void 0;const n=r(325);function createTraceState(e){return new n.TraceStateImpl(e)}t.createTraceState=createTraceState},476:(e,t,r)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.INVALID_SPAN_CONTEXT=t.INVALID_TRACEID=t.INVALID_SPANID=void 0;const n=r(475);t.INVALID_SPANID=\"0000000000000000\";t.INVALID_TRACEID=\"00000000000000000000000000000000\";t.INVALID_SPAN_CONTEXT={traceId:t.INVALID_TRACEID,spanId:t.INVALID_SPANID,traceFlags:n.TraceFlags.NONE}},357:(e,t)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.SpanKind=void 0;var r;(function(e){e[e[\"INTERNAL\"]=0]=\"INTERNAL\";e[e[\"SERVER\"]=1]=\"SERVER\";e[e[\"CLIENT\"]=2]=\"CLIENT\";e[e[\"PRODUCER\"]=3]=\"PRODUCER\";e[e[\"CONSUMER\"]=4]=\"CONSUMER\"})(r=t.SpanKind||(t.SpanKind={}))},139:(e,t,r)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.wrapSpanContext=t.isSpanContextValid=t.isValidSpanId=t.isValidTraceId=void 0;const n=r(476);const a=r(403);const o=/^([0-9a-f]{32})$/i;const i=/^[0-9a-f]{16}$/i;function isValidTraceId(e){return o.test(e)&&e!==n.INVALID_TRACEID}t.isValidTraceId=isValidTraceId;function isValidSpanId(e){return i.test(e)&&e!==n.INVALID_SPANID}t.isValidSpanId=isValidSpanId;function isSpanContextValid(e){return isValidTraceId(e.traceId)&&isValidSpanId(e.spanId)}t.isSpanContextValid=isSpanContextValid;function wrapSpanContext(e){return new a.NonRecordingSpan(e)}t.wrapSpanContext=wrapSpanContext},847:(e,t)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.SpanStatusCode=void 0;var r;(function(e){e[e[\"UNSET\"]=0]=\"UNSET\";e[e[\"OK\"]=1]=\"OK\";e[e[\"ERROR\"]=2]=\"ERROR\"})(r=t.SpanStatusCode||(t.SpanStatusCode={}))},475:(e,t)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.TraceFlags=void 0;var r;(function(e){e[e[\"NONE\"]=0]=\"NONE\";e[e[\"SAMPLED\"]=1]=\"SAMPLED\"})(r=t.TraceFlags||(t.TraceFlags={}))},521:(e,t)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.VERSION=void 0;t.VERSION=\"1.6.0\"}};var t={};function __nccwpck_require__(r){var n=t[r];if(n!==undefined){return n.exports}var a=t[r]={exports:{}};var o=true;try{e[r].call(a.exports,a,a.exports,__nccwpck_require__);o=false}finally{if(o)delete t[r]}return a.exports}if(typeof __nccwpck_require__!==\"undefined\")__nccwpck_require__.ab=__dirname+\"/\";var r={};(()=>{var e=r;Object.defineProperty(e,\"__esModule\",{value:true});e.trace=e.propagation=e.metrics=e.diag=e.context=e.INVALID_SPAN_CONTEXT=e.INVALID_TRACEID=e.INVALID_SPANID=e.isValidSpanId=e.isValidTraceId=e.isSpanContextValid=e.createTraceState=e.TraceFlags=e.SpanStatusCode=e.SpanKind=e.SamplingDecision=e.ProxyTracerProvider=e.ProxyTracer=e.defaultTextMapSetter=e.defaultTextMapGetter=e.ValueType=e.createNoopMeter=e.DiagLogLevel=e.DiagConsoleLogger=e.ROOT_CONTEXT=e.createContextKey=e.baggageEntryMetadataFromString=void 0;var t=__nccwpck_require__(369);Object.defineProperty(e,\"baggageEntryMetadataFromString\",{enumerable:true,get:function(){return t.baggageEntryMetadataFromString}});var n=__nccwpck_require__(780);Object.defineProperty(e,\"createContextKey\",{enumerable:true,get:function(){return n.createContextKey}});Object.defineProperty(e,\"ROOT_CONTEXT\",{enumerable:true,get:function(){return n.ROOT_CONTEXT}});var a=__nccwpck_require__(972);Object.defineProperty(e,\"DiagConsoleLogger\",{enumerable:true,get:function(){return a.DiagConsoleLogger}});var o=__nccwpck_require__(957);Object.defineProperty(e,\"DiagLogLevel\",{enumerable:true,get:function(){return o.DiagLogLevel}});var i=__nccwpck_require__(102);Object.defineProperty(e,\"createNoopMeter\",{enumerable:true,get:function(){return i.createNoopMeter}});var c=__nccwpck_require__(901);Object.defineProperty(e,\"ValueType\",{enumerable:true,get:function(){return c.ValueType}});var s=__nccwpck_require__(194);Object.defineProperty(e,\"defaultTextMapGetter\",{enumerable:true,get:function(){return s.defaultTextMapGetter}});Object.defineProperty(e,\"defaultTextMapSetter\",{enumerable:true,get:function(){return s.defaultTextMapSetter}});var u=__nccwpck_require__(125);Object.defineProperty(e,\"ProxyTracer\",{enumerable:true,get:function(){return u.ProxyTracer}});var l=__nccwpck_require__(846);Object.defineProperty(e,\"ProxyTracerProvider\",{enumerable:true,get:function(){return l.ProxyTracerProvider}});var g=__nccwpck_require__(996);Object.defineProperty(e,\"SamplingDecision\",{enumerable:true,get:function(){return g.SamplingDecision}});var p=__nccwpck_require__(357);Object.defineProperty(e,\"SpanKind\",{enumerable:true,get:function(){return p.SpanKind}});var d=__nccwpck_require__(847);Object.defineProperty(e,\"SpanStatusCode\",{enumerable:true,get:function(){return d.SpanStatusCode}});var _=__nccwpck_require__(475);Object.defineProperty(e,\"TraceFlags\",{enumerable:true,get:function(){return _.TraceFlags}});var f=__nccwpck_require__(98);Object.defineProperty(e,\"createTraceState\",{enumerable:true,get:function(){return f.createTraceState}});var b=__nccwpck_require__(139);Object.defineProperty(e,\"isSpanContextValid\",{enumerable:true,get:function(){return b.isSpanContextValid}});Object.defineProperty(e,\"isValidTraceId\",{enumerable:true,get:function(){return b.isValidTraceId}});Object.defineProperty(e,\"isValidSpanId\",{enumerable:true,get:function(){return b.isValidSpanId}});var v=__nccwpck_require__(476);Object.defineProperty(e,\"INVALID_SPANID\",{enumerable:true,get:function(){return v.INVALID_SPANID}});Object.defineProperty(e,\"INVALID_TRACEID\",{enumerable:true,get:function(){return v.INVALID_TRACEID}});Object.defineProperty(e,\"INVALID_SPAN_CONTEXT\",{enumerable:true,get:function(){return v.INVALID_SPAN_CONTEXT}});const O=__nccwpck_require__(67);Object.defineProperty(e,\"context\",{enumerable:true,get:function(){return O.context}});const P=__nccwpck_require__(506);Object.defineProperty(e,\"diag\",{enumerable:true,get:function(){return P.diag}});const N=__nccwpck_require__(886);Object.defineProperty(e,\"metrics\",{enumerable:true,get:function(){return N.metrics}});const S=__nccwpck_require__(939);Object.defineProperty(e,\"propagation\",{enumerable:true,get:function(){return S.propagation}});const C=__nccwpck_require__(845);Object.defineProperty(e,\"trace\",{enumerable:true,get:function(){return C.trace}});e[\"default\"]={context:O.context,diag:P.diag,metrics:N.metrics,propagation:S.propagation,trace:C.trace}})();module.exports=r})();","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar SPAN_ID_BYTES = 8;\nvar TRACE_ID_BYTES = 16;\nvar RandomIdGenerator = /** @class */ (function () {\n    function RandomIdGenerator() {\n        /**\n         * Returns a random 16-byte trace ID formatted/encoded as a 32 lowercase hex\n         * characters corresponding to 128 bits.\n         */\n        this.generateTraceId = getIdGenerator(TRACE_ID_BYTES);\n        /**\n         * Returns a random 8-byte span ID formatted/encoded as a 16 lowercase hex\n         * characters corresponding to 64 bits.\n         */\n        this.generateSpanId = getIdGenerator(SPAN_ID_BYTES);\n    }\n    return RandomIdGenerator;\n}());\nexport { RandomIdGenerator };\nvar SHARED_BUFFER = Buffer.allocUnsafe(TRACE_ID_BYTES);\nfunction getIdGenerator(bytes) {\n    return function generateId() {\n        for (var i = 0; i < bytes / 4; i++) {\n            // unsigned right shift drops decimal part of the number\n            // it is required because if a number between 2**32 and 2**32 - 1 is generated, an out of range error is thrown by writeUInt32BE\n            SHARED_BUFFER.writeUInt32BE((Math.random() * Math.pow(2, 32)) >>> 0, i * 4);\n        }\n        // If buffer is all 0, set the last byte to 1 to guarantee a valid w3c id is generated\n        for (var i = 0; i < bytes; i++) {\n            if (SHARED_BUFFER[i] > 0) {\n                break;\n            }\n            else if (i === bytes - 1) {\n                SHARED_BUFFER[bytes - 1] = 1;\n            }\n        }\n        return SHARED_BUFFER.toString('hex', 0, bytes);\n    };\n}\n//# sourceMappingURL=RandomIdGenerator.js.map","import type { BasicTracerProvider } from '@opentelemetry/sdk-trace-base';\nimport type { ServerRuntimeClientOptions } from '@sentry/core';\nimport { applySdkMetadata, ServerRuntimeClient } from '@sentry/core';\nimport type { VercelEdgeClientOptions } from './types';\n\ndeclare const process: {\n  env: Record<string, string>;\n};\n\n/**\n * The Sentry Vercel Edge Runtime SDK Client.\n *\n * @see VercelEdgeClientOptions for documentation on configuration options.\n * @see ServerRuntimeClient for usage documentation.\n */\nexport class VercelEdgeClient extends ServerRuntimeClient<VercelEdgeClientOptions> {\n  public traceProvider: BasicTracerProvider | undefined;\n\n  /**\n   * Creates a new Vercel Edge Runtime SDK instance.\n   * @param options Configuration options for this SDK.\n   */\n  public constructor(options: VercelEdgeClientOptions) {\n    applySdkMetadata(options, 'vercel-edge');\n    options._metadata = options._metadata || {};\n\n    const clientOptions: ServerRuntimeClientOptions = {\n      ...options,\n      platform: 'javascript',\n      // TODO: Grab version information\n      runtime: { name: 'vercel-edge' },\n      serverName: options.serverName || process.env.SENTRY_NAME,\n    };\n\n    super(clientOptions);\n  }\n\n  // Eslint ignore explanation: This is already documented in super.\n  // eslint-disable-next-line jsdoc/require-jsdoc\n  public async flush(timeout?: number): Promise<boolean> {\n    const provider = this.traceProvider;\n    const spanProcessor = provider?.activeSpanProcessor;\n\n    if (spanProcessor) {\n      await spanProcessor.forceFlush();\n    }\n\n    if (this.getOptions().sendClientReports) {\n      this._flushOutcomes();\n    }\n\n    return super.flush(timeout);\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { createConstMap } from '../internal/utils';\n//----------------------------------------------------------------------------------------------------------\n// DO NOT EDIT, this is an Auto-generated file from scripts/semconv/templates//templates/SemanticAttributes.ts.j2\n//----------------------------------------------------------------------------------------------------------\n//----------------------------------------------------------------------------------------------------------\n// Constant values for SemanticResourceAttributes\n//----------------------------------------------------------------------------------------------------------\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nvar TMP_CLOUD_PROVIDER = 'cloud.provider';\nvar TMP_CLOUD_ACCOUNT_ID = 'cloud.account.id';\nvar TMP_CLOUD_REGION = 'cloud.region';\nvar TMP_CLOUD_AVAILABILITY_ZONE = 'cloud.availability_zone';\nvar TMP_CLOUD_PLATFORM = 'cloud.platform';\nvar TMP_AWS_ECS_CONTAINER_ARN = 'aws.ecs.container.arn';\nvar TMP_AWS_ECS_CLUSTER_ARN = 'aws.ecs.cluster.arn';\nvar TMP_AWS_ECS_LAUNCHTYPE = 'aws.ecs.launchtype';\nvar TMP_AWS_ECS_TASK_ARN = 'aws.ecs.task.arn';\nvar TMP_AWS_ECS_TASK_FAMILY = 'aws.ecs.task.family';\nvar TMP_AWS_ECS_TASK_REVISION = 'aws.ecs.task.revision';\nvar TMP_AWS_EKS_CLUSTER_ARN = 'aws.eks.cluster.arn';\nvar TMP_AWS_LOG_GROUP_NAMES = 'aws.log.group.names';\nvar TMP_AWS_LOG_GROUP_ARNS = 'aws.log.group.arns';\nvar TMP_AWS_LOG_STREAM_NAMES = 'aws.log.stream.names';\nvar TMP_AWS_LOG_STREAM_ARNS = 'aws.log.stream.arns';\nvar TMP_CONTAINER_NAME = 'container.name';\nvar TMP_CONTAINER_ID = 'container.id';\nvar TMP_CONTAINER_RUNTIME = 'container.runtime';\nvar TMP_CONTAINER_IMAGE_NAME = 'container.image.name';\nvar TMP_CONTAINER_IMAGE_TAG = 'container.image.tag';\nvar TMP_DEPLOYMENT_ENVIRONMENT = 'deployment.environment';\nvar TMP_DEVICE_ID = 'device.id';\nvar TMP_DEVICE_MODEL_IDENTIFIER = 'device.model.identifier';\nvar TMP_DEVICE_MODEL_NAME = 'device.model.name';\nvar TMP_FAAS_NAME = 'faas.name';\nvar TMP_FAAS_ID = 'faas.id';\nvar TMP_FAAS_VERSION = 'faas.version';\nvar TMP_FAAS_INSTANCE = 'faas.instance';\nvar TMP_FAAS_MAX_MEMORY = 'faas.max_memory';\nvar TMP_HOST_ID = 'host.id';\nvar TMP_HOST_NAME = 'host.name';\nvar TMP_HOST_TYPE = 'host.type';\nvar TMP_HOST_ARCH = 'host.arch';\nvar TMP_HOST_IMAGE_NAME = 'host.image.name';\nvar TMP_HOST_IMAGE_ID = 'host.image.id';\nvar TMP_HOST_IMAGE_VERSION = 'host.image.version';\nvar TMP_K8S_CLUSTER_NAME = 'k8s.cluster.name';\nvar TMP_K8S_NODE_NAME = 'k8s.node.name';\nvar TMP_K8S_NODE_UID = 'k8s.node.uid';\nvar TMP_K8S_NAMESPACE_NAME = 'k8s.namespace.name';\nvar TMP_K8S_POD_UID = 'k8s.pod.uid';\nvar TMP_K8S_POD_NAME = 'k8s.pod.name';\nvar TMP_K8S_CONTAINER_NAME = 'k8s.container.name';\nvar TMP_K8S_REPLICASET_UID = 'k8s.replicaset.uid';\nvar TMP_K8S_REPLICASET_NAME = 'k8s.replicaset.name';\nvar TMP_K8S_DEPLOYMENT_UID = 'k8s.deployment.uid';\nvar TMP_K8S_DEPLOYMENT_NAME = 'k8s.deployment.name';\nvar TMP_K8S_STATEFULSET_UID = 'k8s.statefulset.uid';\nvar TMP_K8S_STATEFULSET_NAME = 'k8s.statefulset.name';\nvar TMP_K8S_DAEMONSET_UID = 'k8s.daemonset.uid';\nvar TMP_K8S_DAEMONSET_NAME = 'k8s.daemonset.name';\nvar TMP_K8S_JOB_UID = 'k8s.job.uid';\nvar TMP_K8S_JOB_NAME = 'k8s.job.name';\nvar TMP_K8S_CRONJOB_UID = 'k8s.cronjob.uid';\nvar TMP_K8S_CRONJOB_NAME = 'k8s.cronjob.name';\nvar TMP_OS_TYPE = 'os.type';\nvar TMP_OS_DESCRIPTION = 'os.description';\nvar TMP_OS_NAME = 'os.name';\nvar TMP_OS_VERSION = 'os.version';\nvar TMP_PROCESS_PID = 'process.pid';\nvar TMP_PROCESS_EXECUTABLE_NAME = 'process.executable.name';\nvar TMP_PROCESS_EXECUTABLE_PATH = 'process.executable.path';\nvar TMP_PROCESS_COMMAND = 'process.command';\nvar TMP_PROCESS_COMMAND_LINE = 'process.command_line';\nvar TMP_PROCESS_COMMAND_ARGS = 'process.command_args';\nvar TMP_PROCESS_OWNER = 'process.owner';\nvar TMP_PROCESS_RUNTIME_NAME = 'process.runtime.name';\nvar TMP_PROCESS_RUNTIME_VERSION = 'process.runtime.version';\nvar TMP_PROCESS_RUNTIME_DESCRIPTION = 'process.runtime.description';\nvar TMP_SERVICE_NAME = 'service.name';\nvar TMP_SERVICE_NAMESPACE = 'service.namespace';\nvar TMP_SERVICE_INSTANCE_ID = 'service.instance.id';\nvar TMP_SERVICE_VERSION = 'service.version';\nvar TMP_TELEMETRY_SDK_NAME = 'telemetry.sdk.name';\nvar TMP_TELEMETRY_SDK_LANGUAGE = 'telemetry.sdk.language';\nvar TMP_TELEMETRY_SDK_VERSION = 'telemetry.sdk.version';\nvar TMP_TELEMETRY_AUTO_VERSION = 'telemetry.auto.version';\nvar TMP_WEBENGINE_NAME = 'webengine.name';\nvar TMP_WEBENGINE_VERSION = 'webengine.version';\nvar TMP_WEBENGINE_DESCRIPTION = 'webengine.description';\n/**\n * Name of the cloud provider.\n *\n * @deprecated Use ATTR_CLOUD_PROVIDER in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_CLOUD_PROVIDER = TMP_CLOUD_PROVIDER;\n/**\n * The cloud account ID the resource is assigned to.\n *\n * @deprecated Use ATTR_CLOUD_ACCOUNT_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_CLOUD_ACCOUNT_ID = TMP_CLOUD_ACCOUNT_ID;\n/**\n * The geographical region the resource is running. Refer to your provider&#39;s docs to see the available regions, for example [Alibaba Cloud regions](https://www.alibabacloud.com/help/doc-detail/40654.htm), [AWS regions](https://aws.amazon.com/about-aws/global-infrastructure/regions_az/), [Azure regions](https://azure.microsoft.com/en-us/global-infrastructure/geographies/), or [Google Cloud regions](https://cloud.google.com/about/locations).\n *\n * @deprecated Use ATTR_CLOUD_REGION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_CLOUD_REGION = TMP_CLOUD_REGION;\n/**\n * Cloud regions often have multiple, isolated locations known as zones to increase availability. Availability zone represents the zone where the resource is running.\n *\n * Note: Availability zones are called &#34;zones&#34; on Alibaba Cloud and Google Cloud.\n *\n * @deprecated Use ATTR_CLOUD_AVAILABILITY_ZONE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_CLOUD_AVAILABILITY_ZONE = TMP_CLOUD_AVAILABILITY_ZONE;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use ATTR_CLOUD_PLATFORM in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_CLOUD_PLATFORM = TMP_CLOUD_PLATFORM;\n/**\n * The Amazon Resource Name (ARN) of an [ECS container instance](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ECS_instances.html).\n *\n * @deprecated Use ATTR_AWS_ECS_CONTAINER_ARN in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_AWS_ECS_CONTAINER_ARN = TMP_AWS_ECS_CONTAINER_ARN;\n/**\n * The ARN of an [ECS cluster](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/clusters.html).\n *\n * @deprecated Use ATTR_AWS_ECS_CLUSTER_ARN in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_AWS_ECS_CLUSTER_ARN = TMP_AWS_ECS_CLUSTER_ARN;\n/**\n * The [launch type](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) for an ECS task.\n *\n * @deprecated Use ATTR_AWS_ECS_LAUNCHTYPE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_AWS_ECS_LAUNCHTYPE = TMP_AWS_ECS_LAUNCHTYPE;\n/**\n * The ARN of an [ECS task definition](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definitions.html).\n *\n * @deprecated Use ATTR_AWS_ECS_TASK_ARN in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_AWS_ECS_TASK_ARN = TMP_AWS_ECS_TASK_ARN;\n/**\n * The task definition family this task definition is a member of.\n *\n * @deprecated Use ATTR_AWS_ECS_TASK_FAMILY in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_AWS_ECS_TASK_FAMILY = TMP_AWS_ECS_TASK_FAMILY;\n/**\n * The revision for this task definition.\n *\n * @deprecated Use ATTR_AWS_ECS_TASK_REVISION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_AWS_ECS_TASK_REVISION = TMP_AWS_ECS_TASK_REVISION;\n/**\n * The ARN of an EKS cluster.\n *\n * @deprecated Use ATTR_AWS_EKS_CLUSTER_ARN in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_AWS_EKS_CLUSTER_ARN = TMP_AWS_EKS_CLUSTER_ARN;\n/**\n * The name(s) of the AWS log group(s) an application is writing to.\n *\n * Note: Multiple log groups must be supported for cases like multi-container applications, where a single application has sidecar containers, and each write to their own log group.\n *\n * @deprecated Use ATTR_AWS_LOG_GROUP_NAMES in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_AWS_LOG_GROUP_NAMES = TMP_AWS_LOG_GROUP_NAMES;\n/**\n * The Amazon Resource Name(s) (ARN) of the AWS log group(s).\n *\n * Note: See the [log group ARN format documentation](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/iam-access-control-overview-cwl.html#CWL_ARN_Format).\n *\n * @deprecated Use ATTR_AWS_LOG_GROUP_ARNS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_AWS_LOG_GROUP_ARNS = TMP_AWS_LOG_GROUP_ARNS;\n/**\n * The name(s) of the AWS log stream(s) an application is writing to.\n *\n * @deprecated Use ATTR_AWS_LOG_STREAM_NAMES in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_AWS_LOG_STREAM_NAMES = TMP_AWS_LOG_STREAM_NAMES;\n/**\n * The ARN(s) of the AWS log stream(s).\n *\n * Note: See the [log stream ARN format documentation](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/iam-access-control-overview-cwl.html#CWL_ARN_Format). One log group can contain several log streams, so these ARNs necessarily identify both a log group and a log stream.\n *\n * @deprecated Use ATTR_AWS_LOG_STREAM_ARNS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_AWS_LOG_STREAM_ARNS = TMP_AWS_LOG_STREAM_ARNS;\n/**\n * Container name.\n *\n * @deprecated Use ATTR_CONTAINER_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_CONTAINER_NAME = TMP_CONTAINER_NAME;\n/**\n * Container ID. Usually a UUID, as for example used to [identify Docker containers](https://docs.docker.com/engine/reference/run/#container-identification). The UUID might be abbreviated.\n *\n * @deprecated Use ATTR_CONTAINER_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_CONTAINER_ID = TMP_CONTAINER_ID;\n/**\n * The container runtime managing this container.\n *\n * @deprecated Use ATTR_CONTAINER_RUNTIME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_CONTAINER_RUNTIME = TMP_CONTAINER_RUNTIME;\n/**\n * Name of the image the container was built on.\n *\n * @deprecated Use ATTR_CONTAINER_IMAGE_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_CONTAINER_IMAGE_NAME = TMP_CONTAINER_IMAGE_NAME;\n/**\n * Container image tag.\n *\n * @deprecated Use ATTR_CONTAINER_IMAGE_TAGS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_CONTAINER_IMAGE_TAG = TMP_CONTAINER_IMAGE_TAG;\n/**\n * Name of the [deployment environment](https://en.wikipedia.org/wiki/Deployment_environment) (aka deployment tier).\n *\n * @deprecated Use ATTR_DEPLOYMENT_ENVIRONMENT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_DEPLOYMENT_ENVIRONMENT = TMP_DEPLOYMENT_ENVIRONMENT;\n/**\n * A unique identifier representing the device.\n *\n * Note: The device identifier MUST only be defined using the values outlined below. This value is not an advertising identifier and MUST NOT be used as such. On iOS (Swift or Objective-C), this value MUST be equal to the [vendor identifier](https://developer.apple.com/documentation/uikit/uidevice/1620059-identifierforvendor). On Android (Java or Kotlin), this value MUST be equal to the Firebase Installation ID or a globally unique UUID which is persisted across sessions in your application. More information can be found [here](https://developer.android.com/training/articles/user-data-ids) on best practices and exact implementation details. Caution should be taken when storing personal data or anything which can identify a user. GDPR and data protection laws may apply, ensure you do your own due diligence.\n *\n * @deprecated Use ATTR_DEVICE_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_DEVICE_ID = TMP_DEVICE_ID;\n/**\n * The model identifier for the device.\n *\n * Note: It&#39;s recommended this value represents a machine readable version of the model identifier rather than the market or consumer-friendly name of the device.\n *\n * @deprecated Use ATTR_DEVICE_MODEL_IDENTIFIER in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_DEVICE_MODEL_IDENTIFIER = TMP_DEVICE_MODEL_IDENTIFIER;\n/**\n * The marketing name for the device model.\n *\n * Note: It&#39;s recommended this value represents a human readable version of the device model rather than a machine readable alternative.\n *\n * @deprecated Use ATTR_DEVICE_MODEL_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_DEVICE_MODEL_NAME = TMP_DEVICE_MODEL_NAME;\n/**\n * The name of the single function that this runtime instance executes.\n *\n * Note: This is the name of the function as configured/deployed on the FaaS platform and is usually different from the name of the callback function (which may be stored in the [`code.namespace`/`code.function`](../../trace/semantic_conventions/span-general.md#source-code-attributes) span attributes).\n *\n * @deprecated Use ATTR_FAAS_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_FAAS_NAME = TMP_FAAS_NAME;\n/**\n* The unique ID of the single function that this runtime instance executes.\n*\n* Note: Depending on the cloud provider, use:\n\n* **AWS Lambda:** The function [ARN](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).\nTake care not to use the &#34;invoked ARN&#34; directly but replace any\n[alias suffix](https://docs.aws.amazon.com/lambda/latest/dg/configuration-aliases.html) with the resolved function version, as the same runtime instance may be invokable with multiple\ndifferent aliases.\n* **GCP:** The [URI of the resource](https://cloud.google.com/iam/docs/full-resource-names)\n* **Azure:** The [Fully Qualified Resource ID](https://docs.microsoft.com/en-us/rest/api/resources/resources/get-by-id).\n\nOn some providers, it may not be possible to determine the full ID at startup,\nwhich is why this field cannot be made required. For example, on AWS the account ID\npart of the ARN is not available without calling another AWS API\nwhich may be deemed too slow for a short-running lambda function.\nAs an alternative, consider setting `faas.id` as a span attribute instead.\n*\n* @deprecated Use ATTR_CLOUD_RESOURCE_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n*/\nexport var SEMRESATTRS_FAAS_ID = TMP_FAAS_ID;\n/**\n* The immutable version of the function being executed.\n*\n* Note: Depending on the cloud provider and platform, use:\n\n* **AWS Lambda:** The [function version](https://docs.aws.amazon.com/lambda/latest/dg/configuration-versions.html)\n  (an integer represented as a decimal string).\n* **Google Cloud Run:** The [revision](https://cloud.google.com/run/docs/managing/revisions)\n  (i.e., the function name plus the revision suffix).\n* **Google Cloud Functions:** The value of the\n  [`K_REVISION` environment variable](https://cloud.google.com/functions/docs/env-var#runtime_environment_variables_set_automatically).\n* **Azure Functions:** Not applicable. Do not set this attribute.\n*\n* @deprecated Use ATTR_FAAS_VERSION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n*/\nexport var SEMRESATTRS_FAAS_VERSION = TMP_FAAS_VERSION;\n/**\n * The execution environment ID as a string, that will be potentially reused for other invocations to the same function/function version.\n *\n * Note: * **AWS Lambda:** Use the (full) log stream name.\n *\n * @deprecated Use ATTR_FAAS_INSTANCE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_FAAS_INSTANCE = TMP_FAAS_INSTANCE;\n/**\n * The amount of memory available to the serverless function in MiB.\n *\n * Note: It&#39;s recommended to set this attribute since e.g. too little memory can easily stop a Java AWS Lambda function from working correctly. On AWS Lambda, the environment variable `AWS_LAMBDA_FUNCTION_MEMORY_SIZE` provides this information.\n *\n * @deprecated Use ATTR_FAAS_MAX_MEMORY in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_FAAS_MAX_MEMORY = TMP_FAAS_MAX_MEMORY;\n/**\n * Unique host ID. For Cloud, this must be the instance_id assigned by the cloud provider.\n *\n * @deprecated Use ATTR_HOST_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_HOST_ID = TMP_HOST_ID;\n/**\n * Name of the host. On Unix systems, it may contain what the hostname command returns, or the fully qualified hostname, or another name specified by the user.\n *\n * @deprecated Use ATTR_HOST_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_HOST_NAME = TMP_HOST_NAME;\n/**\n * Type of host. For Cloud, this must be the machine type.\n *\n * @deprecated Use ATTR_HOST_TYPE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_HOST_TYPE = TMP_HOST_TYPE;\n/**\n * The CPU architecture the host system is running on.\n *\n * @deprecated Use ATTR_HOST_ARCH in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_HOST_ARCH = TMP_HOST_ARCH;\n/**\n * Name of the VM image or OS install the host was instantiated from.\n *\n * @deprecated Use ATTR_HOST_IMAGE_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_HOST_IMAGE_NAME = TMP_HOST_IMAGE_NAME;\n/**\n * VM image ID. For Cloud, this value is from the provider.\n *\n * @deprecated Use ATTR_HOST_IMAGE_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_HOST_IMAGE_ID = TMP_HOST_IMAGE_ID;\n/**\n * The version string of the VM image as defined in [Version Attributes](README.md#version-attributes).\n *\n * @deprecated Use ATTR_HOST_IMAGE_VERSION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_HOST_IMAGE_VERSION = TMP_HOST_IMAGE_VERSION;\n/**\n * The name of the cluster.\n *\n * @deprecated Use ATTR_K8S_CLUSTER_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_K8S_CLUSTER_NAME = TMP_K8S_CLUSTER_NAME;\n/**\n * The name of the Node.\n *\n * @deprecated Use ATTR_K8S_NODE_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_K8S_NODE_NAME = TMP_K8S_NODE_NAME;\n/**\n * The UID of the Node.\n *\n * @deprecated Use ATTR_K8S_NODE_UID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_K8S_NODE_UID = TMP_K8S_NODE_UID;\n/**\n * The name of the namespace that the pod is running in.\n *\n * @deprecated Use ATTR_K8S_NAMESPACE_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_K8S_NAMESPACE_NAME = TMP_K8S_NAMESPACE_NAME;\n/**\n * The UID of the Pod.\n *\n * @deprecated Use ATTR_K8S_POD_UID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_K8S_POD_UID = TMP_K8S_POD_UID;\n/**\n * The name of the Pod.\n *\n * @deprecated Use ATTR_K8S_POD_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_K8S_POD_NAME = TMP_K8S_POD_NAME;\n/**\n * The name of the Container in a Pod template.\n *\n * @deprecated Use ATTR_K8S_CONTAINER_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_K8S_CONTAINER_NAME = TMP_K8S_CONTAINER_NAME;\n/**\n * The UID of the ReplicaSet.\n *\n * @deprecated Use ATTR_K8S_REPLICASET_UID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_K8S_REPLICASET_UID = TMP_K8S_REPLICASET_UID;\n/**\n * The name of the ReplicaSet.\n *\n * @deprecated Use ATTR_K8S_REPLICASET_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_K8S_REPLICASET_NAME = TMP_K8S_REPLICASET_NAME;\n/**\n * The UID of the Deployment.\n *\n * @deprecated Use ATTR_K8S_DEPLOYMENT_UID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_K8S_DEPLOYMENT_UID = TMP_K8S_DEPLOYMENT_UID;\n/**\n * The name of the Deployment.\n *\n * @deprecated Use ATTR_K8S_DEPLOYMENT_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_K8S_DEPLOYMENT_NAME = TMP_K8S_DEPLOYMENT_NAME;\n/**\n * The UID of the StatefulSet.\n *\n * @deprecated Use ATTR_K8S_STATEFULSET_UID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_K8S_STATEFULSET_UID = TMP_K8S_STATEFULSET_UID;\n/**\n * The name of the StatefulSet.\n *\n * @deprecated Use ATTR_K8S_STATEFULSET_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_K8S_STATEFULSET_NAME = TMP_K8S_STATEFULSET_NAME;\n/**\n * The UID of the DaemonSet.\n *\n * @deprecated Use ATTR_K8S_DAEMONSET_UID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_K8S_DAEMONSET_UID = TMP_K8S_DAEMONSET_UID;\n/**\n * The name of the DaemonSet.\n *\n * @deprecated Use ATTR_K8S_DAEMONSET_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_K8S_DAEMONSET_NAME = TMP_K8S_DAEMONSET_NAME;\n/**\n * The UID of the Job.\n *\n * @deprecated Use ATTR_K8S_JOB_UID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_K8S_JOB_UID = TMP_K8S_JOB_UID;\n/**\n * The name of the Job.\n *\n * @deprecated Use ATTR_K8S_JOB_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_K8S_JOB_NAME = TMP_K8S_JOB_NAME;\n/**\n * The UID of the CronJob.\n *\n * @deprecated Use ATTR_K8S_CRONJOB_UID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_K8S_CRONJOB_UID = TMP_K8S_CRONJOB_UID;\n/**\n * The name of the CronJob.\n *\n * @deprecated Use ATTR_K8S_CRONJOB_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_K8S_CRONJOB_NAME = TMP_K8S_CRONJOB_NAME;\n/**\n * The operating system type.\n *\n * @deprecated Use ATTR_OS_TYPE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_OS_TYPE = TMP_OS_TYPE;\n/**\n * Human readable (not intended to be parsed) OS version information, like e.g. reported by `ver` or `lsb_release -a` commands.\n *\n * @deprecated Use ATTR_OS_DESCRIPTION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_OS_DESCRIPTION = TMP_OS_DESCRIPTION;\n/**\n * Human readable operating system name.\n *\n * @deprecated Use ATTR_OS_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_OS_NAME = TMP_OS_NAME;\n/**\n * The version string of the operating system as defined in [Version Attributes](../../resource/semantic_conventions/README.md#version-attributes).\n *\n * @deprecated Use ATTR_OS_VERSION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_OS_VERSION = TMP_OS_VERSION;\n/**\n * Process identifier (PID).\n *\n * @deprecated Use ATTR_PROCESS_PID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_PROCESS_PID = TMP_PROCESS_PID;\n/**\n * The name of the process executable. On Linux based systems, can be set to the `Name` in `proc/[pid]/status`. On Windows, can be set to the base name of `GetProcessImageFileNameW`.\n *\n * @deprecated Use ATTR_PROCESS_EXECUTABLE_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_PROCESS_EXECUTABLE_NAME = TMP_PROCESS_EXECUTABLE_NAME;\n/**\n * The full path to the process executable. On Linux based systems, can be set to the target of `proc/[pid]/exe`. On Windows, can be set to the result of `GetProcessImageFileNameW`.\n *\n * @deprecated Use ATTR_PROCESS_EXECUTABLE_PATH in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_PROCESS_EXECUTABLE_PATH = TMP_PROCESS_EXECUTABLE_PATH;\n/**\n * The command used to launch the process (i.e. the command name). On Linux based systems, can be set to the zeroth string in `proc/[pid]/cmdline`. On Windows, can be set to the first parameter extracted from `GetCommandLineW`.\n *\n * @deprecated Use ATTR_PROCESS_COMMAND in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_PROCESS_COMMAND = TMP_PROCESS_COMMAND;\n/**\n * The full command used to launch the process as a single string representing the full command. On Windows, can be set to the result of `GetCommandLineW`. Do not set this if you have to assemble it just for monitoring; use `process.command_args` instead.\n *\n * @deprecated Use ATTR_PROCESS_COMMAND_LINE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_PROCESS_COMMAND_LINE = TMP_PROCESS_COMMAND_LINE;\n/**\n * All the command arguments (including the command/executable itself) as received by the process. On Linux-based systems (and some other Unixoid systems supporting procfs), can be set according to the list of null-delimited strings extracted from `proc/[pid]/cmdline`. For libc-based executables, this would be the full argv vector passed to `main`.\n *\n * @deprecated Use ATTR_PROCESS_COMMAND_ARGS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_PROCESS_COMMAND_ARGS = TMP_PROCESS_COMMAND_ARGS;\n/**\n * The username of the user that owns the process.\n *\n * @deprecated Use ATTR_PROCESS_OWNER in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_PROCESS_OWNER = TMP_PROCESS_OWNER;\n/**\n * The name of the runtime of this process. For compiled native binaries, this SHOULD be the name of the compiler.\n *\n * @deprecated Use ATTR_PROCESS_RUNTIME_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_PROCESS_RUNTIME_NAME = TMP_PROCESS_RUNTIME_NAME;\n/**\n * The version of the runtime of this process, as returned by the runtime without modification.\n *\n * @deprecated Use ATTR_PROCESS_RUNTIME_VERSION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_PROCESS_RUNTIME_VERSION = TMP_PROCESS_RUNTIME_VERSION;\n/**\n * An additional description about the runtime of the process, for example a specific vendor customization of the runtime environment.\n *\n * @deprecated Use ATTR_PROCESS_RUNTIME_DESCRIPTION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_PROCESS_RUNTIME_DESCRIPTION = TMP_PROCESS_RUNTIME_DESCRIPTION;\n/**\n * Logical name of the service.\n *\n * Note: MUST be the same for all instances of horizontally scaled services. If the value was not specified, SDKs MUST fallback to `unknown_service:` concatenated with [`process.executable.name`](process.md#process), e.g. `unknown_service:bash`. If `process.executable.name` is not available, the value MUST be set to `unknown_service`.\n *\n * @deprecated Use ATTR_SERVICE_NAME.\n */\nexport var SEMRESATTRS_SERVICE_NAME = TMP_SERVICE_NAME;\n/**\n * A namespace for `service.name`.\n *\n * Note: A string value having a meaning that helps to distinguish a group of services, for example the team name that owns a group of services. `service.name` is expected to be unique within the same namespace. If `service.namespace` is not specified in the Resource then `service.name` is expected to be unique for all services that have no explicit namespace defined (so the empty/unspecified namespace is simply one more valid namespace). Zero-length namespace string is assumed equal to unspecified namespace.\n *\n * @deprecated Use ATTR_SERVICE_NAMESPACE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_SERVICE_NAMESPACE = TMP_SERVICE_NAMESPACE;\n/**\n * The string ID of the service instance.\n *\n * Note: MUST be unique for each instance of the same `service.namespace,service.name` pair (in other words `service.namespace,service.name,service.instance.id` triplet MUST be globally unique). The ID helps to distinguish instances of the same service that exist at the same time (e.g. instances of a horizontally scaled service). It is preferable for the ID to be persistent and stay the same for the lifetime of the service instance, however it is acceptable that the ID is ephemeral and changes during important lifetime events for the service (e.g. service restarts). If the service has no inherent unique ID that can be used as the value of this attribute it is recommended to generate a random Version 1 or Version 4 RFC 4122 UUID (services aiming for reproducible UUIDs may also use Version 5, see RFC 4122 for more recommendations).\n *\n * @deprecated Use ATTR_SERVICE_INSTANCE_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_SERVICE_INSTANCE_ID = TMP_SERVICE_INSTANCE_ID;\n/**\n * The version string of the service API or implementation.\n *\n * @deprecated Use ATTR_SERVICE_VERSION.\n */\nexport var SEMRESATTRS_SERVICE_VERSION = TMP_SERVICE_VERSION;\n/**\n * The name of the telemetry SDK as defined above.\n *\n * @deprecated Use ATTR_TELEMETRY_SDK_NAME.\n */\nexport var SEMRESATTRS_TELEMETRY_SDK_NAME = TMP_TELEMETRY_SDK_NAME;\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use ATTR_TELEMETRY_SDK_LANGUAGE.\n */\nexport var SEMRESATTRS_TELEMETRY_SDK_LANGUAGE = TMP_TELEMETRY_SDK_LANGUAGE;\n/**\n * The version string of the telemetry SDK.\n *\n * @deprecated Use ATTR_TELEMETRY_SDK_VERSION.\n */\nexport var SEMRESATTRS_TELEMETRY_SDK_VERSION = TMP_TELEMETRY_SDK_VERSION;\n/**\n * The version string of the auto instrumentation agent, if used.\n *\n * @deprecated Use ATTR_TELEMETRY_DISTRO_VERSION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_TELEMETRY_AUTO_VERSION = TMP_TELEMETRY_AUTO_VERSION;\n/**\n * The name of the web engine.\n *\n * @deprecated Use ATTR_WEBENGINE_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_WEBENGINE_NAME = TMP_WEBENGINE_NAME;\n/**\n * The version of the web engine.\n *\n * @deprecated Use ATTR_WEBENGINE_VERSION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_WEBENGINE_VERSION = TMP_WEBENGINE_VERSION;\n/**\n * Additional description of the web engine (e.g. detailed version and edition information).\n *\n * @deprecated Use ATTR_WEBENGINE_DESCRIPTION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_WEBENGINE_DESCRIPTION = TMP_WEBENGINE_DESCRIPTION;\n/**\n * Create exported Value Map for SemanticResourceAttributes values\n * @deprecated Use the SEMRESATTRS_XXXXX constants rather than the SemanticResourceAttributes.XXXXX for bundle minification\n */\nexport var SemanticResourceAttributes = \n/*#__PURE__*/ createConstMap([\n    TMP_CLOUD_PROVIDER,\n    TMP_CLOUD_ACCOUNT_ID,\n    TMP_CLOUD_REGION,\n    TMP_CLOUD_AVAILABILITY_ZONE,\n    TMP_CLOUD_PLATFORM,\n    TMP_AWS_ECS_CONTAINER_ARN,\n    TMP_AWS_ECS_CLUSTER_ARN,\n    TMP_AWS_ECS_LAUNCHTYPE,\n    TMP_AWS_ECS_TASK_ARN,\n    TMP_AWS_ECS_TASK_FAMILY,\n    TMP_AWS_ECS_TASK_REVISION,\n    TMP_AWS_EKS_CLUSTER_ARN,\n    TMP_AWS_LOG_GROUP_NAMES,\n    TMP_AWS_LOG_GROUP_ARNS,\n    TMP_AWS_LOG_STREAM_NAMES,\n    TMP_AWS_LOG_STREAM_ARNS,\n    TMP_CONTAINER_NAME,\n    TMP_CONTAINER_ID,\n    TMP_CONTAINER_RUNTIME,\n    TMP_CONTAINER_IMAGE_NAME,\n    TMP_CONTAINER_IMAGE_TAG,\n    TMP_DEPLOYMENT_ENVIRONMENT,\n    TMP_DEVICE_ID,\n    TMP_DEVICE_MODEL_IDENTIFIER,\n    TMP_DEVICE_MODEL_NAME,\n    TMP_FAAS_NAME,\n    TMP_FAAS_ID,\n    TMP_FAAS_VERSION,\n    TMP_FAAS_INSTANCE,\n    TMP_FAAS_MAX_MEMORY,\n    TMP_HOST_ID,\n    TMP_HOST_NAME,\n    TMP_HOST_TYPE,\n    TMP_HOST_ARCH,\n    TMP_HOST_IMAGE_NAME,\n    TMP_HOST_IMAGE_ID,\n    TMP_HOST_IMAGE_VERSION,\n    TMP_K8S_CLUSTER_NAME,\n    TMP_K8S_NODE_NAME,\n    TMP_K8S_NODE_UID,\n    TMP_K8S_NAMESPACE_NAME,\n    TMP_K8S_POD_UID,\n    TMP_K8S_POD_NAME,\n    TMP_K8S_CONTAINER_NAME,\n    TMP_K8S_REPLICASET_UID,\n    TMP_K8S_REPLICASET_NAME,\n    TMP_K8S_DEPLOYMENT_UID,\n    TMP_K8S_DEPLOYMENT_NAME,\n    TMP_K8S_STATEFULSET_UID,\n    TMP_K8S_STATEFULSET_NAME,\n    TMP_K8S_DAEMONSET_UID,\n    TMP_K8S_DAEMONSET_NAME,\n    TMP_K8S_JOB_UID,\n    TMP_K8S_JOB_NAME,\n    TMP_K8S_CRONJOB_UID,\n    TMP_K8S_CRONJOB_NAME,\n    TMP_OS_TYPE,\n    TMP_OS_DESCRIPTION,\n    TMP_OS_NAME,\n    TMP_OS_VERSION,\n    TMP_PROCESS_PID,\n    TMP_PROCESS_EXECUTABLE_NAME,\n    TMP_PROCESS_EXECUTABLE_PATH,\n    TMP_PROCESS_COMMAND,\n    TMP_PROCESS_COMMAND_LINE,\n    TMP_PROCESS_COMMAND_ARGS,\n    TMP_PROCESS_OWNER,\n    TMP_PROCESS_RUNTIME_NAME,\n    TMP_PROCESS_RUNTIME_VERSION,\n    TMP_PROCESS_RUNTIME_DESCRIPTION,\n    TMP_SERVICE_NAME,\n    TMP_SERVICE_NAMESPACE,\n    TMP_SERVICE_INSTANCE_ID,\n    TMP_SERVICE_VERSION,\n    TMP_TELEMETRY_SDK_NAME,\n    TMP_TELEMETRY_SDK_LANGUAGE,\n    TMP_TELEMETRY_SDK_VERSION,\n    TMP_TELEMETRY_AUTO_VERSION,\n    TMP_WEBENGINE_NAME,\n    TMP_WEBENGINE_VERSION,\n    TMP_WEBENGINE_DESCRIPTION,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for CloudProviderValues enum definition\n *\n * Name of the cloud provider.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nvar TMP_CLOUDPROVIDERVALUES_ALIBABA_CLOUD = 'alibaba_cloud';\nvar TMP_CLOUDPROVIDERVALUES_AWS = 'aws';\nvar TMP_CLOUDPROVIDERVALUES_AZURE = 'azure';\nvar TMP_CLOUDPROVIDERVALUES_GCP = 'gcp';\n/**\n * Name of the cloud provider.\n *\n * @deprecated Use CLOUD_PROVIDER_VALUE_ALIBABA_CLOUD in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var CLOUDPROVIDERVALUES_ALIBABA_CLOUD = TMP_CLOUDPROVIDERVALUES_ALIBABA_CLOUD;\n/**\n * Name of the cloud provider.\n *\n * @deprecated Use CLOUD_PROVIDER_VALUE_AWS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var CLOUDPROVIDERVALUES_AWS = TMP_CLOUDPROVIDERVALUES_AWS;\n/**\n * Name of the cloud provider.\n *\n * @deprecated Use CLOUD_PROVIDER_VALUE_AZURE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var CLOUDPROVIDERVALUES_AZURE = TMP_CLOUDPROVIDERVALUES_AZURE;\n/**\n * Name of the cloud provider.\n *\n * @deprecated Use CLOUD_PROVIDER_VALUE_GCP in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var CLOUDPROVIDERVALUES_GCP = TMP_CLOUDPROVIDERVALUES_GCP;\n/**\n * The constant map of values for CloudProviderValues.\n * @deprecated Use the CLOUDPROVIDERVALUES_XXXXX constants rather than the CloudProviderValues.XXXXX for bundle minification.\n */\nexport var CloudProviderValues = \n/*#__PURE__*/ createConstMap([\n    TMP_CLOUDPROVIDERVALUES_ALIBABA_CLOUD,\n    TMP_CLOUDPROVIDERVALUES_AWS,\n    TMP_CLOUDPROVIDERVALUES_AZURE,\n    TMP_CLOUDPROVIDERVALUES_GCP,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for CloudPlatformValues enum definition\n *\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nvar TMP_CLOUDPLATFORMVALUES_ALIBABA_CLOUD_ECS = 'alibaba_cloud_ecs';\nvar TMP_CLOUDPLATFORMVALUES_ALIBABA_CLOUD_FC = 'alibaba_cloud_fc';\nvar TMP_CLOUDPLATFORMVALUES_AWS_EC2 = 'aws_ec2';\nvar TMP_CLOUDPLATFORMVALUES_AWS_ECS = 'aws_ecs';\nvar TMP_CLOUDPLATFORMVALUES_AWS_EKS = 'aws_eks';\nvar TMP_CLOUDPLATFORMVALUES_AWS_LAMBDA = 'aws_lambda';\nvar TMP_CLOUDPLATFORMVALUES_AWS_ELASTIC_BEANSTALK = 'aws_elastic_beanstalk';\nvar TMP_CLOUDPLATFORMVALUES_AZURE_VM = 'azure_vm';\nvar TMP_CLOUDPLATFORMVALUES_AZURE_CONTAINER_INSTANCES = 'azure_container_instances';\nvar TMP_CLOUDPLATFORMVALUES_AZURE_AKS = 'azure_aks';\nvar TMP_CLOUDPLATFORMVALUES_AZURE_FUNCTIONS = 'azure_functions';\nvar TMP_CLOUDPLATFORMVALUES_AZURE_APP_SERVICE = 'azure_app_service';\nvar TMP_CLOUDPLATFORMVALUES_GCP_COMPUTE_ENGINE = 'gcp_compute_engine';\nvar TMP_CLOUDPLATFORMVALUES_GCP_CLOUD_RUN = 'gcp_cloud_run';\nvar TMP_CLOUDPLATFORMVALUES_GCP_KUBERNETES_ENGINE = 'gcp_kubernetes_engine';\nvar TMP_CLOUDPLATFORMVALUES_GCP_CLOUD_FUNCTIONS = 'gcp_cloud_functions';\nvar TMP_CLOUDPLATFORMVALUES_GCP_APP_ENGINE = 'gcp_app_engine';\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_ALIBABA_CLOUD_ECS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var CLOUDPLATFORMVALUES_ALIBABA_CLOUD_ECS = TMP_CLOUDPLATFORMVALUES_ALIBABA_CLOUD_ECS;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_ALIBABA_CLOUD_FC in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var CLOUDPLATFORMVALUES_ALIBABA_CLOUD_FC = TMP_CLOUDPLATFORMVALUES_ALIBABA_CLOUD_FC;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_AWS_EC2 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var CLOUDPLATFORMVALUES_AWS_EC2 = TMP_CLOUDPLATFORMVALUES_AWS_EC2;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_AWS_ECS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var CLOUDPLATFORMVALUES_AWS_ECS = TMP_CLOUDPLATFORMVALUES_AWS_ECS;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_AWS_EKS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var CLOUDPLATFORMVALUES_AWS_EKS = TMP_CLOUDPLATFORMVALUES_AWS_EKS;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_AWS_LAMBDA in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var CLOUDPLATFORMVALUES_AWS_LAMBDA = TMP_CLOUDPLATFORMVALUES_AWS_LAMBDA;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_AWS_ELASTIC_BEANSTALK in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var CLOUDPLATFORMVALUES_AWS_ELASTIC_BEANSTALK = TMP_CLOUDPLATFORMVALUES_AWS_ELASTIC_BEANSTALK;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_AZURE_VM in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var CLOUDPLATFORMVALUES_AZURE_VM = TMP_CLOUDPLATFORMVALUES_AZURE_VM;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_AZURE_CONTAINER_INSTANCES in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var CLOUDPLATFORMVALUES_AZURE_CONTAINER_INSTANCES = TMP_CLOUDPLATFORMVALUES_AZURE_CONTAINER_INSTANCES;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_AZURE_AKS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var CLOUDPLATFORMVALUES_AZURE_AKS = TMP_CLOUDPLATFORMVALUES_AZURE_AKS;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_AZURE_FUNCTIONS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var CLOUDPLATFORMVALUES_AZURE_FUNCTIONS = TMP_CLOUDPLATFORMVALUES_AZURE_FUNCTIONS;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_AZURE_APP_SERVICE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var CLOUDPLATFORMVALUES_AZURE_APP_SERVICE = TMP_CLOUDPLATFORMVALUES_AZURE_APP_SERVICE;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_GCP_COMPUTE_ENGINE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var CLOUDPLATFORMVALUES_GCP_COMPUTE_ENGINE = TMP_CLOUDPLATFORMVALUES_GCP_COMPUTE_ENGINE;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_GCP_CLOUD_RUN in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var CLOUDPLATFORMVALUES_GCP_CLOUD_RUN = TMP_CLOUDPLATFORMVALUES_GCP_CLOUD_RUN;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_GCP_KUBERNETES_ENGINE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var CLOUDPLATFORMVALUES_GCP_KUBERNETES_ENGINE = TMP_CLOUDPLATFORMVALUES_GCP_KUBERNETES_ENGINE;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_GCP_CLOUD_FUNCTIONS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var CLOUDPLATFORMVALUES_GCP_CLOUD_FUNCTIONS = TMP_CLOUDPLATFORMVALUES_GCP_CLOUD_FUNCTIONS;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_GCP_APP_ENGINE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var CLOUDPLATFORMVALUES_GCP_APP_ENGINE = TMP_CLOUDPLATFORMVALUES_GCP_APP_ENGINE;\n/**\n * The constant map of values for CloudPlatformValues.\n * @deprecated Use the CLOUDPLATFORMVALUES_XXXXX constants rather than the CloudPlatformValues.XXXXX for bundle minification.\n */\nexport var CloudPlatformValues = \n/*#__PURE__*/ createConstMap([\n    TMP_CLOUDPLATFORMVALUES_ALIBABA_CLOUD_ECS,\n    TMP_CLOUDPLATFORMVALUES_ALIBABA_CLOUD_FC,\n    TMP_CLOUDPLATFORMVALUES_AWS_EC2,\n    TMP_CLOUDPLATFORMVALUES_AWS_ECS,\n    TMP_CLOUDPLATFORMVALUES_AWS_EKS,\n    TMP_CLOUDPLATFORMVALUES_AWS_LAMBDA,\n    TMP_CLOUDPLATFORMVALUES_AWS_ELASTIC_BEANSTALK,\n    TMP_CLOUDPLATFORMVALUES_AZURE_VM,\n    TMP_CLOUDPLATFORMVALUES_AZURE_CONTAINER_INSTANCES,\n    TMP_CLOUDPLATFORMVALUES_AZURE_AKS,\n    TMP_CLOUDPLATFORMVALUES_AZURE_FUNCTIONS,\n    TMP_CLOUDPLATFORMVALUES_AZURE_APP_SERVICE,\n    TMP_CLOUDPLATFORMVALUES_GCP_COMPUTE_ENGINE,\n    TMP_CLOUDPLATFORMVALUES_GCP_CLOUD_RUN,\n    TMP_CLOUDPLATFORMVALUES_GCP_KUBERNETES_ENGINE,\n    TMP_CLOUDPLATFORMVALUES_GCP_CLOUD_FUNCTIONS,\n    TMP_CLOUDPLATFORMVALUES_GCP_APP_ENGINE,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for AwsEcsLaunchtypeValues enum definition\n *\n * The [launch type](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) for an ECS task.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nvar TMP_AWSECSLAUNCHTYPEVALUES_EC2 = 'ec2';\nvar TMP_AWSECSLAUNCHTYPEVALUES_FARGATE = 'fargate';\n/**\n * The [launch type](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) for an ECS task.\n *\n * @deprecated Use AWS_ECS_LAUNCHTYPE_VALUE_EC2 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var AWSECSLAUNCHTYPEVALUES_EC2 = TMP_AWSECSLAUNCHTYPEVALUES_EC2;\n/**\n * The [launch type](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) for an ECS task.\n *\n * @deprecated Use AWS_ECS_LAUNCHTYPE_VALUE_FARGATE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var AWSECSLAUNCHTYPEVALUES_FARGATE = TMP_AWSECSLAUNCHTYPEVALUES_FARGATE;\n/**\n * The constant map of values for AwsEcsLaunchtypeValues.\n * @deprecated Use the AWSECSLAUNCHTYPEVALUES_XXXXX constants rather than the AwsEcsLaunchtypeValues.XXXXX for bundle minification.\n */\nexport var AwsEcsLaunchtypeValues = \n/*#__PURE__*/ createConstMap([\n    TMP_AWSECSLAUNCHTYPEVALUES_EC2,\n    TMP_AWSECSLAUNCHTYPEVALUES_FARGATE,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for HostArchValues enum definition\n *\n * The CPU architecture the host system is running on.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nvar TMP_HOSTARCHVALUES_AMD64 = 'amd64';\nvar TMP_HOSTARCHVALUES_ARM32 = 'arm32';\nvar TMP_HOSTARCHVALUES_ARM64 = 'arm64';\nvar TMP_HOSTARCHVALUES_IA64 = 'ia64';\nvar TMP_HOSTARCHVALUES_PPC32 = 'ppc32';\nvar TMP_HOSTARCHVALUES_PPC64 = 'ppc64';\nvar TMP_HOSTARCHVALUES_X86 = 'x86';\n/**\n * The CPU architecture the host system is running on.\n *\n * @deprecated Use HOST_ARCH_VALUE_AMD64 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var HOSTARCHVALUES_AMD64 = TMP_HOSTARCHVALUES_AMD64;\n/**\n * The CPU architecture the host system is running on.\n *\n * @deprecated Use HOST_ARCH_VALUE_ARM32 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var HOSTARCHVALUES_ARM32 = TMP_HOSTARCHVALUES_ARM32;\n/**\n * The CPU architecture the host system is running on.\n *\n * @deprecated Use HOST_ARCH_VALUE_ARM64 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var HOSTARCHVALUES_ARM64 = TMP_HOSTARCHVALUES_ARM64;\n/**\n * The CPU architecture the host system is running on.\n *\n * @deprecated Use HOST_ARCH_VALUE_IA64 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var HOSTARCHVALUES_IA64 = TMP_HOSTARCHVALUES_IA64;\n/**\n * The CPU architecture the host system is running on.\n *\n * @deprecated Use HOST_ARCH_VALUE_PPC32 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var HOSTARCHVALUES_PPC32 = TMP_HOSTARCHVALUES_PPC32;\n/**\n * The CPU architecture the host system is running on.\n *\n * @deprecated Use HOST_ARCH_VALUE_PPC64 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var HOSTARCHVALUES_PPC64 = TMP_HOSTARCHVALUES_PPC64;\n/**\n * The CPU architecture the host system is running on.\n *\n * @deprecated Use HOST_ARCH_VALUE_X86 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var HOSTARCHVALUES_X86 = TMP_HOSTARCHVALUES_X86;\n/**\n * The constant map of values for HostArchValues.\n * @deprecated Use the HOSTARCHVALUES_XXXXX constants rather than the HostArchValues.XXXXX for bundle minification.\n */\nexport var HostArchValues = \n/*#__PURE__*/ createConstMap([\n    TMP_HOSTARCHVALUES_AMD64,\n    TMP_HOSTARCHVALUES_ARM32,\n    TMP_HOSTARCHVALUES_ARM64,\n    TMP_HOSTARCHVALUES_IA64,\n    TMP_HOSTARCHVALUES_PPC32,\n    TMP_HOSTARCHVALUES_PPC64,\n    TMP_HOSTARCHVALUES_X86,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for OsTypeValues enum definition\n *\n * The operating system type.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nvar TMP_OSTYPEVALUES_WINDOWS = 'windows';\nvar TMP_OSTYPEVALUES_LINUX = 'linux';\nvar TMP_OSTYPEVALUES_DARWIN = 'darwin';\nvar TMP_OSTYPEVALUES_FREEBSD = 'freebsd';\nvar TMP_OSTYPEVALUES_NETBSD = 'netbsd';\nvar TMP_OSTYPEVALUES_OPENBSD = 'openbsd';\nvar TMP_OSTYPEVALUES_DRAGONFLYBSD = 'dragonflybsd';\nvar TMP_OSTYPEVALUES_HPUX = 'hpux';\nvar TMP_OSTYPEVALUES_AIX = 'aix';\nvar TMP_OSTYPEVALUES_SOLARIS = 'solaris';\nvar TMP_OSTYPEVALUES_Z_OS = 'z_os';\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_WINDOWS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var OSTYPEVALUES_WINDOWS = TMP_OSTYPEVALUES_WINDOWS;\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_LINUX in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var OSTYPEVALUES_LINUX = TMP_OSTYPEVALUES_LINUX;\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_DARWIN in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var OSTYPEVALUES_DARWIN = TMP_OSTYPEVALUES_DARWIN;\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_FREEBSD in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var OSTYPEVALUES_FREEBSD = TMP_OSTYPEVALUES_FREEBSD;\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_NETBSD in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var OSTYPEVALUES_NETBSD = TMP_OSTYPEVALUES_NETBSD;\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_OPENBSD in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var OSTYPEVALUES_OPENBSD = TMP_OSTYPEVALUES_OPENBSD;\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_DRAGONFLYBSD in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var OSTYPEVALUES_DRAGONFLYBSD = TMP_OSTYPEVALUES_DRAGONFLYBSD;\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_HPUX in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var OSTYPEVALUES_HPUX = TMP_OSTYPEVALUES_HPUX;\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_AIX in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var OSTYPEVALUES_AIX = TMP_OSTYPEVALUES_AIX;\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_SOLARIS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var OSTYPEVALUES_SOLARIS = TMP_OSTYPEVALUES_SOLARIS;\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_Z_OS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var OSTYPEVALUES_Z_OS = TMP_OSTYPEVALUES_Z_OS;\n/**\n * The constant map of values for OsTypeValues.\n * @deprecated Use the OSTYPEVALUES_XXXXX constants rather than the OsTypeValues.XXXXX for bundle minification.\n */\nexport var OsTypeValues = \n/*#__PURE__*/ createConstMap([\n    TMP_OSTYPEVALUES_WINDOWS,\n    TMP_OSTYPEVALUES_LINUX,\n    TMP_OSTYPEVALUES_DARWIN,\n    TMP_OSTYPEVALUES_FREEBSD,\n    TMP_OSTYPEVALUES_NETBSD,\n    TMP_OSTYPEVALUES_OPENBSD,\n    TMP_OSTYPEVALUES_DRAGONFLYBSD,\n    TMP_OSTYPEVALUES_HPUX,\n    TMP_OSTYPEVALUES_AIX,\n    TMP_OSTYPEVALUES_SOLARIS,\n    TMP_OSTYPEVALUES_Z_OS,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for TelemetrySdkLanguageValues enum definition\n *\n * The language of the telemetry SDK.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nvar TMP_TELEMETRYSDKLANGUAGEVALUES_CPP = 'cpp';\nvar TMP_TELEMETRYSDKLANGUAGEVALUES_DOTNET = 'dotnet';\nvar TMP_TELEMETRYSDKLANGUAGEVALUES_ERLANG = 'erlang';\nvar TMP_TELEMETRYSDKLANGUAGEVALUES_GO = 'go';\nvar TMP_TELEMETRYSDKLANGUAGEVALUES_JAVA = 'java';\nvar TMP_TELEMETRYSDKLANGUAGEVALUES_NODEJS = 'nodejs';\nvar TMP_TELEMETRYSDKLANGUAGEVALUES_PHP = 'php';\nvar TMP_TELEMETRYSDKLANGUAGEVALUES_PYTHON = 'python';\nvar TMP_TELEMETRYSDKLANGUAGEVALUES_RUBY = 'ruby';\nvar TMP_TELEMETRYSDKLANGUAGEVALUES_WEBJS = 'webjs';\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_CPP.\n */\nexport var TELEMETRYSDKLANGUAGEVALUES_CPP = TMP_TELEMETRYSDKLANGUAGEVALUES_CPP;\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_DOTNET.\n */\nexport var TELEMETRYSDKLANGUAGEVALUES_DOTNET = TMP_TELEMETRYSDKLANGUAGEVALUES_DOTNET;\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_ERLANG.\n */\nexport var TELEMETRYSDKLANGUAGEVALUES_ERLANG = TMP_TELEMETRYSDKLANGUAGEVALUES_ERLANG;\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_GO.\n */\nexport var TELEMETRYSDKLANGUAGEVALUES_GO = TMP_TELEMETRYSDKLANGUAGEVALUES_GO;\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_JAVA.\n */\nexport var TELEMETRYSDKLANGUAGEVALUES_JAVA = TMP_TELEMETRYSDKLANGUAGEVALUES_JAVA;\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_NODEJS.\n */\nexport var TELEMETRYSDKLANGUAGEVALUES_NODEJS = TMP_TELEMETRYSDKLANGUAGEVALUES_NODEJS;\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_PHP.\n */\nexport var TELEMETRYSDKLANGUAGEVALUES_PHP = TMP_TELEMETRYSDKLANGUAGEVALUES_PHP;\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_PYTHON.\n */\nexport var TELEMETRYSDKLANGUAGEVALUES_PYTHON = TMP_TELEMETRYSDKLANGUAGEVALUES_PYTHON;\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_RUBY.\n */\nexport var TELEMETRYSDKLANGUAGEVALUES_RUBY = TMP_TELEMETRYSDKLANGUAGEVALUES_RUBY;\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_WEBJS.\n */\nexport var TELEMETRYSDKLANGUAGEVALUES_WEBJS = TMP_TELEMETRYSDKLANGUAGEVALUES_WEBJS;\n/**\n * The constant map of values for TelemetrySdkLanguageValues.\n * @deprecated Use the TELEMETRYSDKLANGUAGEVALUES_XXXXX constants rather than the TelemetrySdkLanguageValues.XXXXX for bundle minification.\n */\nexport var TelemetrySdkLanguageValues = \n/*#__PURE__*/ createConstMap([\n    TMP_TELEMETRYSDKLANGUAGEVALUES_CPP,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_DOTNET,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_ERLANG,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_GO,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_JAVA,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_NODEJS,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_PHP,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_PYTHON,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_RUBY,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_WEBJS,\n]);\n//# sourceMappingURL=SemanticResourceAttributes.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { createContextKey } from '@opentelemetry/api';\nvar SUPPRESS_TRACING_KEY = createContextKey('OpenTelemetry SDK Context Key SUPPRESS_TRACING');\nexport function suppressTracing(context) {\n    return context.setValue(SUPPRESS_TRACING_KEY, true);\n}\nexport function unsuppressTracing(context) {\n    return context.deleteValue(SUPPRESS_TRACING_KEY);\n}\nexport function isTracingSuppressed(context) {\n    return context.getValue(SUPPRESS_TRACING_KEY) === true;\n}\n//# sourceMappingURL=suppress-tracing.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport var BAGGAGE_KEY_PAIR_SEPARATOR = '=';\nexport var BAGGAGE_PROPERTIES_SEPARATOR = ';';\nexport var BAGGAGE_ITEMS_SEPARATOR = ',';\n// Name of the http header used to propagate the baggage\nexport var BAGGAGE_HEADER = 'baggage';\n// Maximum number of name-value pairs allowed by w3c spec\nexport var BAGGAGE_MAX_NAME_VALUE_PAIRS = 180;\n// Maximum number of bytes per a single name-value pair allowed by w3c spec\nexport var BAGGAGE_MAX_PER_NAME_VALUE_PAIRS = 4096;\n// Maximum total length of all name-value pairs allowed by w3c spec\nexport var BAGGAGE_MAX_TOTAL_LENGTH = 8192;\n//# sourceMappingURL=constants.js.map","var __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { baggageEntryMetadataFromString, } from '@opentelemetry/api';\nimport { BAGGAGE_ITEMS_SEPARATOR, BAGGAGE_PROPERTIES_SEPARATOR, BAGGAGE_KEY_PAIR_SEPARATOR, BAGGAGE_MAX_TOTAL_LENGTH, } from './constants';\nexport function serializeKeyPairs(keyPairs) {\n    return keyPairs.reduce(function (hValue, current) {\n        var value = \"\" + hValue + (hValue !== '' ? BAGGAGE_ITEMS_SEPARATOR : '') + current;\n        return value.length > BAGGAGE_MAX_TOTAL_LENGTH ? hValue : value;\n    }, '');\n}\nexport function getKeyPairs(baggage) {\n    return baggage.getAllEntries().map(function (_a) {\n        var _b = __read(_a, 2), key = _b[0], value = _b[1];\n        var entry = encodeURIComponent(key) + \"=\" + encodeURIComponent(value.value);\n        // include opaque metadata if provided\n        // NOTE: we intentionally don't URI-encode the metadata - that responsibility falls on the metadata implementation\n        if (value.metadata !== undefined) {\n            entry += BAGGAGE_PROPERTIES_SEPARATOR + value.metadata.toString();\n        }\n        return entry;\n    });\n}\nexport function parsePairKeyValue(entry) {\n    var valueProps = entry.split(BAGGAGE_PROPERTIES_SEPARATOR);\n    if (valueProps.length <= 0)\n        return;\n    var keyPairPart = valueProps.shift();\n    if (!keyPairPart)\n        return;\n    var separatorIndex = keyPairPart.indexOf(BAGGAGE_KEY_PAIR_SEPARATOR);\n    if (separatorIndex <= 0)\n        return;\n    var key = decodeURIComponent(keyPairPart.substring(0, separatorIndex).trim());\n    var value = decodeURIComponent(keyPairPart.substring(separatorIndex + 1).trim());\n    var metadata;\n    if (valueProps.length > 0) {\n        metadata = baggageEntryMetadataFromString(valueProps.join(BAGGAGE_PROPERTIES_SEPARATOR));\n    }\n    return { key: key, value: value, metadata: metadata };\n}\n/**\n * Parse a string serialized in the baggage HTTP Format (without metadata):\n * https://github.com/w3c/baggage/blob/master/baggage/HTTP_HEADER_FORMAT.md\n */\nexport function parseKeyPairsIntoRecord(value) {\n    if (typeof value !== 'string' || value.length === 0)\n        return {};\n    return value\n        .split(BAGGAGE_ITEMS_SEPARATOR)\n        .map(function (entry) {\n        return parsePairKeyValue(entry);\n    })\n        .filter(function (keyPair) { return keyPair !== undefined && keyPair.value.length > 0; })\n        .reduce(function (headers, keyPair) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        headers[keyPair.key] = keyPair.value;\n        return headers;\n    }, {});\n}\n//# sourceMappingURL=utils.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { propagation, } from '@opentelemetry/api';\nimport { isTracingSuppressed } from '../../trace/suppress-tracing';\nimport { BAGGAGE_HEADER, BAGGAGE_ITEMS_SEPARATOR, BAGGAGE_MAX_NAME_VALUE_PAIRS, BAGGAGE_MAX_PER_NAME_VALUE_PAIRS, } from '../constants';\nimport { getKeyPairs, parsePairKeyValue, serializeKeyPairs } from '../utils';\n/**\n * Propagates {@link Baggage} through Context format propagation.\n *\n * Based on the Baggage specification:\n * https://w3c.github.io/baggage/\n */\nvar W3CBaggagePropagator = /** @class */ (function () {\n    function W3CBaggagePropagator() {\n    }\n    W3CBaggagePropagator.prototype.inject = function (context, carrier, setter) {\n        var baggage = propagation.getBaggage(context);\n        if (!baggage || isTracingSuppressed(context))\n            return;\n        var keyPairs = getKeyPairs(baggage)\n            .filter(function (pair) {\n            return pair.length <= BAGGAGE_MAX_PER_NAME_VALUE_PAIRS;\n        })\n            .slice(0, BAGGAGE_MAX_NAME_VALUE_PAIRS);\n        var headerValue = serializeKeyPairs(keyPairs);\n        if (headerValue.length > 0) {\n            setter.set(carrier, BAGGAGE_HEADER, headerValue);\n        }\n    };\n    W3CBaggagePropagator.prototype.extract = function (context, carrier, getter) {\n        var headerValue = getter.get(carrier, BAGGAGE_HEADER);\n        var baggageString = Array.isArray(headerValue)\n            ? headerValue.join(BAGGAGE_ITEMS_SEPARATOR)\n            : headerValue;\n        if (!baggageString)\n            return context;\n        var baggage = {};\n        if (baggageString.length === 0) {\n            return context;\n        }\n        var pairs = baggageString.split(BAGGAGE_ITEMS_SEPARATOR);\n        pairs.forEach(function (entry) {\n            var keyPair = parsePairKeyValue(entry);\n            if (keyPair) {\n                var baggageEntry = { value: keyPair.value };\n                if (keyPair.metadata) {\n                    baggageEntry.metadata = keyPair.metadata;\n                }\n                baggage[keyPair.key] = baggageEntry;\n            }\n        });\n        if (Object.entries(baggage).length === 0) {\n            return context;\n        }\n        return propagation.setBaggage(context, propagation.createBaggage(baggage));\n    };\n    W3CBaggagePropagator.prototype.fields = function () {\n        return [BAGGAGE_HEADER];\n    };\n    return W3CBaggagePropagator;\n}());\nexport { W3CBaggagePropagator };\n//# sourceMappingURL=W3CBaggagePropagator.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nimport { diag } from '@opentelemetry/api';\nexport function sanitizeAttributes(attributes) {\n    var e_1, _a;\n    var out = {};\n    if (typeof attributes !== 'object' || attributes == null) {\n        return out;\n    }\n    try {\n        for (var _b = __values(Object.entries(attributes)), _c = _b.next(); !_c.done; _c = _b.next()) {\n            var _d = __read(_c.value, 2), key = _d[0], val = _d[1];\n            if (!isAttributeKey(key)) {\n                diag.warn(\"Invalid attribute key: \" + key);\n                continue;\n            }\n            if (!isAttributeValue(val)) {\n                diag.warn(\"Invalid attribute value set for key: \" + key);\n                continue;\n            }\n            if (Array.isArray(val)) {\n                out[key] = val.slice();\n            }\n            else {\n                out[key] = val;\n            }\n        }\n    }\n    catch (e_1_1) { e_1 = { error: e_1_1 }; }\n    finally {\n        try {\n            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        }\n        finally { if (e_1) throw e_1.error; }\n    }\n    return out;\n}\nexport function isAttributeKey(key) {\n    return typeof key === 'string' && key.length > 0;\n}\nexport function isAttributeValue(val) {\n    if (val == null) {\n        return true;\n    }\n    if (Array.isArray(val)) {\n        return isHomogeneousAttributeValueArray(val);\n    }\n    return isValidPrimitiveAttributeValue(val);\n}\nfunction isHomogeneousAttributeValueArray(arr) {\n    var e_2, _a;\n    var type;\n    try {\n        for (var arr_1 = __values(arr), arr_1_1 = arr_1.next(); !arr_1_1.done; arr_1_1 = arr_1.next()) {\n            var element = arr_1_1.value;\n            // null/undefined elements are allowed\n            if (element == null)\n                continue;\n            if (!type) {\n                if (isValidPrimitiveAttributeValue(element)) {\n                    type = typeof element;\n                    continue;\n                }\n                // encountered an invalid primitive\n                return false;\n            }\n            if (typeof element === type) {\n                continue;\n            }\n            return false;\n        }\n    }\n    catch (e_2_1) { e_2 = { error: e_2_1 }; }\n    finally {\n        try {\n            if (arr_1_1 && !arr_1_1.done && (_a = arr_1.return)) _a.call(arr_1);\n        }\n        finally { if (e_2) throw e_2.error; }\n    }\n    return true;\n}\nfunction isValidPrimitiveAttributeValue(val) {\n    switch (typeof val) {\n        case 'number':\n        case 'boolean':\n        case 'string':\n            return true;\n    }\n    return false;\n}\n//# sourceMappingURL=attributes.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { diag } from '@opentelemetry/api';\n/**\n * Returns a function that logs an error using the provided logger, or a\n * console logger if one was not provided.\n */\nexport function loggingErrorHandler() {\n    return function (ex) {\n        diag.error(stringifyException(ex));\n    };\n}\n/**\n * Converts an exception into a string representation\n * @param {Exception} ex\n */\nfunction stringifyException(ex) {\n    if (typeof ex === 'string') {\n        return ex;\n    }\n    else {\n        return JSON.stringify(flattenException(ex));\n    }\n}\n/**\n * Flattens an exception into key-value pairs by traversing the prototype chain\n * and coercing values to strings. Duplicate properties will not be overwritten;\n * the first insert wins.\n */\nfunction flattenException(ex) {\n    var result = {};\n    var current = ex;\n    while (current !== null) {\n        Object.getOwnPropertyNames(current).forEach(function (propertyName) {\n            if (result[propertyName])\n                return;\n            var value = current[propertyName];\n            if (value) {\n                result[propertyName] = String(value);\n            }\n        });\n        current = Object.getPrototypeOf(current);\n    }\n    return result;\n}\n//# sourceMappingURL=logging-error-handler.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { loggingErrorHandler } from './logging-error-handler';\n/** The global error handler delegate */\nvar delegateHandler = loggingErrorHandler();\n/**\n * Set the global error handler\n * @param {ErrorHandler} handler\n */\nexport function setGlobalErrorHandler(handler) {\n    delegateHandler = handler;\n}\n/**\n * Return the global error handler\n * @param {Exception} ex\n */\nexport function globalErrorHandler(ex) {\n    try {\n        delegateHandler(ex);\n    }\n    catch (_a) { } // eslint-disable-line no-empty\n}\n//# sourceMappingURL=global-error-handler.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport var TracesSamplerValues;\n(function (TracesSamplerValues) {\n    TracesSamplerValues[\"AlwaysOff\"] = \"always_off\";\n    TracesSamplerValues[\"AlwaysOn\"] = \"always_on\";\n    TracesSamplerValues[\"ParentBasedAlwaysOff\"] = \"parentbased_always_off\";\n    TracesSamplerValues[\"ParentBasedAlwaysOn\"] = \"parentbased_always_on\";\n    TracesSamplerValues[\"ParentBasedTraceIdRatio\"] = \"parentbased_traceidratio\";\n    TracesSamplerValues[\"TraceIdRatio\"] = \"traceidratio\";\n})(TracesSamplerValues || (TracesSamplerValues = {}));\n//# sourceMappingURL=sampling.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { DiagLogLevel } from '@opentelemetry/api';\nimport { TracesSamplerValues } from './sampling';\nvar DEFAULT_LIST_SEPARATOR = ',';\n/**\n * Environment interface to define all names\n */\nvar ENVIRONMENT_BOOLEAN_KEYS = ['OTEL_SDK_DISABLED'];\nfunction isEnvVarABoolean(key) {\n    return (ENVIRONMENT_BOOLEAN_KEYS.indexOf(key) > -1);\n}\nvar ENVIRONMENT_NUMBERS_KEYS = [\n    'OTEL_BSP_EXPORT_TIMEOUT',\n    'OTEL_BSP_MAX_EXPORT_BATCH_SIZE',\n    'OTEL_BSP_MAX_QUEUE_SIZE',\n    'OTEL_BSP_SCHEDULE_DELAY',\n    'OTEL_BLRP_EXPORT_TIMEOUT',\n    'OTEL_BLRP_MAX_EXPORT_BATCH_SIZE',\n    'OTEL_BLRP_MAX_QUEUE_SIZE',\n    'OTEL_BLRP_SCHEDULE_DELAY',\n    'OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT',\n    'OTEL_ATTRIBUTE_COUNT_LIMIT',\n    'OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT',\n    'OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT',\n    'OTEL_LOGRECORD_ATTRIBUTE_VALUE_LENGTH_LIMIT',\n    'OTEL_LOGRECORD_ATTRIBUTE_COUNT_LIMIT',\n    'OTEL_SPAN_EVENT_COUNT_LIMIT',\n    'OTEL_SPAN_LINK_COUNT_LIMIT',\n    'OTEL_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT',\n    'OTEL_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT',\n    'OTEL_EXPORTER_OTLP_TIMEOUT',\n    'OTEL_EXPORTER_OTLP_TRACES_TIMEOUT',\n    'OTEL_EXPORTER_OTLP_METRICS_TIMEOUT',\n    'OTEL_EXPORTER_OTLP_LOGS_TIMEOUT',\n    'OTEL_EXPORTER_JAEGER_AGENT_PORT',\n];\nfunction isEnvVarANumber(key) {\n    return (ENVIRONMENT_NUMBERS_KEYS.indexOf(key) > -1);\n}\nvar ENVIRONMENT_LISTS_KEYS = [\n    'OTEL_NO_PATCH_MODULES',\n    'OTEL_PROPAGATORS',\n    'OTEL_SEMCONV_STABILITY_OPT_IN',\n];\nfunction isEnvVarAList(key) {\n    return ENVIRONMENT_LISTS_KEYS.indexOf(key) > -1;\n}\nexport var DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT = Infinity;\nexport var DEFAULT_ATTRIBUTE_COUNT_LIMIT = 128;\nexport var DEFAULT_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT = 128;\nexport var DEFAULT_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT = 128;\n/**\n * Default environment variables\n */\nexport var DEFAULT_ENVIRONMENT = {\n    OTEL_SDK_DISABLED: false,\n    CONTAINER_NAME: '',\n    ECS_CONTAINER_METADATA_URI_V4: '',\n    ECS_CONTAINER_METADATA_URI: '',\n    HOSTNAME: '',\n    KUBERNETES_SERVICE_HOST: '',\n    NAMESPACE: '',\n    OTEL_BSP_EXPORT_TIMEOUT: 30000,\n    OTEL_BSP_MAX_EXPORT_BATCH_SIZE: 512,\n    OTEL_BSP_MAX_QUEUE_SIZE: 2048,\n    OTEL_BSP_SCHEDULE_DELAY: 5000,\n    OTEL_BLRP_EXPORT_TIMEOUT: 30000,\n    OTEL_BLRP_MAX_EXPORT_BATCH_SIZE: 512,\n    OTEL_BLRP_MAX_QUEUE_SIZE: 2048,\n    OTEL_BLRP_SCHEDULE_DELAY: 5000,\n    OTEL_EXPORTER_JAEGER_AGENT_HOST: '',\n    OTEL_EXPORTER_JAEGER_AGENT_PORT: 6832,\n    OTEL_EXPORTER_JAEGER_ENDPOINT: '',\n    OTEL_EXPORTER_JAEGER_PASSWORD: '',\n    OTEL_EXPORTER_JAEGER_USER: '',\n    OTEL_EXPORTER_OTLP_ENDPOINT: '',\n    OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: '',\n    OTEL_EXPORTER_OTLP_METRICS_ENDPOINT: '',\n    OTEL_EXPORTER_OTLP_LOGS_ENDPOINT: '',\n    OTEL_EXPORTER_OTLP_HEADERS: '',\n    OTEL_EXPORTER_OTLP_TRACES_HEADERS: '',\n    OTEL_EXPORTER_OTLP_METRICS_HEADERS: '',\n    OTEL_EXPORTER_OTLP_LOGS_HEADERS: '',\n    OTEL_EXPORTER_OTLP_TIMEOUT: 10000,\n    OTEL_EXPORTER_OTLP_TRACES_TIMEOUT: 10000,\n    OTEL_EXPORTER_OTLP_METRICS_TIMEOUT: 10000,\n    OTEL_EXPORTER_OTLP_LOGS_TIMEOUT: 10000,\n    OTEL_EXPORTER_ZIPKIN_ENDPOINT: 'http://localhost:9411/api/v2/spans',\n    OTEL_LOG_LEVEL: DiagLogLevel.INFO,\n    OTEL_NO_PATCH_MODULES: [],\n    OTEL_PROPAGATORS: ['tracecontext', 'baggage'],\n    OTEL_RESOURCE_ATTRIBUTES: '',\n    OTEL_SERVICE_NAME: '',\n    OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT: DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n    OTEL_ATTRIBUTE_COUNT_LIMIT: DEFAULT_ATTRIBUTE_COUNT_LIMIT,\n    OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT: DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n    OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT: DEFAULT_ATTRIBUTE_COUNT_LIMIT,\n    OTEL_LOGRECORD_ATTRIBUTE_VALUE_LENGTH_LIMIT: DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n    OTEL_LOGRECORD_ATTRIBUTE_COUNT_LIMIT: DEFAULT_ATTRIBUTE_COUNT_LIMIT,\n    OTEL_SPAN_EVENT_COUNT_LIMIT: 128,\n    OTEL_SPAN_LINK_COUNT_LIMIT: 128,\n    OTEL_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT: DEFAULT_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT,\n    OTEL_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT: DEFAULT_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT,\n    OTEL_TRACES_EXPORTER: '',\n    OTEL_TRACES_SAMPLER: TracesSamplerValues.ParentBasedAlwaysOn,\n    OTEL_TRACES_SAMPLER_ARG: '',\n    OTEL_LOGS_EXPORTER: '',\n    OTEL_EXPORTER_OTLP_INSECURE: '',\n    OTEL_EXPORTER_OTLP_TRACES_INSECURE: '',\n    OTEL_EXPORTER_OTLP_METRICS_INSECURE: '',\n    OTEL_EXPORTER_OTLP_LOGS_INSECURE: '',\n    OTEL_EXPORTER_OTLP_CERTIFICATE: '',\n    OTEL_EXPORTER_OTLP_TRACES_CERTIFICATE: '',\n    OTEL_EXPORTER_OTLP_METRICS_CERTIFICATE: '',\n    OTEL_EXPORTER_OTLP_LOGS_CERTIFICATE: '',\n    OTEL_EXPORTER_OTLP_COMPRESSION: '',\n    OTEL_EXPORTER_OTLP_TRACES_COMPRESSION: '',\n    OTEL_EXPORTER_OTLP_METRICS_COMPRESSION: '',\n    OTEL_EXPORTER_OTLP_LOGS_COMPRESSION: '',\n    OTEL_EXPORTER_OTLP_CLIENT_KEY: '',\n    OTEL_EXPORTER_OTLP_TRACES_CLIENT_KEY: '',\n    OTEL_EXPORTER_OTLP_METRICS_CLIENT_KEY: '',\n    OTEL_EXPORTER_OTLP_LOGS_CLIENT_KEY: '',\n    OTEL_EXPORTER_OTLP_CLIENT_CERTIFICATE: '',\n    OTEL_EXPORTER_OTLP_TRACES_CLIENT_CERTIFICATE: '',\n    OTEL_EXPORTER_OTLP_METRICS_CLIENT_CERTIFICATE: '',\n    OTEL_EXPORTER_OTLP_LOGS_CLIENT_CERTIFICATE: '',\n    OTEL_EXPORTER_OTLP_PROTOCOL: 'http/protobuf',\n    OTEL_EXPORTER_OTLP_TRACES_PROTOCOL: 'http/protobuf',\n    OTEL_EXPORTER_OTLP_METRICS_PROTOCOL: 'http/protobuf',\n    OTEL_EXPORTER_OTLP_LOGS_PROTOCOL: 'http/protobuf',\n    OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE: 'cumulative',\n    OTEL_SEMCONV_STABILITY_OPT_IN: [],\n};\n/**\n * @param key\n * @param environment\n * @param values\n */\nfunction parseBoolean(key, environment, values) {\n    if (typeof values[key] === 'undefined') {\n        return;\n    }\n    var value = String(values[key]);\n    // support case-insensitive \"true\"\n    environment[key] = value.toLowerCase() === 'true';\n}\n/**\n * Parses a variable as number with number validation\n * @param name\n * @param environment\n * @param values\n * @param min\n * @param max\n */\nfunction parseNumber(name, environment, values, min, max) {\n    if (min === void 0) { min = -Infinity; }\n    if (max === void 0) { max = Infinity; }\n    if (typeof values[name] !== 'undefined') {\n        var value = Number(values[name]);\n        if (!isNaN(value)) {\n            if (value < min) {\n                environment[name] = min;\n            }\n            else if (value > max) {\n                environment[name] = max;\n            }\n            else {\n                environment[name] = value;\n            }\n        }\n    }\n}\n/**\n * Parses list-like strings from input into output.\n * @param name\n * @param environment\n * @param values\n * @param separator\n */\nfunction parseStringList(name, output, input, separator) {\n    if (separator === void 0) { separator = DEFAULT_LIST_SEPARATOR; }\n    var givenValue = input[name];\n    if (typeof givenValue === 'string') {\n        output[name] = givenValue.split(separator).map(function (v) { return v.trim(); });\n    }\n}\n// The support string -> DiagLogLevel mappings\nvar logLevelMap = {\n    ALL: DiagLogLevel.ALL,\n    VERBOSE: DiagLogLevel.VERBOSE,\n    DEBUG: DiagLogLevel.DEBUG,\n    INFO: DiagLogLevel.INFO,\n    WARN: DiagLogLevel.WARN,\n    ERROR: DiagLogLevel.ERROR,\n    NONE: DiagLogLevel.NONE,\n};\n/**\n * Environmentally sets log level if valid log level string is provided\n * @param key\n * @param environment\n * @param values\n */\nfunction setLogLevelFromEnv(key, environment, values) {\n    var value = values[key];\n    if (typeof value === 'string') {\n        var theLevel = logLevelMap[value.toUpperCase()];\n        if (theLevel != null) {\n            environment[key] = theLevel;\n        }\n    }\n}\n/**\n * Parses environment values\n * @param values\n */\nexport function parseEnvironment(values) {\n    var environment = {};\n    for (var env in DEFAULT_ENVIRONMENT) {\n        var key = env;\n        switch (key) {\n            case 'OTEL_LOG_LEVEL':\n                setLogLevelFromEnv(key, environment, values);\n                break;\n            default:\n                if (isEnvVarABoolean(key)) {\n                    parseBoolean(key, environment, values);\n                }\n                else if (isEnvVarANumber(key)) {\n                    parseNumber(key, environment, values);\n                }\n                else if (isEnvVarAList(key)) {\n                    parseStringList(key, environment, values);\n                }\n                else {\n                    var value = values[key];\n                    if (typeof value !== 'undefined' && value !== null) {\n                        environment[key] = String(value);\n                    }\n                }\n        }\n    }\n    return environment;\n}\n//# sourceMappingURL=environment.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { DEFAULT_ENVIRONMENT, parseEnvironment, } from '../../utils/environment';\n/**\n * Gets the environment variables\n */\nexport function getEnv() {\n    var processEnv = parseEnvironment(process.env);\n    return Object.assign({}, DEFAULT_ENVIRONMENT, processEnv);\n}\nexport function getEnvWithoutDefaults() {\n    return parseEnvironment(process.env);\n}\n//# sourceMappingURL=environment.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { performance } from 'perf_hooks';\nexport var otperformance = performance;\n//# sourceMappingURL=performance.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// this is autogenerated file, see scripts/version-update.js\nexport var VERSION = '1.30.1';\n//# sourceMappingURL=version.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { createConstMap } from '../internal/utils';\n//----------------------------------------------------------------------------------------------------------\n// DO NOT EDIT, this is an Auto-generated file from scripts/semconv/templates//templates/SemanticAttributes.ts.j2\n//----------------------------------------------------------------------------------------------------------\n//----------------------------------------------------------------------------------------------------------\n// Constant values for SemanticResourceAttributes\n//----------------------------------------------------------------------------------------------------------\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nvar TMP_CLOUD_PROVIDER = 'cloud.provider';\nvar TMP_CLOUD_ACCOUNT_ID = 'cloud.account.id';\nvar TMP_CLOUD_REGION = 'cloud.region';\nvar TMP_CLOUD_AVAILABILITY_ZONE = 'cloud.availability_zone';\nvar TMP_CLOUD_PLATFORM = 'cloud.platform';\nvar TMP_AWS_ECS_CONTAINER_ARN = 'aws.ecs.container.arn';\nvar TMP_AWS_ECS_CLUSTER_ARN = 'aws.ecs.cluster.arn';\nvar TMP_AWS_ECS_LAUNCHTYPE = 'aws.ecs.launchtype';\nvar TMP_AWS_ECS_TASK_ARN = 'aws.ecs.task.arn';\nvar TMP_AWS_ECS_TASK_FAMILY = 'aws.ecs.task.family';\nvar TMP_AWS_ECS_TASK_REVISION = 'aws.ecs.task.revision';\nvar TMP_AWS_EKS_CLUSTER_ARN = 'aws.eks.cluster.arn';\nvar TMP_AWS_LOG_GROUP_NAMES = 'aws.log.group.names';\nvar TMP_AWS_LOG_GROUP_ARNS = 'aws.log.group.arns';\nvar TMP_AWS_LOG_STREAM_NAMES = 'aws.log.stream.names';\nvar TMP_AWS_LOG_STREAM_ARNS = 'aws.log.stream.arns';\nvar TMP_CONTAINER_NAME = 'container.name';\nvar TMP_CONTAINER_ID = 'container.id';\nvar TMP_CONTAINER_RUNTIME = 'container.runtime';\nvar TMP_CONTAINER_IMAGE_NAME = 'container.image.name';\nvar TMP_CONTAINER_IMAGE_TAG = 'container.image.tag';\nvar TMP_DEPLOYMENT_ENVIRONMENT = 'deployment.environment';\nvar TMP_DEVICE_ID = 'device.id';\nvar TMP_DEVICE_MODEL_IDENTIFIER = 'device.model.identifier';\nvar TMP_DEVICE_MODEL_NAME = 'device.model.name';\nvar TMP_FAAS_NAME = 'faas.name';\nvar TMP_FAAS_ID = 'faas.id';\nvar TMP_FAAS_VERSION = 'faas.version';\nvar TMP_FAAS_INSTANCE = 'faas.instance';\nvar TMP_FAAS_MAX_MEMORY = 'faas.max_memory';\nvar TMP_HOST_ID = 'host.id';\nvar TMP_HOST_NAME = 'host.name';\nvar TMP_HOST_TYPE = 'host.type';\nvar TMP_HOST_ARCH = 'host.arch';\nvar TMP_HOST_IMAGE_NAME = 'host.image.name';\nvar TMP_HOST_IMAGE_ID = 'host.image.id';\nvar TMP_HOST_IMAGE_VERSION = 'host.image.version';\nvar TMP_K8S_CLUSTER_NAME = 'k8s.cluster.name';\nvar TMP_K8S_NODE_NAME = 'k8s.node.name';\nvar TMP_K8S_NODE_UID = 'k8s.node.uid';\nvar TMP_K8S_NAMESPACE_NAME = 'k8s.namespace.name';\nvar TMP_K8S_POD_UID = 'k8s.pod.uid';\nvar TMP_K8S_POD_NAME = 'k8s.pod.name';\nvar TMP_K8S_CONTAINER_NAME = 'k8s.container.name';\nvar TMP_K8S_REPLICASET_UID = 'k8s.replicaset.uid';\nvar TMP_K8S_REPLICASET_NAME = 'k8s.replicaset.name';\nvar TMP_K8S_DEPLOYMENT_UID = 'k8s.deployment.uid';\nvar TMP_K8S_DEPLOYMENT_NAME = 'k8s.deployment.name';\nvar TMP_K8S_STATEFULSET_UID = 'k8s.statefulset.uid';\nvar TMP_K8S_STATEFULSET_NAME = 'k8s.statefulset.name';\nvar TMP_K8S_DAEMONSET_UID = 'k8s.daemonset.uid';\nvar TMP_K8S_DAEMONSET_NAME = 'k8s.daemonset.name';\nvar TMP_K8S_JOB_UID = 'k8s.job.uid';\nvar TMP_K8S_JOB_NAME = 'k8s.job.name';\nvar TMP_K8S_CRONJOB_UID = 'k8s.cronjob.uid';\nvar TMP_K8S_CRONJOB_NAME = 'k8s.cronjob.name';\nvar TMP_OS_TYPE = 'os.type';\nvar TMP_OS_DESCRIPTION = 'os.description';\nvar TMP_OS_NAME = 'os.name';\nvar TMP_OS_VERSION = 'os.version';\nvar TMP_PROCESS_PID = 'process.pid';\nvar TMP_PROCESS_EXECUTABLE_NAME = 'process.executable.name';\nvar TMP_PROCESS_EXECUTABLE_PATH = 'process.executable.path';\nvar TMP_PROCESS_COMMAND = 'process.command';\nvar TMP_PROCESS_COMMAND_LINE = 'process.command_line';\nvar TMP_PROCESS_COMMAND_ARGS = 'process.command_args';\nvar TMP_PROCESS_OWNER = 'process.owner';\nvar TMP_PROCESS_RUNTIME_NAME = 'process.runtime.name';\nvar TMP_PROCESS_RUNTIME_VERSION = 'process.runtime.version';\nvar TMP_PROCESS_RUNTIME_DESCRIPTION = 'process.runtime.description';\nvar TMP_SERVICE_NAME = 'service.name';\nvar TMP_SERVICE_NAMESPACE = 'service.namespace';\nvar TMP_SERVICE_INSTANCE_ID = 'service.instance.id';\nvar TMP_SERVICE_VERSION = 'service.version';\nvar TMP_TELEMETRY_SDK_NAME = 'telemetry.sdk.name';\nvar TMP_TELEMETRY_SDK_LANGUAGE = 'telemetry.sdk.language';\nvar TMP_TELEMETRY_SDK_VERSION = 'telemetry.sdk.version';\nvar TMP_TELEMETRY_AUTO_VERSION = 'telemetry.auto.version';\nvar TMP_WEBENGINE_NAME = 'webengine.name';\nvar TMP_WEBENGINE_VERSION = 'webengine.version';\nvar TMP_WEBENGINE_DESCRIPTION = 'webengine.description';\n/**\n * Name of the cloud provider.\n *\n * @deprecated Use ATTR_CLOUD_PROVIDER in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_CLOUD_PROVIDER = TMP_CLOUD_PROVIDER;\n/**\n * The cloud account ID the resource is assigned to.\n *\n * @deprecated Use ATTR_CLOUD_ACCOUNT_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_CLOUD_ACCOUNT_ID = TMP_CLOUD_ACCOUNT_ID;\n/**\n * The geographical region the resource is running. Refer to your provider&#39;s docs to see the available regions, for example [Alibaba Cloud regions](https://www.alibabacloud.com/help/doc-detail/40654.htm), [AWS regions](https://aws.amazon.com/about-aws/global-infrastructure/regions_az/), [Azure regions](https://azure.microsoft.com/en-us/global-infrastructure/geographies/), or [Google Cloud regions](https://cloud.google.com/about/locations).\n *\n * @deprecated Use ATTR_CLOUD_REGION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_CLOUD_REGION = TMP_CLOUD_REGION;\n/**\n * Cloud regions often have multiple, isolated locations known as zones to increase availability. Availability zone represents the zone where the resource is running.\n *\n * Note: Availability zones are called &#34;zones&#34; on Alibaba Cloud and Google Cloud.\n *\n * @deprecated Use ATTR_CLOUD_AVAILABILITY_ZONE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_CLOUD_AVAILABILITY_ZONE = TMP_CLOUD_AVAILABILITY_ZONE;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use ATTR_CLOUD_PLATFORM in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_CLOUD_PLATFORM = TMP_CLOUD_PLATFORM;\n/**\n * The Amazon Resource Name (ARN) of an [ECS container instance](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ECS_instances.html).\n *\n * @deprecated Use ATTR_AWS_ECS_CONTAINER_ARN in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_AWS_ECS_CONTAINER_ARN = TMP_AWS_ECS_CONTAINER_ARN;\n/**\n * The ARN of an [ECS cluster](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/clusters.html).\n *\n * @deprecated Use ATTR_AWS_ECS_CLUSTER_ARN in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_AWS_ECS_CLUSTER_ARN = TMP_AWS_ECS_CLUSTER_ARN;\n/**\n * The [launch type](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) for an ECS task.\n *\n * @deprecated Use ATTR_AWS_ECS_LAUNCHTYPE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_AWS_ECS_LAUNCHTYPE = TMP_AWS_ECS_LAUNCHTYPE;\n/**\n * The ARN of an [ECS task definition](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definitions.html).\n *\n * @deprecated Use ATTR_AWS_ECS_TASK_ARN in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_AWS_ECS_TASK_ARN = TMP_AWS_ECS_TASK_ARN;\n/**\n * The task definition family this task definition is a member of.\n *\n * @deprecated Use ATTR_AWS_ECS_TASK_FAMILY in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_AWS_ECS_TASK_FAMILY = TMP_AWS_ECS_TASK_FAMILY;\n/**\n * The revision for this task definition.\n *\n * @deprecated Use ATTR_AWS_ECS_TASK_REVISION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_AWS_ECS_TASK_REVISION = TMP_AWS_ECS_TASK_REVISION;\n/**\n * The ARN of an EKS cluster.\n *\n * @deprecated Use ATTR_AWS_EKS_CLUSTER_ARN in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_AWS_EKS_CLUSTER_ARN = TMP_AWS_EKS_CLUSTER_ARN;\n/**\n * The name(s) of the AWS log group(s) an application is writing to.\n *\n * Note: Multiple log groups must be supported for cases like multi-container applications, where a single application has sidecar containers, and each write to their own log group.\n *\n * @deprecated Use ATTR_AWS_LOG_GROUP_NAMES in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_AWS_LOG_GROUP_NAMES = TMP_AWS_LOG_GROUP_NAMES;\n/**\n * The Amazon Resource Name(s) (ARN) of the AWS log group(s).\n *\n * Note: See the [log group ARN format documentation](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/iam-access-control-overview-cwl.html#CWL_ARN_Format).\n *\n * @deprecated Use ATTR_AWS_LOG_GROUP_ARNS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_AWS_LOG_GROUP_ARNS = TMP_AWS_LOG_GROUP_ARNS;\n/**\n * The name(s) of the AWS log stream(s) an application is writing to.\n *\n * @deprecated Use ATTR_AWS_LOG_STREAM_NAMES in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_AWS_LOG_STREAM_NAMES = TMP_AWS_LOG_STREAM_NAMES;\n/**\n * The ARN(s) of the AWS log stream(s).\n *\n * Note: See the [log stream ARN format documentation](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/iam-access-control-overview-cwl.html#CWL_ARN_Format). One log group can contain several log streams, so these ARNs necessarily identify both a log group and a log stream.\n *\n * @deprecated Use ATTR_AWS_LOG_STREAM_ARNS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_AWS_LOG_STREAM_ARNS = TMP_AWS_LOG_STREAM_ARNS;\n/**\n * Container name.\n *\n * @deprecated Use ATTR_CONTAINER_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_CONTAINER_NAME = TMP_CONTAINER_NAME;\n/**\n * Container ID. Usually a UUID, as for example used to [identify Docker containers](https://docs.docker.com/engine/reference/run/#container-identification). The UUID might be abbreviated.\n *\n * @deprecated Use ATTR_CONTAINER_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_CONTAINER_ID = TMP_CONTAINER_ID;\n/**\n * The container runtime managing this container.\n *\n * @deprecated Use ATTR_CONTAINER_RUNTIME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_CONTAINER_RUNTIME = TMP_CONTAINER_RUNTIME;\n/**\n * Name of the image the container was built on.\n *\n * @deprecated Use ATTR_CONTAINER_IMAGE_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_CONTAINER_IMAGE_NAME = TMP_CONTAINER_IMAGE_NAME;\n/**\n * Container image tag.\n *\n * @deprecated Use ATTR_CONTAINER_IMAGE_TAGS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_CONTAINER_IMAGE_TAG = TMP_CONTAINER_IMAGE_TAG;\n/**\n * Name of the [deployment environment](https://en.wikipedia.org/wiki/Deployment_environment) (aka deployment tier).\n *\n * @deprecated Use ATTR_DEPLOYMENT_ENVIRONMENT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_DEPLOYMENT_ENVIRONMENT = TMP_DEPLOYMENT_ENVIRONMENT;\n/**\n * A unique identifier representing the device.\n *\n * Note: The device identifier MUST only be defined using the values outlined below. This value is not an advertising identifier and MUST NOT be used as such. On iOS (Swift or Objective-C), this value MUST be equal to the [vendor identifier](https://developer.apple.com/documentation/uikit/uidevice/1620059-identifierforvendor). On Android (Java or Kotlin), this value MUST be equal to the Firebase Installation ID or a globally unique UUID which is persisted across sessions in your application. More information can be found [here](https://developer.android.com/training/articles/user-data-ids) on best practices and exact implementation details. Caution should be taken when storing personal data or anything which can identify a user. GDPR and data protection laws may apply, ensure you do your own due diligence.\n *\n * @deprecated Use ATTR_DEVICE_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_DEVICE_ID = TMP_DEVICE_ID;\n/**\n * The model identifier for the device.\n *\n * Note: It&#39;s recommended this value represents a machine readable version of the model identifier rather than the market or consumer-friendly name of the device.\n *\n * @deprecated Use ATTR_DEVICE_MODEL_IDENTIFIER in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_DEVICE_MODEL_IDENTIFIER = TMP_DEVICE_MODEL_IDENTIFIER;\n/**\n * The marketing name for the device model.\n *\n * Note: It&#39;s recommended this value represents a human readable version of the device model rather than a machine readable alternative.\n *\n * @deprecated Use ATTR_DEVICE_MODEL_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_DEVICE_MODEL_NAME = TMP_DEVICE_MODEL_NAME;\n/**\n * The name of the single function that this runtime instance executes.\n *\n * Note: This is the name of the function as configured/deployed on the FaaS platform and is usually different from the name of the callback function (which may be stored in the [`code.namespace`/`code.function`](../../trace/semantic_conventions/span-general.md#source-code-attributes) span attributes).\n *\n * @deprecated Use ATTR_FAAS_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_FAAS_NAME = TMP_FAAS_NAME;\n/**\n* The unique ID of the single function that this runtime instance executes.\n*\n* Note: Depending on the cloud provider, use:\n\n* **AWS Lambda:** The function [ARN](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).\nTake care not to use the &#34;invoked ARN&#34; directly but replace any\n[alias suffix](https://docs.aws.amazon.com/lambda/latest/dg/configuration-aliases.html) with the resolved function version, as the same runtime instance may be invokable with multiple\ndifferent aliases.\n* **GCP:** The [URI of the resource](https://cloud.google.com/iam/docs/full-resource-names)\n* **Azure:** The [Fully Qualified Resource ID](https://docs.microsoft.com/en-us/rest/api/resources/resources/get-by-id).\n\nOn some providers, it may not be possible to determine the full ID at startup,\nwhich is why this field cannot be made required. For example, on AWS the account ID\npart of the ARN is not available without calling another AWS API\nwhich may be deemed too slow for a short-running lambda function.\nAs an alternative, consider setting `faas.id` as a span attribute instead.\n*\n* @deprecated Use ATTR_CLOUD_RESOURCE_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n*/\nexport var SEMRESATTRS_FAAS_ID = TMP_FAAS_ID;\n/**\n* The immutable version of the function being executed.\n*\n* Note: Depending on the cloud provider and platform, use:\n\n* **AWS Lambda:** The [function version](https://docs.aws.amazon.com/lambda/latest/dg/configuration-versions.html)\n  (an integer represented as a decimal string).\n* **Google Cloud Run:** The [revision](https://cloud.google.com/run/docs/managing/revisions)\n  (i.e., the function name plus the revision suffix).\n* **Google Cloud Functions:** The value of the\n  [`K_REVISION` environment variable](https://cloud.google.com/functions/docs/env-var#runtime_environment_variables_set_automatically).\n* **Azure Functions:** Not applicable. Do not set this attribute.\n*\n* @deprecated Use ATTR_FAAS_VERSION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n*/\nexport var SEMRESATTRS_FAAS_VERSION = TMP_FAAS_VERSION;\n/**\n * The execution environment ID as a string, that will be potentially reused for other invocations to the same function/function version.\n *\n * Note: * **AWS Lambda:** Use the (full) log stream name.\n *\n * @deprecated Use ATTR_FAAS_INSTANCE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_FAAS_INSTANCE = TMP_FAAS_INSTANCE;\n/**\n * The amount of memory available to the serverless function in MiB.\n *\n * Note: It&#39;s recommended to set this attribute since e.g. too little memory can easily stop a Java AWS Lambda function from working correctly. On AWS Lambda, the environment variable `AWS_LAMBDA_FUNCTION_MEMORY_SIZE` provides this information.\n *\n * @deprecated Use ATTR_FAAS_MAX_MEMORY in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_FAAS_MAX_MEMORY = TMP_FAAS_MAX_MEMORY;\n/**\n * Unique host ID. For Cloud, this must be the instance_id assigned by the cloud provider.\n *\n * @deprecated Use ATTR_HOST_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_HOST_ID = TMP_HOST_ID;\n/**\n * Name of the host. On Unix systems, it may contain what the hostname command returns, or the fully qualified hostname, or another name specified by the user.\n *\n * @deprecated Use ATTR_HOST_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_HOST_NAME = TMP_HOST_NAME;\n/**\n * Type of host. For Cloud, this must be the machine type.\n *\n * @deprecated Use ATTR_HOST_TYPE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_HOST_TYPE = TMP_HOST_TYPE;\n/**\n * The CPU architecture the host system is running on.\n *\n * @deprecated Use ATTR_HOST_ARCH in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_HOST_ARCH = TMP_HOST_ARCH;\n/**\n * Name of the VM image or OS install the host was instantiated from.\n *\n * @deprecated Use ATTR_HOST_IMAGE_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_HOST_IMAGE_NAME = TMP_HOST_IMAGE_NAME;\n/**\n * VM image ID. For Cloud, this value is from the provider.\n *\n * @deprecated Use ATTR_HOST_IMAGE_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_HOST_IMAGE_ID = TMP_HOST_IMAGE_ID;\n/**\n * The version string of the VM image as defined in [Version Attributes](README.md#version-attributes).\n *\n * @deprecated Use ATTR_HOST_IMAGE_VERSION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_HOST_IMAGE_VERSION = TMP_HOST_IMAGE_VERSION;\n/**\n * The name of the cluster.\n *\n * @deprecated Use ATTR_K8S_CLUSTER_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_K8S_CLUSTER_NAME = TMP_K8S_CLUSTER_NAME;\n/**\n * The name of the Node.\n *\n * @deprecated Use ATTR_K8S_NODE_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_K8S_NODE_NAME = TMP_K8S_NODE_NAME;\n/**\n * The UID of the Node.\n *\n * @deprecated Use ATTR_K8S_NODE_UID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_K8S_NODE_UID = TMP_K8S_NODE_UID;\n/**\n * The name of the namespace that the pod is running in.\n *\n * @deprecated Use ATTR_K8S_NAMESPACE_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_K8S_NAMESPACE_NAME = TMP_K8S_NAMESPACE_NAME;\n/**\n * The UID of the Pod.\n *\n * @deprecated Use ATTR_K8S_POD_UID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_K8S_POD_UID = TMP_K8S_POD_UID;\n/**\n * The name of the Pod.\n *\n * @deprecated Use ATTR_K8S_POD_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_K8S_POD_NAME = TMP_K8S_POD_NAME;\n/**\n * The name of the Container in a Pod template.\n *\n * @deprecated Use ATTR_K8S_CONTAINER_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_K8S_CONTAINER_NAME = TMP_K8S_CONTAINER_NAME;\n/**\n * The UID of the ReplicaSet.\n *\n * @deprecated Use ATTR_K8S_REPLICASET_UID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_K8S_REPLICASET_UID = TMP_K8S_REPLICASET_UID;\n/**\n * The name of the ReplicaSet.\n *\n * @deprecated Use ATTR_K8S_REPLICASET_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_K8S_REPLICASET_NAME = TMP_K8S_REPLICASET_NAME;\n/**\n * The UID of the Deployment.\n *\n * @deprecated Use ATTR_K8S_DEPLOYMENT_UID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_K8S_DEPLOYMENT_UID = TMP_K8S_DEPLOYMENT_UID;\n/**\n * The name of the Deployment.\n *\n * @deprecated Use ATTR_K8S_DEPLOYMENT_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_K8S_DEPLOYMENT_NAME = TMP_K8S_DEPLOYMENT_NAME;\n/**\n * The UID of the StatefulSet.\n *\n * @deprecated Use ATTR_K8S_STATEFULSET_UID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_K8S_STATEFULSET_UID = TMP_K8S_STATEFULSET_UID;\n/**\n * The name of the StatefulSet.\n *\n * @deprecated Use ATTR_K8S_STATEFULSET_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_K8S_STATEFULSET_NAME = TMP_K8S_STATEFULSET_NAME;\n/**\n * The UID of the DaemonSet.\n *\n * @deprecated Use ATTR_K8S_DAEMONSET_UID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_K8S_DAEMONSET_UID = TMP_K8S_DAEMONSET_UID;\n/**\n * The name of the DaemonSet.\n *\n * @deprecated Use ATTR_K8S_DAEMONSET_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_K8S_DAEMONSET_NAME = TMP_K8S_DAEMONSET_NAME;\n/**\n * The UID of the Job.\n *\n * @deprecated Use ATTR_K8S_JOB_UID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_K8S_JOB_UID = TMP_K8S_JOB_UID;\n/**\n * The name of the Job.\n *\n * @deprecated Use ATTR_K8S_JOB_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_K8S_JOB_NAME = TMP_K8S_JOB_NAME;\n/**\n * The UID of the CronJob.\n *\n * @deprecated Use ATTR_K8S_CRONJOB_UID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_K8S_CRONJOB_UID = TMP_K8S_CRONJOB_UID;\n/**\n * The name of the CronJob.\n *\n * @deprecated Use ATTR_K8S_CRONJOB_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_K8S_CRONJOB_NAME = TMP_K8S_CRONJOB_NAME;\n/**\n * The operating system type.\n *\n * @deprecated Use ATTR_OS_TYPE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_OS_TYPE = TMP_OS_TYPE;\n/**\n * Human readable (not intended to be parsed) OS version information, like e.g. reported by `ver` or `lsb_release -a` commands.\n *\n * @deprecated Use ATTR_OS_DESCRIPTION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_OS_DESCRIPTION = TMP_OS_DESCRIPTION;\n/**\n * Human readable operating system name.\n *\n * @deprecated Use ATTR_OS_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_OS_NAME = TMP_OS_NAME;\n/**\n * The version string of the operating system as defined in [Version Attributes](../../resource/semantic_conventions/README.md#version-attributes).\n *\n * @deprecated Use ATTR_OS_VERSION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_OS_VERSION = TMP_OS_VERSION;\n/**\n * Process identifier (PID).\n *\n * @deprecated Use ATTR_PROCESS_PID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_PROCESS_PID = TMP_PROCESS_PID;\n/**\n * The name of the process executable. On Linux based systems, can be set to the `Name` in `proc/[pid]/status`. On Windows, can be set to the base name of `GetProcessImageFileNameW`.\n *\n * @deprecated Use ATTR_PROCESS_EXECUTABLE_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_PROCESS_EXECUTABLE_NAME = TMP_PROCESS_EXECUTABLE_NAME;\n/**\n * The full path to the process executable. On Linux based systems, can be set to the target of `proc/[pid]/exe`. On Windows, can be set to the result of `GetProcessImageFileNameW`.\n *\n * @deprecated Use ATTR_PROCESS_EXECUTABLE_PATH in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_PROCESS_EXECUTABLE_PATH = TMP_PROCESS_EXECUTABLE_PATH;\n/**\n * The command used to launch the process (i.e. the command name). On Linux based systems, can be set to the zeroth string in `proc/[pid]/cmdline`. On Windows, can be set to the first parameter extracted from `GetCommandLineW`.\n *\n * @deprecated Use ATTR_PROCESS_COMMAND in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_PROCESS_COMMAND = TMP_PROCESS_COMMAND;\n/**\n * The full command used to launch the process as a single string representing the full command. On Windows, can be set to the result of `GetCommandLineW`. Do not set this if you have to assemble it just for monitoring; use `process.command_args` instead.\n *\n * @deprecated Use ATTR_PROCESS_COMMAND_LINE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_PROCESS_COMMAND_LINE = TMP_PROCESS_COMMAND_LINE;\n/**\n * All the command arguments (including the command/executable itself) as received by the process. On Linux-based systems (and some other Unixoid systems supporting procfs), can be set according to the list of null-delimited strings extracted from `proc/[pid]/cmdline`. For libc-based executables, this would be the full argv vector passed to `main`.\n *\n * @deprecated Use ATTR_PROCESS_COMMAND_ARGS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_PROCESS_COMMAND_ARGS = TMP_PROCESS_COMMAND_ARGS;\n/**\n * The username of the user that owns the process.\n *\n * @deprecated Use ATTR_PROCESS_OWNER in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_PROCESS_OWNER = TMP_PROCESS_OWNER;\n/**\n * The name of the runtime of this process. For compiled native binaries, this SHOULD be the name of the compiler.\n *\n * @deprecated Use ATTR_PROCESS_RUNTIME_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_PROCESS_RUNTIME_NAME = TMP_PROCESS_RUNTIME_NAME;\n/**\n * The version of the runtime of this process, as returned by the runtime without modification.\n *\n * @deprecated Use ATTR_PROCESS_RUNTIME_VERSION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_PROCESS_RUNTIME_VERSION = TMP_PROCESS_RUNTIME_VERSION;\n/**\n * An additional description about the runtime of the process, for example a specific vendor customization of the runtime environment.\n *\n * @deprecated Use ATTR_PROCESS_RUNTIME_DESCRIPTION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_PROCESS_RUNTIME_DESCRIPTION = TMP_PROCESS_RUNTIME_DESCRIPTION;\n/**\n * Logical name of the service.\n *\n * Note: MUST be the same for all instances of horizontally scaled services. If the value was not specified, SDKs MUST fallback to `unknown_service:` concatenated with [`process.executable.name`](process.md#process), e.g. `unknown_service:bash`. If `process.executable.name` is not available, the value MUST be set to `unknown_service`.\n *\n * @deprecated Use ATTR_SERVICE_NAME.\n */\nexport var SEMRESATTRS_SERVICE_NAME = TMP_SERVICE_NAME;\n/**\n * A namespace for `service.name`.\n *\n * Note: A string value having a meaning that helps to distinguish a group of services, for example the team name that owns a group of services. `service.name` is expected to be unique within the same namespace. If `service.namespace` is not specified in the Resource then `service.name` is expected to be unique for all services that have no explicit namespace defined (so the empty/unspecified namespace is simply one more valid namespace). Zero-length namespace string is assumed equal to unspecified namespace.\n *\n * @deprecated Use ATTR_SERVICE_NAMESPACE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_SERVICE_NAMESPACE = TMP_SERVICE_NAMESPACE;\n/**\n * The string ID of the service instance.\n *\n * Note: MUST be unique for each instance of the same `service.namespace,service.name` pair (in other words `service.namespace,service.name,service.instance.id` triplet MUST be globally unique). The ID helps to distinguish instances of the same service that exist at the same time (e.g. instances of a horizontally scaled service). It is preferable for the ID to be persistent and stay the same for the lifetime of the service instance, however it is acceptable that the ID is ephemeral and changes during important lifetime events for the service (e.g. service restarts). If the service has no inherent unique ID that can be used as the value of this attribute it is recommended to generate a random Version 1 or Version 4 RFC 4122 UUID (services aiming for reproducible UUIDs may also use Version 5, see RFC 4122 for more recommendations).\n *\n * @deprecated Use ATTR_SERVICE_INSTANCE_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_SERVICE_INSTANCE_ID = TMP_SERVICE_INSTANCE_ID;\n/**\n * The version string of the service API or implementation.\n *\n * @deprecated Use ATTR_SERVICE_VERSION.\n */\nexport var SEMRESATTRS_SERVICE_VERSION = TMP_SERVICE_VERSION;\n/**\n * The name of the telemetry SDK as defined above.\n *\n * @deprecated Use ATTR_TELEMETRY_SDK_NAME.\n */\nexport var SEMRESATTRS_TELEMETRY_SDK_NAME = TMP_TELEMETRY_SDK_NAME;\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use ATTR_TELEMETRY_SDK_LANGUAGE.\n */\nexport var SEMRESATTRS_TELEMETRY_SDK_LANGUAGE = TMP_TELEMETRY_SDK_LANGUAGE;\n/**\n * The version string of the telemetry SDK.\n *\n * @deprecated Use ATTR_TELEMETRY_SDK_VERSION.\n */\nexport var SEMRESATTRS_TELEMETRY_SDK_VERSION = TMP_TELEMETRY_SDK_VERSION;\n/**\n * The version string of the auto instrumentation agent, if used.\n *\n * @deprecated Use ATTR_TELEMETRY_DISTRO_VERSION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_TELEMETRY_AUTO_VERSION = TMP_TELEMETRY_AUTO_VERSION;\n/**\n * The name of the web engine.\n *\n * @deprecated Use ATTR_WEBENGINE_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_WEBENGINE_NAME = TMP_WEBENGINE_NAME;\n/**\n * The version of the web engine.\n *\n * @deprecated Use ATTR_WEBENGINE_VERSION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_WEBENGINE_VERSION = TMP_WEBENGINE_VERSION;\n/**\n * Additional description of the web engine (e.g. detailed version and edition information).\n *\n * @deprecated Use ATTR_WEBENGINE_DESCRIPTION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_WEBENGINE_DESCRIPTION = TMP_WEBENGINE_DESCRIPTION;\n/**\n * Create exported Value Map for SemanticResourceAttributes values\n * @deprecated Use the SEMRESATTRS_XXXXX constants rather than the SemanticResourceAttributes.XXXXX for bundle minification\n */\nexport var SemanticResourceAttributes = \n/*#__PURE__*/ createConstMap([\n    TMP_CLOUD_PROVIDER,\n    TMP_CLOUD_ACCOUNT_ID,\n    TMP_CLOUD_REGION,\n    TMP_CLOUD_AVAILABILITY_ZONE,\n    TMP_CLOUD_PLATFORM,\n    TMP_AWS_ECS_CONTAINER_ARN,\n    TMP_AWS_ECS_CLUSTER_ARN,\n    TMP_AWS_ECS_LAUNCHTYPE,\n    TMP_AWS_ECS_TASK_ARN,\n    TMP_AWS_ECS_TASK_FAMILY,\n    TMP_AWS_ECS_TASK_REVISION,\n    TMP_AWS_EKS_CLUSTER_ARN,\n    TMP_AWS_LOG_GROUP_NAMES,\n    TMP_AWS_LOG_GROUP_ARNS,\n    TMP_AWS_LOG_STREAM_NAMES,\n    TMP_AWS_LOG_STREAM_ARNS,\n    TMP_CONTAINER_NAME,\n    TMP_CONTAINER_ID,\n    TMP_CONTAINER_RUNTIME,\n    TMP_CONTAINER_IMAGE_NAME,\n    TMP_CONTAINER_IMAGE_TAG,\n    TMP_DEPLOYMENT_ENVIRONMENT,\n    TMP_DEVICE_ID,\n    TMP_DEVICE_MODEL_IDENTIFIER,\n    TMP_DEVICE_MODEL_NAME,\n    TMP_FAAS_NAME,\n    TMP_FAAS_ID,\n    TMP_FAAS_VERSION,\n    TMP_FAAS_INSTANCE,\n    TMP_FAAS_MAX_MEMORY,\n    TMP_HOST_ID,\n    TMP_HOST_NAME,\n    TMP_HOST_TYPE,\n    TMP_HOST_ARCH,\n    TMP_HOST_IMAGE_NAME,\n    TMP_HOST_IMAGE_ID,\n    TMP_HOST_IMAGE_VERSION,\n    TMP_K8S_CLUSTER_NAME,\n    TMP_K8S_NODE_NAME,\n    TMP_K8S_NODE_UID,\n    TMP_K8S_NAMESPACE_NAME,\n    TMP_K8S_POD_UID,\n    TMP_K8S_POD_NAME,\n    TMP_K8S_CONTAINER_NAME,\n    TMP_K8S_REPLICASET_UID,\n    TMP_K8S_REPLICASET_NAME,\n    TMP_K8S_DEPLOYMENT_UID,\n    TMP_K8S_DEPLOYMENT_NAME,\n    TMP_K8S_STATEFULSET_UID,\n    TMP_K8S_STATEFULSET_NAME,\n    TMP_K8S_DAEMONSET_UID,\n    TMP_K8S_DAEMONSET_NAME,\n    TMP_K8S_JOB_UID,\n    TMP_K8S_JOB_NAME,\n    TMP_K8S_CRONJOB_UID,\n    TMP_K8S_CRONJOB_NAME,\n    TMP_OS_TYPE,\n    TMP_OS_DESCRIPTION,\n    TMP_OS_NAME,\n    TMP_OS_VERSION,\n    TMP_PROCESS_PID,\n    TMP_PROCESS_EXECUTABLE_NAME,\n    TMP_PROCESS_EXECUTABLE_PATH,\n    TMP_PROCESS_COMMAND,\n    TMP_PROCESS_COMMAND_LINE,\n    TMP_PROCESS_COMMAND_ARGS,\n    TMP_PROCESS_OWNER,\n    TMP_PROCESS_RUNTIME_NAME,\n    TMP_PROCESS_RUNTIME_VERSION,\n    TMP_PROCESS_RUNTIME_DESCRIPTION,\n    TMP_SERVICE_NAME,\n    TMP_SERVICE_NAMESPACE,\n    TMP_SERVICE_INSTANCE_ID,\n    TMP_SERVICE_VERSION,\n    TMP_TELEMETRY_SDK_NAME,\n    TMP_TELEMETRY_SDK_LANGUAGE,\n    TMP_TELEMETRY_SDK_VERSION,\n    TMP_TELEMETRY_AUTO_VERSION,\n    TMP_WEBENGINE_NAME,\n    TMP_WEBENGINE_VERSION,\n    TMP_WEBENGINE_DESCRIPTION,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for CloudProviderValues enum definition\n *\n * Name of the cloud provider.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nvar TMP_CLOUDPROVIDERVALUES_ALIBABA_CLOUD = 'alibaba_cloud';\nvar TMP_CLOUDPROVIDERVALUES_AWS = 'aws';\nvar TMP_CLOUDPROVIDERVALUES_AZURE = 'azure';\nvar TMP_CLOUDPROVIDERVALUES_GCP = 'gcp';\n/**\n * Name of the cloud provider.\n *\n * @deprecated Use CLOUD_PROVIDER_VALUE_ALIBABA_CLOUD in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var CLOUDPROVIDERVALUES_ALIBABA_CLOUD = TMP_CLOUDPROVIDERVALUES_ALIBABA_CLOUD;\n/**\n * Name of the cloud provider.\n *\n * @deprecated Use CLOUD_PROVIDER_VALUE_AWS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var CLOUDPROVIDERVALUES_AWS = TMP_CLOUDPROVIDERVALUES_AWS;\n/**\n * Name of the cloud provider.\n *\n * @deprecated Use CLOUD_PROVIDER_VALUE_AZURE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var CLOUDPROVIDERVALUES_AZURE = TMP_CLOUDPROVIDERVALUES_AZURE;\n/**\n * Name of the cloud provider.\n *\n * @deprecated Use CLOUD_PROVIDER_VALUE_GCP in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var CLOUDPROVIDERVALUES_GCP = TMP_CLOUDPROVIDERVALUES_GCP;\n/**\n * The constant map of values for CloudProviderValues.\n * @deprecated Use the CLOUDPROVIDERVALUES_XXXXX constants rather than the CloudProviderValues.XXXXX for bundle minification.\n */\nexport var CloudProviderValues = \n/*#__PURE__*/ createConstMap([\n    TMP_CLOUDPROVIDERVALUES_ALIBABA_CLOUD,\n    TMP_CLOUDPROVIDERVALUES_AWS,\n    TMP_CLOUDPROVIDERVALUES_AZURE,\n    TMP_CLOUDPROVIDERVALUES_GCP,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for CloudPlatformValues enum definition\n *\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nvar TMP_CLOUDPLATFORMVALUES_ALIBABA_CLOUD_ECS = 'alibaba_cloud_ecs';\nvar TMP_CLOUDPLATFORMVALUES_ALIBABA_CLOUD_FC = 'alibaba_cloud_fc';\nvar TMP_CLOUDPLATFORMVALUES_AWS_EC2 = 'aws_ec2';\nvar TMP_CLOUDPLATFORMVALUES_AWS_ECS = 'aws_ecs';\nvar TMP_CLOUDPLATFORMVALUES_AWS_EKS = 'aws_eks';\nvar TMP_CLOUDPLATFORMVALUES_AWS_LAMBDA = 'aws_lambda';\nvar TMP_CLOUDPLATFORMVALUES_AWS_ELASTIC_BEANSTALK = 'aws_elastic_beanstalk';\nvar TMP_CLOUDPLATFORMVALUES_AZURE_VM = 'azure_vm';\nvar TMP_CLOUDPLATFORMVALUES_AZURE_CONTAINER_INSTANCES = 'azure_container_instances';\nvar TMP_CLOUDPLATFORMVALUES_AZURE_AKS = 'azure_aks';\nvar TMP_CLOUDPLATFORMVALUES_AZURE_FUNCTIONS = 'azure_functions';\nvar TMP_CLOUDPLATFORMVALUES_AZURE_APP_SERVICE = 'azure_app_service';\nvar TMP_CLOUDPLATFORMVALUES_GCP_COMPUTE_ENGINE = 'gcp_compute_engine';\nvar TMP_CLOUDPLATFORMVALUES_GCP_CLOUD_RUN = 'gcp_cloud_run';\nvar TMP_CLOUDPLATFORMVALUES_GCP_KUBERNETES_ENGINE = 'gcp_kubernetes_engine';\nvar TMP_CLOUDPLATFORMVALUES_GCP_CLOUD_FUNCTIONS = 'gcp_cloud_functions';\nvar TMP_CLOUDPLATFORMVALUES_GCP_APP_ENGINE = 'gcp_app_engine';\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_ALIBABA_CLOUD_ECS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var CLOUDPLATFORMVALUES_ALIBABA_CLOUD_ECS = TMP_CLOUDPLATFORMVALUES_ALIBABA_CLOUD_ECS;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_ALIBABA_CLOUD_FC in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var CLOUDPLATFORMVALUES_ALIBABA_CLOUD_FC = TMP_CLOUDPLATFORMVALUES_ALIBABA_CLOUD_FC;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_AWS_EC2 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var CLOUDPLATFORMVALUES_AWS_EC2 = TMP_CLOUDPLATFORMVALUES_AWS_EC2;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_AWS_ECS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var CLOUDPLATFORMVALUES_AWS_ECS = TMP_CLOUDPLATFORMVALUES_AWS_ECS;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_AWS_EKS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var CLOUDPLATFORMVALUES_AWS_EKS = TMP_CLOUDPLATFORMVALUES_AWS_EKS;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_AWS_LAMBDA in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var CLOUDPLATFORMVALUES_AWS_LAMBDA = TMP_CLOUDPLATFORMVALUES_AWS_LAMBDA;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_AWS_ELASTIC_BEANSTALK in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var CLOUDPLATFORMVALUES_AWS_ELASTIC_BEANSTALK = TMP_CLOUDPLATFORMVALUES_AWS_ELASTIC_BEANSTALK;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_AZURE_VM in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var CLOUDPLATFORMVALUES_AZURE_VM = TMP_CLOUDPLATFORMVALUES_AZURE_VM;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_AZURE_CONTAINER_INSTANCES in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var CLOUDPLATFORMVALUES_AZURE_CONTAINER_INSTANCES = TMP_CLOUDPLATFORMVALUES_AZURE_CONTAINER_INSTANCES;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_AZURE_AKS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var CLOUDPLATFORMVALUES_AZURE_AKS = TMP_CLOUDPLATFORMVALUES_AZURE_AKS;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_AZURE_FUNCTIONS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var CLOUDPLATFORMVALUES_AZURE_FUNCTIONS = TMP_CLOUDPLATFORMVALUES_AZURE_FUNCTIONS;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_AZURE_APP_SERVICE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var CLOUDPLATFORMVALUES_AZURE_APP_SERVICE = TMP_CLOUDPLATFORMVALUES_AZURE_APP_SERVICE;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_GCP_COMPUTE_ENGINE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var CLOUDPLATFORMVALUES_GCP_COMPUTE_ENGINE = TMP_CLOUDPLATFORMVALUES_GCP_COMPUTE_ENGINE;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_GCP_CLOUD_RUN in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var CLOUDPLATFORMVALUES_GCP_CLOUD_RUN = TMP_CLOUDPLATFORMVALUES_GCP_CLOUD_RUN;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_GCP_KUBERNETES_ENGINE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var CLOUDPLATFORMVALUES_GCP_KUBERNETES_ENGINE = TMP_CLOUDPLATFORMVALUES_GCP_KUBERNETES_ENGINE;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_GCP_CLOUD_FUNCTIONS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var CLOUDPLATFORMVALUES_GCP_CLOUD_FUNCTIONS = TMP_CLOUDPLATFORMVALUES_GCP_CLOUD_FUNCTIONS;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_GCP_APP_ENGINE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var CLOUDPLATFORMVALUES_GCP_APP_ENGINE = TMP_CLOUDPLATFORMVALUES_GCP_APP_ENGINE;\n/**\n * The constant map of values for CloudPlatformValues.\n * @deprecated Use the CLOUDPLATFORMVALUES_XXXXX constants rather than the CloudPlatformValues.XXXXX for bundle minification.\n */\nexport var CloudPlatformValues = \n/*#__PURE__*/ createConstMap([\n    TMP_CLOUDPLATFORMVALUES_ALIBABA_CLOUD_ECS,\n    TMP_CLOUDPLATFORMVALUES_ALIBABA_CLOUD_FC,\n    TMP_CLOUDPLATFORMVALUES_AWS_EC2,\n    TMP_CLOUDPLATFORMVALUES_AWS_ECS,\n    TMP_CLOUDPLATFORMVALUES_AWS_EKS,\n    TMP_CLOUDPLATFORMVALUES_AWS_LAMBDA,\n    TMP_CLOUDPLATFORMVALUES_AWS_ELASTIC_BEANSTALK,\n    TMP_CLOUDPLATFORMVALUES_AZURE_VM,\n    TMP_CLOUDPLATFORMVALUES_AZURE_CONTAINER_INSTANCES,\n    TMP_CLOUDPLATFORMVALUES_AZURE_AKS,\n    TMP_CLOUDPLATFORMVALUES_AZURE_FUNCTIONS,\n    TMP_CLOUDPLATFORMVALUES_AZURE_APP_SERVICE,\n    TMP_CLOUDPLATFORMVALUES_GCP_COMPUTE_ENGINE,\n    TMP_CLOUDPLATFORMVALUES_GCP_CLOUD_RUN,\n    TMP_CLOUDPLATFORMVALUES_GCP_KUBERNETES_ENGINE,\n    TMP_CLOUDPLATFORMVALUES_GCP_CLOUD_FUNCTIONS,\n    TMP_CLOUDPLATFORMVALUES_GCP_APP_ENGINE,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for AwsEcsLaunchtypeValues enum definition\n *\n * The [launch type](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) for an ECS task.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nvar TMP_AWSECSLAUNCHTYPEVALUES_EC2 = 'ec2';\nvar TMP_AWSECSLAUNCHTYPEVALUES_FARGATE = 'fargate';\n/**\n * The [launch type](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) for an ECS task.\n *\n * @deprecated Use AWS_ECS_LAUNCHTYPE_VALUE_EC2 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var AWSECSLAUNCHTYPEVALUES_EC2 = TMP_AWSECSLAUNCHTYPEVALUES_EC2;\n/**\n * The [launch type](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) for an ECS task.\n *\n * @deprecated Use AWS_ECS_LAUNCHTYPE_VALUE_FARGATE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var AWSECSLAUNCHTYPEVALUES_FARGATE = TMP_AWSECSLAUNCHTYPEVALUES_FARGATE;\n/**\n * The constant map of values for AwsEcsLaunchtypeValues.\n * @deprecated Use the AWSECSLAUNCHTYPEVALUES_XXXXX constants rather than the AwsEcsLaunchtypeValues.XXXXX for bundle minification.\n */\nexport var AwsEcsLaunchtypeValues = \n/*#__PURE__*/ createConstMap([\n    TMP_AWSECSLAUNCHTYPEVALUES_EC2,\n    TMP_AWSECSLAUNCHTYPEVALUES_FARGATE,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for HostArchValues enum definition\n *\n * The CPU architecture the host system is running on.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nvar TMP_HOSTARCHVALUES_AMD64 = 'amd64';\nvar TMP_HOSTARCHVALUES_ARM32 = 'arm32';\nvar TMP_HOSTARCHVALUES_ARM64 = 'arm64';\nvar TMP_HOSTARCHVALUES_IA64 = 'ia64';\nvar TMP_HOSTARCHVALUES_PPC32 = 'ppc32';\nvar TMP_HOSTARCHVALUES_PPC64 = 'ppc64';\nvar TMP_HOSTARCHVALUES_X86 = 'x86';\n/**\n * The CPU architecture the host system is running on.\n *\n * @deprecated Use HOST_ARCH_VALUE_AMD64 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var HOSTARCHVALUES_AMD64 = TMP_HOSTARCHVALUES_AMD64;\n/**\n * The CPU architecture the host system is running on.\n *\n * @deprecated Use HOST_ARCH_VALUE_ARM32 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var HOSTARCHVALUES_ARM32 = TMP_HOSTARCHVALUES_ARM32;\n/**\n * The CPU architecture the host system is running on.\n *\n * @deprecated Use HOST_ARCH_VALUE_ARM64 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var HOSTARCHVALUES_ARM64 = TMP_HOSTARCHVALUES_ARM64;\n/**\n * The CPU architecture the host system is running on.\n *\n * @deprecated Use HOST_ARCH_VALUE_IA64 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var HOSTARCHVALUES_IA64 = TMP_HOSTARCHVALUES_IA64;\n/**\n * The CPU architecture the host system is running on.\n *\n * @deprecated Use HOST_ARCH_VALUE_PPC32 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var HOSTARCHVALUES_PPC32 = TMP_HOSTARCHVALUES_PPC32;\n/**\n * The CPU architecture the host system is running on.\n *\n * @deprecated Use HOST_ARCH_VALUE_PPC64 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var HOSTARCHVALUES_PPC64 = TMP_HOSTARCHVALUES_PPC64;\n/**\n * The CPU architecture the host system is running on.\n *\n * @deprecated Use HOST_ARCH_VALUE_X86 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var HOSTARCHVALUES_X86 = TMP_HOSTARCHVALUES_X86;\n/**\n * The constant map of values for HostArchValues.\n * @deprecated Use the HOSTARCHVALUES_XXXXX constants rather than the HostArchValues.XXXXX for bundle minification.\n */\nexport var HostArchValues = \n/*#__PURE__*/ createConstMap([\n    TMP_HOSTARCHVALUES_AMD64,\n    TMP_HOSTARCHVALUES_ARM32,\n    TMP_HOSTARCHVALUES_ARM64,\n    TMP_HOSTARCHVALUES_IA64,\n    TMP_HOSTARCHVALUES_PPC32,\n    TMP_HOSTARCHVALUES_PPC64,\n    TMP_HOSTARCHVALUES_X86,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for OsTypeValues enum definition\n *\n * The operating system type.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nvar TMP_OSTYPEVALUES_WINDOWS = 'windows';\nvar TMP_OSTYPEVALUES_LINUX = 'linux';\nvar TMP_OSTYPEVALUES_DARWIN = 'darwin';\nvar TMP_OSTYPEVALUES_FREEBSD = 'freebsd';\nvar TMP_OSTYPEVALUES_NETBSD = 'netbsd';\nvar TMP_OSTYPEVALUES_OPENBSD = 'openbsd';\nvar TMP_OSTYPEVALUES_DRAGONFLYBSD = 'dragonflybsd';\nvar TMP_OSTYPEVALUES_HPUX = 'hpux';\nvar TMP_OSTYPEVALUES_AIX = 'aix';\nvar TMP_OSTYPEVALUES_SOLARIS = 'solaris';\nvar TMP_OSTYPEVALUES_Z_OS = 'z_os';\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_WINDOWS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var OSTYPEVALUES_WINDOWS = TMP_OSTYPEVALUES_WINDOWS;\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_LINUX in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var OSTYPEVALUES_LINUX = TMP_OSTYPEVALUES_LINUX;\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_DARWIN in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var OSTYPEVALUES_DARWIN = TMP_OSTYPEVALUES_DARWIN;\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_FREEBSD in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var OSTYPEVALUES_FREEBSD = TMP_OSTYPEVALUES_FREEBSD;\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_NETBSD in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var OSTYPEVALUES_NETBSD = TMP_OSTYPEVALUES_NETBSD;\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_OPENBSD in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var OSTYPEVALUES_OPENBSD = TMP_OSTYPEVALUES_OPENBSD;\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_DRAGONFLYBSD in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var OSTYPEVALUES_DRAGONFLYBSD = TMP_OSTYPEVALUES_DRAGONFLYBSD;\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_HPUX in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var OSTYPEVALUES_HPUX = TMP_OSTYPEVALUES_HPUX;\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_AIX in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var OSTYPEVALUES_AIX = TMP_OSTYPEVALUES_AIX;\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_SOLARIS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var OSTYPEVALUES_SOLARIS = TMP_OSTYPEVALUES_SOLARIS;\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_Z_OS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var OSTYPEVALUES_Z_OS = TMP_OSTYPEVALUES_Z_OS;\n/**\n * The constant map of values for OsTypeValues.\n * @deprecated Use the OSTYPEVALUES_XXXXX constants rather than the OsTypeValues.XXXXX for bundle minification.\n */\nexport var OsTypeValues = \n/*#__PURE__*/ createConstMap([\n    TMP_OSTYPEVALUES_WINDOWS,\n    TMP_OSTYPEVALUES_LINUX,\n    TMP_OSTYPEVALUES_DARWIN,\n    TMP_OSTYPEVALUES_FREEBSD,\n    TMP_OSTYPEVALUES_NETBSD,\n    TMP_OSTYPEVALUES_OPENBSD,\n    TMP_OSTYPEVALUES_DRAGONFLYBSD,\n    TMP_OSTYPEVALUES_HPUX,\n    TMP_OSTYPEVALUES_AIX,\n    TMP_OSTYPEVALUES_SOLARIS,\n    TMP_OSTYPEVALUES_Z_OS,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for TelemetrySdkLanguageValues enum definition\n *\n * The language of the telemetry SDK.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nvar TMP_TELEMETRYSDKLANGUAGEVALUES_CPP = 'cpp';\nvar TMP_TELEMETRYSDKLANGUAGEVALUES_DOTNET = 'dotnet';\nvar TMP_TELEMETRYSDKLANGUAGEVALUES_ERLANG = 'erlang';\nvar TMP_TELEMETRYSDKLANGUAGEVALUES_GO = 'go';\nvar TMP_TELEMETRYSDKLANGUAGEVALUES_JAVA = 'java';\nvar TMP_TELEMETRYSDKLANGUAGEVALUES_NODEJS = 'nodejs';\nvar TMP_TELEMETRYSDKLANGUAGEVALUES_PHP = 'php';\nvar TMP_TELEMETRYSDKLANGUAGEVALUES_PYTHON = 'python';\nvar TMP_TELEMETRYSDKLANGUAGEVALUES_RUBY = 'ruby';\nvar TMP_TELEMETRYSDKLANGUAGEVALUES_WEBJS = 'webjs';\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_CPP.\n */\nexport var TELEMETRYSDKLANGUAGEVALUES_CPP = TMP_TELEMETRYSDKLANGUAGEVALUES_CPP;\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_DOTNET.\n */\nexport var TELEMETRYSDKLANGUAGEVALUES_DOTNET = TMP_TELEMETRYSDKLANGUAGEVALUES_DOTNET;\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_ERLANG.\n */\nexport var TELEMETRYSDKLANGUAGEVALUES_ERLANG = TMP_TELEMETRYSDKLANGUAGEVALUES_ERLANG;\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_GO.\n */\nexport var TELEMETRYSDKLANGUAGEVALUES_GO = TMP_TELEMETRYSDKLANGUAGEVALUES_GO;\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_JAVA.\n */\nexport var TELEMETRYSDKLANGUAGEVALUES_JAVA = TMP_TELEMETRYSDKLANGUAGEVALUES_JAVA;\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_NODEJS.\n */\nexport var TELEMETRYSDKLANGUAGEVALUES_NODEJS = TMP_TELEMETRYSDKLANGUAGEVALUES_NODEJS;\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_PHP.\n */\nexport var TELEMETRYSDKLANGUAGEVALUES_PHP = TMP_TELEMETRYSDKLANGUAGEVALUES_PHP;\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_PYTHON.\n */\nexport var TELEMETRYSDKLANGUAGEVALUES_PYTHON = TMP_TELEMETRYSDKLANGUAGEVALUES_PYTHON;\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_RUBY.\n */\nexport var TELEMETRYSDKLANGUAGEVALUES_RUBY = TMP_TELEMETRYSDKLANGUAGEVALUES_RUBY;\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_WEBJS.\n */\nexport var TELEMETRYSDKLANGUAGEVALUES_WEBJS = TMP_TELEMETRYSDKLANGUAGEVALUES_WEBJS;\n/**\n * The constant map of values for TelemetrySdkLanguageValues.\n * @deprecated Use the TELEMETRYSDKLANGUAGEVALUES_XXXXX constants rather than the TelemetrySdkLanguageValues.XXXXX for bundle minification.\n */\nexport var TelemetrySdkLanguageValues = \n/*#__PURE__*/ createConstMap([\n    TMP_TELEMETRYSDKLANGUAGEVALUES_CPP,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_DOTNET,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_ERLANG,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_GO,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_JAVA,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_NODEJS,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_PHP,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_PYTHON,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_RUBY,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_WEBJS,\n]);\n//# sourceMappingURL=SemanticResourceAttributes.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar _a;\nimport { VERSION } from '../../version';\nimport { SEMRESATTRS_TELEMETRY_SDK_NAME, SEMRESATTRS_PROCESS_RUNTIME_NAME, SEMRESATTRS_TELEMETRY_SDK_LANGUAGE, TELEMETRYSDKLANGUAGEVALUES_NODEJS, SEMRESATTRS_TELEMETRY_SDK_VERSION, } from '@opentelemetry/semantic-conventions';\n/** Constants describing the SDK in use */\nexport var SDK_INFO = (_a = {},\n    _a[SEMRESATTRS_TELEMETRY_SDK_NAME] = 'opentelemetry',\n    _a[SEMRESATTRS_PROCESS_RUNTIME_NAME] = 'node',\n    _a[SEMRESATTRS_TELEMETRY_SDK_LANGUAGE] = TELEMETRYSDKLANGUAGEVALUES_NODEJS,\n    _a[SEMRESATTRS_TELEMETRY_SDK_VERSION] = VERSION,\n    _a);\n//# sourceMappingURL=sdk-info.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport function unrefTimer(timer) {\n    timer.unref();\n}\n//# sourceMappingURL=timer-util.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { otperformance as performance } from '../platform';\nvar NANOSECOND_DIGITS = 9;\nvar NANOSECOND_DIGITS_IN_MILLIS = 6;\nvar MILLISECONDS_TO_NANOSECONDS = Math.pow(10, NANOSECOND_DIGITS_IN_MILLIS);\nvar SECOND_TO_NANOSECONDS = Math.pow(10, NANOSECOND_DIGITS);\n/**\n * Converts a number of milliseconds from epoch to HrTime([seconds, remainder in nanoseconds]).\n * @param epochMillis\n */\nexport function millisToHrTime(epochMillis) {\n    var epochSeconds = epochMillis / 1000;\n    // Decimals only.\n    var seconds = Math.trunc(epochSeconds);\n    // Round sub-nanosecond accuracy to nanosecond.\n    var nanos = Math.round((epochMillis % 1000) * MILLISECONDS_TO_NANOSECONDS);\n    return [seconds, nanos];\n}\nexport function getTimeOrigin() {\n    var timeOrigin = performance.timeOrigin;\n    if (typeof timeOrigin !== 'number') {\n        var perf = performance;\n        timeOrigin = perf.timing && perf.timing.fetchStart;\n    }\n    return timeOrigin;\n}\n/**\n * Returns an hrtime calculated via performance component.\n * @param performanceNow\n */\nexport function hrTime(performanceNow) {\n    var timeOrigin = millisToHrTime(getTimeOrigin());\n    var now = millisToHrTime(typeof performanceNow === 'number' ? performanceNow : performance.now());\n    return addHrTimes(timeOrigin, now);\n}\n/**\n *\n * Converts a TimeInput to an HrTime, defaults to _hrtime().\n * @param time\n */\nexport function timeInputToHrTime(time) {\n    // process.hrtime\n    if (isTimeInputHrTime(time)) {\n        return time;\n    }\n    else if (typeof time === 'number') {\n        // Must be a performance.now() if it's smaller than process start time.\n        if (time < getTimeOrigin()) {\n            return hrTime(time);\n        }\n        else {\n            // epoch milliseconds or performance.timeOrigin\n            return millisToHrTime(time);\n        }\n    }\n    else if (time instanceof Date) {\n        return millisToHrTime(time.getTime());\n    }\n    else {\n        throw TypeError('Invalid input type');\n    }\n}\n/**\n * Returns a duration of two hrTime.\n * @param startTime\n * @param endTime\n */\nexport function hrTimeDuration(startTime, endTime) {\n    var seconds = endTime[0] - startTime[0];\n    var nanos = endTime[1] - startTime[1];\n    // overflow\n    if (nanos < 0) {\n        seconds -= 1;\n        // negate\n        nanos += SECOND_TO_NANOSECONDS;\n    }\n    return [seconds, nanos];\n}\n/**\n * Convert hrTime to timestamp, for example \"2019-05-14T17:00:00.000123456Z\"\n * @param time\n */\nexport function hrTimeToTimeStamp(time) {\n    var precision = NANOSECOND_DIGITS;\n    var tmp = \"\" + '0'.repeat(precision) + time[1] + \"Z\";\n    var nanoString = tmp.substring(tmp.length - precision - 1);\n    var date = new Date(time[0] * 1000).toISOString();\n    return date.replace('000Z', nanoString);\n}\n/**\n * Convert hrTime to nanoseconds.\n * @param time\n */\nexport function hrTimeToNanoseconds(time) {\n    return time[0] * SECOND_TO_NANOSECONDS + time[1];\n}\n/**\n * Convert hrTime to milliseconds.\n * @param time\n */\nexport function hrTimeToMilliseconds(time) {\n    return time[0] * 1e3 + time[1] / 1e6;\n}\n/**\n * Convert hrTime to microseconds.\n * @param time\n */\nexport function hrTimeToMicroseconds(time) {\n    return time[0] * 1e6 + time[1] / 1e3;\n}\n/**\n * check if time is HrTime\n * @param value\n */\nexport function isTimeInputHrTime(value) {\n    return (Array.isArray(value) &&\n        value.length === 2 &&\n        typeof value[0] === 'number' &&\n        typeof value[1] === 'number');\n}\n/**\n * check if input value is a correct types.TimeInput\n * @param value\n */\nexport function isTimeInput(value) {\n    return (isTimeInputHrTime(value) ||\n        typeof value === 'number' ||\n        value instanceof Date);\n}\n/**\n * Given 2 HrTime formatted times, return their sum as an HrTime.\n */\nexport function addHrTimes(time1, time2) {\n    var out = [time1[0] + time2[0], time1[1] + time2[1]];\n    // Nanoseconds\n    if (out[1] >= SECOND_TO_NANOSECONDS) {\n        out[1] -= SECOND_TO_NANOSECONDS;\n        out[0] += 1;\n    }\n    return out;\n}\n//# sourceMappingURL=time.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport var ExportResultCode;\n(function (ExportResultCode) {\n    ExportResultCode[ExportResultCode[\"SUCCESS\"] = 0] = \"SUCCESS\";\n    ExportResultCode[ExportResultCode[\"FAILED\"] = 1] = \"FAILED\";\n})(ExportResultCode || (ExportResultCode = {}));\n//# sourceMappingURL=ExportResult.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nimport { diag, } from '@opentelemetry/api';\n/** Combines multiple propagators into a single propagator. */\nvar CompositePropagator = /** @class */ (function () {\n    /**\n     * Construct a composite propagator from a list of propagators.\n     *\n     * @param [config] Configuration object for composite propagator\n     */\n    function CompositePropagator(config) {\n        if (config === void 0) { config = {}; }\n        var _a;\n        this._propagators = (_a = config.propagators) !== null && _a !== void 0 ? _a : [];\n        this._fields = Array.from(new Set(this._propagators\n            // older propagators may not have fields function, null check to be sure\n            .map(function (p) { return (typeof p.fields === 'function' ? p.fields() : []); })\n            .reduce(function (x, y) { return x.concat(y); }, [])));\n    }\n    /**\n     * Run each of the configured propagators with the given context and carrier.\n     * Propagators are run in the order they are configured, so if multiple\n     * propagators write the same carrier key, the propagator later in the list\n     * will \"win\".\n     *\n     * @param context Context to inject\n     * @param carrier Carrier into which context will be injected\n     */\n    CompositePropagator.prototype.inject = function (context, carrier, setter) {\n        var e_1, _a;\n        try {\n            for (var _b = __values(this._propagators), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var propagator = _c.value;\n                try {\n                    propagator.inject(context, carrier, setter);\n                }\n                catch (err) {\n                    diag.warn(\"Failed to inject with \" + propagator.constructor.name + \". Err: \" + err.message);\n                }\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n    };\n    /**\n     * Run each of the configured propagators with the given context and carrier.\n     * Propagators are run in the order they are configured, so if multiple\n     * propagators write the same context key, the propagator later in the list\n     * will \"win\".\n     *\n     * @param context Context to add values to\n     * @param carrier Carrier from which to extract context\n     */\n    CompositePropagator.prototype.extract = function (context, carrier, getter) {\n        return this._propagators.reduce(function (ctx, propagator) {\n            try {\n                return propagator.extract(ctx, carrier, getter);\n            }\n            catch (err) {\n                diag.warn(\"Failed to extract with \" + propagator.constructor.name + \". Err: \" + err.message);\n            }\n            return ctx;\n        }, context);\n    };\n    CompositePropagator.prototype.fields = function () {\n        // return a new array so our fields cannot be modified\n        return this._fields.slice();\n    };\n    return CompositePropagator;\n}());\nexport { CompositePropagator };\n//# sourceMappingURL=composite.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar VALID_KEY_CHAR_RANGE = '[_0-9a-z-*/]';\nvar VALID_KEY = \"[a-z]\" + VALID_KEY_CHAR_RANGE + \"{0,255}\";\nvar VALID_VENDOR_KEY = \"[a-z0-9]\" + VALID_KEY_CHAR_RANGE + \"{0,240}@[a-z]\" + VALID_KEY_CHAR_RANGE + \"{0,13}\";\nvar VALID_KEY_REGEX = new RegExp(\"^(?:\" + VALID_KEY + \"|\" + VALID_VENDOR_KEY + \")$\");\nvar VALID_VALUE_BASE_REGEX = /^[ -~]{0,255}[!-~]$/;\nvar INVALID_VALUE_COMMA_EQUAL_REGEX = /,|=/;\n/**\n * Key is opaque string up to 256 characters printable. It MUST begin with a\n * lowercase letter, and can only contain lowercase letters a-z, digits 0-9,\n * underscores _, dashes -, asterisks *, and forward slashes /.\n * For multi-tenant vendor scenarios, an at sign (@) can be used to prefix the\n * vendor name. Vendors SHOULD set the tenant ID at the beginning of the key.\n * see https://www.w3.org/TR/trace-context/#key\n */\nexport function validateKey(key) {\n    return VALID_KEY_REGEX.test(key);\n}\n/**\n * Value is opaque string up to 256 characters printable ASCII RFC0020\n * characters (i.e., the range 0x20 to 0x7E) except comma , and =.\n */\nexport function validateValue(value) {\n    return (VALID_VALUE_BASE_REGEX.test(value) &&\n        !INVALID_VALUE_COMMA_EQUAL_REGEX.test(value));\n}\n//# sourceMappingURL=validators.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { validateKey, validateValue } from '../internal/validators';\nvar MAX_TRACE_STATE_ITEMS = 32;\nvar MAX_TRACE_STATE_LEN = 512;\nvar LIST_MEMBERS_SEPARATOR = ',';\nvar LIST_MEMBER_KEY_VALUE_SPLITTER = '=';\n/**\n * TraceState must be a class and not a simple object type because of the spec\n * requirement (https://www.w3.org/TR/trace-context/#tracestate-field).\n *\n * Here is the list of allowed mutations:\n * - New key-value pair should be added into the beginning of the list\n * - The value of any key can be updated. Modified keys MUST be moved to the\n * beginning of the list.\n */\nvar TraceState = /** @class */ (function () {\n    function TraceState(rawTraceState) {\n        this._internalState = new Map();\n        if (rawTraceState)\n            this._parse(rawTraceState);\n    }\n    TraceState.prototype.set = function (key, value) {\n        // TODO: Benchmark the different approaches(map vs list) and\n        // use the faster one.\n        var traceState = this._clone();\n        if (traceState._internalState.has(key)) {\n            traceState._internalState.delete(key);\n        }\n        traceState._internalState.set(key, value);\n        return traceState;\n    };\n    TraceState.prototype.unset = function (key) {\n        var traceState = this._clone();\n        traceState._internalState.delete(key);\n        return traceState;\n    };\n    TraceState.prototype.get = function (key) {\n        return this._internalState.get(key);\n    };\n    TraceState.prototype.serialize = function () {\n        var _this = this;\n        return this._keys()\n            .reduce(function (agg, key) {\n            agg.push(key + LIST_MEMBER_KEY_VALUE_SPLITTER + _this.get(key));\n            return agg;\n        }, [])\n            .join(LIST_MEMBERS_SEPARATOR);\n    };\n    TraceState.prototype._parse = function (rawTraceState) {\n        if (rawTraceState.length > MAX_TRACE_STATE_LEN)\n            return;\n        this._internalState = rawTraceState\n            .split(LIST_MEMBERS_SEPARATOR)\n            .reverse() // Store in reverse so new keys (.set(...)) will be placed at the beginning\n            .reduce(function (agg, part) {\n            var listMember = part.trim(); // Optional Whitespace (OWS) handling\n            var i = listMember.indexOf(LIST_MEMBER_KEY_VALUE_SPLITTER);\n            if (i !== -1) {\n                var key = listMember.slice(0, i);\n                var value = listMember.slice(i + 1, part.length);\n                if (validateKey(key) && validateValue(value)) {\n                    agg.set(key, value);\n                }\n                else {\n                    // TODO: Consider to add warning log\n                }\n            }\n            return agg;\n        }, new Map());\n        // Because of the reverse() requirement, trunc must be done after map is created\n        if (this._internalState.size > MAX_TRACE_STATE_ITEMS) {\n            this._internalState = new Map(Array.from(this._internalState.entries())\n                .reverse() // Use reverse same as original tracestate parse chain\n                .slice(0, MAX_TRACE_STATE_ITEMS));\n        }\n    };\n    TraceState.prototype._keys = function () {\n        return Array.from(this._internalState.keys()).reverse();\n    };\n    TraceState.prototype._clone = function () {\n        var traceState = new TraceState();\n        traceState._internalState = new Map(this._internalState);\n        return traceState;\n    };\n    return TraceState;\n}());\nexport { TraceState };\n//# sourceMappingURL=TraceState.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { isSpanContextValid, trace, TraceFlags, } from '@opentelemetry/api';\nimport { isTracingSuppressed } from './suppress-tracing';\nimport { TraceState } from './TraceState';\nexport var TRACE_PARENT_HEADER = 'traceparent';\nexport var TRACE_STATE_HEADER = 'tracestate';\nvar VERSION = '00';\nvar VERSION_PART = '(?!ff)[\\\\da-f]{2}';\nvar TRACE_ID_PART = '(?![0]{32})[\\\\da-f]{32}';\nvar PARENT_ID_PART = '(?![0]{16})[\\\\da-f]{16}';\nvar FLAGS_PART = '[\\\\da-f]{2}';\nvar TRACE_PARENT_REGEX = new RegExp(\"^\\\\s?(\" + VERSION_PART + \")-(\" + TRACE_ID_PART + \")-(\" + PARENT_ID_PART + \")-(\" + FLAGS_PART + \")(-.*)?\\\\s?$\");\n/**\n * Parses information from the [traceparent] span tag and converts it into {@link SpanContext}\n * @param traceParent - A meta property that comes from server.\n *     It should be dynamically generated server side to have the server's request trace Id,\n *     a parent span Id that was set on the server's request span,\n *     and the trace flags to indicate the server's sampling decision\n *     (01 = sampled, 00 = not sampled).\n *     for example: '{version}-{traceId}-{spanId}-{sampleDecision}'\n *     For more information see {@link https://www.w3.org/TR/trace-context/}\n */\nexport function parseTraceParent(traceParent) {\n    var match = TRACE_PARENT_REGEX.exec(traceParent);\n    if (!match)\n        return null;\n    // According to the specification the implementation should be compatible\n    // with future versions. If there are more parts, we only reject it if it's using version 00\n    // See https://www.w3.org/TR/trace-context/#versioning-of-traceparent\n    if (match[1] === '00' && match[5])\n        return null;\n    return {\n        traceId: match[2],\n        spanId: match[3],\n        traceFlags: parseInt(match[4], 16),\n    };\n}\n/**\n * Propagates {@link SpanContext} through Trace Context format propagation.\n *\n * Based on the Trace Context specification:\n * https://www.w3.org/TR/trace-context/\n */\nvar W3CTraceContextPropagator = /** @class */ (function () {\n    function W3CTraceContextPropagator() {\n    }\n    W3CTraceContextPropagator.prototype.inject = function (context, carrier, setter) {\n        var spanContext = trace.getSpanContext(context);\n        if (!spanContext ||\n            isTracingSuppressed(context) ||\n            !isSpanContextValid(spanContext))\n            return;\n        var traceParent = VERSION + \"-\" + spanContext.traceId + \"-\" + spanContext.spanId + \"-0\" + Number(spanContext.traceFlags || TraceFlags.NONE).toString(16);\n        setter.set(carrier, TRACE_PARENT_HEADER, traceParent);\n        if (spanContext.traceState) {\n            setter.set(carrier, TRACE_STATE_HEADER, spanContext.traceState.serialize());\n        }\n    };\n    W3CTraceContextPropagator.prototype.extract = function (context, carrier, getter) {\n        var traceParentHeader = getter.get(carrier, TRACE_PARENT_HEADER);\n        if (!traceParentHeader)\n            return context;\n        var traceParent = Array.isArray(traceParentHeader)\n            ? traceParentHeader[0]\n            : traceParentHeader;\n        if (typeof traceParent !== 'string')\n            return context;\n        var spanContext = parseTraceParent(traceParent);\n        if (!spanContext)\n            return context;\n        spanContext.isRemote = true;\n        var traceStateHeader = getter.get(carrier, TRACE_STATE_HEADER);\n        if (traceStateHeader) {\n            // If more than one `tracestate` header is found, we merge them into a\n            // single header.\n            var state = Array.isArray(traceStateHeader)\n                ? traceStateHeader.join(',')\n                : traceStateHeader;\n            spanContext.traceState = new TraceState(typeof state === 'string' ? state : undefined);\n        }\n        return trace.setSpanContext(context, spanContext);\n    };\n    W3CTraceContextPropagator.prototype.fields = function () {\n        return [TRACE_PARENT_HEADER, TRACE_STATE_HEADER];\n    };\n    return W3CTraceContextPropagator;\n}());\nexport { W3CTraceContextPropagator };\n//# sourceMappingURL=W3CTraceContextPropagator.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/**\n * based on lodash in order to support esm builds without esModuleInterop.\n * lodash is using MIT License.\n **/\nvar objectTag = '[object Object]';\nvar nullTag = '[object Null]';\nvar undefinedTag = '[object Undefined]';\nvar funcProto = Function.prototype;\nvar funcToString = funcProto.toString;\nvar objectCtorString = funcToString.call(Object);\nvar getPrototype = overArg(Object.getPrototypeOf, Object);\nvar objectProto = Object.prototype;\nvar hasOwnProperty = objectProto.hasOwnProperty;\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\nvar nativeObjectToString = objectProto.toString;\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n    return function (arg) {\n        return func(transform(arg));\n    };\n}\n/**\n * Checks if `value` is a plain object, that is, an object created by the\n * `Object` constructor or one with a `[[Prototype]]` of `null`.\n *\n * @static\n * @memberOf _\n * @since 0.8.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n * }\n *\n * _.isPlainObject(new Foo);\n * // => false\n *\n * _.isPlainObject([1, 2, 3]);\n * // => false\n *\n * _.isPlainObject({ 'x': 0, 'y': 0 });\n * // => true\n *\n * _.isPlainObject(Object.create(null));\n * // => true\n */\nexport function isPlainObject(value) {\n    if (!isObjectLike(value) || baseGetTag(value) !== objectTag) {\n        return false;\n    }\n    var proto = getPrototype(value);\n    if (proto === null) {\n        return true;\n    }\n    var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;\n    return (typeof Ctor == 'function' &&\n        Ctor instanceof Ctor &&\n        funcToString.call(Ctor) === objectCtorString);\n}\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n    return value != null && typeof value == 'object';\n}\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n    if (value == null) {\n        return value === undefined ? undefinedTag : nullTag;\n    }\n    return symToStringTag && symToStringTag in Object(value)\n        ? getRawTag(value)\n        : objectToString(value);\n}\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n    var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];\n    var unmasked = false;\n    try {\n        value[symToStringTag] = undefined;\n        unmasked = true;\n    }\n    catch (e) {\n        // silence\n    }\n    var result = nativeObjectToString.call(value);\n    if (unmasked) {\n        if (isOwn) {\n            value[symToStringTag] = tag;\n        }\n        else {\n            delete value[symToStringTag];\n        }\n    }\n    return result;\n}\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n    return nativeObjectToString.call(value);\n}\n//# sourceMappingURL=lodash.merge.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { isPlainObject } from './lodash.merge';\nvar MAX_LEVEL = 20;\n/**\n * Merges objects together\n * @param args - objects / values to be merged\n */\nexport function merge() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    var result = args.shift();\n    var objects = new WeakMap();\n    while (args.length > 0) {\n        result = mergeTwoObjects(result, args.shift(), 0, objects);\n    }\n    return result;\n}\nfunction takeValue(value) {\n    if (isArray(value)) {\n        return value.slice();\n    }\n    return value;\n}\n/**\n * Merges two objects\n * @param one - first object\n * @param two - second object\n * @param level - current deep level\n * @param objects - objects holder that has been already referenced - to prevent\n * cyclic dependency\n */\nfunction mergeTwoObjects(one, two, level, objects) {\n    if (level === void 0) { level = 0; }\n    var result;\n    if (level > MAX_LEVEL) {\n        return undefined;\n    }\n    level++;\n    if (isPrimitive(one) || isPrimitive(two) || isFunction(two)) {\n        result = takeValue(two);\n    }\n    else if (isArray(one)) {\n        result = one.slice();\n        if (isArray(two)) {\n            for (var i = 0, j = two.length; i < j; i++) {\n                result.push(takeValue(two[i]));\n            }\n        }\n        else if (isObject(two)) {\n            var keys = Object.keys(two);\n            for (var i = 0, j = keys.length; i < j; i++) {\n                var key = keys[i];\n                result[key] = takeValue(two[key]);\n            }\n        }\n    }\n    else if (isObject(one)) {\n        if (isObject(two)) {\n            if (!shouldMerge(one, two)) {\n                return two;\n            }\n            result = Object.assign({}, one);\n            var keys = Object.keys(two);\n            for (var i = 0, j = keys.length; i < j; i++) {\n                var key = keys[i];\n                var twoValue = two[key];\n                if (isPrimitive(twoValue)) {\n                    if (typeof twoValue === 'undefined') {\n                        delete result[key];\n                    }\n                    else {\n                        // result[key] = takeValue(twoValue);\n                        result[key] = twoValue;\n                    }\n                }\n                else {\n                    var obj1 = result[key];\n                    var obj2 = twoValue;\n                    if (wasObjectReferenced(one, key, objects) ||\n                        wasObjectReferenced(two, key, objects)) {\n                        delete result[key];\n                    }\n                    else {\n                        if (isObject(obj1) && isObject(obj2)) {\n                            var arr1 = objects.get(obj1) || [];\n                            var arr2 = objects.get(obj2) || [];\n                            arr1.push({ obj: one, key: key });\n                            arr2.push({ obj: two, key: key });\n                            objects.set(obj1, arr1);\n                            objects.set(obj2, arr2);\n                        }\n                        result[key] = mergeTwoObjects(result[key], twoValue, level, objects);\n                    }\n                }\n            }\n        }\n        else {\n            result = two;\n        }\n    }\n    return result;\n}\n/**\n * Function to check if object has been already reference\n * @param obj\n * @param key\n * @param objects\n */\nfunction wasObjectReferenced(obj, key, objects) {\n    var arr = objects.get(obj[key]) || [];\n    for (var i = 0, j = arr.length; i < j; i++) {\n        var info = arr[i];\n        if (info.key === key && info.obj === obj) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction isArray(value) {\n    return Array.isArray(value);\n}\nfunction isFunction(value) {\n    return typeof value === 'function';\n}\nfunction isObject(value) {\n    return (!isPrimitive(value) &&\n        !isArray(value) &&\n        !isFunction(value) &&\n        typeof value === 'object');\n}\nfunction isPrimitive(value) {\n    return (typeof value === 'string' ||\n        typeof value === 'number' ||\n        typeof value === 'boolean' ||\n        typeof value === 'undefined' ||\n        value instanceof Date ||\n        value instanceof RegExp ||\n        value === null);\n}\nfunction shouldMerge(one, two) {\n    if (!isPlainObject(one) || !isPlainObject(two)) {\n        return false;\n    }\n    return true;\n}\n//# sourceMappingURL=merge.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Deferred = /** @class */ (function () {\n    function Deferred() {\n        var _this = this;\n        this._promise = new Promise(function (resolve, reject) {\n            _this._resolve = resolve;\n            _this._reject = reject;\n        });\n    }\n    Object.defineProperty(Deferred.prototype, \"promise\", {\n        get: function () {\n            return this._promise;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Deferred.prototype.resolve = function (val) {\n        this._resolve(val);\n    };\n    Deferred.prototype.reject = function (err) {\n        this._reject(err);\n    };\n    return Deferred;\n}());\nexport { Deferred };\n//# sourceMappingURL=promise.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport { Deferred } from './promise';\n/**\n * Bind the callback and only invoke the callback once regardless how many times `BindOnceFuture.call` is invoked.\n */\nvar BindOnceFuture = /** @class */ (function () {\n    function BindOnceFuture(_callback, _that) {\n        this._callback = _callback;\n        this._that = _that;\n        this._isCalled = false;\n        this._deferred = new Deferred();\n    }\n    Object.defineProperty(BindOnceFuture.prototype, \"isCalled\", {\n        get: function () {\n            return this._isCalled;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(BindOnceFuture.prototype, \"promise\", {\n        get: function () {\n            return this._deferred.promise;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    BindOnceFuture.prototype.call = function () {\n        var _a;\n        var _this = this;\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        if (!this._isCalled) {\n            this._isCalled = true;\n            try {\n                Promise.resolve((_a = this._callback).call.apply(_a, __spreadArray([this._that], __read(args), false))).then(function (val) { return _this._deferred.resolve(val); }, function (err) { return _this._deferred.reject(err); });\n            }\n            catch (err) {\n                this._deferred.reject(err);\n            }\n        }\n        return this._deferred.promise;\n    };\n    return BindOnceFuture;\n}());\nexport { BindOnceFuture };\n//# sourceMappingURL=callback.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport function defaultServiceName() {\n    return \"unknown_service:\" + process.argv0;\n}\n//# sourceMappingURL=default-service-name.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nimport { diag } from '@opentelemetry/api';\nimport { SEMRESATTRS_SERVICE_NAME, SEMRESATTRS_TELEMETRY_SDK_LANGUAGE, SEMRESATTRS_TELEMETRY_SDK_NAME, SEMRESATTRS_TELEMETRY_SDK_VERSION, } from '@opentelemetry/semantic-conventions';\nimport { SDK_INFO } from '@opentelemetry/core';\nimport { defaultServiceName } from './platform';\n/**\n * A Resource describes the entity for which a signals (metrics or trace) are\n * collected.\n */\nvar Resource = /** @class */ (function () {\n    function Resource(\n    /**\n     * A dictionary of attributes with string keys and values that provide\n     * information about the entity as numbers, strings or booleans\n     * TODO: Consider to add check/validation on attributes.\n     */\n    attributes, asyncAttributesPromise) {\n        var _this = this;\n        var _a;\n        this._attributes = attributes;\n        this.asyncAttributesPending = asyncAttributesPromise != null;\n        this._syncAttributes = (_a = this._attributes) !== null && _a !== void 0 ? _a : {};\n        this._asyncAttributesPromise = asyncAttributesPromise === null || asyncAttributesPromise === void 0 ? void 0 : asyncAttributesPromise.then(function (asyncAttributes) {\n            _this._attributes = Object.assign({}, _this._attributes, asyncAttributes);\n            _this.asyncAttributesPending = false;\n            return asyncAttributes;\n        }, function (err) {\n            diag.debug(\"a resource's async attributes promise rejected: %s\", err);\n            _this.asyncAttributesPending = false;\n            return {};\n        });\n    }\n    /**\n     * Returns an empty Resource\n     */\n    Resource.empty = function () {\n        return Resource.EMPTY;\n    };\n    /**\n     * Returns a Resource that identifies the SDK in use.\n     */\n    Resource.default = function () {\n        var _a;\n        return new Resource((_a = {},\n            _a[SEMRESATTRS_SERVICE_NAME] = defaultServiceName(),\n            _a[SEMRESATTRS_TELEMETRY_SDK_LANGUAGE] = SDK_INFO[SEMRESATTRS_TELEMETRY_SDK_LANGUAGE],\n            _a[SEMRESATTRS_TELEMETRY_SDK_NAME] = SDK_INFO[SEMRESATTRS_TELEMETRY_SDK_NAME],\n            _a[SEMRESATTRS_TELEMETRY_SDK_VERSION] = SDK_INFO[SEMRESATTRS_TELEMETRY_SDK_VERSION],\n            _a));\n    };\n    Object.defineProperty(Resource.prototype, \"attributes\", {\n        get: function () {\n            var _a;\n            if (this.asyncAttributesPending) {\n                diag.error('Accessing resource attributes before async attributes settled');\n            }\n            return (_a = this._attributes) !== null && _a !== void 0 ? _a : {};\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Returns a promise that will never be rejected. Resolves when all async attributes have finished being added to\n     * this Resource's attributes. This is useful in exporters to block until resource detection\n     * has finished.\n     */\n    Resource.prototype.waitForAsyncAttributes = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!this.asyncAttributesPending) return [3 /*break*/, 2];\n                        return [4 /*yield*/, this._asyncAttributesPromise];\n                    case 1:\n                        _a.sent();\n                        _a.label = 2;\n                    case 2: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Returns a new, merged {@link Resource} by merging the current Resource\n     * with the other Resource. In case of a collision, other Resource takes\n     * precedence.\n     *\n     * @param other the Resource that will be merged with this.\n     * @returns the newly merged Resource.\n     */\n    Resource.prototype.merge = function (other) {\n        var _this = this;\n        var _a;\n        if (!other)\n            return this;\n        // SpanAttributes from other resource overwrite attributes from this resource.\n        var mergedSyncAttributes = __assign(__assign({}, this._syncAttributes), ((_a = other._syncAttributes) !== null && _a !== void 0 ? _a : other.attributes));\n        if (!this._asyncAttributesPromise &&\n            !other._asyncAttributesPromise) {\n            return new Resource(mergedSyncAttributes);\n        }\n        var mergedAttributesPromise = Promise.all([\n            this._asyncAttributesPromise,\n            other._asyncAttributesPromise,\n        ]).then(function (_a) {\n            var _b;\n            var _c = __read(_a, 2), thisAsyncAttributes = _c[0], otherAsyncAttributes = _c[1];\n            return __assign(__assign(__assign(__assign({}, _this._syncAttributes), thisAsyncAttributes), ((_b = other._syncAttributes) !== null && _b !== void 0 ? _b : other.attributes)), otherAsyncAttributes);\n        });\n        return new Resource(mergedSyncAttributes, mergedAttributesPromise);\n    };\n    Resource.EMPTY = new Resource({});\n    return Resource;\n}());\nexport { Resource };\n//# sourceMappingURL=Resource.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { createConstMap } from '../internal/utils';\n//----------------------------------------------------------------------------------------------------------\n// DO NOT EDIT, this is an Auto-generated file from scripts/semconv/templates//templates/SemanticAttributes.ts.j2\n//----------------------------------------------------------------------------------------------------------\n//----------------------------------------------------------------------------------------------------------\n// Constant values for SemanticAttributes\n//----------------------------------------------------------------------------------------------------------\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nvar TMP_AWS_LAMBDA_INVOKED_ARN = 'aws.lambda.invoked_arn';\nvar TMP_DB_SYSTEM = 'db.system';\nvar TMP_DB_CONNECTION_STRING = 'db.connection_string';\nvar TMP_DB_USER = 'db.user';\nvar TMP_DB_JDBC_DRIVER_CLASSNAME = 'db.jdbc.driver_classname';\nvar TMP_DB_NAME = 'db.name';\nvar TMP_DB_STATEMENT = 'db.statement';\nvar TMP_DB_OPERATION = 'db.operation';\nvar TMP_DB_MSSQL_INSTANCE_NAME = 'db.mssql.instance_name';\nvar TMP_DB_CASSANDRA_KEYSPACE = 'db.cassandra.keyspace';\nvar TMP_DB_CASSANDRA_PAGE_SIZE = 'db.cassandra.page_size';\nvar TMP_DB_CASSANDRA_CONSISTENCY_LEVEL = 'db.cassandra.consistency_level';\nvar TMP_DB_CASSANDRA_TABLE = 'db.cassandra.table';\nvar TMP_DB_CASSANDRA_IDEMPOTENCE = 'db.cassandra.idempotence';\nvar TMP_DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT = 'db.cassandra.speculative_execution_count';\nvar TMP_DB_CASSANDRA_COORDINATOR_ID = 'db.cassandra.coordinator.id';\nvar TMP_DB_CASSANDRA_COORDINATOR_DC = 'db.cassandra.coordinator.dc';\nvar TMP_DB_HBASE_NAMESPACE = 'db.hbase.namespace';\nvar TMP_DB_REDIS_DATABASE_INDEX = 'db.redis.database_index';\nvar TMP_DB_MONGODB_COLLECTION = 'db.mongodb.collection';\nvar TMP_DB_SQL_TABLE = 'db.sql.table';\nvar TMP_EXCEPTION_TYPE = 'exception.type';\nvar TMP_EXCEPTION_MESSAGE = 'exception.message';\nvar TMP_EXCEPTION_STACKTRACE = 'exception.stacktrace';\nvar TMP_EXCEPTION_ESCAPED = 'exception.escaped';\nvar TMP_FAAS_TRIGGER = 'faas.trigger';\nvar TMP_FAAS_EXECUTION = 'faas.execution';\nvar TMP_FAAS_DOCUMENT_COLLECTION = 'faas.document.collection';\nvar TMP_FAAS_DOCUMENT_OPERATION = 'faas.document.operation';\nvar TMP_FAAS_DOCUMENT_TIME = 'faas.document.time';\nvar TMP_FAAS_DOCUMENT_NAME = 'faas.document.name';\nvar TMP_FAAS_TIME = 'faas.time';\nvar TMP_FAAS_CRON = 'faas.cron';\nvar TMP_FAAS_COLDSTART = 'faas.coldstart';\nvar TMP_FAAS_INVOKED_NAME = 'faas.invoked_name';\nvar TMP_FAAS_INVOKED_PROVIDER = 'faas.invoked_provider';\nvar TMP_FAAS_INVOKED_REGION = 'faas.invoked_region';\nvar TMP_NET_TRANSPORT = 'net.transport';\nvar TMP_NET_PEER_IP = 'net.peer.ip';\nvar TMP_NET_PEER_PORT = 'net.peer.port';\nvar TMP_NET_PEER_NAME = 'net.peer.name';\nvar TMP_NET_HOST_IP = 'net.host.ip';\nvar TMP_NET_HOST_PORT = 'net.host.port';\nvar TMP_NET_HOST_NAME = 'net.host.name';\nvar TMP_NET_HOST_CONNECTION_TYPE = 'net.host.connection.type';\nvar TMP_NET_HOST_CONNECTION_SUBTYPE = 'net.host.connection.subtype';\nvar TMP_NET_HOST_CARRIER_NAME = 'net.host.carrier.name';\nvar TMP_NET_HOST_CARRIER_MCC = 'net.host.carrier.mcc';\nvar TMP_NET_HOST_CARRIER_MNC = 'net.host.carrier.mnc';\nvar TMP_NET_HOST_CARRIER_ICC = 'net.host.carrier.icc';\nvar TMP_PEER_SERVICE = 'peer.service';\nvar TMP_ENDUSER_ID = 'enduser.id';\nvar TMP_ENDUSER_ROLE = 'enduser.role';\nvar TMP_ENDUSER_SCOPE = 'enduser.scope';\nvar TMP_THREAD_ID = 'thread.id';\nvar TMP_THREAD_NAME = 'thread.name';\nvar TMP_CODE_FUNCTION = 'code.function';\nvar TMP_CODE_NAMESPACE = 'code.namespace';\nvar TMP_CODE_FILEPATH = 'code.filepath';\nvar TMP_CODE_LINENO = 'code.lineno';\nvar TMP_HTTP_METHOD = 'http.method';\nvar TMP_HTTP_URL = 'http.url';\nvar TMP_HTTP_TARGET = 'http.target';\nvar TMP_HTTP_HOST = 'http.host';\nvar TMP_HTTP_SCHEME = 'http.scheme';\nvar TMP_HTTP_STATUS_CODE = 'http.status_code';\nvar TMP_HTTP_FLAVOR = 'http.flavor';\nvar TMP_HTTP_USER_AGENT = 'http.user_agent';\nvar TMP_HTTP_REQUEST_CONTENT_LENGTH = 'http.request_content_length';\nvar TMP_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED = 'http.request_content_length_uncompressed';\nvar TMP_HTTP_RESPONSE_CONTENT_LENGTH = 'http.response_content_length';\nvar TMP_HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED = 'http.response_content_length_uncompressed';\nvar TMP_HTTP_SERVER_NAME = 'http.server_name';\nvar TMP_HTTP_ROUTE = 'http.route';\nvar TMP_HTTP_CLIENT_IP = 'http.client_ip';\nvar TMP_AWS_DYNAMODB_TABLE_NAMES = 'aws.dynamodb.table_names';\nvar TMP_AWS_DYNAMODB_CONSUMED_CAPACITY = 'aws.dynamodb.consumed_capacity';\nvar TMP_AWS_DYNAMODB_ITEM_COLLECTION_METRICS = 'aws.dynamodb.item_collection_metrics';\nvar TMP_AWS_DYNAMODB_PROVISIONED_READ_CAPACITY = 'aws.dynamodb.provisioned_read_capacity';\nvar TMP_AWS_DYNAMODB_PROVISIONED_WRITE_CAPACITY = 'aws.dynamodb.provisioned_write_capacity';\nvar TMP_AWS_DYNAMODB_CONSISTENT_READ = 'aws.dynamodb.consistent_read';\nvar TMP_AWS_DYNAMODB_PROJECTION = 'aws.dynamodb.projection';\nvar TMP_AWS_DYNAMODB_LIMIT = 'aws.dynamodb.limit';\nvar TMP_AWS_DYNAMODB_ATTRIBUTES_TO_GET = 'aws.dynamodb.attributes_to_get';\nvar TMP_AWS_DYNAMODB_INDEX_NAME = 'aws.dynamodb.index_name';\nvar TMP_AWS_DYNAMODB_SELECT = 'aws.dynamodb.select';\nvar TMP_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEXES = 'aws.dynamodb.global_secondary_indexes';\nvar TMP_AWS_DYNAMODB_LOCAL_SECONDARY_INDEXES = 'aws.dynamodb.local_secondary_indexes';\nvar TMP_AWS_DYNAMODB_EXCLUSIVE_START_TABLE = 'aws.dynamodb.exclusive_start_table';\nvar TMP_AWS_DYNAMODB_TABLE_COUNT = 'aws.dynamodb.table_count';\nvar TMP_AWS_DYNAMODB_SCAN_FORWARD = 'aws.dynamodb.scan_forward';\nvar TMP_AWS_DYNAMODB_SEGMENT = 'aws.dynamodb.segment';\nvar TMP_AWS_DYNAMODB_TOTAL_SEGMENTS = 'aws.dynamodb.total_segments';\nvar TMP_AWS_DYNAMODB_COUNT = 'aws.dynamodb.count';\nvar TMP_AWS_DYNAMODB_SCANNED_COUNT = 'aws.dynamodb.scanned_count';\nvar TMP_AWS_DYNAMODB_ATTRIBUTE_DEFINITIONS = 'aws.dynamodb.attribute_definitions';\nvar TMP_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEX_UPDATES = 'aws.dynamodb.global_secondary_index_updates';\nvar TMP_MESSAGING_SYSTEM = 'messaging.system';\nvar TMP_MESSAGING_DESTINATION = 'messaging.destination';\nvar TMP_MESSAGING_DESTINATION_KIND = 'messaging.destination_kind';\nvar TMP_MESSAGING_TEMP_DESTINATION = 'messaging.temp_destination';\nvar TMP_MESSAGING_PROTOCOL = 'messaging.protocol';\nvar TMP_MESSAGING_PROTOCOL_VERSION = 'messaging.protocol_version';\nvar TMP_MESSAGING_URL = 'messaging.url';\nvar TMP_MESSAGING_MESSAGE_ID = 'messaging.message_id';\nvar TMP_MESSAGING_CONVERSATION_ID = 'messaging.conversation_id';\nvar TMP_MESSAGING_MESSAGE_PAYLOAD_SIZE_BYTES = 'messaging.message_payload_size_bytes';\nvar TMP_MESSAGING_MESSAGE_PAYLOAD_COMPRESSED_SIZE_BYTES = 'messaging.message_payload_compressed_size_bytes';\nvar TMP_MESSAGING_OPERATION = 'messaging.operation';\nvar TMP_MESSAGING_CONSUMER_ID = 'messaging.consumer_id';\nvar TMP_MESSAGING_RABBITMQ_ROUTING_KEY = 'messaging.rabbitmq.routing_key';\nvar TMP_MESSAGING_KAFKA_MESSAGE_KEY = 'messaging.kafka.message_key';\nvar TMP_MESSAGING_KAFKA_CONSUMER_GROUP = 'messaging.kafka.consumer_group';\nvar TMP_MESSAGING_KAFKA_CLIENT_ID = 'messaging.kafka.client_id';\nvar TMP_MESSAGING_KAFKA_PARTITION = 'messaging.kafka.partition';\nvar TMP_MESSAGING_KAFKA_TOMBSTONE = 'messaging.kafka.tombstone';\nvar TMP_RPC_SYSTEM = 'rpc.system';\nvar TMP_RPC_SERVICE = 'rpc.service';\nvar TMP_RPC_METHOD = 'rpc.method';\nvar TMP_RPC_GRPC_STATUS_CODE = 'rpc.grpc.status_code';\nvar TMP_RPC_JSONRPC_VERSION = 'rpc.jsonrpc.version';\nvar TMP_RPC_JSONRPC_REQUEST_ID = 'rpc.jsonrpc.request_id';\nvar TMP_RPC_JSONRPC_ERROR_CODE = 'rpc.jsonrpc.error_code';\nvar TMP_RPC_JSONRPC_ERROR_MESSAGE = 'rpc.jsonrpc.error_message';\nvar TMP_MESSAGE_TYPE = 'message.type';\nvar TMP_MESSAGE_ID = 'message.id';\nvar TMP_MESSAGE_COMPRESSED_SIZE = 'message.compressed_size';\nvar TMP_MESSAGE_UNCOMPRESSED_SIZE = 'message.uncompressed_size';\n/**\n * The full invoked ARN as provided on the `Context` passed to the function (`Lambda-Runtime-Invoked-Function-Arn` header on the `/runtime/invocation/next` applicable).\n *\n * Note: This may be different from `faas.id` if an alias is involved.\n *\n * @deprecated Use ATTR_AWS_LAMBDA_INVOKED_ARN in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_AWS_LAMBDA_INVOKED_ARN = TMP_AWS_LAMBDA_INVOKED_ARN;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use ATTR_DB_SYSTEM in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_DB_SYSTEM = TMP_DB_SYSTEM;\n/**\n * The connection string used to connect to the database. It is recommended to remove embedded credentials.\n *\n * @deprecated Use ATTR_DB_CONNECTION_STRING in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_DB_CONNECTION_STRING = TMP_DB_CONNECTION_STRING;\n/**\n * Username for accessing the database.\n *\n * @deprecated Use ATTR_DB_USER in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_DB_USER = TMP_DB_USER;\n/**\n * The fully-qualified class name of the [Java Database Connectivity (JDBC)](https://docs.oracle.com/javase/8/docs/technotes/guides/jdbc/) driver used to connect.\n *\n * @deprecated Use ATTR_DB_JDBC_DRIVER_CLASSNAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_DB_JDBC_DRIVER_CLASSNAME = TMP_DB_JDBC_DRIVER_CLASSNAME;\n/**\n * If no [tech-specific attribute](#call-level-attributes-for-specific-technologies) is defined, this attribute is used to report the name of the database being accessed. For commands that switch the database, this should be set to the target database (even if the command fails).\n *\n * Note: In some SQL databases, the database name to be used is called &#34;schema name&#34;.\n *\n * @deprecated Use ATTR_DB_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_DB_NAME = TMP_DB_NAME;\n/**\n * The database statement being executed.\n *\n * Note: The value may be sanitized to exclude sensitive information.\n *\n * @deprecated Use ATTR_DB_STATEMENT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_DB_STATEMENT = TMP_DB_STATEMENT;\n/**\n * The name of the operation being executed, e.g. the [MongoDB command name](https://docs.mongodb.com/manual/reference/command/#database-operations) such as `findAndModify`, or the SQL keyword.\n *\n * Note: When setting this to an SQL keyword, it is not recommended to attempt any client-side parsing of `db.statement` just to get this property, but it should be set if the operation name is provided by the library being instrumented. If the SQL statement has an ambiguous operation, or performs more than one operation, this value may be omitted.\n *\n * @deprecated Use ATTR_DB_OPERATION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_DB_OPERATION = TMP_DB_OPERATION;\n/**\n * The Microsoft SQL Server [instance name](https://docs.microsoft.com/en-us/sql/connect/jdbc/building-the-connection-url?view=sql-server-ver15) connecting to. This name is used to determine the port of a named instance.\n *\n * Note: If setting a `db.mssql.instance_name`, `net.peer.port` is no longer required (but still recommended if non-standard).\n *\n * @deprecated Use ATTR_DB_MSSQL_INSTANCE_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_DB_MSSQL_INSTANCE_NAME = TMP_DB_MSSQL_INSTANCE_NAME;\n/**\n * The name of the keyspace being accessed. To be used instead of the generic `db.name` attribute.\n *\n * @deprecated Use ATTR_DB_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_DB_CASSANDRA_KEYSPACE = TMP_DB_CASSANDRA_KEYSPACE;\n/**\n * The fetch size used for paging, i.e. how many rows will be returned at once.\n *\n * @deprecated Use ATTR_DB_CASSANDRA_PAGE_SIZE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_DB_CASSANDRA_PAGE_SIZE = TMP_DB_CASSANDRA_PAGE_SIZE;\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n *\n * @deprecated Use ATTR_DB_CASSANDRA_CONSISTENCY_LEVEL in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_DB_CASSANDRA_CONSISTENCY_LEVEL = TMP_DB_CASSANDRA_CONSISTENCY_LEVEL;\n/**\n * The name of the primary table that the operation is acting upon, including the schema name (if applicable).\n *\n * Note: This mirrors the db.sql.table attribute but references cassandra rather than sql. It is not recommended to attempt any client-side parsing of `db.statement` just to get this property, but it should be set if it is provided by the library being instrumented. If the operation is acting upon an anonymous table, or more than one table, this value MUST NOT be set.\n *\n * @deprecated Use ATTR_DB_CASSANDRA_TABLE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_DB_CASSANDRA_TABLE = TMP_DB_CASSANDRA_TABLE;\n/**\n * Whether or not the query is idempotent.\n *\n * @deprecated Use ATTR_DB_CASSANDRA_IDEMPOTENCE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_DB_CASSANDRA_IDEMPOTENCE = TMP_DB_CASSANDRA_IDEMPOTENCE;\n/**\n * The number of times a query was speculatively executed. Not set or `0` if the query was not executed speculatively.\n *\n * @deprecated Use ATTR_DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT = TMP_DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT;\n/**\n * The ID of the coordinating node for a query.\n *\n * @deprecated Use ATTR_DB_CASSANDRA_COORDINATOR_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_DB_CASSANDRA_COORDINATOR_ID = TMP_DB_CASSANDRA_COORDINATOR_ID;\n/**\n * The data center of the coordinating node for a query.\n *\n * @deprecated Use ATTR_DB_CASSANDRA_COORDINATOR_DC in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_DB_CASSANDRA_COORDINATOR_DC = TMP_DB_CASSANDRA_COORDINATOR_DC;\n/**\n * The [HBase namespace](https://hbase.apache.org/book.html#_namespace) being accessed. To be used instead of the generic `db.name` attribute.\n *\n * @deprecated Use ATTR_DB_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_DB_HBASE_NAMESPACE = TMP_DB_HBASE_NAMESPACE;\n/**\n * The index of the database being accessed as used in the [`SELECT` command](https://redis.io/commands/select), provided as an integer. To be used instead of the generic `db.name` attribute.\n *\n * @deprecated Use ATTR_DB_REDIS_DATABASE_INDEX in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_DB_REDIS_DATABASE_INDEX = TMP_DB_REDIS_DATABASE_INDEX;\n/**\n * The collection being accessed within the database stated in `db.name`.\n *\n * @deprecated Use ATTR_DB_MONGODB_COLLECTION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_DB_MONGODB_COLLECTION = TMP_DB_MONGODB_COLLECTION;\n/**\n * The name of the primary table that the operation is acting upon, including the schema name (if applicable).\n *\n * Note: It is not recommended to attempt any client-side parsing of `db.statement` just to get this property, but it should be set if it is provided by the library being instrumented. If the operation is acting upon an anonymous table, or more than one table, this value MUST NOT be set.\n *\n * @deprecated Use ATTR_DB_SQL_TABLE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_DB_SQL_TABLE = TMP_DB_SQL_TABLE;\n/**\n * The type of the exception (its fully-qualified class name, if applicable). The dynamic type of the exception should be preferred over the static type in languages that support it.\n *\n * @deprecated Use ATTR_EXCEPTION_TYPE.\n */\nexport var SEMATTRS_EXCEPTION_TYPE = TMP_EXCEPTION_TYPE;\n/**\n * The exception message.\n *\n * @deprecated Use ATTR_EXCEPTION_MESSAGE.\n */\nexport var SEMATTRS_EXCEPTION_MESSAGE = TMP_EXCEPTION_MESSAGE;\n/**\n * A stacktrace as a string in the natural representation for the language runtime. The representation is to be determined and documented by each language SIG.\n *\n * @deprecated Use ATTR_EXCEPTION_STACKTRACE.\n */\nexport var SEMATTRS_EXCEPTION_STACKTRACE = TMP_EXCEPTION_STACKTRACE;\n/**\n* SHOULD be set to true if the exception event is recorded at a point where it is known that the exception is escaping the scope of the span.\n*\n* Note: An exception is considered to have escaped (or left) the scope of a span,\nif that span is ended while the exception is still logically &#34;in flight&#34;.\nThis may be actually &#34;in flight&#34; in some languages (e.g. if the exception\nis passed to a Context manager&#39;s `__exit__` method in Python) but will\nusually be caught at the point of recording the exception in most languages.\n\nIt is usually not possible to determine at the point where an exception is thrown\nwhether it will escape the scope of a span.\nHowever, it is trivial to know that an exception\nwill escape, if one checks for an active exception just before ending the span,\nas done in the [example above](#exception-end-example).\n\nIt follows that an exception may still escape the scope of the span\neven if the `exception.escaped` attribute was not set or set to false,\nsince the event might have been recorded at a time where it was not\nclear whether the exception will escape.\n*\n* @deprecated Use ATTR_EXCEPTION_ESCAPED.\n*/\nexport var SEMATTRS_EXCEPTION_ESCAPED = TMP_EXCEPTION_ESCAPED;\n/**\n * Type of the trigger on which the function is executed.\n *\n * @deprecated Use ATTR_FAAS_TRIGGER in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_FAAS_TRIGGER = TMP_FAAS_TRIGGER;\n/**\n * The execution ID of the current function execution.\n *\n * @deprecated Use ATTR_FAAS_INVOCATION_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_FAAS_EXECUTION = TMP_FAAS_EXECUTION;\n/**\n * The name of the source on which the triggering operation was performed. For example, in Cloud Storage or S3 corresponds to the bucket name, and in Cosmos DB to the database name.\n *\n * @deprecated Use ATTR_FAAS_DOCUMENT_COLLECTION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_FAAS_DOCUMENT_COLLECTION = TMP_FAAS_DOCUMENT_COLLECTION;\n/**\n * Describes the type of the operation that was performed on the data.\n *\n * @deprecated Use ATTR_FAAS_DOCUMENT_OPERATION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_FAAS_DOCUMENT_OPERATION = TMP_FAAS_DOCUMENT_OPERATION;\n/**\n * A string containing the time when the data was accessed in the [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format expressed in [UTC](https://www.w3.org/TR/NOTE-datetime).\n *\n * @deprecated Use ATTR_FAAS_DOCUMENT_TIME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_FAAS_DOCUMENT_TIME = TMP_FAAS_DOCUMENT_TIME;\n/**\n * The document name/table subjected to the operation. For example, in Cloud Storage or S3 is the name of the file, and in Cosmos DB the table name.\n *\n * @deprecated Use ATTR_FAAS_DOCUMENT_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_FAAS_DOCUMENT_NAME = TMP_FAAS_DOCUMENT_NAME;\n/**\n * A string containing the function invocation time in the [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format expressed in [UTC](https://www.w3.org/TR/NOTE-datetime).\n *\n * @deprecated Use ATTR_FAAS_TIME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_FAAS_TIME = TMP_FAAS_TIME;\n/**\n * A string containing the schedule period as [Cron Expression](https://docs.oracle.com/cd/E12058_01/doc/doc.1014/e12030/cron_expressions.htm).\n *\n * @deprecated Use ATTR_FAAS_CRON in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_FAAS_CRON = TMP_FAAS_CRON;\n/**\n * A boolean that is true if the serverless function is executed for the first time (aka cold-start).\n *\n * @deprecated Use ATTR_FAAS_COLDSTART in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_FAAS_COLDSTART = TMP_FAAS_COLDSTART;\n/**\n * The name of the invoked function.\n *\n * Note: SHOULD be equal to the `faas.name` resource attribute of the invoked function.\n *\n * @deprecated Use ATTR_FAAS_INVOKED_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_FAAS_INVOKED_NAME = TMP_FAAS_INVOKED_NAME;\n/**\n * The cloud provider of the invoked function.\n *\n * Note: SHOULD be equal to the `cloud.provider` resource attribute of the invoked function.\n *\n * @deprecated Use ATTR_FAAS_INVOKED_PROVIDER in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_FAAS_INVOKED_PROVIDER = TMP_FAAS_INVOKED_PROVIDER;\n/**\n * The cloud region of the invoked function.\n *\n * Note: SHOULD be equal to the `cloud.region` resource attribute of the invoked function.\n *\n * @deprecated Use ATTR_FAAS_INVOKED_REGION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_FAAS_INVOKED_REGION = TMP_FAAS_INVOKED_REGION;\n/**\n * Transport protocol used. See note below.\n *\n * @deprecated Use ATTR_NET_TRANSPORT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_NET_TRANSPORT = TMP_NET_TRANSPORT;\n/**\n * Remote address of the peer (dotted decimal for IPv4 or [RFC5952](https://tools.ietf.org/html/rfc5952) for IPv6).\n *\n * @deprecated Use ATTR_NET_PEER_IP in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_NET_PEER_IP = TMP_NET_PEER_IP;\n/**\n * Remote port number.\n *\n * @deprecated Use ATTR_NET_PEER_PORT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_NET_PEER_PORT = TMP_NET_PEER_PORT;\n/**\n * Remote hostname or similar, see note below.\n *\n * @deprecated Use ATTR_NET_PEER_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_NET_PEER_NAME = TMP_NET_PEER_NAME;\n/**\n * Like `net.peer.ip` but for the host IP. Useful in case of a multi-IP host.\n *\n * @deprecated Use ATTR_NET_HOST_IP in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_NET_HOST_IP = TMP_NET_HOST_IP;\n/**\n * Like `net.peer.port` but for the host port.\n *\n * @deprecated Use ATTR_NET_HOST_PORT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_NET_HOST_PORT = TMP_NET_HOST_PORT;\n/**\n * Local hostname or similar, see note below.\n *\n * @deprecated Use ATTR_NET_HOST_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_NET_HOST_NAME = TMP_NET_HOST_NAME;\n/**\n * The internet connection type currently being used by the host.\n *\n * @deprecated Use ATTR_NETWORK_CONNECTION_TYPE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_NET_HOST_CONNECTION_TYPE = TMP_NET_HOST_CONNECTION_TYPE;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use ATTR_NETWORK_CONNECTION_SUBTYPE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_NET_HOST_CONNECTION_SUBTYPE = TMP_NET_HOST_CONNECTION_SUBTYPE;\n/**\n * The name of the mobile carrier.\n *\n * @deprecated Use ATTR_NETWORK_CARRIER_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_NET_HOST_CARRIER_NAME = TMP_NET_HOST_CARRIER_NAME;\n/**\n * The mobile carrier country code.\n *\n * @deprecated Use ATTR_NETWORK_CARRIER_MCC in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_NET_HOST_CARRIER_MCC = TMP_NET_HOST_CARRIER_MCC;\n/**\n * The mobile carrier network code.\n *\n * @deprecated Use ATTR_NETWORK_CARRIER_MNC in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_NET_HOST_CARRIER_MNC = TMP_NET_HOST_CARRIER_MNC;\n/**\n * The ISO 3166-1 alpha-2 2-character country code associated with the mobile carrier network.\n *\n * @deprecated Use ATTR_NETWORK_CARRIER_ICC in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_NET_HOST_CARRIER_ICC = TMP_NET_HOST_CARRIER_ICC;\n/**\n * The [`service.name`](../../resource/semantic_conventions/README.md#service) of the remote service. SHOULD be equal to the actual `service.name` resource attribute of the remote service if any.\n *\n * @deprecated Use ATTR_PEER_SERVICE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_PEER_SERVICE = TMP_PEER_SERVICE;\n/**\n * Username or client_id extracted from the access token or [Authorization](https://tools.ietf.org/html/rfc7235#section-4.2) header in the inbound request from outside the system.\n *\n * @deprecated Use ATTR_ENDUSER_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_ENDUSER_ID = TMP_ENDUSER_ID;\n/**\n * Actual/assumed role the client is making the request under extracted from token or application security context.\n *\n * @deprecated Use ATTR_ENDUSER_ROLE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_ENDUSER_ROLE = TMP_ENDUSER_ROLE;\n/**\n * Scopes or granted authorities the client currently possesses extracted from token or application security context. The value would come from the scope associated with an [OAuth 2.0 Access Token](https://tools.ietf.org/html/rfc6749#section-3.3) or an attribute value in a [SAML 2.0 Assertion](http://docs.oasis-open.org/security/saml/Post2.0/sstc-saml-tech-overview-2.0.html).\n *\n * @deprecated Use ATTR_ENDUSER_SCOPE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_ENDUSER_SCOPE = TMP_ENDUSER_SCOPE;\n/**\n * Current &#34;managed&#34; thread ID (as opposed to OS thread ID).\n *\n * @deprecated Use ATTR_THREAD_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_THREAD_ID = TMP_THREAD_ID;\n/**\n * Current thread name.\n *\n * @deprecated Use ATTR_THREAD_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_THREAD_NAME = TMP_THREAD_NAME;\n/**\n * The method or function name, or equivalent (usually rightmost part of the code unit&#39;s name).\n *\n * @deprecated Use ATTR_CODE_FUNCTION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_CODE_FUNCTION = TMP_CODE_FUNCTION;\n/**\n * The &#34;namespace&#34; within which `code.function` is defined. Usually the qualified class or module name, such that `code.namespace` + some separator + `code.function` form a unique identifier for the code unit.\n *\n * @deprecated Use ATTR_CODE_NAMESPACE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_CODE_NAMESPACE = TMP_CODE_NAMESPACE;\n/**\n * The source code file name that identifies the code unit as uniquely as possible (preferably an absolute file path).\n *\n * @deprecated Use ATTR_CODE_FILEPATH in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_CODE_FILEPATH = TMP_CODE_FILEPATH;\n/**\n * The line number in `code.filepath` best representing the operation. It SHOULD point within the code unit named in `code.function`.\n *\n * @deprecated Use ATTR_CODE_LINENO in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_CODE_LINENO = TMP_CODE_LINENO;\n/**\n * HTTP request method.\n *\n * @deprecated Use ATTR_HTTP_METHOD in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_HTTP_METHOD = TMP_HTTP_METHOD;\n/**\n * Full HTTP request URL in the form `scheme://host[:port]/path?query[#fragment]`. Usually the fragment is not transmitted over HTTP, but if it is known, it should be included nevertheless.\n *\n * Note: `http.url` MUST NOT contain credentials passed via URL in form of `https://username:password@www.example.com/`. In such case the attribute&#39;s value should be `https://www.example.com/`.\n *\n * @deprecated Use ATTR_HTTP_URL in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_HTTP_URL = TMP_HTTP_URL;\n/**\n * The full request target as passed in a HTTP request line or equivalent.\n *\n * @deprecated Use ATTR_HTTP_TARGET in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_HTTP_TARGET = TMP_HTTP_TARGET;\n/**\n * The value of the [HTTP host header](https://tools.ietf.org/html/rfc7230#section-5.4). An empty Host header should also be reported, see note.\n *\n * Note: When the header is present but empty the attribute SHOULD be set to the empty string. Note that this is a valid situation that is expected in certain cases, according the aforementioned [section of RFC 7230](https://tools.ietf.org/html/rfc7230#section-5.4). When the header is not set the attribute MUST NOT be set.\n *\n * @deprecated Use ATTR_HTTP_HOST in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_HTTP_HOST = TMP_HTTP_HOST;\n/**\n * The URI scheme identifying the used protocol.\n *\n * @deprecated Use ATTR_HTTP_SCHEME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_HTTP_SCHEME = TMP_HTTP_SCHEME;\n/**\n * [HTTP response status code](https://tools.ietf.org/html/rfc7231#section-6).\n *\n * @deprecated Use ATTR_HTTP_STATUS_CODE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_HTTP_STATUS_CODE = TMP_HTTP_STATUS_CODE;\n/**\n * Kind of HTTP protocol used.\n *\n * Note: If `net.transport` is not specified, it can be assumed to be `IP.TCP` except if `http.flavor` is `QUIC`, in which case `IP.UDP` is assumed.\n *\n * @deprecated Use ATTR_HTTP_FLAVOR in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_HTTP_FLAVOR = TMP_HTTP_FLAVOR;\n/**\n * Value of the [HTTP User-Agent](https://tools.ietf.org/html/rfc7231#section-5.5.3) header sent by the client.\n *\n * @deprecated Use ATTR_HTTP_USER_AGENT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_HTTP_USER_AGENT = TMP_HTTP_USER_AGENT;\n/**\n * The size of the request payload body in bytes. This is the number of bytes transferred excluding headers and is often, but not always, present as the [Content-Length](https://tools.ietf.org/html/rfc7230#section-3.3.2) header. For requests using transport encoding, this should be the compressed size.\n *\n * @deprecated Use ATTR_HTTP_REQUEST_CONTENT_LENGTH in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_HTTP_REQUEST_CONTENT_LENGTH = TMP_HTTP_REQUEST_CONTENT_LENGTH;\n/**\n * The size of the uncompressed request payload body after transport decoding. Not set if transport encoding not used.\n *\n * @deprecated Use ATTR_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED = TMP_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED;\n/**\n * The size of the response payload body in bytes. This is the number of bytes transferred excluding headers and is often, but not always, present as the [Content-Length](https://tools.ietf.org/html/rfc7230#section-3.3.2) header. For requests using transport encoding, this should be the compressed size.\n *\n * @deprecated Use ATTR_HTTP_RESPONSE_CONTENT_LENGTH in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_HTTP_RESPONSE_CONTENT_LENGTH = TMP_HTTP_RESPONSE_CONTENT_LENGTH;\n/**\n * The size of the uncompressed response payload body after transport decoding. Not set if transport encoding not used.\n *\n * @deprecated Use ATTR_HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED = TMP_HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED;\n/**\n * The primary server name of the matched virtual host. This should be obtained via configuration. If no such configuration can be obtained, this attribute MUST NOT be set ( `net.host.name` should be used instead).\n *\n * Note: `http.url` is usually not readily available on the server side but would have to be assembled in a cumbersome and sometimes lossy process from other information (see e.g. open-telemetry/opentelemetry-python/pull/148). It is thus preferred to supply the raw data that is available.\n *\n * @deprecated Use ATTR_HTTP_SERVER_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_HTTP_SERVER_NAME = TMP_HTTP_SERVER_NAME;\n/**\n * The matched route (path template).\n *\n * @deprecated Use ATTR_HTTP_ROUTE.\n */\nexport var SEMATTRS_HTTP_ROUTE = TMP_HTTP_ROUTE;\n/**\n* The IP address of the original client behind all proxies, if known (e.g. from [X-Forwarded-For](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-For)).\n*\n* Note: This is not necessarily the same as `net.peer.ip`, which would\nidentify the network-level peer, which may be a proxy.\n\nThis attribute should be set when a source of information different\nfrom the one used for `net.peer.ip`, is available even if that other\nsource just confirms the same value as `net.peer.ip`.\nRationale: For `net.peer.ip`, one typically does not know if it\ncomes from a proxy, reverse proxy, or the actual client. Setting\n`http.client_ip` when it&#39;s the same as `net.peer.ip` means that\none is at least somewhat confident that the address is not that of\nthe closest proxy.\n*\n* @deprecated Use ATTR_HTTP_CLIENT_IP in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n*/\nexport var SEMATTRS_HTTP_CLIENT_IP = TMP_HTTP_CLIENT_IP;\n/**\n * The keys in the `RequestItems` object field.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_TABLE_NAMES in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_AWS_DYNAMODB_TABLE_NAMES = TMP_AWS_DYNAMODB_TABLE_NAMES;\n/**\n * The JSON-serialized value of each item in the `ConsumedCapacity` response field.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_CONSUMED_CAPACITY in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_AWS_DYNAMODB_CONSUMED_CAPACITY = TMP_AWS_DYNAMODB_CONSUMED_CAPACITY;\n/**\n * The JSON-serialized value of the `ItemCollectionMetrics` response field.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_ITEM_COLLECTION_METRICS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_AWS_DYNAMODB_ITEM_COLLECTION_METRICS = TMP_AWS_DYNAMODB_ITEM_COLLECTION_METRICS;\n/**\n * The value of the `ProvisionedThroughput.ReadCapacityUnits` request parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_PROVISIONED_READ_CAPACITY in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_AWS_DYNAMODB_PROVISIONED_READ_CAPACITY = TMP_AWS_DYNAMODB_PROVISIONED_READ_CAPACITY;\n/**\n * The value of the `ProvisionedThroughput.WriteCapacityUnits` request parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_PROVISIONED_WRITE_CAPACITY in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_AWS_DYNAMODB_PROVISIONED_WRITE_CAPACITY = TMP_AWS_DYNAMODB_PROVISIONED_WRITE_CAPACITY;\n/**\n * The value of the `ConsistentRead` request parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_CONSISTENT_READ in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_AWS_DYNAMODB_CONSISTENT_READ = TMP_AWS_DYNAMODB_CONSISTENT_READ;\n/**\n * The value of the `ProjectionExpression` request parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_PROJECTION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_AWS_DYNAMODB_PROJECTION = TMP_AWS_DYNAMODB_PROJECTION;\n/**\n * The value of the `Limit` request parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_LIMIT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_AWS_DYNAMODB_LIMIT = TMP_AWS_DYNAMODB_LIMIT;\n/**\n * The value of the `AttributesToGet` request parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_ATTRIBUTES_TO_GET in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_AWS_DYNAMODB_ATTRIBUTES_TO_GET = TMP_AWS_DYNAMODB_ATTRIBUTES_TO_GET;\n/**\n * The value of the `IndexName` request parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_INDEX_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_AWS_DYNAMODB_INDEX_NAME = TMP_AWS_DYNAMODB_INDEX_NAME;\n/**\n * The value of the `Select` request parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_SELECT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_AWS_DYNAMODB_SELECT = TMP_AWS_DYNAMODB_SELECT;\n/**\n * The JSON-serialized value of each item of the `GlobalSecondaryIndexes` request field.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEXES in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEXES = TMP_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEXES;\n/**\n * The JSON-serialized value of each item of the `LocalSecondaryIndexes` request field.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_LOCAL_SECONDARY_INDEXES in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_AWS_DYNAMODB_LOCAL_SECONDARY_INDEXES = TMP_AWS_DYNAMODB_LOCAL_SECONDARY_INDEXES;\n/**\n * The value of the `ExclusiveStartTableName` request parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_EXCLUSIVE_START_TABLE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_AWS_DYNAMODB_EXCLUSIVE_START_TABLE = TMP_AWS_DYNAMODB_EXCLUSIVE_START_TABLE;\n/**\n * The the number of items in the `TableNames` response parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_TABLE_COUNT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_AWS_DYNAMODB_TABLE_COUNT = TMP_AWS_DYNAMODB_TABLE_COUNT;\n/**\n * The value of the `ScanIndexForward` request parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_SCAN_FORWARD in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_AWS_DYNAMODB_SCAN_FORWARD = TMP_AWS_DYNAMODB_SCAN_FORWARD;\n/**\n * The value of the `Segment` request parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_SEGMENT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_AWS_DYNAMODB_SEGMENT = TMP_AWS_DYNAMODB_SEGMENT;\n/**\n * The value of the `TotalSegments` request parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_TOTAL_SEGMENTS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_AWS_DYNAMODB_TOTAL_SEGMENTS = TMP_AWS_DYNAMODB_TOTAL_SEGMENTS;\n/**\n * The value of the `Count` response parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_COUNT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_AWS_DYNAMODB_COUNT = TMP_AWS_DYNAMODB_COUNT;\n/**\n * The value of the `ScannedCount` response parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_SCANNED_COUNT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_AWS_DYNAMODB_SCANNED_COUNT = TMP_AWS_DYNAMODB_SCANNED_COUNT;\n/**\n * The JSON-serialized value of each item in the `AttributeDefinitions` request field.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_ATTRIBUTE_DEFINITIONS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_AWS_DYNAMODB_ATTRIBUTE_DEFINITIONS = TMP_AWS_DYNAMODB_ATTRIBUTE_DEFINITIONS;\n/**\n * The JSON-serialized value of each item in the the `GlobalSecondaryIndexUpdates` request field.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEX_UPDATES in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEX_UPDATES = TMP_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEX_UPDATES;\n/**\n * A string identifying the messaging system.\n *\n * @deprecated Use ATTR_MESSAGING_SYSTEM in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_MESSAGING_SYSTEM = TMP_MESSAGING_SYSTEM;\n/**\n * The message destination name. This might be equal to the span name but is required nevertheless.\n *\n * @deprecated Use ATTR_MESSAGING_DESTINATION_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_MESSAGING_DESTINATION = TMP_MESSAGING_DESTINATION;\n/**\n * The kind of message destination.\n *\n * @deprecated Removed in semconv v1.20.0.\n */\nexport var SEMATTRS_MESSAGING_DESTINATION_KIND = TMP_MESSAGING_DESTINATION_KIND;\n/**\n * A boolean that is true if the message destination is temporary.\n *\n * @deprecated Use ATTR_MESSAGING_DESTINATION_TEMPORARY in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_MESSAGING_TEMP_DESTINATION = TMP_MESSAGING_TEMP_DESTINATION;\n/**\n * The name of the transport protocol.\n *\n * @deprecated Use ATTR_NETWORK_PROTOCOL_NAME.\n */\nexport var SEMATTRS_MESSAGING_PROTOCOL = TMP_MESSAGING_PROTOCOL;\n/**\n * The version of the transport protocol.\n *\n * @deprecated Use ATTR_NETWORK_PROTOCOL_VERSION.\n */\nexport var SEMATTRS_MESSAGING_PROTOCOL_VERSION = TMP_MESSAGING_PROTOCOL_VERSION;\n/**\n * Connection string.\n *\n * @deprecated Removed in semconv v1.17.0.\n */\nexport var SEMATTRS_MESSAGING_URL = TMP_MESSAGING_URL;\n/**\n * A value used by the messaging system as an identifier for the message, represented as a string.\n *\n * @deprecated Use ATTR_MESSAGING_MESSAGE_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_MESSAGING_MESSAGE_ID = TMP_MESSAGING_MESSAGE_ID;\n/**\n * The [conversation ID](#conversations) identifying the conversation to which the message belongs, represented as a string. Sometimes called &#34;Correlation ID&#34;.\n *\n * @deprecated Use ATTR_MESSAGING_MESSAGE_CONVERSATION_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_MESSAGING_CONVERSATION_ID = TMP_MESSAGING_CONVERSATION_ID;\n/**\n * The (uncompressed) size of the message payload in bytes. Also use this attribute if it is unknown whether the compressed or uncompressed payload size is reported.\n *\n * @deprecated Use ATTR_MESSAGING_MESSAGE_BODY_SIZE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_MESSAGING_MESSAGE_PAYLOAD_SIZE_BYTES = TMP_MESSAGING_MESSAGE_PAYLOAD_SIZE_BYTES;\n/**\n * The compressed size of the message payload in bytes.\n *\n * @deprecated Removed in semconv v1.22.0.\n */\nexport var SEMATTRS_MESSAGING_MESSAGE_PAYLOAD_COMPRESSED_SIZE_BYTES = TMP_MESSAGING_MESSAGE_PAYLOAD_COMPRESSED_SIZE_BYTES;\n/**\n * A string identifying the kind of message consumption as defined in the [Operation names](#operation-names) section above. If the operation is &#34;send&#34;, this attribute MUST NOT be set, since the operation can be inferred from the span kind in that case.\n *\n * @deprecated Use ATTR_MESSAGING_OPERATION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_MESSAGING_OPERATION = TMP_MESSAGING_OPERATION;\n/**\n * The identifier for the consumer receiving a message. For Kafka, set it to `{messaging.kafka.consumer_group} - {messaging.kafka.client_id}`, if both are present, or only `messaging.kafka.consumer_group`. For brokers, such as RabbitMQ and Artemis, set it to the `client_id` of the client consuming the message.\n *\n * @deprecated Removed in semconv v1.21.0.\n */\nexport var SEMATTRS_MESSAGING_CONSUMER_ID = TMP_MESSAGING_CONSUMER_ID;\n/**\n * RabbitMQ message routing key.\n *\n * @deprecated Use ATTR_MESSAGING_RABBITMQ_DESTINATION_ROUTING_KEY in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_MESSAGING_RABBITMQ_ROUTING_KEY = TMP_MESSAGING_RABBITMQ_ROUTING_KEY;\n/**\n * Message keys in Kafka are used for grouping alike messages to ensure they&#39;re processed on the same partition. They differ from `messaging.message_id` in that they&#39;re not unique. If the key is `null`, the attribute MUST NOT be set.\n *\n * Note: If the key type is not string, it&#39;s string representation has to be supplied for the attribute. If the key has no unambiguous, canonical string form, don&#39;t include its value.\n *\n * @deprecated Use ATTR_MESSAGING_KAFKA_MESSAGE_KEY in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_MESSAGING_KAFKA_MESSAGE_KEY = TMP_MESSAGING_KAFKA_MESSAGE_KEY;\n/**\n * Name of the Kafka Consumer Group that is handling the message. Only applies to consumers, not producers.\n *\n * @deprecated Use ATTR_MESSAGING_KAFKA_CONSUMER_GROUP in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_MESSAGING_KAFKA_CONSUMER_GROUP = TMP_MESSAGING_KAFKA_CONSUMER_GROUP;\n/**\n * Client Id for the Consumer or Producer that is handling the message.\n *\n * @deprecated Use ATTR_MESSAGING_CLIENT_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_MESSAGING_KAFKA_CLIENT_ID = TMP_MESSAGING_KAFKA_CLIENT_ID;\n/**\n * Partition the message is sent to.\n *\n * @deprecated Use ATTR_MESSAGING_KAFKA_DESTINATION_PARTITION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_MESSAGING_KAFKA_PARTITION = TMP_MESSAGING_KAFKA_PARTITION;\n/**\n * A boolean that is true if the message is a tombstone.\n *\n * @deprecated Use ATTR_MESSAGING_KAFKA_MESSAGE_TOMBSTONE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_MESSAGING_KAFKA_TOMBSTONE = TMP_MESSAGING_KAFKA_TOMBSTONE;\n/**\n * A string identifying the remoting system.\n *\n * @deprecated Use ATTR_RPC_SYSTEM in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_RPC_SYSTEM = TMP_RPC_SYSTEM;\n/**\n * The full (logical) name of the service being called, including its package name, if applicable.\n *\n * Note: This is the logical name of the service from the RPC interface perspective, which can be different from the name of any implementing class. The `code.namespace` attribute may be used to store the latter (despite the attribute name, it may include a class name; e.g., class with method actually executing the call on the server side, RPC client stub class on the client side).\n *\n * @deprecated Use ATTR_RPC_SERVICE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_RPC_SERVICE = TMP_RPC_SERVICE;\n/**\n * The name of the (logical) method being called, must be equal to the $method part in the span name.\n *\n * Note: This is the logical name of the method from the RPC interface perspective, which can be different from the name of any implementing method/function. The `code.function` attribute may be used to store the latter (e.g., method actually executing the call on the server side, RPC client stub method on the client side).\n *\n * @deprecated Use ATTR_RPC_METHOD in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_RPC_METHOD = TMP_RPC_METHOD;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use ATTR_RPC_GRPC_STATUS_CODE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_RPC_GRPC_STATUS_CODE = TMP_RPC_GRPC_STATUS_CODE;\n/**\n * Protocol version as in `jsonrpc` property of request/response. Since JSON-RPC 1.0 does not specify this, the value can be omitted.\n *\n * @deprecated Use ATTR_RPC_JSONRPC_VERSION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_RPC_JSONRPC_VERSION = TMP_RPC_JSONRPC_VERSION;\n/**\n * `id` property of request or response. Since protocol allows id to be int, string, `null` or missing (for notifications), value is expected to be cast to string for simplicity. Use empty string in case of `null` value. Omit entirely if this is a notification.\n *\n * @deprecated Use ATTR_RPC_JSONRPC_REQUEST_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_RPC_JSONRPC_REQUEST_ID = TMP_RPC_JSONRPC_REQUEST_ID;\n/**\n * `error.code` property of response if it is an error response.\n *\n * @deprecated Use ATTR_RPC_JSONRPC_ERROR_CODE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_RPC_JSONRPC_ERROR_CODE = TMP_RPC_JSONRPC_ERROR_CODE;\n/**\n * `error.message` property of response if it is an error response.\n *\n * @deprecated Use ATTR_RPC_JSONRPC_ERROR_MESSAGE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_RPC_JSONRPC_ERROR_MESSAGE = TMP_RPC_JSONRPC_ERROR_MESSAGE;\n/**\n * Whether this is a received or sent message.\n *\n * @deprecated Use ATTR_MESSAGE_TYPE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_MESSAGE_TYPE = TMP_MESSAGE_TYPE;\n/**\n * MUST be calculated as two different counters starting from `1` one for sent messages and one for received message.\n *\n * Note: This way we guarantee that the values will be consistent between different implementations.\n *\n * @deprecated Use ATTR_MESSAGE_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_MESSAGE_ID = TMP_MESSAGE_ID;\n/**\n * Compressed size of the message in bytes.\n *\n * @deprecated Use ATTR_MESSAGE_COMPRESSED_SIZE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_MESSAGE_COMPRESSED_SIZE = TMP_MESSAGE_COMPRESSED_SIZE;\n/**\n * Uncompressed size of the message in bytes.\n *\n * @deprecated Use ATTR_MESSAGE_UNCOMPRESSED_SIZE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_MESSAGE_UNCOMPRESSED_SIZE = TMP_MESSAGE_UNCOMPRESSED_SIZE;\n/**\n * Create exported Value Map for SemanticAttributes values\n * @deprecated Use the SEMATTRS_XXXXX constants rather than the SemanticAttributes.XXXXX for bundle minification\n */\nexport var SemanticAttributes = \n/*#__PURE__*/ createConstMap([\n    TMP_AWS_LAMBDA_INVOKED_ARN,\n    TMP_DB_SYSTEM,\n    TMP_DB_CONNECTION_STRING,\n    TMP_DB_USER,\n    TMP_DB_JDBC_DRIVER_CLASSNAME,\n    TMP_DB_NAME,\n    TMP_DB_STATEMENT,\n    TMP_DB_OPERATION,\n    TMP_DB_MSSQL_INSTANCE_NAME,\n    TMP_DB_CASSANDRA_KEYSPACE,\n    TMP_DB_CASSANDRA_PAGE_SIZE,\n    TMP_DB_CASSANDRA_CONSISTENCY_LEVEL,\n    TMP_DB_CASSANDRA_TABLE,\n    TMP_DB_CASSANDRA_IDEMPOTENCE,\n    TMP_DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT,\n    TMP_DB_CASSANDRA_COORDINATOR_ID,\n    TMP_DB_CASSANDRA_COORDINATOR_DC,\n    TMP_DB_HBASE_NAMESPACE,\n    TMP_DB_REDIS_DATABASE_INDEX,\n    TMP_DB_MONGODB_COLLECTION,\n    TMP_DB_SQL_TABLE,\n    TMP_EXCEPTION_TYPE,\n    TMP_EXCEPTION_MESSAGE,\n    TMP_EXCEPTION_STACKTRACE,\n    TMP_EXCEPTION_ESCAPED,\n    TMP_FAAS_TRIGGER,\n    TMP_FAAS_EXECUTION,\n    TMP_FAAS_DOCUMENT_COLLECTION,\n    TMP_FAAS_DOCUMENT_OPERATION,\n    TMP_FAAS_DOCUMENT_TIME,\n    TMP_FAAS_DOCUMENT_NAME,\n    TMP_FAAS_TIME,\n    TMP_FAAS_CRON,\n    TMP_FAAS_COLDSTART,\n    TMP_FAAS_INVOKED_NAME,\n    TMP_FAAS_INVOKED_PROVIDER,\n    TMP_FAAS_INVOKED_REGION,\n    TMP_NET_TRANSPORT,\n    TMP_NET_PEER_IP,\n    TMP_NET_PEER_PORT,\n    TMP_NET_PEER_NAME,\n    TMP_NET_HOST_IP,\n    TMP_NET_HOST_PORT,\n    TMP_NET_HOST_NAME,\n    TMP_NET_HOST_CONNECTION_TYPE,\n    TMP_NET_HOST_CONNECTION_SUBTYPE,\n    TMP_NET_HOST_CARRIER_NAME,\n    TMP_NET_HOST_CARRIER_MCC,\n    TMP_NET_HOST_CARRIER_MNC,\n    TMP_NET_HOST_CARRIER_ICC,\n    TMP_PEER_SERVICE,\n    TMP_ENDUSER_ID,\n    TMP_ENDUSER_ROLE,\n    TMP_ENDUSER_SCOPE,\n    TMP_THREAD_ID,\n    TMP_THREAD_NAME,\n    TMP_CODE_FUNCTION,\n    TMP_CODE_NAMESPACE,\n    TMP_CODE_FILEPATH,\n    TMP_CODE_LINENO,\n    TMP_HTTP_METHOD,\n    TMP_HTTP_URL,\n    TMP_HTTP_TARGET,\n    TMP_HTTP_HOST,\n    TMP_HTTP_SCHEME,\n    TMP_HTTP_STATUS_CODE,\n    TMP_HTTP_FLAVOR,\n    TMP_HTTP_USER_AGENT,\n    TMP_HTTP_REQUEST_CONTENT_LENGTH,\n    TMP_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED,\n    TMP_HTTP_RESPONSE_CONTENT_LENGTH,\n    TMP_HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED,\n    TMP_HTTP_SERVER_NAME,\n    TMP_HTTP_ROUTE,\n    TMP_HTTP_CLIENT_IP,\n    TMP_AWS_DYNAMODB_TABLE_NAMES,\n    TMP_AWS_DYNAMODB_CONSUMED_CAPACITY,\n    TMP_AWS_DYNAMODB_ITEM_COLLECTION_METRICS,\n    TMP_AWS_DYNAMODB_PROVISIONED_READ_CAPACITY,\n    TMP_AWS_DYNAMODB_PROVISIONED_WRITE_CAPACITY,\n    TMP_AWS_DYNAMODB_CONSISTENT_READ,\n    TMP_AWS_DYNAMODB_PROJECTION,\n    TMP_AWS_DYNAMODB_LIMIT,\n    TMP_AWS_DYNAMODB_ATTRIBUTES_TO_GET,\n    TMP_AWS_DYNAMODB_INDEX_NAME,\n    TMP_AWS_DYNAMODB_SELECT,\n    TMP_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEXES,\n    TMP_AWS_DYNAMODB_LOCAL_SECONDARY_INDEXES,\n    TMP_AWS_DYNAMODB_EXCLUSIVE_START_TABLE,\n    TMP_AWS_DYNAMODB_TABLE_COUNT,\n    TMP_AWS_DYNAMODB_SCAN_FORWARD,\n    TMP_AWS_DYNAMODB_SEGMENT,\n    TMP_AWS_DYNAMODB_TOTAL_SEGMENTS,\n    TMP_AWS_DYNAMODB_COUNT,\n    TMP_AWS_DYNAMODB_SCANNED_COUNT,\n    TMP_AWS_DYNAMODB_ATTRIBUTE_DEFINITIONS,\n    TMP_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEX_UPDATES,\n    TMP_MESSAGING_SYSTEM,\n    TMP_MESSAGING_DESTINATION,\n    TMP_MESSAGING_DESTINATION_KIND,\n    TMP_MESSAGING_TEMP_DESTINATION,\n    TMP_MESSAGING_PROTOCOL,\n    TMP_MESSAGING_PROTOCOL_VERSION,\n    TMP_MESSAGING_URL,\n    TMP_MESSAGING_MESSAGE_ID,\n    TMP_MESSAGING_CONVERSATION_ID,\n    TMP_MESSAGING_MESSAGE_PAYLOAD_SIZE_BYTES,\n    TMP_MESSAGING_MESSAGE_PAYLOAD_COMPRESSED_SIZE_BYTES,\n    TMP_MESSAGING_OPERATION,\n    TMP_MESSAGING_CONSUMER_ID,\n    TMP_MESSAGING_RABBITMQ_ROUTING_KEY,\n    TMP_MESSAGING_KAFKA_MESSAGE_KEY,\n    TMP_MESSAGING_KAFKA_CONSUMER_GROUP,\n    TMP_MESSAGING_KAFKA_CLIENT_ID,\n    TMP_MESSAGING_KAFKA_PARTITION,\n    TMP_MESSAGING_KAFKA_TOMBSTONE,\n    TMP_RPC_SYSTEM,\n    TMP_RPC_SERVICE,\n    TMP_RPC_METHOD,\n    TMP_RPC_GRPC_STATUS_CODE,\n    TMP_RPC_JSONRPC_VERSION,\n    TMP_RPC_JSONRPC_REQUEST_ID,\n    TMP_RPC_JSONRPC_ERROR_CODE,\n    TMP_RPC_JSONRPC_ERROR_MESSAGE,\n    TMP_MESSAGE_TYPE,\n    TMP_MESSAGE_ID,\n    TMP_MESSAGE_COMPRESSED_SIZE,\n    TMP_MESSAGE_UNCOMPRESSED_SIZE,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for DbSystemValues enum definition\n *\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nvar TMP_DBSYSTEMVALUES_OTHER_SQL = 'other_sql';\nvar TMP_DBSYSTEMVALUES_MSSQL = 'mssql';\nvar TMP_DBSYSTEMVALUES_MYSQL = 'mysql';\nvar TMP_DBSYSTEMVALUES_ORACLE = 'oracle';\nvar TMP_DBSYSTEMVALUES_DB2 = 'db2';\nvar TMP_DBSYSTEMVALUES_POSTGRESQL = 'postgresql';\nvar TMP_DBSYSTEMVALUES_REDSHIFT = 'redshift';\nvar TMP_DBSYSTEMVALUES_HIVE = 'hive';\nvar TMP_DBSYSTEMVALUES_CLOUDSCAPE = 'cloudscape';\nvar TMP_DBSYSTEMVALUES_HSQLDB = 'hsqldb';\nvar TMP_DBSYSTEMVALUES_PROGRESS = 'progress';\nvar TMP_DBSYSTEMVALUES_MAXDB = 'maxdb';\nvar TMP_DBSYSTEMVALUES_HANADB = 'hanadb';\nvar TMP_DBSYSTEMVALUES_INGRES = 'ingres';\nvar TMP_DBSYSTEMVALUES_FIRSTSQL = 'firstsql';\nvar TMP_DBSYSTEMVALUES_EDB = 'edb';\nvar TMP_DBSYSTEMVALUES_CACHE = 'cache';\nvar TMP_DBSYSTEMVALUES_ADABAS = 'adabas';\nvar TMP_DBSYSTEMVALUES_FIREBIRD = 'firebird';\nvar TMP_DBSYSTEMVALUES_DERBY = 'derby';\nvar TMP_DBSYSTEMVALUES_FILEMAKER = 'filemaker';\nvar TMP_DBSYSTEMVALUES_INFORMIX = 'informix';\nvar TMP_DBSYSTEMVALUES_INSTANTDB = 'instantdb';\nvar TMP_DBSYSTEMVALUES_INTERBASE = 'interbase';\nvar TMP_DBSYSTEMVALUES_MARIADB = 'mariadb';\nvar TMP_DBSYSTEMVALUES_NETEZZA = 'netezza';\nvar TMP_DBSYSTEMVALUES_PERVASIVE = 'pervasive';\nvar TMP_DBSYSTEMVALUES_POINTBASE = 'pointbase';\nvar TMP_DBSYSTEMVALUES_SQLITE = 'sqlite';\nvar TMP_DBSYSTEMVALUES_SYBASE = 'sybase';\nvar TMP_DBSYSTEMVALUES_TERADATA = 'teradata';\nvar TMP_DBSYSTEMVALUES_VERTICA = 'vertica';\nvar TMP_DBSYSTEMVALUES_H2 = 'h2';\nvar TMP_DBSYSTEMVALUES_COLDFUSION = 'coldfusion';\nvar TMP_DBSYSTEMVALUES_CASSANDRA = 'cassandra';\nvar TMP_DBSYSTEMVALUES_HBASE = 'hbase';\nvar TMP_DBSYSTEMVALUES_MONGODB = 'mongodb';\nvar TMP_DBSYSTEMVALUES_REDIS = 'redis';\nvar TMP_DBSYSTEMVALUES_COUCHBASE = 'couchbase';\nvar TMP_DBSYSTEMVALUES_COUCHDB = 'couchdb';\nvar TMP_DBSYSTEMVALUES_COSMOSDB = 'cosmosdb';\nvar TMP_DBSYSTEMVALUES_DYNAMODB = 'dynamodb';\nvar TMP_DBSYSTEMVALUES_NEO4J = 'neo4j';\nvar TMP_DBSYSTEMVALUES_GEODE = 'geode';\nvar TMP_DBSYSTEMVALUES_ELASTICSEARCH = 'elasticsearch';\nvar TMP_DBSYSTEMVALUES_MEMCACHED = 'memcached';\nvar TMP_DBSYSTEMVALUES_COCKROACHDB = 'cockroachdb';\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_OTHER_SQL in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var DBSYSTEMVALUES_OTHER_SQL = TMP_DBSYSTEMVALUES_OTHER_SQL;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_MSSQL in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var DBSYSTEMVALUES_MSSQL = TMP_DBSYSTEMVALUES_MSSQL;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_MYSQL in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var DBSYSTEMVALUES_MYSQL = TMP_DBSYSTEMVALUES_MYSQL;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_ORACLE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var DBSYSTEMVALUES_ORACLE = TMP_DBSYSTEMVALUES_ORACLE;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_DB2 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var DBSYSTEMVALUES_DB2 = TMP_DBSYSTEMVALUES_DB2;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_POSTGRESQL in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var DBSYSTEMVALUES_POSTGRESQL = TMP_DBSYSTEMVALUES_POSTGRESQL;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_REDSHIFT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var DBSYSTEMVALUES_REDSHIFT = TMP_DBSYSTEMVALUES_REDSHIFT;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_HIVE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var DBSYSTEMVALUES_HIVE = TMP_DBSYSTEMVALUES_HIVE;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_CLOUDSCAPE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var DBSYSTEMVALUES_CLOUDSCAPE = TMP_DBSYSTEMVALUES_CLOUDSCAPE;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_HSQLDB in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var DBSYSTEMVALUES_HSQLDB = TMP_DBSYSTEMVALUES_HSQLDB;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_PROGRESS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var DBSYSTEMVALUES_PROGRESS = TMP_DBSYSTEMVALUES_PROGRESS;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_MAXDB in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var DBSYSTEMVALUES_MAXDB = TMP_DBSYSTEMVALUES_MAXDB;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_HANADB in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var DBSYSTEMVALUES_HANADB = TMP_DBSYSTEMVALUES_HANADB;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_INGRES in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var DBSYSTEMVALUES_INGRES = TMP_DBSYSTEMVALUES_INGRES;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_FIRSTSQL in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var DBSYSTEMVALUES_FIRSTSQL = TMP_DBSYSTEMVALUES_FIRSTSQL;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_EDB in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var DBSYSTEMVALUES_EDB = TMP_DBSYSTEMVALUES_EDB;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_CACHE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var DBSYSTEMVALUES_CACHE = TMP_DBSYSTEMVALUES_CACHE;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_ADABAS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var DBSYSTEMVALUES_ADABAS = TMP_DBSYSTEMVALUES_ADABAS;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_FIREBIRD in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var DBSYSTEMVALUES_FIREBIRD = TMP_DBSYSTEMVALUES_FIREBIRD;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_DERBY in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var DBSYSTEMVALUES_DERBY = TMP_DBSYSTEMVALUES_DERBY;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_FILEMAKER in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var DBSYSTEMVALUES_FILEMAKER = TMP_DBSYSTEMVALUES_FILEMAKER;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_INFORMIX in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var DBSYSTEMVALUES_INFORMIX = TMP_DBSYSTEMVALUES_INFORMIX;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_INSTANTDB in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var DBSYSTEMVALUES_INSTANTDB = TMP_DBSYSTEMVALUES_INSTANTDB;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_INTERBASE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var DBSYSTEMVALUES_INTERBASE = TMP_DBSYSTEMVALUES_INTERBASE;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_MARIADB in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var DBSYSTEMVALUES_MARIADB = TMP_DBSYSTEMVALUES_MARIADB;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_NETEZZA in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var DBSYSTEMVALUES_NETEZZA = TMP_DBSYSTEMVALUES_NETEZZA;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_PERVASIVE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var DBSYSTEMVALUES_PERVASIVE = TMP_DBSYSTEMVALUES_PERVASIVE;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_POINTBASE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var DBSYSTEMVALUES_POINTBASE = TMP_DBSYSTEMVALUES_POINTBASE;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_SQLITE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var DBSYSTEMVALUES_SQLITE = TMP_DBSYSTEMVALUES_SQLITE;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_SYBASE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var DBSYSTEMVALUES_SYBASE = TMP_DBSYSTEMVALUES_SYBASE;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_TERADATA in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var DBSYSTEMVALUES_TERADATA = TMP_DBSYSTEMVALUES_TERADATA;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_VERTICA in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var DBSYSTEMVALUES_VERTICA = TMP_DBSYSTEMVALUES_VERTICA;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_H2 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var DBSYSTEMVALUES_H2 = TMP_DBSYSTEMVALUES_H2;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_COLDFUSION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var DBSYSTEMVALUES_COLDFUSION = TMP_DBSYSTEMVALUES_COLDFUSION;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_CASSANDRA in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var DBSYSTEMVALUES_CASSANDRA = TMP_DBSYSTEMVALUES_CASSANDRA;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_HBASE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var DBSYSTEMVALUES_HBASE = TMP_DBSYSTEMVALUES_HBASE;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_MONGODB in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var DBSYSTEMVALUES_MONGODB = TMP_DBSYSTEMVALUES_MONGODB;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_REDIS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var DBSYSTEMVALUES_REDIS = TMP_DBSYSTEMVALUES_REDIS;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_COUCHBASE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var DBSYSTEMVALUES_COUCHBASE = TMP_DBSYSTEMVALUES_COUCHBASE;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_COUCHDB in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var DBSYSTEMVALUES_COUCHDB = TMP_DBSYSTEMVALUES_COUCHDB;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_COSMOSDB in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var DBSYSTEMVALUES_COSMOSDB = TMP_DBSYSTEMVALUES_COSMOSDB;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_DYNAMODB in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var DBSYSTEMVALUES_DYNAMODB = TMP_DBSYSTEMVALUES_DYNAMODB;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_NEO4J in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var DBSYSTEMVALUES_NEO4J = TMP_DBSYSTEMVALUES_NEO4J;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_GEODE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var DBSYSTEMVALUES_GEODE = TMP_DBSYSTEMVALUES_GEODE;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_ELASTICSEARCH in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var DBSYSTEMVALUES_ELASTICSEARCH = TMP_DBSYSTEMVALUES_ELASTICSEARCH;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_MEMCACHED in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var DBSYSTEMVALUES_MEMCACHED = TMP_DBSYSTEMVALUES_MEMCACHED;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_COCKROACHDB in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var DBSYSTEMVALUES_COCKROACHDB = TMP_DBSYSTEMVALUES_COCKROACHDB;\n/**\n * The constant map of values for DbSystemValues.\n * @deprecated Use the DBSYSTEMVALUES_XXXXX constants rather than the DbSystemValues.XXXXX for bundle minification.\n */\nexport var DbSystemValues = \n/*#__PURE__*/ createConstMap([\n    TMP_DBSYSTEMVALUES_OTHER_SQL,\n    TMP_DBSYSTEMVALUES_MSSQL,\n    TMP_DBSYSTEMVALUES_MYSQL,\n    TMP_DBSYSTEMVALUES_ORACLE,\n    TMP_DBSYSTEMVALUES_DB2,\n    TMP_DBSYSTEMVALUES_POSTGRESQL,\n    TMP_DBSYSTEMVALUES_REDSHIFT,\n    TMP_DBSYSTEMVALUES_HIVE,\n    TMP_DBSYSTEMVALUES_CLOUDSCAPE,\n    TMP_DBSYSTEMVALUES_HSQLDB,\n    TMP_DBSYSTEMVALUES_PROGRESS,\n    TMP_DBSYSTEMVALUES_MAXDB,\n    TMP_DBSYSTEMVALUES_HANADB,\n    TMP_DBSYSTEMVALUES_INGRES,\n    TMP_DBSYSTEMVALUES_FIRSTSQL,\n    TMP_DBSYSTEMVALUES_EDB,\n    TMP_DBSYSTEMVALUES_CACHE,\n    TMP_DBSYSTEMVALUES_ADABAS,\n    TMP_DBSYSTEMVALUES_FIREBIRD,\n    TMP_DBSYSTEMVALUES_DERBY,\n    TMP_DBSYSTEMVALUES_FILEMAKER,\n    TMP_DBSYSTEMVALUES_INFORMIX,\n    TMP_DBSYSTEMVALUES_INSTANTDB,\n    TMP_DBSYSTEMVALUES_INTERBASE,\n    TMP_DBSYSTEMVALUES_MARIADB,\n    TMP_DBSYSTEMVALUES_NETEZZA,\n    TMP_DBSYSTEMVALUES_PERVASIVE,\n    TMP_DBSYSTEMVALUES_POINTBASE,\n    TMP_DBSYSTEMVALUES_SQLITE,\n    TMP_DBSYSTEMVALUES_SYBASE,\n    TMP_DBSYSTEMVALUES_TERADATA,\n    TMP_DBSYSTEMVALUES_VERTICA,\n    TMP_DBSYSTEMVALUES_H2,\n    TMP_DBSYSTEMVALUES_COLDFUSION,\n    TMP_DBSYSTEMVALUES_CASSANDRA,\n    TMP_DBSYSTEMVALUES_HBASE,\n    TMP_DBSYSTEMVALUES_MONGODB,\n    TMP_DBSYSTEMVALUES_REDIS,\n    TMP_DBSYSTEMVALUES_COUCHBASE,\n    TMP_DBSYSTEMVALUES_COUCHDB,\n    TMP_DBSYSTEMVALUES_COSMOSDB,\n    TMP_DBSYSTEMVALUES_DYNAMODB,\n    TMP_DBSYSTEMVALUES_NEO4J,\n    TMP_DBSYSTEMVALUES_GEODE,\n    TMP_DBSYSTEMVALUES_ELASTICSEARCH,\n    TMP_DBSYSTEMVALUES_MEMCACHED,\n    TMP_DBSYSTEMVALUES_COCKROACHDB,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for DbCassandraConsistencyLevelValues enum definition\n *\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nvar TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ALL = 'all';\nvar TMP_DBCASSANDRACONSISTENCYLEVELVALUES_EACH_QUORUM = 'each_quorum';\nvar TMP_DBCASSANDRACONSISTENCYLEVELVALUES_QUORUM = 'quorum';\nvar TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_QUORUM = 'local_quorum';\nvar TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ONE = 'one';\nvar TMP_DBCASSANDRACONSISTENCYLEVELVALUES_TWO = 'two';\nvar TMP_DBCASSANDRACONSISTENCYLEVELVALUES_THREE = 'three';\nvar TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_ONE = 'local_one';\nvar TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ANY = 'any';\nvar TMP_DBCASSANDRACONSISTENCYLEVELVALUES_SERIAL = 'serial';\nvar TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_SERIAL = 'local_serial';\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n *\n * @deprecated Use DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_ALL in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var DBCASSANDRACONSISTENCYLEVELVALUES_ALL = TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ALL;\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n *\n * @deprecated Use DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_EACH_QUORUM in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var DBCASSANDRACONSISTENCYLEVELVALUES_EACH_QUORUM = TMP_DBCASSANDRACONSISTENCYLEVELVALUES_EACH_QUORUM;\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n *\n * @deprecated Use DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_QUORUM in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var DBCASSANDRACONSISTENCYLEVELVALUES_QUORUM = TMP_DBCASSANDRACONSISTENCYLEVELVALUES_QUORUM;\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n *\n * @deprecated Use DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_LOCAL_QUORUM in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_QUORUM = TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_QUORUM;\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n *\n * @deprecated Use DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_ONE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var DBCASSANDRACONSISTENCYLEVELVALUES_ONE = TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ONE;\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n *\n * @deprecated Use DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_TWO in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var DBCASSANDRACONSISTENCYLEVELVALUES_TWO = TMP_DBCASSANDRACONSISTENCYLEVELVALUES_TWO;\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n *\n * @deprecated Use DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_THREE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var DBCASSANDRACONSISTENCYLEVELVALUES_THREE = TMP_DBCASSANDRACONSISTENCYLEVELVALUES_THREE;\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n *\n * @deprecated Use DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_LOCAL_ONE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_ONE = TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_ONE;\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n *\n * @deprecated Use DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_ANY in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var DBCASSANDRACONSISTENCYLEVELVALUES_ANY = TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ANY;\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n *\n * @deprecated Use DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_SERIAL in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var DBCASSANDRACONSISTENCYLEVELVALUES_SERIAL = TMP_DBCASSANDRACONSISTENCYLEVELVALUES_SERIAL;\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n *\n * @deprecated Use DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_LOCAL_SERIAL in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_SERIAL = TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_SERIAL;\n/**\n * The constant map of values for DbCassandraConsistencyLevelValues.\n * @deprecated Use the DBCASSANDRACONSISTENCYLEVELVALUES_XXXXX constants rather than the DbCassandraConsistencyLevelValues.XXXXX for bundle minification.\n */\nexport var DbCassandraConsistencyLevelValues = \n/*#__PURE__*/ createConstMap([\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ALL,\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_EACH_QUORUM,\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_QUORUM,\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_QUORUM,\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ONE,\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_TWO,\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_THREE,\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_ONE,\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ANY,\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_SERIAL,\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_SERIAL,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for FaasTriggerValues enum definition\n *\n * Type of the trigger on which the function is executed.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nvar TMP_FAASTRIGGERVALUES_DATASOURCE = 'datasource';\nvar TMP_FAASTRIGGERVALUES_HTTP = 'http';\nvar TMP_FAASTRIGGERVALUES_PUBSUB = 'pubsub';\nvar TMP_FAASTRIGGERVALUES_TIMER = 'timer';\nvar TMP_FAASTRIGGERVALUES_OTHER = 'other';\n/**\n * Type of the trigger on which the function is executed.\n *\n * @deprecated Use FAAS_TRIGGER_VALUE_DATASOURCE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var FAASTRIGGERVALUES_DATASOURCE = TMP_FAASTRIGGERVALUES_DATASOURCE;\n/**\n * Type of the trigger on which the function is executed.\n *\n * @deprecated Use FAAS_TRIGGER_VALUE_HTTP in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var FAASTRIGGERVALUES_HTTP = TMP_FAASTRIGGERVALUES_HTTP;\n/**\n * Type of the trigger on which the function is executed.\n *\n * @deprecated Use FAAS_TRIGGER_VALUE_PUBSUB in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var FAASTRIGGERVALUES_PUBSUB = TMP_FAASTRIGGERVALUES_PUBSUB;\n/**\n * Type of the trigger on which the function is executed.\n *\n * @deprecated Use FAAS_TRIGGER_VALUE_TIMER in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var FAASTRIGGERVALUES_TIMER = TMP_FAASTRIGGERVALUES_TIMER;\n/**\n * Type of the trigger on which the function is executed.\n *\n * @deprecated Use FAAS_TRIGGER_VALUE_OTHER in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var FAASTRIGGERVALUES_OTHER = TMP_FAASTRIGGERVALUES_OTHER;\n/**\n * The constant map of values for FaasTriggerValues.\n * @deprecated Use the FAASTRIGGERVALUES_XXXXX constants rather than the FaasTriggerValues.XXXXX for bundle minification.\n */\nexport var FaasTriggerValues = \n/*#__PURE__*/ createConstMap([\n    TMP_FAASTRIGGERVALUES_DATASOURCE,\n    TMP_FAASTRIGGERVALUES_HTTP,\n    TMP_FAASTRIGGERVALUES_PUBSUB,\n    TMP_FAASTRIGGERVALUES_TIMER,\n    TMP_FAASTRIGGERVALUES_OTHER,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for FaasDocumentOperationValues enum definition\n *\n * Describes the type of the operation that was performed on the data.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nvar TMP_FAASDOCUMENTOPERATIONVALUES_INSERT = 'insert';\nvar TMP_FAASDOCUMENTOPERATIONVALUES_EDIT = 'edit';\nvar TMP_FAASDOCUMENTOPERATIONVALUES_DELETE = 'delete';\n/**\n * Describes the type of the operation that was performed on the data.\n *\n * @deprecated Use FAAS_DOCUMENT_OPERATION_VALUE_INSERT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var FAASDOCUMENTOPERATIONVALUES_INSERT = TMP_FAASDOCUMENTOPERATIONVALUES_INSERT;\n/**\n * Describes the type of the operation that was performed on the data.\n *\n * @deprecated Use FAAS_DOCUMENT_OPERATION_VALUE_EDIT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var FAASDOCUMENTOPERATIONVALUES_EDIT = TMP_FAASDOCUMENTOPERATIONVALUES_EDIT;\n/**\n * Describes the type of the operation that was performed on the data.\n *\n * @deprecated Use FAAS_DOCUMENT_OPERATION_VALUE_DELETE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var FAASDOCUMENTOPERATIONVALUES_DELETE = TMP_FAASDOCUMENTOPERATIONVALUES_DELETE;\n/**\n * The constant map of values for FaasDocumentOperationValues.\n * @deprecated Use the FAASDOCUMENTOPERATIONVALUES_XXXXX constants rather than the FaasDocumentOperationValues.XXXXX for bundle minification.\n */\nexport var FaasDocumentOperationValues = \n/*#__PURE__*/ createConstMap([\n    TMP_FAASDOCUMENTOPERATIONVALUES_INSERT,\n    TMP_FAASDOCUMENTOPERATIONVALUES_EDIT,\n    TMP_FAASDOCUMENTOPERATIONVALUES_DELETE,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for FaasInvokedProviderValues enum definition\n *\n * The cloud provider of the invoked function.\n *\n * Note: SHOULD be equal to the `cloud.provider` resource attribute of the invoked function.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nvar TMP_FAASINVOKEDPROVIDERVALUES_ALIBABA_CLOUD = 'alibaba_cloud';\nvar TMP_FAASINVOKEDPROVIDERVALUES_AWS = 'aws';\nvar TMP_FAASINVOKEDPROVIDERVALUES_AZURE = 'azure';\nvar TMP_FAASINVOKEDPROVIDERVALUES_GCP = 'gcp';\n/**\n * The cloud provider of the invoked function.\n *\n * Note: SHOULD be equal to the `cloud.provider` resource attribute of the invoked function.\n *\n * @deprecated Use FAAS_INVOKED_PROVIDER_VALUE_ALIBABA_CLOUD in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var FAASINVOKEDPROVIDERVALUES_ALIBABA_CLOUD = TMP_FAASINVOKEDPROVIDERVALUES_ALIBABA_CLOUD;\n/**\n * The cloud provider of the invoked function.\n *\n * Note: SHOULD be equal to the `cloud.provider` resource attribute of the invoked function.\n *\n * @deprecated Use FAAS_INVOKED_PROVIDER_VALUE_AWS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var FAASINVOKEDPROVIDERVALUES_AWS = TMP_FAASINVOKEDPROVIDERVALUES_AWS;\n/**\n * The cloud provider of the invoked function.\n *\n * Note: SHOULD be equal to the `cloud.provider` resource attribute of the invoked function.\n *\n * @deprecated Use FAAS_INVOKED_PROVIDER_VALUE_AZURE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var FAASINVOKEDPROVIDERVALUES_AZURE = TMP_FAASINVOKEDPROVIDERVALUES_AZURE;\n/**\n * The cloud provider of the invoked function.\n *\n * Note: SHOULD be equal to the `cloud.provider` resource attribute of the invoked function.\n *\n * @deprecated Use FAAS_INVOKED_PROVIDER_VALUE_GCP in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var FAASINVOKEDPROVIDERVALUES_GCP = TMP_FAASINVOKEDPROVIDERVALUES_GCP;\n/**\n * The constant map of values for FaasInvokedProviderValues.\n * @deprecated Use the FAASINVOKEDPROVIDERVALUES_XXXXX constants rather than the FaasInvokedProviderValues.XXXXX for bundle minification.\n */\nexport var FaasInvokedProviderValues = \n/*#__PURE__*/ createConstMap([\n    TMP_FAASINVOKEDPROVIDERVALUES_ALIBABA_CLOUD,\n    TMP_FAASINVOKEDPROVIDERVALUES_AWS,\n    TMP_FAASINVOKEDPROVIDERVALUES_AZURE,\n    TMP_FAASINVOKEDPROVIDERVALUES_GCP,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for NetTransportValues enum definition\n *\n * Transport protocol used. See note below.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nvar TMP_NETTRANSPORTVALUES_IP_TCP = 'ip_tcp';\nvar TMP_NETTRANSPORTVALUES_IP_UDP = 'ip_udp';\nvar TMP_NETTRANSPORTVALUES_IP = 'ip';\nvar TMP_NETTRANSPORTVALUES_UNIX = 'unix';\nvar TMP_NETTRANSPORTVALUES_PIPE = 'pipe';\nvar TMP_NETTRANSPORTVALUES_INPROC = 'inproc';\nvar TMP_NETTRANSPORTVALUES_OTHER = 'other';\n/**\n * Transport protocol used. See note below.\n *\n * @deprecated Use NET_TRANSPORT_VALUE_IP_TCP in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var NETTRANSPORTVALUES_IP_TCP = TMP_NETTRANSPORTVALUES_IP_TCP;\n/**\n * Transport protocol used. See note below.\n *\n * @deprecated Use NET_TRANSPORT_VALUE_IP_UDP in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var NETTRANSPORTVALUES_IP_UDP = TMP_NETTRANSPORTVALUES_IP_UDP;\n/**\n * Transport protocol used. See note below.\n *\n * @deprecated Removed in v1.21.0.\n */\nexport var NETTRANSPORTVALUES_IP = TMP_NETTRANSPORTVALUES_IP;\n/**\n * Transport protocol used. See note below.\n *\n * @deprecated Removed in v1.21.0.\n */\nexport var NETTRANSPORTVALUES_UNIX = TMP_NETTRANSPORTVALUES_UNIX;\n/**\n * Transport protocol used. See note below.\n *\n * @deprecated Use NET_TRANSPORT_VALUE_PIPE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var NETTRANSPORTVALUES_PIPE = TMP_NETTRANSPORTVALUES_PIPE;\n/**\n * Transport protocol used. See note below.\n *\n * @deprecated Use NET_TRANSPORT_VALUE_INPROC in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var NETTRANSPORTVALUES_INPROC = TMP_NETTRANSPORTVALUES_INPROC;\n/**\n * Transport protocol used. See note below.\n *\n * @deprecated Use NET_TRANSPORT_VALUE_OTHER in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var NETTRANSPORTVALUES_OTHER = TMP_NETTRANSPORTVALUES_OTHER;\n/**\n * The constant map of values for NetTransportValues.\n * @deprecated Use the NETTRANSPORTVALUES_XXXXX constants rather than the NetTransportValues.XXXXX for bundle minification.\n */\nexport var NetTransportValues = \n/*#__PURE__*/ createConstMap([\n    TMP_NETTRANSPORTVALUES_IP_TCP,\n    TMP_NETTRANSPORTVALUES_IP_UDP,\n    TMP_NETTRANSPORTVALUES_IP,\n    TMP_NETTRANSPORTVALUES_UNIX,\n    TMP_NETTRANSPORTVALUES_PIPE,\n    TMP_NETTRANSPORTVALUES_INPROC,\n    TMP_NETTRANSPORTVALUES_OTHER,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for NetHostConnectionTypeValues enum definition\n *\n * The internet connection type currently being used by the host.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nvar TMP_NETHOSTCONNECTIONTYPEVALUES_WIFI = 'wifi';\nvar TMP_NETHOSTCONNECTIONTYPEVALUES_WIRED = 'wired';\nvar TMP_NETHOSTCONNECTIONTYPEVALUES_CELL = 'cell';\nvar TMP_NETHOSTCONNECTIONTYPEVALUES_UNAVAILABLE = 'unavailable';\nvar TMP_NETHOSTCONNECTIONTYPEVALUES_UNKNOWN = 'unknown';\n/**\n * The internet connection type currently being used by the host.\n *\n * @deprecated Use NETWORK_CONNECTION_TYPE_VALUE_WIFI in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var NETHOSTCONNECTIONTYPEVALUES_WIFI = TMP_NETHOSTCONNECTIONTYPEVALUES_WIFI;\n/**\n * The internet connection type currently being used by the host.\n *\n * @deprecated Use NETWORK_CONNECTION_TYPE_VALUE_WIRED in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var NETHOSTCONNECTIONTYPEVALUES_WIRED = TMP_NETHOSTCONNECTIONTYPEVALUES_WIRED;\n/**\n * The internet connection type currently being used by the host.\n *\n * @deprecated Use NETWORK_CONNECTION_TYPE_VALUE_CELL in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var NETHOSTCONNECTIONTYPEVALUES_CELL = TMP_NETHOSTCONNECTIONTYPEVALUES_CELL;\n/**\n * The internet connection type currently being used by the host.\n *\n * @deprecated Use NETWORK_CONNECTION_TYPE_VALUE_UNAVAILABLE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var NETHOSTCONNECTIONTYPEVALUES_UNAVAILABLE = TMP_NETHOSTCONNECTIONTYPEVALUES_UNAVAILABLE;\n/**\n * The internet connection type currently being used by the host.\n *\n * @deprecated Use NETWORK_CONNECTION_TYPE_VALUE_UNKNOWN in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var NETHOSTCONNECTIONTYPEVALUES_UNKNOWN = TMP_NETHOSTCONNECTIONTYPEVALUES_UNKNOWN;\n/**\n * The constant map of values for NetHostConnectionTypeValues.\n * @deprecated Use the NETHOSTCONNECTIONTYPEVALUES_XXXXX constants rather than the NetHostConnectionTypeValues.XXXXX for bundle minification.\n */\nexport var NetHostConnectionTypeValues = \n/*#__PURE__*/ createConstMap([\n    TMP_NETHOSTCONNECTIONTYPEVALUES_WIFI,\n    TMP_NETHOSTCONNECTIONTYPEVALUES_WIRED,\n    TMP_NETHOSTCONNECTIONTYPEVALUES_CELL,\n    TMP_NETHOSTCONNECTIONTYPEVALUES_UNAVAILABLE,\n    TMP_NETHOSTCONNECTIONTYPEVALUES_UNKNOWN,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for NetHostConnectionSubtypeValues enum definition\n *\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nvar TMP_NETHOSTCONNECTIONSUBTYPEVALUES_GPRS = 'gprs';\nvar TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EDGE = 'edge';\nvar TMP_NETHOSTCONNECTIONSUBTYPEVALUES_UMTS = 'umts';\nvar TMP_NETHOSTCONNECTIONSUBTYPEVALUES_CDMA = 'cdma';\nvar TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_0 = 'evdo_0';\nvar TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_A = 'evdo_a';\nvar TMP_NETHOSTCONNECTIONSUBTYPEVALUES_CDMA2000_1XRTT = 'cdma2000_1xrtt';\nvar TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSDPA = 'hsdpa';\nvar TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSUPA = 'hsupa';\nvar TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSPA = 'hspa';\nvar TMP_NETHOSTCONNECTIONSUBTYPEVALUES_IDEN = 'iden';\nvar TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_B = 'evdo_b';\nvar TMP_NETHOSTCONNECTIONSUBTYPEVALUES_LTE = 'lte';\nvar TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EHRPD = 'ehrpd';\nvar TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSPAP = 'hspap';\nvar TMP_NETHOSTCONNECTIONSUBTYPEVALUES_GSM = 'gsm';\nvar TMP_NETHOSTCONNECTIONSUBTYPEVALUES_TD_SCDMA = 'td_scdma';\nvar TMP_NETHOSTCONNECTIONSUBTYPEVALUES_IWLAN = 'iwlan';\nvar TMP_NETHOSTCONNECTIONSUBTYPEVALUES_NR = 'nr';\nvar TMP_NETHOSTCONNECTIONSUBTYPEVALUES_NRNSA = 'nrnsa';\nvar TMP_NETHOSTCONNECTIONSUBTYPEVALUES_LTE_CA = 'lte_ca';\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_GPRS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var NETHOSTCONNECTIONSUBTYPEVALUES_GPRS = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_GPRS;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_EDGE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var NETHOSTCONNECTIONSUBTYPEVALUES_EDGE = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EDGE;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_UMTS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var NETHOSTCONNECTIONSUBTYPEVALUES_UMTS = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_UMTS;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_CDMA in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var NETHOSTCONNECTIONSUBTYPEVALUES_CDMA = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_CDMA;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_EVDO_0 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_0 = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_0;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_EVDO_A in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_A = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_A;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_CDMA2000_1XRTT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var NETHOSTCONNECTIONSUBTYPEVALUES_CDMA2000_1XRTT = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_CDMA2000_1XRTT;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_HSDPA in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var NETHOSTCONNECTIONSUBTYPEVALUES_HSDPA = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSDPA;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_HSUPA in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var NETHOSTCONNECTIONSUBTYPEVALUES_HSUPA = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSUPA;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_HSPA in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var NETHOSTCONNECTIONSUBTYPEVALUES_HSPA = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSPA;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_IDEN in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var NETHOSTCONNECTIONSUBTYPEVALUES_IDEN = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_IDEN;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_EVDO_B in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_B = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_B;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_LTE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var NETHOSTCONNECTIONSUBTYPEVALUES_LTE = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_LTE;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_EHRPD in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var NETHOSTCONNECTIONSUBTYPEVALUES_EHRPD = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EHRPD;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_HSPAP in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var NETHOSTCONNECTIONSUBTYPEVALUES_HSPAP = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSPAP;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_GSM in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var NETHOSTCONNECTIONSUBTYPEVALUES_GSM = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_GSM;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_TD_SCDMA in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var NETHOSTCONNECTIONSUBTYPEVALUES_TD_SCDMA = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_TD_SCDMA;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_IWLAN in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var NETHOSTCONNECTIONSUBTYPEVALUES_IWLAN = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_IWLAN;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_NR in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var NETHOSTCONNECTIONSUBTYPEVALUES_NR = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_NR;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_NRNSA in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var NETHOSTCONNECTIONSUBTYPEVALUES_NRNSA = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_NRNSA;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_LTE_CA in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var NETHOSTCONNECTIONSUBTYPEVALUES_LTE_CA = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_LTE_CA;\n/**\n * The constant map of values for NetHostConnectionSubtypeValues.\n * @deprecated Use the NETHOSTCONNECTIONSUBTYPEVALUES_XXXXX constants rather than the NetHostConnectionSubtypeValues.XXXXX for bundle minification.\n */\nexport var NetHostConnectionSubtypeValues = \n/*#__PURE__*/ createConstMap([\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_GPRS,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EDGE,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_UMTS,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_CDMA,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_0,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_A,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_CDMA2000_1XRTT,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSDPA,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSUPA,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSPA,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_IDEN,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_B,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_LTE,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EHRPD,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSPAP,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_GSM,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_TD_SCDMA,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_IWLAN,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_NR,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_NRNSA,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_LTE_CA,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for HttpFlavorValues enum definition\n *\n * Kind of HTTP protocol used.\n *\n * Note: If `net.transport` is not specified, it can be assumed to be `IP.TCP` except if `http.flavor` is `QUIC`, in which case `IP.UDP` is assumed.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nvar TMP_HTTPFLAVORVALUES_HTTP_1_0 = '1.0';\nvar TMP_HTTPFLAVORVALUES_HTTP_1_1 = '1.1';\nvar TMP_HTTPFLAVORVALUES_HTTP_2_0 = '2.0';\nvar TMP_HTTPFLAVORVALUES_SPDY = 'SPDY';\nvar TMP_HTTPFLAVORVALUES_QUIC = 'QUIC';\n/**\n * Kind of HTTP protocol used.\n *\n * Note: If `net.transport` is not specified, it can be assumed to be `IP.TCP` except if `http.flavor` is `QUIC`, in which case `IP.UDP` is assumed.\n *\n * @deprecated Use HTTP_FLAVOR_VALUE_HTTP_1_0 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var HTTPFLAVORVALUES_HTTP_1_0 = TMP_HTTPFLAVORVALUES_HTTP_1_0;\n/**\n * Kind of HTTP protocol used.\n *\n * Note: If `net.transport` is not specified, it can be assumed to be `IP.TCP` except if `http.flavor` is `QUIC`, in which case `IP.UDP` is assumed.\n *\n * @deprecated Use HTTP_FLAVOR_VALUE_HTTP_1_1 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var HTTPFLAVORVALUES_HTTP_1_1 = TMP_HTTPFLAVORVALUES_HTTP_1_1;\n/**\n * Kind of HTTP protocol used.\n *\n * Note: If `net.transport` is not specified, it can be assumed to be `IP.TCP` except if `http.flavor` is `QUIC`, in which case `IP.UDP` is assumed.\n *\n * @deprecated Use HTTP_FLAVOR_VALUE_HTTP_2_0 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var HTTPFLAVORVALUES_HTTP_2_0 = TMP_HTTPFLAVORVALUES_HTTP_2_0;\n/**\n * Kind of HTTP protocol used.\n *\n * Note: If `net.transport` is not specified, it can be assumed to be `IP.TCP` except if `http.flavor` is `QUIC`, in which case `IP.UDP` is assumed.\n *\n * @deprecated Use HTTP_FLAVOR_VALUE_SPDY in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var HTTPFLAVORVALUES_SPDY = TMP_HTTPFLAVORVALUES_SPDY;\n/**\n * Kind of HTTP protocol used.\n *\n * Note: If `net.transport` is not specified, it can be assumed to be `IP.TCP` except if `http.flavor` is `QUIC`, in which case `IP.UDP` is assumed.\n *\n * @deprecated Use HTTP_FLAVOR_VALUE_QUIC in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var HTTPFLAVORVALUES_QUIC = TMP_HTTPFLAVORVALUES_QUIC;\n/**\n * The constant map of values for HttpFlavorValues.\n * @deprecated Use the HTTPFLAVORVALUES_XXXXX constants rather than the HttpFlavorValues.XXXXX for bundle minification.\n */\nexport var HttpFlavorValues = {\n    HTTP_1_0: TMP_HTTPFLAVORVALUES_HTTP_1_0,\n    HTTP_1_1: TMP_HTTPFLAVORVALUES_HTTP_1_1,\n    HTTP_2_0: TMP_HTTPFLAVORVALUES_HTTP_2_0,\n    SPDY: TMP_HTTPFLAVORVALUES_SPDY,\n    QUIC: TMP_HTTPFLAVORVALUES_QUIC,\n};\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for MessagingDestinationKindValues enum definition\n *\n * The kind of message destination.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nvar TMP_MESSAGINGDESTINATIONKINDVALUES_QUEUE = 'queue';\nvar TMP_MESSAGINGDESTINATIONKINDVALUES_TOPIC = 'topic';\n/**\n * The kind of message destination.\n *\n * @deprecated Removed in semconv v1.20.0.\n */\nexport var MESSAGINGDESTINATIONKINDVALUES_QUEUE = TMP_MESSAGINGDESTINATIONKINDVALUES_QUEUE;\n/**\n * The kind of message destination.\n *\n * @deprecated Removed in semconv v1.20.0.\n */\nexport var MESSAGINGDESTINATIONKINDVALUES_TOPIC = TMP_MESSAGINGDESTINATIONKINDVALUES_TOPIC;\n/**\n * The constant map of values for MessagingDestinationKindValues.\n * @deprecated Use the MESSAGINGDESTINATIONKINDVALUES_XXXXX constants rather than the MessagingDestinationKindValues.XXXXX for bundle minification.\n */\nexport var MessagingDestinationKindValues = \n/*#__PURE__*/ createConstMap([\n    TMP_MESSAGINGDESTINATIONKINDVALUES_QUEUE,\n    TMP_MESSAGINGDESTINATIONKINDVALUES_TOPIC,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for MessagingOperationValues enum definition\n *\n * A string identifying the kind of message consumption as defined in the [Operation names](#operation-names) section above. If the operation is &#34;send&#34;, this attribute MUST NOT be set, since the operation can be inferred from the span kind in that case.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nvar TMP_MESSAGINGOPERATIONVALUES_RECEIVE = 'receive';\nvar TMP_MESSAGINGOPERATIONVALUES_PROCESS = 'process';\n/**\n * A string identifying the kind of message consumption as defined in the [Operation names](#operation-names) section above. If the operation is &#34;send&#34;, this attribute MUST NOT be set, since the operation can be inferred from the span kind in that case.\n *\n * @deprecated Use MESSAGING_OPERATION_TYPE_VALUE_RECEIVE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var MESSAGINGOPERATIONVALUES_RECEIVE = TMP_MESSAGINGOPERATIONVALUES_RECEIVE;\n/**\n * A string identifying the kind of message consumption as defined in the [Operation names](#operation-names) section above. If the operation is &#34;send&#34;, this attribute MUST NOT be set, since the operation can be inferred from the span kind in that case.\n *\n * @deprecated Use MESSAGING_OPERATION_TYPE_VALUE_PROCESS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var MESSAGINGOPERATIONVALUES_PROCESS = TMP_MESSAGINGOPERATIONVALUES_PROCESS;\n/**\n * The constant map of values for MessagingOperationValues.\n * @deprecated Use the MESSAGINGOPERATIONVALUES_XXXXX constants rather than the MessagingOperationValues.XXXXX for bundle minification.\n */\nexport var MessagingOperationValues = \n/*#__PURE__*/ createConstMap([\n    TMP_MESSAGINGOPERATIONVALUES_RECEIVE,\n    TMP_MESSAGINGOPERATIONVALUES_PROCESS,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for RpcGrpcStatusCodeValues enum definition\n *\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nvar TMP_RPCGRPCSTATUSCODEVALUES_OK = 0;\nvar TMP_RPCGRPCSTATUSCODEVALUES_CANCELLED = 1;\nvar TMP_RPCGRPCSTATUSCODEVALUES_UNKNOWN = 2;\nvar TMP_RPCGRPCSTATUSCODEVALUES_INVALID_ARGUMENT = 3;\nvar TMP_RPCGRPCSTATUSCODEVALUES_DEADLINE_EXCEEDED = 4;\nvar TMP_RPCGRPCSTATUSCODEVALUES_NOT_FOUND = 5;\nvar TMP_RPCGRPCSTATUSCODEVALUES_ALREADY_EXISTS = 6;\nvar TMP_RPCGRPCSTATUSCODEVALUES_PERMISSION_DENIED = 7;\nvar TMP_RPCGRPCSTATUSCODEVALUES_RESOURCE_EXHAUSTED = 8;\nvar TMP_RPCGRPCSTATUSCODEVALUES_FAILED_PRECONDITION = 9;\nvar TMP_RPCGRPCSTATUSCODEVALUES_ABORTED = 10;\nvar TMP_RPCGRPCSTATUSCODEVALUES_OUT_OF_RANGE = 11;\nvar TMP_RPCGRPCSTATUSCODEVALUES_UNIMPLEMENTED = 12;\nvar TMP_RPCGRPCSTATUSCODEVALUES_INTERNAL = 13;\nvar TMP_RPCGRPCSTATUSCODEVALUES_UNAVAILABLE = 14;\nvar TMP_RPCGRPCSTATUSCODEVALUES_DATA_LOSS = 15;\nvar TMP_RPCGRPCSTATUSCODEVALUES_UNAUTHENTICATED = 16;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_OK in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var RPCGRPCSTATUSCODEVALUES_OK = TMP_RPCGRPCSTATUSCODEVALUES_OK;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_CANCELLED in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var RPCGRPCSTATUSCODEVALUES_CANCELLED = TMP_RPCGRPCSTATUSCODEVALUES_CANCELLED;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_UNKNOWN in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var RPCGRPCSTATUSCODEVALUES_UNKNOWN = TMP_RPCGRPCSTATUSCODEVALUES_UNKNOWN;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_INVALID_ARGUMENT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var RPCGRPCSTATUSCODEVALUES_INVALID_ARGUMENT = TMP_RPCGRPCSTATUSCODEVALUES_INVALID_ARGUMENT;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_DEADLINE_EXCEEDED in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var RPCGRPCSTATUSCODEVALUES_DEADLINE_EXCEEDED = TMP_RPCGRPCSTATUSCODEVALUES_DEADLINE_EXCEEDED;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_NOT_FOUND in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var RPCGRPCSTATUSCODEVALUES_NOT_FOUND = TMP_RPCGRPCSTATUSCODEVALUES_NOT_FOUND;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_ALREADY_EXISTS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var RPCGRPCSTATUSCODEVALUES_ALREADY_EXISTS = TMP_RPCGRPCSTATUSCODEVALUES_ALREADY_EXISTS;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_PERMISSION_DENIED in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var RPCGRPCSTATUSCODEVALUES_PERMISSION_DENIED = TMP_RPCGRPCSTATUSCODEVALUES_PERMISSION_DENIED;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_RESOURCE_EXHAUSTED in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var RPCGRPCSTATUSCODEVALUES_RESOURCE_EXHAUSTED = TMP_RPCGRPCSTATUSCODEVALUES_RESOURCE_EXHAUSTED;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_FAILED_PRECONDITION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var RPCGRPCSTATUSCODEVALUES_FAILED_PRECONDITION = TMP_RPCGRPCSTATUSCODEVALUES_FAILED_PRECONDITION;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_ABORTED in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var RPCGRPCSTATUSCODEVALUES_ABORTED = TMP_RPCGRPCSTATUSCODEVALUES_ABORTED;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_OUT_OF_RANGE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var RPCGRPCSTATUSCODEVALUES_OUT_OF_RANGE = TMP_RPCGRPCSTATUSCODEVALUES_OUT_OF_RANGE;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_UNIMPLEMENTED in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var RPCGRPCSTATUSCODEVALUES_UNIMPLEMENTED = TMP_RPCGRPCSTATUSCODEVALUES_UNIMPLEMENTED;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_INTERNAL in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var RPCGRPCSTATUSCODEVALUES_INTERNAL = TMP_RPCGRPCSTATUSCODEVALUES_INTERNAL;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_UNAVAILABLE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var RPCGRPCSTATUSCODEVALUES_UNAVAILABLE = TMP_RPCGRPCSTATUSCODEVALUES_UNAVAILABLE;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_DATA_LOSS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var RPCGRPCSTATUSCODEVALUES_DATA_LOSS = TMP_RPCGRPCSTATUSCODEVALUES_DATA_LOSS;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_UNAUTHENTICATED in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var RPCGRPCSTATUSCODEVALUES_UNAUTHENTICATED = TMP_RPCGRPCSTATUSCODEVALUES_UNAUTHENTICATED;\n/**\n * The constant map of values for RpcGrpcStatusCodeValues.\n * @deprecated Use the RPCGRPCSTATUSCODEVALUES_XXXXX constants rather than the RpcGrpcStatusCodeValues.XXXXX for bundle minification.\n */\nexport var RpcGrpcStatusCodeValues = {\n    OK: TMP_RPCGRPCSTATUSCODEVALUES_OK,\n    CANCELLED: TMP_RPCGRPCSTATUSCODEVALUES_CANCELLED,\n    UNKNOWN: TMP_RPCGRPCSTATUSCODEVALUES_UNKNOWN,\n    INVALID_ARGUMENT: TMP_RPCGRPCSTATUSCODEVALUES_INVALID_ARGUMENT,\n    DEADLINE_EXCEEDED: TMP_RPCGRPCSTATUSCODEVALUES_DEADLINE_EXCEEDED,\n    NOT_FOUND: TMP_RPCGRPCSTATUSCODEVALUES_NOT_FOUND,\n    ALREADY_EXISTS: TMP_RPCGRPCSTATUSCODEVALUES_ALREADY_EXISTS,\n    PERMISSION_DENIED: TMP_RPCGRPCSTATUSCODEVALUES_PERMISSION_DENIED,\n    RESOURCE_EXHAUSTED: TMP_RPCGRPCSTATUSCODEVALUES_RESOURCE_EXHAUSTED,\n    FAILED_PRECONDITION: TMP_RPCGRPCSTATUSCODEVALUES_FAILED_PRECONDITION,\n    ABORTED: TMP_RPCGRPCSTATUSCODEVALUES_ABORTED,\n    OUT_OF_RANGE: TMP_RPCGRPCSTATUSCODEVALUES_OUT_OF_RANGE,\n    UNIMPLEMENTED: TMP_RPCGRPCSTATUSCODEVALUES_UNIMPLEMENTED,\n    INTERNAL: TMP_RPCGRPCSTATUSCODEVALUES_INTERNAL,\n    UNAVAILABLE: TMP_RPCGRPCSTATUSCODEVALUES_UNAVAILABLE,\n    DATA_LOSS: TMP_RPCGRPCSTATUSCODEVALUES_DATA_LOSS,\n    UNAUTHENTICATED: TMP_RPCGRPCSTATUSCODEVALUES_UNAUTHENTICATED,\n};\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for MessageTypeValues enum definition\n *\n * Whether this is a received or sent message.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nvar TMP_MESSAGETYPEVALUES_SENT = 'SENT';\nvar TMP_MESSAGETYPEVALUES_RECEIVED = 'RECEIVED';\n/**\n * Whether this is a received or sent message.\n *\n * @deprecated Use MESSAGE_TYPE_VALUE_SENT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var MESSAGETYPEVALUES_SENT = TMP_MESSAGETYPEVALUES_SENT;\n/**\n * Whether this is a received or sent message.\n *\n * @deprecated Use MESSAGE_TYPE_VALUE_RECEIVED in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var MESSAGETYPEVALUES_RECEIVED = TMP_MESSAGETYPEVALUES_RECEIVED;\n/**\n * The constant map of values for MessageTypeValues.\n * @deprecated Use the MESSAGETYPEVALUES_XXXXX constants rather than the MessageTypeValues.XXXXX for bundle minification.\n */\nexport var MessageTypeValues = \n/*#__PURE__*/ createConstMap([\n    TMP_MESSAGETYPEVALUES_SENT,\n    TMP_MESSAGETYPEVALUES_RECEIVED,\n]);\n//# sourceMappingURL=SemanticAttributes.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Event name definitions\nexport var ExceptionEventName = 'exception';\n//# sourceMappingURL=enums.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport { diag, SpanStatusCode, } from '@opentelemetry/api';\nimport { addHrTimes, millisToHrTime, getTimeOrigin, hrTime, hrTimeDuration, isAttributeValue, isTimeInput, isTimeInputHrTime, otperformance, sanitizeAttributes, } from '@opentelemetry/core';\nimport { SEMATTRS_EXCEPTION_MESSAGE, SEMATTRS_EXCEPTION_STACKTRACE, SEMATTRS_EXCEPTION_TYPE, } from '@opentelemetry/semantic-conventions';\nimport { ExceptionEventName } from './enums';\n/**\n * This class represents a span.\n */\nvar Span = /** @class */ (function () {\n    /**\n     * Constructs a new Span instance.\n     *\n     * @deprecated calling Span constructor directly is not supported. Please use tracer.startSpan.\n     * */\n    function Span(parentTracer, context, spanName, spanContext, kind, parentSpanId, links, startTime, _deprecatedClock, // keeping this argument even though it is unused to ensure backwards compatibility\n    attributes) {\n        if (links === void 0) { links = []; }\n        this.attributes = {};\n        this.links = [];\n        this.events = [];\n        this._droppedAttributesCount = 0;\n        this._droppedEventsCount = 0;\n        this._droppedLinksCount = 0;\n        this.status = {\n            code: SpanStatusCode.UNSET,\n        };\n        this.endTime = [0, 0];\n        this._ended = false;\n        this._duration = [-1, -1];\n        this.name = spanName;\n        this._spanContext = spanContext;\n        this.parentSpanId = parentSpanId;\n        this.kind = kind;\n        this.links = links;\n        var now = Date.now();\n        this._performanceStartTime = otperformance.now();\n        this._performanceOffset =\n            now - (this._performanceStartTime + getTimeOrigin());\n        this._startTimeProvided = startTime != null;\n        this.startTime = this._getTime(startTime !== null && startTime !== void 0 ? startTime : now);\n        this.resource = parentTracer.resource;\n        this.instrumentationLibrary = parentTracer.instrumentationLibrary;\n        this._spanLimits = parentTracer.getSpanLimits();\n        this._attributeValueLengthLimit =\n            this._spanLimits.attributeValueLengthLimit || 0;\n        if (attributes != null) {\n            this.setAttributes(attributes);\n        }\n        this._spanProcessor = parentTracer.getActiveSpanProcessor();\n        this._spanProcessor.onStart(this, context);\n    }\n    Span.prototype.spanContext = function () {\n        return this._spanContext;\n    };\n    Span.prototype.setAttribute = function (key, value) {\n        if (value == null || this._isSpanEnded())\n            return this;\n        if (key.length === 0) {\n            diag.warn(\"Invalid attribute key: \" + key);\n            return this;\n        }\n        if (!isAttributeValue(value)) {\n            diag.warn(\"Invalid attribute value set for key: \" + key);\n            return this;\n        }\n        if (Object.keys(this.attributes).length >=\n            this._spanLimits.attributeCountLimit &&\n            !Object.prototype.hasOwnProperty.call(this.attributes, key)) {\n            this._droppedAttributesCount++;\n            return this;\n        }\n        this.attributes[key] = this._truncateToSize(value);\n        return this;\n    };\n    Span.prototype.setAttributes = function (attributes) {\n        var e_1, _a;\n        try {\n            for (var _b = __values(Object.entries(attributes)), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var _d = __read(_c.value, 2), k = _d[0], v = _d[1];\n                this.setAttribute(k, v);\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        return this;\n    };\n    /**\n     *\n     * @param name Span Name\n     * @param [attributesOrStartTime] Span attributes or start time\n     *     if type is {@type TimeInput} and 3rd param is undefined\n     * @param [timeStamp] Specified time stamp for the event\n     */\n    Span.prototype.addEvent = function (name, attributesOrStartTime, timeStamp) {\n        if (this._isSpanEnded())\n            return this;\n        if (this._spanLimits.eventCountLimit === 0) {\n            diag.warn('No events allowed.');\n            this._droppedEventsCount++;\n            return this;\n        }\n        if (this.events.length >= this._spanLimits.eventCountLimit) {\n            if (this._droppedEventsCount === 0) {\n                diag.debug('Dropping extra events.');\n            }\n            this.events.shift();\n            this._droppedEventsCount++;\n        }\n        if (isTimeInput(attributesOrStartTime)) {\n            if (!isTimeInput(timeStamp)) {\n                timeStamp = attributesOrStartTime;\n            }\n            attributesOrStartTime = undefined;\n        }\n        var attributes = sanitizeAttributes(attributesOrStartTime);\n        this.events.push({\n            name: name,\n            attributes: attributes,\n            time: this._getTime(timeStamp),\n            droppedAttributesCount: 0,\n        });\n        return this;\n    };\n    Span.prototype.addLink = function (link) {\n        this.links.push(link);\n        return this;\n    };\n    Span.prototype.addLinks = function (links) {\n        var _a;\n        (_a = this.links).push.apply(_a, __spreadArray([], __read(links), false));\n        return this;\n    };\n    Span.prototype.setStatus = function (status) {\n        if (this._isSpanEnded())\n            return this;\n        this.status = __assign({}, status);\n        // When using try-catch, the caught \"error\" is of type `any`. When then assigning `any` to `status.message`,\n        // TypeScript will not error. While this can happen during use of any API, it is more common on Span#setStatus()\n        // as it's likely used in a catch-block. Therefore, we validate if `status.message` is actually a string, null, or\n        // undefined to avoid an incorrect type causing issues downstream.\n        if (this.status.message != null && typeof status.message !== 'string') {\n            diag.warn(\"Dropping invalid status.message of type '\" + typeof status.message + \"', expected 'string'\");\n            delete this.status.message;\n        }\n        return this;\n    };\n    Span.prototype.updateName = function (name) {\n        if (this._isSpanEnded())\n            return this;\n        this.name = name;\n        return this;\n    };\n    Span.prototype.end = function (endTime) {\n        if (this._isSpanEnded()) {\n            diag.error(this.name + \" \" + this._spanContext.traceId + \"-\" + this._spanContext.spanId + \" - You can only call end() on a span once.\");\n            return;\n        }\n        this._ended = true;\n        this.endTime = this._getTime(endTime);\n        this._duration = hrTimeDuration(this.startTime, this.endTime);\n        if (this._duration[0] < 0) {\n            diag.warn('Inconsistent start and end time, startTime > endTime. Setting span duration to 0ms.', this.startTime, this.endTime);\n            this.endTime = this.startTime.slice();\n            this._duration = [0, 0];\n        }\n        if (this._droppedEventsCount > 0) {\n            diag.warn(\"Dropped \" + this._droppedEventsCount + \" events because eventCountLimit reached\");\n        }\n        this._spanProcessor.onEnd(this);\n    };\n    Span.prototype._getTime = function (inp) {\n        if (typeof inp === 'number' && inp <= otperformance.now()) {\n            // must be a performance timestamp\n            // apply correction and convert to hrtime\n            return hrTime(inp + this._performanceOffset);\n        }\n        if (typeof inp === 'number') {\n            return millisToHrTime(inp);\n        }\n        if (inp instanceof Date) {\n            return millisToHrTime(inp.getTime());\n        }\n        if (isTimeInputHrTime(inp)) {\n            return inp;\n        }\n        if (this._startTimeProvided) {\n            // if user provided a time for the start manually\n            // we can't use duration to calculate event/end times\n            return millisToHrTime(Date.now());\n        }\n        var msDuration = otperformance.now() - this._performanceStartTime;\n        return addHrTimes(this.startTime, millisToHrTime(msDuration));\n    };\n    Span.prototype.isRecording = function () {\n        return this._ended === false;\n    };\n    Span.prototype.recordException = function (exception, time) {\n        var attributes = {};\n        if (typeof exception === 'string') {\n            attributes[SEMATTRS_EXCEPTION_MESSAGE] = exception;\n        }\n        else if (exception) {\n            if (exception.code) {\n                attributes[SEMATTRS_EXCEPTION_TYPE] = exception.code.toString();\n            }\n            else if (exception.name) {\n                attributes[SEMATTRS_EXCEPTION_TYPE] = exception.name;\n            }\n            if (exception.message) {\n                attributes[SEMATTRS_EXCEPTION_MESSAGE] = exception.message;\n            }\n            if (exception.stack) {\n                attributes[SEMATTRS_EXCEPTION_STACKTRACE] = exception.stack;\n            }\n        }\n        // these are minimum requirements from spec\n        if (attributes[SEMATTRS_EXCEPTION_TYPE] ||\n            attributes[SEMATTRS_EXCEPTION_MESSAGE]) {\n            this.addEvent(ExceptionEventName, attributes, time);\n        }\n        else {\n            diag.warn(\"Failed to record an exception \" + exception);\n        }\n    };\n    Object.defineProperty(Span.prototype, \"duration\", {\n        get: function () {\n            return this._duration;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Span.prototype, \"ended\", {\n        get: function () {\n            return this._ended;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Span.prototype, \"droppedAttributesCount\", {\n        get: function () {\n            return this._droppedAttributesCount;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Span.prototype, \"droppedEventsCount\", {\n        get: function () {\n            return this._droppedEventsCount;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Span.prototype, \"droppedLinksCount\", {\n        get: function () {\n            return this._droppedLinksCount;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Span.prototype._isSpanEnded = function () {\n        if (this._ended) {\n            diag.warn(\"Can not execute the operation on ended Span {traceId: \" + this._spanContext.traceId + \", spanId: \" + this._spanContext.spanId + \"}\");\n        }\n        return this._ended;\n    };\n    // Utility function to truncate given value within size\n    // for value type of string, will truncate to given limit\n    // for type of non-string, will return same value\n    Span.prototype._truncateToLimitUtil = function (value, limit) {\n        if (value.length <= limit) {\n            return value;\n        }\n        return value.substring(0, limit);\n    };\n    /**\n     * If the given attribute value is of type string and has more characters than given {@code attributeValueLengthLimit} then\n     * return string with truncated to {@code attributeValueLengthLimit} characters\n     *\n     * If the given attribute value is array of strings then\n     * return new array of strings with each element truncated to {@code attributeValueLengthLimit} characters\n     *\n     * Otherwise return same Attribute {@code value}\n     *\n     * @param value Attribute value\n     * @returns truncated attribute value if required, otherwise same value\n     */\n    Span.prototype._truncateToSize = function (value) {\n        var _this = this;\n        var limit = this._attributeValueLengthLimit;\n        // Check limit\n        if (limit <= 0) {\n            // Negative values are invalid, so do not truncate\n            diag.warn(\"Attribute value limit must be positive, got \" + limit);\n            return value;\n        }\n        // String\n        if (typeof value === 'string') {\n            return this._truncateToLimitUtil(value, limit);\n        }\n        // Array of strings\n        if (Array.isArray(value)) {\n            return value.map(function (val) {\n                return typeof val === 'string' ? _this._truncateToLimitUtil(val, limit) : val;\n            });\n        }\n        // Other types, no need to apply value length limit\n        return value;\n    };\n    return Span;\n}());\nexport { Span };\n//# sourceMappingURL=Span.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A sampling decision that determines how a {@link Span} will be recorded\n * and collected.\n */\nexport var SamplingDecision;\n(function (SamplingDecision) {\n    /**\n     * `Span.isRecording() === false`, span will not be recorded and all events\n     * and attributes will be dropped.\n     */\n    SamplingDecision[SamplingDecision[\"NOT_RECORD\"] = 0] = \"NOT_RECORD\";\n    /**\n     * `Span.isRecording() === true`, but `Sampled` flag in {@link TraceFlags}\n     * MUST NOT be set.\n     */\n    SamplingDecision[SamplingDecision[\"RECORD\"] = 1] = \"RECORD\";\n    /**\n     * `Span.isRecording() === true` AND `Sampled` flag in {@link TraceFlags}\n     * MUST be set.\n     */\n    SamplingDecision[SamplingDecision[\"RECORD_AND_SAMPLED\"] = 2] = \"RECORD_AND_SAMPLED\";\n})(SamplingDecision || (SamplingDecision = {}));\n//# sourceMappingURL=Sampler.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { SamplingDecision } from '../Sampler';\n/** Sampler that samples no traces. */\nvar AlwaysOffSampler = /** @class */ (function () {\n    function AlwaysOffSampler() {\n    }\n    AlwaysOffSampler.prototype.shouldSample = function () {\n        return {\n            decision: SamplingDecision.NOT_RECORD,\n        };\n    };\n    AlwaysOffSampler.prototype.toString = function () {\n        return 'AlwaysOffSampler';\n    };\n    return AlwaysOffSampler;\n}());\nexport { AlwaysOffSampler };\n//# sourceMappingURL=AlwaysOffSampler.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { SamplingDecision } from '../Sampler';\n/** Sampler that samples all traces. */\nvar AlwaysOnSampler = /** @class */ (function () {\n    function AlwaysOnSampler() {\n    }\n    AlwaysOnSampler.prototype.shouldSample = function () {\n        return {\n            decision: SamplingDecision.RECORD_AND_SAMPLED,\n        };\n    };\n    AlwaysOnSampler.prototype.toString = function () {\n        return 'AlwaysOnSampler';\n    };\n    return AlwaysOnSampler;\n}());\nexport { AlwaysOnSampler };\n//# sourceMappingURL=AlwaysOnSampler.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { isSpanContextValid, TraceFlags, trace, } from '@opentelemetry/api';\nimport { globalErrorHandler } from '@opentelemetry/core';\nimport { AlwaysOffSampler } from './AlwaysOffSampler';\nimport { AlwaysOnSampler } from './AlwaysOnSampler';\n/**\n * A composite sampler that either respects the parent span's sampling decision\n * or delegates to `delegateSampler` for root spans.\n */\nvar ParentBasedSampler = /** @class */ (function () {\n    function ParentBasedSampler(config) {\n        var _a, _b, _c, _d;\n        this._root = config.root;\n        if (!this._root) {\n            globalErrorHandler(new Error('ParentBasedSampler must have a root sampler configured'));\n            this._root = new AlwaysOnSampler();\n        }\n        this._remoteParentSampled =\n            (_a = config.remoteParentSampled) !== null && _a !== void 0 ? _a : new AlwaysOnSampler();\n        this._remoteParentNotSampled =\n            (_b = config.remoteParentNotSampled) !== null && _b !== void 0 ? _b : new AlwaysOffSampler();\n        this._localParentSampled =\n            (_c = config.localParentSampled) !== null && _c !== void 0 ? _c : new AlwaysOnSampler();\n        this._localParentNotSampled =\n            (_d = config.localParentNotSampled) !== null && _d !== void 0 ? _d : new AlwaysOffSampler();\n    }\n    ParentBasedSampler.prototype.shouldSample = function (context, traceId, spanName, spanKind, attributes, links) {\n        var parentContext = trace.getSpanContext(context);\n        if (!parentContext || !isSpanContextValid(parentContext)) {\n            return this._root.shouldSample(context, traceId, spanName, spanKind, attributes, links);\n        }\n        if (parentContext.isRemote) {\n            if (parentContext.traceFlags & TraceFlags.SAMPLED) {\n                return this._remoteParentSampled.shouldSample(context, traceId, spanName, spanKind, attributes, links);\n            }\n            return this._remoteParentNotSampled.shouldSample(context, traceId, spanName, spanKind, attributes, links);\n        }\n        if (parentContext.traceFlags & TraceFlags.SAMPLED) {\n            return this._localParentSampled.shouldSample(context, traceId, spanName, spanKind, attributes, links);\n        }\n        return this._localParentNotSampled.shouldSample(context, traceId, spanName, spanKind, attributes, links);\n    };\n    ParentBasedSampler.prototype.toString = function () {\n        return \"ParentBased{root=\" + this._root.toString() + \", remoteParentSampled=\" + this._remoteParentSampled.toString() + \", remoteParentNotSampled=\" + this._remoteParentNotSampled.toString() + \", localParentSampled=\" + this._localParentSampled.toString() + \", localParentNotSampled=\" + this._localParentNotSampled.toString() + \"}\";\n    };\n    return ParentBasedSampler;\n}());\nexport { ParentBasedSampler };\n//# sourceMappingURL=ParentBasedSampler.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { isValidTraceId } from '@opentelemetry/api';\nimport { SamplingDecision } from '../Sampler';\n/** Sampler that samples a given fraction of traces based of trace id deterministically. */\nvar TraceIdRatioBasedSampler = /** @class */ (function () {\n    function TraceIdRatioBasedSampler(_ratio) {\n        if (_ratio === void 0) { _ratio = 0; }\n        this._ratio = _ratio;\n        this._ratio = this._normalize(_ratio);\n        this._upperBound = Math.floor(this._ratio * 0xffffffff);\n    }\n    TraceIdRatioBasedSampler.prototype.shouldSample = function (context, traceId) {\n        return {\n            decision: isValidTraceId(traceId) && this._accumulate(traceId) < this._upperBound\n                ? SamplingDecision.RECORD_AND_SAMPLED\n                : SamplingDecision.NOT_RECORD,\n        };\n    };\n    TraceIdRatioBasedSampler.prototype.toString = function () {\n        return \"TraceIdRatioBased{\" + this._ratio + \"}\";\n    };\n    TraceIdRatioBasedSampler.prototype._normalize = function (ratio) {\n        if (typeof ratio !== 'number' || isNaN(ratio))\n            return 0;\n        return ratio >= 1 ? 1 : ratio <= 0 ? 0 : ratio;\n    };\n    TraceIdRatioBasedSampler.prototype._accumulate = function (traceId) {\n        var accumulation = 0;\n        for (var i = 0; i < traceId.length / 8; i++) {\n            var pos = i * 8;\n            var part = parseInt(traceId.slice(pos, pos + 8), 16);\n            accumulation = (accumulation ^ part) >>> 0;\n        }\n        return accumulation;\n    };\n    return TraceIdRatioBasedSampler;\n}());\nexport { TraceIdRatioBasedSampler };\n//# sourceMappingURL=TraceIdRatioBasedSampler.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { diag } from '@opentelemetry/api';\nimport { getEnv, TracesSamplerValues } from '@opentelemetry/core';\nimport { AlwaysOffSampler } from './sampler/AlwaysOffSampler';\nimport { AlwaysOnSampler } from './sampler/AlwaysOnSampler';\nimport { ParentBasedSampler } from './sampler/ParentBasedSampler';\nimport { TraceIdRatioBasedSampler } from './sampler/TraceIdRatioBasedSampler';\nvar FALLBACK_OTEL_TRACES_SAMPLER = TracesSamplerValues.AlwaysOn;\nvar DEFAULT_RATIO = 1;\n/**\n * Load default configuration. For fields with primitive values, any user-provided\n * value will override the corresponding default value. For fields with\n * non-primitive values (like `spanLimits`), the user-provided value will be\n * used to extend the default value.\n */\n// object needs to be wrapped in this function and called when needed otherwise\n// envs are parsed before tests are ran - causes tests using these envs to fail\nexport function loadDefaultConfig() {\n    var env = getEnv();\n    return {\n        sampler: buildSamplerFromEnv(env),\n        forceFlushTimeoutMillis: 30000,\n        generalLimits: {\n            attributeValueLengthLimit: env.OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n            attributeCountLimit: env.OTEL_ATTRIBUTE_COUNT_LIMIT,\n        },\n        spanLimits: {\n            attributeValueLengthLimit: env.OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n            attributeCountLimit: env.OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT,\n            linkCountLimit: env.OTEL_SPAN_LINK_COUNT_LIMIT,\n            eventCountLimit: env.OTEL_SPAN_EVENT_COUNT_LIMIT,\n            attributePerEventCountLimit: env.OTEL_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT,\n            attributePerLinkCountLimit: env.OTEL_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT,\n        },\n        mergeResourceWithDefaults: true,\n    };\n}\n/**\n * Based on environment, builds a sampler, complies with specification.\n * @param environment optional, by default uses getEnv(), but allows passing a value to reuse parsed environment\n */\nexport function buildSamplerFromEnv(environment) {\n    if (environment === void 0) { environment = getEnv(); }\n    switch (environment.OTEL_TRACES_SAMPLER) {\n        case TracesSamplerValues.AlwaysOn:\n            return new AlwaysOnSampler();\n        case TracesSamplerValues.AlwaysOff:\n            return new AlwaysOffSampler();\n        case TracesSamplerValues.ParentBasedAlwaysOn:\n            return new ParentBasedSampler({\n                root: new AlwaysOnSampler(),\n            });\n        case TracesSamplerValues.ParentBasedAlwaysOff:\n            return new ParentBasedSampler({\n                root: new AlwaysOffSampler(),\n            });\n        case TracesSamplerValues.TraceIdRatio:\n            return new TraceIdRatioBasedSampler(getSamplerProbabilityFromEnv(environment));\n        case TracesSamplerValues.ParentBasedTraceIdRatio:\n            return new ParentBasedSampler({\n                root: new TraceIdRatioBasedSampler(getSamplerProbabilityFromEnv(environment)),\n            });\n        default:\n            diag.error(\"OTEL_TRACES_SAMPLER value \\\"\" + environment.OTEL_TRACES_SAMPLER + \" invalid, defaulting to \" + FALLBACK_OTEL_TRACES_SAMPLER + \"\\\".\");\n            return new AlwaysOnSampler();\n    }\n}\nfunction getSamplerProbabilityFromEnv(environment) {\n    if (environment.OTEL_TRACES_SAMPLER_ARG === undefined ||\n        environment.OTEL_TRACES_SAMPLER_ARG === '') {\n        diag.error(\"OTEL_TRACES_SAMPLER_ARG is blank, defaulting to \" + DEFAULT_RATIO + \".\");\n        return DEFAULT_RATIO;\n    }\n    var probability = Number(environment.OTEL_TRACES_SAMPLER_ARG);\n    if (isNaN(probability)) {\n        diag.error(\"OTEL_TRACES_SAMPLER_ARG=\" + environment.OTEL_TRACES_SAMPLER_ARG + \" was given, but it is invalid, defaulting to \" + DEFAULT_RATIO + \".\");\n        return DEFAULT_RATIO;\n    }\n    if (probability < 0 || probability > 1) {\n        diag.error(\"OTEL_TRACES_SAMPLER_ARG=\" + environment.OTEL_TRACES_SAMPLER_ARG + \" was given, but it is out of range ([0..1]), defaulting to \" + DEFAULT_RATIO + \".\");\n        return DEFAULT_RATIO;\n    }\n    return probability;\n}\n//# sourceMappingURL=config.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { buildSamplerFromEnv, loadDefaultConfig } from './config';\nimport { DEFAULT_ATTRIBUTE_COUNT_LIMIT, DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT, getEnvWithoutDefaults, } from '@opentelemetry/core';\n/**\n * Function to merge Default configuration (as specified in './config') with\n * user provided configurations.\n */\nexport function mergeConfig(userConfig) {\n    var perInstanceDefaults = {\n        sampler: buildSamplerFromEnv(),\n    };\n    var DEFAULT_CONFIG = loadDefaultConfig();\n    var target = Object.assign({}, DEFAULT_CONFIG, perInstanceDefaults, userConfig);\n    target.generalLimits = Object.assign({}, DEFAULT_CONFIG.generalLimits, userConfig.generalLimits || {});\n    target.spanLimits = Object.assign({}, DEFAULT_CONFIG.spanLimits, userConfig.spanLimits || {});\n    return target;\n}\n/**\n * When general limits are provided and model specific limits are not,\n * configures the model specific limits by using the values from the general ones.\n * @param userConfig User provided tracer configuration\n */\nexport function reconfigureLimits(userConfig) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;\n    var spanLimits = Object.assign({}, userConfig.spanLimits);\n    var parsedEnvConfig = getEnvWithoutDefaults();\n    /**\n     * Reassign span attribute count limit to use first non null value defined by user or use default value\n     */\n    spanLimits.attributeCountLimit =\n        (_f = (_e = (_d = (_b = (_a = userConfig.spanLimits) === null || _a === void 0 ? void 0 : _a.attributeCountLimit) !== null && _b !== void 0 ? _b : (_c = userConfig.generalLimits) === null || _c === void 0 ? void 0 : _c.attributeCountLimit) !== null && _d !== void 0 ? _d : parsedEnvConfig.OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT) !== null && _e !== void 0 ? _e : parsedEnvConfig.OTEL_ATTRIBUTE_COUNT_LIMIT) !== null && _f !== void 0 ? _f : DEFAULT_ATTRIBUTE_COUNT_LIMIT;\n    /**\n     * Reassign span attribute value length limit to use first non null value defined by user or use default value\n     */\n    spanLimits.attributeValueLengthLimit =\n        (_m = (_l = (_k = (_h = (_g = userConfig.spanLimits) === null || _g === void 0 ? void 0 : _g.attributeValueLengthLimit) !== null && _h !== void 0 ? _h : (_j = userConfig.generalLimits) === null || _j === void 0 ? void 0 : _j.attributeValueLengthLimit) !== null && _k !== void 0 ? _k : parsedEnvConfig.OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT) !== null && _l !== void 0 ? _l : parsedEnvConfig.OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT) !== null && _m !== void 0 ? _m : DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT;\n    return Object.assign({}, userConfig, { spanLimits: spanLimits });\n}\n//# sourceMappingURL=utility.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { context, diag, TraceFlags } from '@opentelemetry/api';\nimport { BindOnceFuture, ExportResultCode, getEnv, globalErrorHandler, suppressTracing, unrefTimer, } from '@opentelemetry/core';\n/**\n * Implementation of the {@link SpanProcessor} that batches spans exported by\n * the SDK then pushes them to the exporter pipeline.\n */\nvar BatchSpanProcessorBase = /** @class */ (function () {\n    function BatchSpanProcessorBase(_exporter, config) {\n        this._exporter = _exporter;\n        this._isExporting = false;\n        this._finishedSpans = [];\n        this._droppedSpansCount = 0;\n        var env = getEnv();\n        this._maxExportBatchSize =\n            typeof (config === null || config === void 0 ? void 0 : config.maxExportBatchSize) === 'number'\n                ? config.maxExportBatchSize\n                : env.OTEL_BSP_MAX_EXPORT_BATCH_SIZE;\n        this._maxQueueSize =\n            typeof (config === null || config === void 0 ? void 0 : config.maxQueueSize) === 'number'\n                ? config.maxQueueSize\n                : env.OTEL_BSP_MAX_QUEUE_SIZE;\n        this._scheduledDelayMillis =\n            typeof (config === null || config === void 0 ? void 0 : config.scheduledDelayMillis) === 'number'\n                ? config.scheduledDelayMillis\n                : env.OTEL_BSP_SCHEDULE_DELAY;\n        this._exportTimeoutMillis =\n            typeof (config === null || config === void 0 ? void 0 : config.exportTimeoutMillis) === 'number'\n                ? config.exportTimeoutMillis\n                : env.OTEL_BSP_EXPORT_TIMEOUT;\n        this._shutdownOnce = new BindOnceFuture(this._shutdown, this);\n        if (this._maxExportBatchSize > this._maxQueueSize) {\n            diag.warn('BatchSpanProcessor: maxExportBatchSize must be smaller or equal to maxQueueSize, setting maxExportBatchSize to match maxQueueSize');\n            this._maxExportBatchSize = this._maxQueueSize;\n        }\n    }\n    BatchSpanProcessorBase.prototype.forceFlush = function () {\n        if (this._shutdownOnce.isCalled) {\n            return this._shutdownOnce.promise;\n        }\n        return this._flushAll();\n    };\n    // does nothing.\n    BatchSpanProcessorBase.prototype.onStart = function (_span, _parentContext) { };\n    BatchSpanProcessorBase.prototype.onEnd = function (span) {\n        if (this._shutdownOnce.isCalled) {\n            return;\n        }\n        if ((span.spanContext().traceFlags & TraceFlags.SAMPLED) === 0) {\n            return;\n        }\n        this._addToBuffer(span);\n    };\n    BatchSpanProcessorBase.prototype.shutdown = function () {\n        return this._shutdownOnce.call();\n    };\n    BatchSpanProcessorBase.prototype._shutdown = function () {\n        var _this = this;\n        return Promise.resolve()\n            .then(function () {\n            return _this.onShutdown();\n        })\n            .then(function () {\n            return _this._flushAll();\n        })\n            .then(function () {\n            return _this._exporter.shutdown();\n        });\n    };\n    /** Add a span in the buffer. */\n    BatchSpanProcessorBase.prototype._addToBuffer = function (span) {\n        if (this._finishedSpans.length >= this._maxQueueSize) {\n            // limit reached, drop span\n            if (this._droppedSpansCount === 0) {\n                diag.debug('maxQueueSize reached, dropping spans');\n            }\n            this._droppedSpansCount++;\n            return;\n        }\n        if (this._droppedSpansCount > 0) {\n            // some spans were dropped, log once with count of spans dropped\n            diag.warn(\"Dropped \" + this._droppedSpansCount + \" spans because maxQueueSize reached\");\n            this._droppedSpansCount = 0;\n        }\n        this._finishedSpans.push(span);\n        this._maybeStartTimer();\n    };\n    /**\n     * Send all spans to the exporter respecting the batch size limit\n     * This function is used only on forceFlush or shutdown,\n     * for all other cases _flush should be used\n     * */\n    BatchSpanProcessorBase.prototype._flushAll = function () {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            var promises = [];\n            // calculate number of batches\n            var count = Math.ceil(_this._finishedSpans.length / _this._maxExportBatchSize);\n            for (var i = 0, j = count; i < j; i++) {\n                promises.push(_this._flushOneBatch());\n            }\n            Promise.all(promises)\n                .then(function () {\n                resolve();\n            })\n                .catch(reject);\n        });\n    };\n    BatchSpanProcessorBase.prototype._flushOneBatch = function () {\n        var _this = this;\n        this._clearTimer();\n        if (this._finishedSpans.length === 0) {\n            return Promise.resolve();\n        }\n        return new Promise(function (resolve, reject) {\n            var timer = setTimeout(function () {\n                // don't wait anymore for export, this way the next batch can start\n                reject(new Error('Timeout'));\n            }, _this._exportTimeoutMillis);\n            // prevent downstream exporter calls from generating spans\n            context.with(suppressTracing(context.active()), function () {\n                // Reset the finished spans buffer here because the next invocations of the _flush method\n                // could pass the same finished spans to the exporter if the buffer is cleared\n                // outside the execution of this callback.\n                var spans;\n                if (_this._finishedSpans.length <= _this._maxExportBatchSize) {\n                    spans = _this._finishedSpans;\n                    _this._finishedSpans = [];\n                }\n                else {\n                    spans = _this._finishedSpans.splice(0, _this._maxExportBatchSize);\n                }\n                var doExport = function () {\n                    return _this._exporter.export(spans, function (result) {\n                        var _a;\n                        clearTimeout(timer);\n                        if (result.code === ExportResultCode.SUCCESS) {\n                            resolve();\n                        }\n                        else {\n                            reject((_a = result.error) !== null && _a !== void 0 ? _a : new Error('BatchSpanProcessor: span export failed'));\n                        }\n                    });\n                };\n                var pendingResources = null;\n                for (var i = 0, len = spans.length; i < len; i++) {\n                    var span = spans[i];\n                    if (span.resource.asyncAttributesPending &&\n                        span.resource.waitForAsyncAttributes) {\n                        pendingResources !== null && pendingResources !== void 0 ? pendingResources : (pendingResources = []);\n                        pendingResources.push(span.resource.waitForAsyncAttributes());\n                    }\n                }\n                // Avoid scheduling a promise to make the behavior more predictable and easier to test\n                if (pendingResources === null) {\n                    doExport();\n                }\n                else {\n                    Promise.all(pendingResources).then(doExport, function (err) {\n                        globalErrorHandler(err);\n                        reject(err);\n                    });\n                }\n            });\n        });\n    };\n    BatchSpanProcessorBase.prototype._maybeStartTimer = function () {\n        var _this = this;\n        if (this._isExporting)\n            return;\n        var flush = function () {\n            _this._isExporting = true;\n            _this._flushOneBatch()\n                .finally(function () {\n                _this._isExporting = false;\n                if (_this._finishedSpans.length > 0) {\n                    _this._clearTimer();\n                    _this._maybeStartTimer();\n                }\n            })\n                .catch(function (e) {\n                _this._isExporting = false;\n                globalErrorHandler(e);\n            });\n        };\n        // we only wait if the queue doesn't have enough elements yet\n        if (this._finishedSpans.length >= this._maxExportBatchSize) {\n            return flush();\n        }\n        if (this._timer !== undefined)\n            return;\n        this._timer = setTimeout(function () { return flush(); }, this._scheduledDelayMillis);\n        unrefTimer(this._timer);\n    };\n    BatchSpanProcessorBase.prototype._clearTimer = function () {\n        if (this._timer !== undefined) {\n            clearTimeout(this._timer);\n            this._timer = undefined;\n        }\n    };\n    return BatchSpanProcessorBase;\n}());\nexport { BatchSpanProcessorBase };\n//# sourceMappingURL=BatchSpanProcessorBase.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { BatchSpanProcessorBase } from '../../../export/BatchSpanProcessorBase';\nvar BatchSpanProcessor = /** @class */ (function (_super) {\n    __extends(BatchSpanProcessor, _super);\n    function BatchSpanProcessor() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    BatchSpanProcessor.prototype.onShutdown = function () { };\n    return BatchSpanProcessor;\n}(BatchSpanProcessorBase));\nexport { BatchSpanProcessor };\n//# sourceMappingURL=BatchSpanProcessor.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as api from '@opentelemetry/api';\nimport { sanitizeAttributes, isTracingSuppressed, } from '@opentelemetry/core';\nimport { Span } from './Span';\nimport { mergeConfig } from './utility';\nimport { RandomIdGenerator } from './platform';\n/**\n * This class represents a basic tracer.\n */\nvar Tracer = /** @class */ (function () {\n    /**\n     * Constructs a new Tracer instance.\n     */\n    function Tracer(instrumentationLibrary, config, _tracerProvider) {\n        this._tracerProvider = _tracerProvider;\n        var localConfig = mergeConfig(config);\n        this._sampler = localConfig.sampler;\n        this._generalLimits = localConfig.generalLimits;\n        this._spanLimits = localConfig.spanLimits;\n        this._idGenerator = config.idGenerator || new RandomIdGenerator();\n        this.resource = _tracerProvider.resource;\n        this.instrumentationLibrary = instrumentationLibrary;\n    }\n    /**\n     * Starts a new Span or returns the default NoopSpan based on the sampling\n     * decision.\n     */\n    Tracer.prototype.startSpan = function (name, options, context) {\n        var _a, _b, _c;\n        if (options === void 0) { options = {}; }\n        if (context === void 0) { context = api.context.active(); }\n        // remove span from context in case a root span is requested via options\n        if (options.root) {\n            context = api.trace.deleteSpan(context);\n        }\n        var parentSpan = api.trace.getSpan(context);\n        if (isTracingSuppressed(context)) {\n            api.diag.debug('Instrumentation suppressed, returning Noop Span');\n            var nonRecordingSpan = api.trace.wrapSpanContext(api.INVALID_SPAN_CONTEXT);\n            return nonRecordingSpan;\n        }\n        var parentSpanContext = parentSpan === null || parentSpan === void 0 ? void 0 : parentSpan.spanContext();\n        var spanId = this._idGenerator.generateSpanId();\n        var traceId;\n        var traceState;\n        var parentSpanId;\n        if (!parentSpanContext ||\n            !api.trace.isSpanContextValid(parentSpanContext)) {\n            // New root span.\n            traceId = this._idGenerator.generateTraceId();\n        }\n        else {\n            // New child span.\n            traceId = parentSpanContext.traceId;\n            traceState = parentSpanContext.traceState;\n            parentSpanId = parentSpanContext.spanId;\n        }\n        var spanKind = (_a = options.kind) !== null && _a !== void 0 ? _a : api.SpanKind.INTERNAL;\n        var links = ((_b = options.links) !== null && _b !== void 0 ? _b : []).map(function (link) {\n            return {\n                context: link.context,\n                attributes: sanitizeAttributes(link.attributes),\n            };\n        });\n        var attributes = sanitizeAttributes(options.attributes);\n        // make sampling decision\n        var samplingResult = this._sampler.shouldSample(context, traceId, name, spanKind, attributes, links);\n        traceState = (_c = samplingResult.traceState) !== null && _c !== void 0 ? _c : traceState;\n        var traceFlags = samplingResult.decision === api.SamplingDecision.RECORD_AND_SAMPLED\n            ? api.TraceFlags.SAMPLED\n            : api.TraceFlags.NONE;\n        var spanContext = { traceId: traceId, spanId: spanId, traceFlags: traceFlags, traceState: traceState };\n        if (samplingResult.decision === api.SamplingDecision.NOT_RECORD) {\n            api.diag.debug('Recording is off, propagating context in a non-recording span');\n            var nonRecordingSpan = api.trace.wrapSpanContext(spanContext);\n            return nonRecordingSpan;\n        }\n        // Set initial span attributes. The attributes object may have been mutated\n        // by the sampler, so we sanitize the merged attributes before setting them.\n        var initAttributes = sanitizeAttributes(Object.assign(attributes, samplingResult.attributes));\n        var span = new Span(this, context, name, spanContext, spanKind, parentSpanId, links, options.startTime, undefined, initAttributes);\n        return span;\n    };\n    Tracer.prototype.startActiveSpan = function (name, arg2, arg3, arg4) {\n        var opts;\n        var ctx;\n        var fn;\n        if (arguments.length < 2) {\n            return;\n        }\n        else if (arguments.length === 2) {\n            fn = arg2;\n        }\n        else if (arguments.length === 3) {\n            opts = arg2;\n            fn = arg3;\n        }\n        else {\n            opts = arg2;\n            ctx = arg3;\n            fn = arg4;\n        }\n        var parentContext = ctx !== null && ctx !== void 0 ? ctx : api.context.active();\n        var span = this.startSpan(name, opts, parentContext);\n        var contextWithSpanSet = api.trace.setSpan(parentContext, span);\n        return api.context.with(contextWithSpanSet, fn, undefined, span);\n    };\n    /** Returns the active {@link GeneralLimits}. */\n    Tracer.prototype.getGeneralLimits = function () {\n        return this._generalLimits;\n    };\n    /** Returns the active {@link SpanLimits}. */\n    Tracer.prototype.getSpanLimits = function () {\n        return this._spanLimits;\n    };\n    Tracer.prototype.getActiveSpanProcessor = function () {\n        return this._tracerProvider.getActiveSpanProcessor();\n    };\n    return Tracer;\n}());\nexport { Tracer };\n//# sourceMappingURL=Tracer.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nimport { globalErrorHandler } from '@opentelemetry/core';\n/**\n * Implementation of the {@link SpanProcessor} that simply forwards all\n * received events to a list of {@link SpanProcessor}s.\n */\nvar MultiSpanProcessor = /** @class */ (function () {\n    function MultiSpanProcessor(_spanProcessors) {\n        this._spanProcessors = _spanProcessors;\n    }\n    MultiSpanProcessor.prototype.forceFlush = function () {\n        var e_1, _a;\n        var promises = [];\n        try {\n            for (var _b = __values(this._spanProcessors), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var spanProcessor = _c.value;\n                promises.push(spanProcessor.forceFlush());\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        return new Promise(function (resolve) {\n            Promise.all(promises)\n                .then(function () {\n                resolve();\n            })\n                .catch(function (error) {\n                globalErrorHandler(error || new Error('MultiSpanProcessor: forceFlush failed'));\n                resolve();\n            });\n        });\n    };\n    MultiSpanProcessor.prototype.onStart = function (span, context) {\n        var e_2, _a;\n        try {\n            for (var _b = __values(this._spanProcessors), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var spanProcessor = _c.value;\n                spanProcessor.onStart(span, context);\n            }\n        }\n        catch (e_2_1) { e_2 = { error: e_2_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_2) throw e_2.error; }\n        }\n    };\n    MultiSpanProcessor.prototype.onEnd = function (span) {\n        var e_3, _a;\n        try {\n            for (var _b = __values(this._spanProcessors), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var spanProcessor = _c.value;\n                spanProcessor.onEnd(span);\n            }\n        }\n        catch (e_3_1) { e_3 = { error: e_3_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_3) throw e_3.error; }\n        }\n    };\n    MultiSpanProcessor.prototype.shutdown = function () {\n        var e_4, _a;\n        var promises = [];\n        try {\n            for (var _b = __values(this._spanProcessors), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var spanProcessor = _c.value;\n                promises.push(spanProcessor.shutdown());\n            }\n        }\n        catch (e_4_1) { e_4 = { error: e_4_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_4) throw e_4.error; }\n        }\n        return new Promise(function (resolve, reject) {\n            Promise.all(promises).then(function () {\n                resolve();\n            }, reject);\n        });\n    };\n    return MultiSpanProcessor;\n}());\nexport { MultiSpanProcessor };\n//# sourceMappingURL=MultiSpanProcessor.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** No-op implementation of SpanProcessor */\nvar NoopSpanProcessor = /** @class */ (function () {\n    function NoopSpanProcessor() {\n    }\n    NoopSpanProcessor.prototype.onStart = function (_span, _context) { };\n    NoopSpanProcessor.prototype.onEnd = function (_span) { };\n    NoopSpanProcessor.prototype.shutdown = function () {\n        return Promise.resolve();\n    };\n    NoopSpanProcessor.prototype.forceFlush = function () {\n        return Promise.resolve();\n    };\n    return NoopSpanProcessor;\n}());\nexport { NoopSpanProcessor };\n//# sourceMappingURL=NoopSpanProcessor.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport { context, diag, propagation, trace, } from '@opentelemetry/api';\nimport { CompositePropagator, W3CBaggagePropagator, W3CTraceContextPropagator, getEnv, merge, } from '@opentelemetry/core';\nimport { Resource } from '@opentelemetry/resources';\nimport { Tracer } from './Tracer';\nimport { loadDefaultConfig } from './config';\nimport { MultiSpanProcessor } from './MultiSpanProcessor';\nimport { NoopSpanProcessor } from './export/NoopSpanProcessor';\nimport { BatchSpanProcessor } from './platform';\nimport { reconfigureLimits } from './utility';\nexport var ForceFlushState;\n(function (ForceFlushState) {\n    ForceFlushState[ForceFlushState[\"resolved\"] = 0] = \"resolved\";\n    ForceFlushState[ForceFlushState[\"timeout\"] = 1] = \"timeout\";\n    ForceFlushState[ForceFlushState[\"error\"] = 2] = \"error\";\n    ForceFlushState[ForceFlushState[\"unresolved\"] = 3] = \"unresolved\";\n})(ForceFlushState || (ForceFlushState = {}));\n/**\n * This class represents a basic tracer provider which platform libraries can extend\n */\nvar BasicTracerProvider = /** @class */ (function () {\n    function BasicTracerProvider(config) {\n        if (config === void 0) { config = {}; }\n        var _a, _b;\n        this._registeredSpanProcessors = [];\n        this._tracers = new Map();\n        var mergedConfig = merge({}, loadDefaultConfig(), reconfigureLimits(config));\n        this.resource = (_a = mergedConfig.resource) !== null && _a !== void 0 ? _a : Resource.empty();\n        if (mergedConfig.mergeResourceWithDefaults) {\n            this.resource = Resource.default().merge(this.resource);\n        }\n        this._config = Object.assign({}, mergedConfig, {\n            resource: this.resource,\n        });\n        if ((_b = config.spanProcessors) === null || _b === void 0 ? void 0 : _b.length) {\n            this._registeredSpanProcessors = __spreadArray([], __read(config.spanProcessors), false);\n            this.activeSpanProcessor = new MultiSpanProcessor(this._registeredSpanProcessors);\n        }\n        else {\n            var defaultExporter = this._buildExporterFromEnv();\n            if (defaultExporter !== undefined) {\n                var batchProcessor = new BatchSpanProcessor(defaultExporter);\n                this.activeSpanProcessor = batchProcessor;\n            }\n            else {\n                this.activeSpanProcessor = new NoopSpanProcessor();\n            }\n        }\n    }\n    BasicTracerProvider.prototype.getTracer = function (name, version, options) {\n        var key = name + \"@\" + (version || '') + \":\" + ((options === null || options === void 0 ? void 0 : options.schemaUrl) || '');\n        if (!this._tracers.has(key)) {\n            this._tracers.set(key, new Tracer({ name: name, version: version, schemaUrl: options === null || options === void 0 ? void 0 : options.schemaUrl }, this._config, this));\n        }\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        return this._tracers.get(key);\n    };\n    /**\n     * @deprecated please use {@link TracerConfig} spanProcessors property\n     * Adds a new {@link SpanProcessor} to this tracer.\n     * @param spanProcessor the new SpanProcessor to be added.\n     */\n    BasicTracerProvider.prototype.addSpanProcessor = function (spanProcessor) {\n        if (this._registeredSpanProcessors.length === 0) {\n            // since we might have enabled by default a batchProcessor, we disable it\n            // before adding the new one\n            this.activeSpanProcessor\n                .shutdown()\n                .catch(function (err) {\n                return diag.error('Error while trying to shutdown current span processor', err);\n            });\n        }\n        this._registeredSpanProcessors.push(spanProcessor);\n        this.activeSpanProcessor = new MultiSpanProcessor(this._registeredSpanProcessors);\n    };\n    BasicTracerProvider.prototype.getActiveSpanProcessor = function () {\n        return this.activeSpanProcessor;\n    };\n    /**\n     * Register this TracerProvider for use with the OpenTelemetry API.\n     * Undefined values may be replaced with defaults, and\n     * null values will be skipped.\n     *\n     * @param config Configuration object for SDK registration\n     */\n    BasicTracerProvider.prototype.register = function (config) {\n        if (config === void 0) { config = {}; }\n        trace.setGlobalTracerProvider(this);\n        if (config.propagator === undefined) {\n            config.propagator = this._buildPropagatorFromEnv();\n        }\n        if (config.contextManager) {\n            context.setGlobalContextManager(config.contextManager);\n        }\n        if (config.propagator) {\n            propagation.setGlobalPropagator(config.propagator);\n        }\n    };\n    BasicTracerProvider.prototype.forceFlush = function () {\n        var timeout = this._config.forceFlushTimeoutMillis;\n        var promises = this._registeredSpanProcessors.map(function (spanProcessor) {\n            return new Promise(function (resolve) {\n                var state;\n                var timeoutInterval = setTimeout(function () {\n                    resolve(new Error(\"Span processor did not completed within timeout period of \" + timeout + \" ms\"));\n                    state = ForceFlushState.timeout;\n                }, timeout);\n                spanProcessor\n                    .forceFlush()\n                    .then(function () {\n                    clearTimeout(timeoutInterval);\n                    if (state !== ForceFlushState.timeout) {\n                        state = ForceFlushState.resolved;\n                        resolve(state);\n                    }\n                })\n                    .catch(function (error) {\n                    clearTimeout(timeoutInterval);\n                    state = ForceFlushState.error;\n                    resolve(error);\n                });\n            });\n        });\n        return new Promise(function (resolve, reject) {\n            Promise.all(promises)\n                .then(function (results) {\n                var errors = results.filter(function (result) { return result !== ForceFlushState.resolved; });\n                if (errors.length > 0) {\n                    reject(errors);\n                }\n                else {\n                    resolve();\n                }\n            })\n                .catch(function (error) { return reject([error]); });\n        });\n    };\n    BasicTracerProvider.prototype.shutdown = function () {\n        return this.activeSpanProcessor.shutdown();\n    };\n    /**\n     * TS cannot yet infer the type of this.constructor:\n     * https://github.com/Microsoft/TypeScript/issues/3841#issuecomment-337560146\n     * There is no need to override either of the getters in your child class.\n     * The type of the registered component maps should be the same across all\n     * classes in the inheritance tree.\n     */\n    BasicTracerProvider.prototype._getPropagator = function (name) {\n        var _a;\n        return (_a = this.constructor._registeredPropagators.get(name)) === null || _a === void 0 ? void 0 : _a();\n    };\n    BasicTracerProvider.prototype._getSpanExporter = function (name) {\n        var _a;\n        return (_a = this.constructor._registeredExporters.get(name)) === null || _a === void 0 ? void 0 : _a();\n    };\n    BasicTracerProvider.prototype._buildPropagatorFromEnv = function () {\n        var _this = this;\n        // per spec, propagators from env must be deduplicated\n        var uniquePropagatorNames = Array.from(new Set(getEnv().OTEL_PROPAGATORS));\n        var propagators = uniquePropagatorNames.map(function (name) {\n            var propagator = _this._getPropagator(name);\n            if (!propagator) {\n                diag.warn(\"Propagator \\\"\" + name + \"\\\" requested through environment variable is unavailable.\");\n            }\n            return propagator;\n        });\n        var validPropagators = propagators.reduce(function (list, item) {\n            if (item) {\n                list.push(item);\n            }\n            return list;\n        }, []);\n        if (validPropagators.length === 0) {\n            return;\n        }\n        else if (uniquePropagatorNames.length === 1) {\n            return validPropagators[0];\n        }\n        else {\n            return new CompositePropagator({\n                propagators: validPropagators,\n            });\n        }\n    };\n    BasicTracerProvider.prototype._buildExporterFromEnv = function () {\n        var exporterName = getEnv().OTEL_TRACES_EXPORTER;\n        if (exporterName === 'none' || exporterName === '')\n            return;\n        var exporter = this._getSpanExporter(exporterName);\n        if (!exporter) {\n            diag.error(\"Exporter \\\"\" + exporterName + \"\\\" requested through environment variable is unavailable.\");\n        }\n        return exporter;\n    };\n    BasicTracerProvider._registeredPropagators = new Map([\n        ['tracecontext', function () { return new W3CTraceContextPropagator(); }],\n        ['baggage', function () { return new W3CBaggagePropagator(); }],\n    ]);\n    BasicTracerProvider._registeredExporters = new Map();\n    return BasicTracerProvider;\n}());\nexport { BasicTracerProvider };\n//# sourceMappingURL=BasicTracerProvider.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { createConstMap } from '../internal/utils';\n//----------------------------------------------------------------------------------------------------------\n// DO NOT EDIT, this is an Auto-generated file from scripts/semconv/templates//templates/SemanticAttributes.ts.j2\n//----------------------------------------------------------------------------------------------------------\n//----------------------------------------------------------------------------------------------------------\n// Constant values for SemanticAttributes\n//----------------------------------------------------------------------------------------------------------\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_AWS_LAMBDA_INVOKED_ARN = 'aws.lambda.invoked_arn';\nconst TMP_DB_SYSTEM = 'db.system';\nconst TMP_DB_CONNECTION_STRING = 'db.connection_string';\nconst TMP_DB_USER = 'db.user';\nconst TMP_DB_JDBC_DRIVER_CLASSNAME = 'db.jdbc.driver_classname';\nconst TMP_DB_NAME = 'db.name';\nconst TMP_DB_STATEMENT = 'db.statement';\nconst TMP_DB_OPERATION = 'db.operation';\nconst TMP_DB_MSSQL_INSTANCE_NAME = 'db.mssql.instance_name';\nconst TMP_DB_CASSANDRA_KEYSPACE = 'db.cassandra.keyspace';\nconst TMP_DB_CASSANDRA_PAGE_SIZE = 'db.cassandra.page_size';\nconst TMP_DB_CASSANDRA_CONSISTENCY_LEVEL = 'db.cassandra.consistency_level';\nconst TMP_DB_CASSANDRA_TABLE = 'db.cassandra.table';\nconst TMP_DB_CASSANDRA_IDEMPOTENCE = 'db.cassandra.idempotence';\nconst TMP_DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT = 'db.cassandra.speculative_execution_count';\nconst TMP_DB_CASSANDRA_COORDINATOR_ID = 'db.cassandra.coordinator.id';\nconst TMP_DB_CASSANDRA_COORDINATOR_DC = 'db.cassandra.coordinator.dc';\nconst TMP_DB_HBASE_NAMESPACE = 'db.hbase.namespace';\nconst TMP_DB_REDIS_DATABASE_INDEX = 'db.redis.database_index';\nconst TMP_DB_MONGODB_COLLECTION = 'db.mongodb.collection';\nconst TMP_DB_SQL_TABLE = 'db.sql.table';\nconst TMP_EXCEPTION_TYPE = 'exception.type';\nconst TMP_EXCEPTION_MESSAGE = 'exception.message';\nconst TMP_EXCEPTION_STACKTRACE = 'exception.stacktrace';\nconst TMP_EXCEPTION_ESCAPED = 'exception.escaped';\nconst TMP_FAAS_TRIGGER = 'faas.trigger';\nconst TMP_FAAS_EXECUTION = 'faas.execution';\nconst TMP_FAAS_DOCUMENT_COLLECTION = 'faas.document.collection';\nconst TMP_FAAS_DOCUMENT_OPERATION = 'faas.document.operation';\nconst TMP_FAAS_DOCUMENT_TIME = 'faas.document.time';\nconst TMP_FAAS_DOCUMENT_NAME = 'faas.document.name';\nconst TMP_FAAS_TIME = 'faas.time';\nconst TMP_FAAS_CRON = 'faas.cron';\nconst TMP_FAAS_COLDSTART = 'faas.coldstart';\nconst TMP_FAAS_INVOKED_NAME = 'faas.invoked_name';\nconst TMP_FAAS_INVOKED_PROVIDER = 'faas.invoked_provider';\nconst TMP_FAAS_INVOKED_REGION = 'faas.invoked_region';\nconst TMP_NET_TRANSPORT = 'net.transport';\nconst TMP_NET_PEER_IP = 'net.peer.ip';\nconst TMP_NET_PEER_PORT = 'net.peer.port';\nconst TMP_NET_PEER_NAME = 'net.peer.name';\nconst TMP_NET_HOST_IP = 'net.host.ip';\nconst TMP_NET_HOST_PORT = 'net.host.port';\nconst TMP_NET_HOST_NAME = 'net.host.name';\nconst TMP_NET_HOST_CONNECTION_TYPE = 'net.host.connection.type';\nconst TMP_NET_HOST_CONNECTION_SUBTYPE = 'net.host.connection.subtype';\nconst TMP_NET_HOST_CARRIER_NAME = 'net.host.carrier.name';\nconst TMP_NET_HOST_CARRIER_MCC = 'net.host.carrier.mcc';\nconst TMP_NET_HOST_CARRIER_MNC = 'net.host.carrier.mnc';\nconst TMP_NET_HOST_CARRIER_ICC = 'net.host.carrier.icc';\nconst TMP_PEER_SERVICE = 'peer.service';\nconst TMP_ENDUSER_ID = 'enduser.id';\nconst TMP_ENDUSER_ROLE = 'enduser.role';\nconst TMP_ENDUSER_SCOPE = 'enduser.scope';\nconst TMP_THREAD_ID = 'thread.id';\nconst TMP_THREAD_NAME = 'thread.name';\nconst TMP_CODE_FUNCTION = 'code.function';\nconst TMP_CODE_NAMESPACE = 'code.namespace';\nconst TMP_CODE_FILEPATH = 'code.filepath';\nconst TMP_CODE_LINENO = 'code.lineno';\nconst TMP_HTTP_METHOD = 'http.method';\nconst TMP_HTTP_URL = 'http.url';\nconst TMP_HTTP_TARGET = 'http.target';\nconst TMP_HTTP_HOST = 'http.host';\nconst TMP_HTTP_SCHEME = 'http.scheme';\nconst TMP_HTTP_STATUS_CODE = 'http.status_code';\nconst TMP_HTTP_FLAVOR = 'http.flavor';\nconst TMP_HTTP_USER_AGENT = 'http.user_agent';\nconst TMP_HTTP_REQUEST_CONTENT_LENGTH = 'http.request_content_length';\nconst TMP_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED = 'http.request_content_length_uncompressed';\nconst TMP_HTTP_RESPONSE_CONTENT_LENGTH = 'http.response_content_length';\nconst TMP_HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED = 'http.response_content_length_uncompressed';\nconst TMP_HTTP_SERVER_NAME = 'http.server_name';\nconst TMP_HTTP_ROUTE = 'http.route';\nconst TMP_HTTP_CLIENT_IP = 'http.client_ip';\nconst TMP_AWS_DYNAMODB_TABLE_NAMES = 'aws.dynamodb.table_names';\nconst TMP_AWS_DYNAMODB_CONSUMED_CAPACITY = 'aws.dynamodb.consumed_capacity';\nconst TMP_AWS_DYNAMODB_ITEM_COLLECTION_METRICS = 'aws.dynamodb.item_collection_metrics';\nconst TMP_AWS_DYNAMODB_PROVISIONED_READ_CAPACITY = 'aws.dynamodb.provisioned_read_capacity';\nconst TMP_AWS_DYNAMODB_PROVISIONED_WRITE_CAPACITY = 'aws.dynamodb.provisioned_write_capacity';\nconst TMP_AWS_DYNAMODB_CONSISTENT_READ = 'aws.dynamodb.consistent_read';\nconst TMP_AWS_DYNAMODB_PROJECTION = 'aws.dynamodb.projection';\nconst TMP_AWS_DYNAMODB_LIMIT = 'aws.dynamodb.limit';\nconst TMP_AWS_DYNAMODB_ATTRIBUTES_TO_GET = 'aws.dynamodb.attributes_to_get';\nconst TMP_AWS_DYNAMODB_INDEX_NAME = 'aws.dynamodb.index_name';\nconst TMP_AWS_DYNAMODB_SELECT = 'aws.dynamodb.select';\nconst TMP_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEXES = 'aws.dynamodb.global_secondary_indexes';\nconst TMP_AWS_DYNAMODB_LOCAL_SECONDARY_INDEXES = 'aws.dynamodb.local_secondary_indexes';\nconst TMP_AWS_DYNAMODB_EXCLUSIVE_START_TABLE = 'aws.dynamodb.exclusive_start_table';\nconst TMP_AWS_DYNAMODB_TABLE_COUNT = 'aws.dynamodb.table_count';\nconst TMP_AWS_DYNAMODB_SCAN_FORWARD = 'aws.dynamodb.scan_forward';\nconst TMP_AWS_DYNAMODB_SEGMENT = 'aws.dynamodb.segment';\nconst TMP_AWS_DYNAMODB_TOTAL_SEGMENTS = 'aws.dynamodb.total_segments';\nconst TMP_AWS_DYNAMODB_COUNT = 'aws.dynamodb.count';\nconst TMP_AWS_DYNAMODB_SCANNED_COUNT = 'aws.dynamodb.scanned_count';\nconst TMP_AWS_DYNAMODB_ATTRIBUTE_DEFINITIONS = 'aws.dynamodb.attribute_definitions';\nconst TMP_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEX_UPDATES = 'aws.dynamodb.global_secondary_index_updates';\nconst TMP_MESSAGING_SYSTEM = 'messaging.system';\nconst TMP_MESSAGING_DESTINATION = 'messaging.destination';\nconst TMP_MESSAGING_DESTINATION_KIND = 'messaging.destination_kind';\nconst TMP_MESSAGING_TEMP_DESTINATION = 'messaging.temp_destination';\nconst TMP_MESSAGING_PROTOCOL = 'messaging.protocol';\nconst TMP_MESSAGING_PROTOCOL_VERSION = 'messaging.protocol_version';\nconst TMP_MESSAGING_URL = 'messaging.url';\nconst TMP_MESSAGING_MESSAGE_ID = 'messaging.message_id';\nconst TMP_MESSAGING_CONVERSATION_ID = 'messaging.conversation_id';\nconst TMP_MESSAGING_MESSAGE_PAYLOAD_SIZE_BYTES = 'messaging.message_payload_size_bytes';\nconst TMP_MESSAGING_MESSAGE_PAYLOAD_COMPRESSED_SIZE_BYTES = 'messaging.message_payload_compressed_size_bytes';\nconst TMP_MESSAGING_OPERATION = 'messaging.operation';\nconst TMP_MESSAGING_CONSUMER_ID = 'messaging.consumer_id';\nconst TMP_MESSAGING_RABBITMQ_ROUTING_KEY = 'messaging.rabbitmq.routing_key';\nconst TMP_MESSAGING_KAFKA_MESSAGE_KEY = 'messaging.kafka.message_key';\nconst TMP_MESSAGING_KAFKA_CONSUMER_GROUP = 'messaging.kafka.consumer_group';\nconst TMP_MESSAGING_KAFKA_CLIENT_ID = 'messaging.kafka.client_id';\nconst TMP_MESSAGING_KAFKA_PARTITION = 'messaging.kafka.partition';\nconst TMP_MESSAGING_KAFKA_TOMBSTONE = 'messaging.kafka.tombstone';\nconst TMP_RPC_SYSTEM = 'rpc.system';\nconst TMP_RPC_SERVICE = 'rpc.service';\nconst TMP_RPC_METHOD = 'rpc.method';\nconst TMP_RPC_GRPC_STATUS_CODE = 'rpc.grpc.status_code';\nconst TMP_RPC_JSONRPC_VERSION = 'rpc.jsonrpc.version';\nconst TMP_RPC_JSONRPC_REQUEST_ID = 'rpc.jsonrpc.request_id';\nconst TMP_RPC_JSONRPC_ERROR_CODE = 'rpc.jsonrpc.error_code';\nconst TMP_RPC_JSONRPC_ERROR_MESSAGE = 'rpc.jsonrpc.error_message';\nconst TMP_MESSAGE_TYPE = 'message.type';\nconst TMP_MESSAGE_ID = 'message.id';\nconst TMP_MESSAGE_COMPRESSED_SIZE = 'message.compressed_size';\nconst TMP_MESSAGE_UNCOMPRESSED_SIZE = 'message.uncompressed_size';\n/**\n * The full invoked ARN as provided on the `Context` passed to the function (`Lambda-Runtime-Invoked-Function-Arn` header on the `/runtime/invocation/next` applicable).\n *\n * Note: This may be different from `faas.id` if an alias is involved.\n *\n * @deprecated Use ATTR_AWS_LAMBDA_INVOKED_ARN in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_AWS_LAMBDA_INVOKED_ARN = TMP_AWS_LAMBDA_INVOKED_ARN;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use ATTR_DB_SYSTEM in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_DB_SYSTEM = TMP_DB_SYSTEM;\n/**\n * The connection string used to connect to the database. It is recommended to remove embedded credentials.\n *\n * @deprecated Use ATTR_DB_CONNECTION_STRING in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_DB_CONNECTION_STRING = TMP_DB_CONNECTION_STRING;\n/**\n * Username for accessing the database.\n *\n * @deprecated Use ATTR_DB_USER in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_DB_USER = TMP_DB_USER;\n/**\n * The fully-qualified class name of the [Java Database Connectivity (JDBC)](https://docs.oracle.com/javase/8/docs/technotes/guides/jdbc/) driver used to connect.\n *\n * @deprecated Use ATTR_DB_JDBC_DRIVER_CLASSNAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_DB_JDBC_DRIVER_CLASSNAME = TMP_DB_JDBC_DRIVER_CLASSNAME;\n/**\n * If no [tech-specific attribute](#call-level-attributes-for-specific-technologies) is defined, this attribute is used to report the name of the database being accessed. For commands that switch the database, this should be set to the target database (even if the command fails).\n *\n * Note: In some SQL databases, the database name to be used is called &#34;schema name&#34;.\n *\n * @deprecated Use ATTR_DB_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_DB_NAME = TMP_DB_NAME;\n/**\n * The database statement being executed.\n *\n * Note: The value may be sanitized to exclude sensitive information.\n *\n * @deprecated Use ATTR_DB_STATEMENT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_DB_STATEMENT = TMP_DB_STATEMENT;\n/**\n * The name of the operation being executed, e.g. the [MongoDB command name](https://docs.mongodb.com/manual/reference/command/#database-operations) such as `findAndModify`, or the SQL keyword.\n *\n * Note: When setting this to an SQL keyword, it is not recommended to attempt any client-side parsing of `db.statement` just to get this property, but it should be set if the operation name is provided by the library being instrumented. If the SQL statement has an ambiguous operation, or performs more than one operation, this value may be omitted.\n *\n * @deprecated Use ATTR_DB_OPERATION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_DB_OPERATION = TMP_DB_OPERATION;\n/**\n * The Microsoft SQL Server [instance name](https://docs.microsoft.com/en-us/sql/connect/jdbc/building-the-connection-url?view=sql-server-ver15) connecting to. This name is used to determine the port of a named instance.\n *\n * Note: If setting a `db.mssql.instance_name`, `net.peer.port` is no longer required (but still recommended if non-standard).\n *\n * @deprecated Use ATTR_DB_MSSQL_INSTANCE_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_DB_MSSQL_INSTANCE_NAME = TMP_DB_MSSQL_INSTANCE_NAME;\n/**\n * The name of the keyspace being accessed. To be used instead of the generic `db.name` attribute.\n *\n * @deprecated Use ATTR_DB_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_DB_CASSANDRA_KEYSPACE = TMP_DB_CASSANDRA_KEYSPACE;\n/**\n * The fetch size used for paging, i.e. how many rows will be returned at once.\n *\n * @deprecated Use ATTR_DB_CASSANDRA_PAGE_SIZE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_DB_CASSANDRA_PAGE_SIZE = TMP_DB_CASSANDRA_PAGE_SIZE;\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n *\n * @deprecated Use ATTR_DB_CASSANDRA_CONSISTENCY_LEVEL in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_DB_CASSANDRA_CONSISTENCY_LEVEL = TMP_DB_CASSANDRA_CONSISTENCY_LEVEL;\n/**\n * The name of the primary table that the operation is acting upon, including the schema name (if applicable).\n *\n * Note: This mirrors the db.sql.table attribute but references cassandra rather than sql. It is not recommended to attempt any client-side parsing of `db.statement` just to get this property, but it should be set if it is provided by the library being instrumented. If the operation is acting upon an anonymous table, or more than one table, this value MUST NOT be set.\n *\n * @deprecated Use ATTR_DB_CASSANDRA_TABLE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_DB_CASSANDRA_TABLE = TMP_DB_CASSANDRA_TABLE;\n/**\n * Whether or not the query is idempotent.\n *\n * @deprecated Use ATTR_DB_CASSANDRA_IDEMPOTENCE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_DB_CASSANDRA_IDEMPOTENCE = TMP_DB_CASSANDRA_IDEMPOTENCE;\n/**\n * The number of times a query was speculatively executed. Not set or `0` if the query was not executed speculatively.\n *\n * @deprecated Use ATTR_DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT = TMP_DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT;\n/**\n * The ID of the coordinating node for a query.\n *\n * @deprecated Use ATTR_DB_CASSANDRA_COORDINATOR_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_DB_CASSANDRA_COORDINATOR_ID = TMP_DB_CASSANDRA_COORDINATOR_ID;\n/**\n * The data center of the coordinating node for a query.\n *\n * @deprecated Use ATTR_DB_CASSANDRA_COORDINATOR_DC in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_DB_CASSANDRA_COORDINATOR_DC = TMP_DB_CASSANDRA_COORDINATOR_DC;\n/**\n * The [HBase namespace](https://hbase.apache.org/book.html#_namespace) being accessed. To be used instead of the generic `db.name` attribute.\n *\n * @deprecated Use ATTR_DB_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_DB_HBASE_NAMESPACE = TMP_DB_HBASE_NAMESPACE;\n/**\n * The index of the database being accessed as used in the [`SELECT` command](https://redis.io/commands/select), provided as an integer. To be used instead of the generic `db.name` attribute.\n *\n * @deprecated Use ATTR_DB_REDIS_DATABASE_INDEX in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_DB_REDIS_DATABASE_INDEX = TMP_DB_REDIS_DATABASE_INDEX;\n/**\n * The collection being accessed within the database stated in `db.name`.\n *\n * @deprecated Use ATTR_DB_MONGODB_COLLECTION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_DB_MONGODB_COLLECTION = TMP_DB_MONGODB_COLLECTION;\n/**\n * The name of the primary table that the operation is acting upon, including the schema name (if applicable).\n *\n * Note: It is not recommended to attempt any client-side parsing of `db.statement` just to get this property, but it should be set if it is provided by the library being instrumented. If the operation is acting upon an anonymous table, or more than one table, this value MUST NOT be set.\n *\n * @deprecated Use ATTR_DB_SQL_TABLE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_DB_SQL_TABLE = TMP_DB_SQL_TABLE;\n/**\n * The type of the exception (its fully-qualified class name, if applicable). The dynamic type of the exception should be preferred over the static type in languages that support it.\n *\n * @deprecated Use ATTR_EXCEPTION_TYPE.\n */\nexport const SEMATTRS_EXCEPTION_TYPE = TMP_EXCEPTION_TYPE;\n/**\n * The exception message.\n *\n * @deprecated Use ATTR_EXCEPTION_MESSAGE.\n */\nexport const SEMATTRS_EXCEPTION_MESSAGE = TMP_EXCEPTION_MESSAGE;\n/**\n * A stacktrace as a string in the natural representation for the language runtime. The representation is to be determined and documented by each language SIG.\n *\n * @deprecated Use ATTR_EXCEPTION_STACKTRACE.\n */\nexport const SEMATTRS_EXCEPTION_STACKTRACE = TMP_EXCEPTION_STACKTRACE;\n/**\n* SHOULD be set to true if the exception event is recorded at a point where it is known that the exception is escaping the scope of the span.\n*\n* Note: An exception is considered to have escaped (or left) the scope of a span,\nif that span is ended while the exception is still logically &#34;in flight&#34;.\nThis may be actually &#34;in flight&#34; in some languages (e.g. if the exception\nis passed to a Context manager&#39;s `__exit__` method in Python) but will\nusually be caught at the point of recording the exception in most languages.\n\nIt is usually not possible to determine at the point where an exception is thrown\nwhether it will escape the scope of a span.\nHowever, it is trivial to know that an exception\nwill escape, if one checks for an active exception just before ending the span,\nas done in the [example above](#exception-end-example).\n\nIt follows that an exception may still escape the scope of the span\neven if the `exception.escaped` attribute was not set or set to false,\nsince the event might have been recorded at a time where it was not\nclear whether the exception will escape.\n*\n* @deprecated Use ATTR_EXCEPTION_ESCAPED.\n*/\nexport const SEMATTRS_EXCEPTION_ESCAPED = TMP_EXCEPTION_ESCAPED;\n/**\n * Type of the trigger on which the function is executed.\n *\n * @deprecated Use ATTR_FAAS_TRIGGER in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_FAAS_TRIGGER = TMP_FAAS_TRIGGER;\n/**\n * The execution ID of the current function execution.\n *\n * @deprecated Use ATTR_FAAS_INVOCATION_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_FAAS_EXECUTION = TMP_FAAS_EXECUTION;\n/**\n * The name of the source on which the triggering operation was performed. For example, in Cloud Storage or S3 corresponds to the bucket name, and in Cosmos DB to the database name.\n *\n * @deprecated Use ATTR_FAAS_DOCUMENT_COLLECTION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_FAAS_DOCUMENT_COLLECTION = TMP_FAAS_DOCUMENT_COLLECTION;\n/**\n * Describes the type of the operation that was performed on the data.\n *\n * @deprecated Use ATTR_FAAS_DOCUMENT_OPERATION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_FAAS_DOCUMENT_OPERATION = TMP_FAAS_DOCUMENT_OPERATION;\n/**\n * A string containing the time when the data was accessed in the [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format expressed in [UTC](https://www.w3.org/TR/NOTE-datetime).\n *\n * @deprecated Use ATTR_FAAS_DOCUMENT_TIME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_FAAS_DOCUMENT_TIME = TMP_FAAS_DOCUMENT_TIME;\n/**\n * The document name/table subjected to the operation. For example, in Cloud Storage or S3 is the name of the file, and in Cosmos DB the table name.\n *\n * @deprecated Use ATTR_FAAS_DOCUMENT_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_FAAS_DOCUMENT_NAME = TMP_FAAS_DOCUMENT_NAME;\n/**\n * A string containing the function invocation time in the [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format expressed in [UTC](https://www.w3.org/TR/NOTE-datetime).\n *\n * @deprecated Use ATTR_FAAS_TIME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_FAAS_TIME = TMP_FAAS_TIME;\n/**\n * A string containing the schedule period as [Cron Expression](https://docs.oracle.com/cd/E12058_01/doc/doc.1014/e12030/cron_expressions.htm).\n *\n * @deprecated Use ATTR_FAAS_CRON in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_FAAS_CRON = TMP_FAAS_CRON;\n/**\n * A boolean that is true if the serverless function is executed for the first time (aka cold-start).\n *\n * @deprecated Use ATTR_FAAS_COLDSTART in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_FAAS_COLDSTART = TMP_FAAS_COLDSTART;\n/**\n * The name of the invoked function.\n *\n * Note: SHOULD be equal to the `faas.name` resource attribute of the invoked function.\n *\n * @deprecated Use ATTR_FAAS_INVOKED_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_FAAS_INVOKED_NAME = TMP_FAAS_INVOKED_NAME;\n/**\n * The cloud provider of the invoked function.\n *\n * Note: SHOULD be equal to the `cloud.provider` resource attribute of the invoked function.\n *\n * @deprecated Use ATTR_FAAS_INVOKED_PROVIDER in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_FAAS_INVOKED_PROVIDER = TMP_FAAS_INVOKED_PROVIDER;\n/**\n * The cloud region of the invoked function.\n *\n * Note: SHOULD be equal to the `cloud.region` resource attribute of the invoked function.\n *\n * @deprecated Use ATTR_FAAS_INVOKED_REGION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_FAAS_INVOKED_REGION = TMP_FAAS_INVOKED_REGION;\n/**\n * Transport protocol used. See note below.\n *\n * @deprecated Use ATTR_NET_TRANSPORT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_NET_TRANSPORT = TMP_NET_TRANSPORT;\n/**\n * Remote address of the peer (dotted decimal for IPv4 or [RFC5952](https://tools.ietf.org/html/rfc5952) for IPv6).\n *\n * @deprecated Use ATTR_NET_PEER_IP in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_NET_PEER_IP = TMP_NET_PEER_IP;\n/**\n * Remote port number.\n *\n * @deprecated Use ATTR_NET_PEER_PORT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_NET_PEER_PORT = TMP_NET_PEER_PORT;\n/**\n * Remote hostname or similar, see note below.\n *\n * @deprecated Use ATTR_NET_PEER_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_NET_PEER_NAME = TMP_NET_PEER_NAME;\n/**\n * Like `net.peer.ip` but for the host IP. Useful in case of a multi-IP host.\n *\n * @deprecated Use ATTR_NET_HOST_IP in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_NET_HOST_IP = TMP_NET_HOST_IP;\n/**\n * Like `net.peer.port` but for the host port.\n *\n * @deprecated Use ATTR_NET_HOST_PORT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_NET_HOST_PORT = TMP_NET_HOST_PORT;\n/**\n * Local hostname or similar, see note below.\n *\n * @deprecated Use ATTR_NET_HOST_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_NET_HOST_NAME = TMP_NET_HOST_NAME;\n/**\n * The internet connection type currently being used by the host.\n *\n * @deprecated Use ATTR_NETWORK_CONNECTION_TYPE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_NET_HOST_CONNECTION_TYPE = TMP_NET_HOST_CONNECTION_TYPE;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use ATTR_NETWORK_CONNECTION_SUBTYPE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_NET_HOST_CONNECTION_SUBTYPE = TMP_NET_HOST_CONNECTION_SUBTYPE;\n/**\n * The name of the mobile carrier.\n *\n * @deprecated Use ATTR_NETWORK_CARRIER_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_NET_HOST_CARRIER_NAME = TMP_NET_HOST_CARRIER_NAME;\n/**\n * The mobile carrier country code.\n *\n * @deprecated Use ATTR_NETWORK_CARRIER_MCC in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_NET_HOST_CARRIER_MCC = TMP_NET_HOST_CARRIER_MCC;\n/**\n * The mobile carrier network code.\n *\n * @deprecated Use ATTR_NETWORK_CARRIER_MNC in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_NET_HOST_CARRIER_MNC = TMP_NET_HOST_CARRIER_MNC;\n/**\n * The ISO 3166-1 alpha-2 2-character country code associated with the mobile carrier network.\n *\n * @deprecated Use ATTR_NETWORK_CARRIER_ICC in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_NET_HOST_CARRIER_ICC = TMP_NET_HOST_CARRIER_ICC;\n/**\n * The [`service.name`](../../resource/semantic_conventions/README.md#service) of the remote service. SHOULD be equal to the actual `service.name` resource attribute of the remote service if any.\n *\n * @deprecated Use ATTR_PEER_SERVICE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_PEER_SERVICE = TMP_PEER_SERVICE;\n/**\n * Username or client_id extracted from the access token or [Authorization](https://tools.ietf.org/html/rfc7235#section-4.2) header in the inbound request from outside the system.\n *\n * @deprecated Use ATTR_ENDUSER_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_ENDUSER_ID = TMP_ENDUSER_ID;\n/**\n * Actual/assumed role the client is making the request under extracted from token or application security context.\n *\n * @deprecated Use ATTR_ENDUSER_ROLE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_ENDUSER_ROLE = TMP_ENDUSER_ROLE;\n/**\n * Scopes or granted authorities the client currently possesses extracted from token or application security context. The value would come from the scope associated with an [OAuth 2.0 Access Token](https://tools.ietf.org/html/rfc6749#section-3.3) or an attribute value in a [SAML 2.0 Assertion](http://docs.oasis-open.org/security/saml/Post2.0/sstc-saml-tech-overview-2.0.html).\n *\n * @deprecated Use ATTR_ENDUSER_SCOPE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_ENDUSER_SCOPE = TMP_ENDUSER_SCOPE;\n/**\n * Current &#34;managed&#34; thread ID (as opposed to OS thread ID).\n *\n * @deprecated Use ATTR_THREAD_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_THREAD_ID = TMP_THREAD_ID;\n/**\n * Current thread name.\n *\n * @deprecated Use ATTR_THREAD_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_THREAD_NAME = TMP_THREAD_NAME;\n/**\n * The method or function name, or equivalent (usually rightmost part of the code unit&#39;s name).\n *\n * @deprecated Use ATTR_CODE_FUNCTION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_CODE_FUNCTION = TMP_CODE_FUNCTION;\n/**\n * The &#34;namespace&#34; within which `code.function` is defined. Usually the qualified class or module name, such that `code.namespace` + some separator + `code.function` form a unique identifier for the code unit.\n *\n * @deprecated Use ATTR_CODE_NAMESPACE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_CODE_NAMESPACE = TMP_CODE_NAMESPACE;\n/**\n * The source code file name that identifies the code unit as uniquely as possible (preferably an absolute file path).\n *\n * @deprecated Use ATTR_CODE_FILEPATH in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_CODE_FILEPATH = TMP_CODE_FILEPATH;\n/**\n * The line number in `code.filepath` best representing the operation. It SHOULD point within the code unit named in `code.function`.\n *\n * @deprecated Use ATTR_CODE_LINENO in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_CODE_LINENO = TMP_CODE_LINENO;\n/**\n * HTTP request method.\n *\n * @deprecated Use ATTR_HTTP_METHOD in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_HTTP_METHOD = TMP_HTTP_METHOD;\n/**\n * Full HTTP request URL in the form `scheme://host[:port]/path?query[#fragment]`. Usually the fragment is not transmitted over HTTP, but if it is known, it should be included nevertheless.\n *\n * Note: `http.url` MUST NOT contain credentials passed via URL in form of `https://username:password@www.example.com/`. In such case the attribute&#39;s value should be `https://www.example.com/`.\n *\n * @deprecated Use ATTR_HTTP_URL in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_HTTP_URL = TMP_HTTP_URL;\n/**\n * The full request target as passed in a HTTP request line or equivalent.\n *\n * @deprecated Use ATTR_HTTP_TARGET in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_HTTP_TARGET = TMP_HTTP_TARGET;\n/**\n * The value of the [HTTP host header](https://tools.ietf.org/html/rfc7230#section-5.4). An empty Host header should also be reported, see note.\n *\n * Note: When the header is present but empty the attribute SHOULD be set to the empty string. Note that this is a valid situation that is expected in certain cases, according the aforementioned [section of RFC 7230](https://tools.ietf.org/html/rfc7230#section-5.4). When the header is not set the attribute MUST NOT be set.\n *\n * @deprecated Use ATTR_HTTP_HOST in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_HTTP_HOST = TMP_HTTP_HOST;\n/**\n * The URI scheme identifying the used protocol.\n *\n * @deprecated Use ATTR_HTTP_SCHEME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_HTTP_SCHEME = TMP_HTTP_SCHEME;\n/**\n * [HTTP response status code](https://tools.ietf.org/html/rfc7231#section-6).\n *\n * @deprecated Use ATTR_HTTP_STATUS_CODE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_HTTP_STATUS_CODE = TMP_HTTP_STATUS_CODE;\n/**\n * Kind of HTTP protocol used.\n *\n * Note: If `net.transport` is not specified, it can be assumed to be `IP.TCP` except if `http.flavor` is `QUIC`, in which case `IP.UDP` is assumed.\n *\n * @deprecated Use ATTR_HTTP_FLAVOR in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_HTTP_FLAVOR = TMP_HTTP_FLAVOR;\n/**\n * Value of the [HTTP User-Agent](https://tools.ietf.org/html/rfc7231#section-5.5.3) header sent by the client.\n *\n * @deprecated Use ATTR_HTTP_USER_AGENT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_HTTP_USER_AGENT = TMP_HTTP_USER_AGENT;\n/**\n * The size of the request payload body in bytes. This is the number of bytes transferred excluding headers and is often, but not always, present as the [Content-Length](https://tools.ietf.org/html/rfc7230#section-3.3.2) header. For requests using transport encoding, this should be the compressed size.\n *\n * @deprecated Use ATTR_HTTP_REQUEST_CONTENT_LENGTH in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_HTTP_REQUEST_CONTENT_LENGTH = TMP_HTTP_REQUEST_CONTENT_LENGTH;\n/**\n * The size of the uncompressed request payload body after transport decoding. Not set if transport encoding not used.\n *\n * @deprecated Use ATTR_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED = TMP_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED;\n/**\n * The size of the response payload body in bytes. This is the number of bytes transferred excluding headers and is often, but not always, present as the [Content-Length](https://tools.ietf.org/html/rfc7230#section-3.3.2) header. For requests using transport encoding, this should be the compressed size.\n *\n * @deprecated Use ATTR_HTTP_RESPONSE_CONTENT_LENGTH in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_HTTP_RESPONSE_CONTENT_LENGTH = TMP_HTTP_RESPONSE_CONTENT_LENGTH;\n/**\n * The size of the uncompressed response payload body after transport decoding. Not set if transport encoding not used.\n *\n * @deprecated Use ATTR_HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED = TMP_HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED;\n/**\n * The primary server name of the matched virtual host. This should be obtained via configuration. If no such configuration can be obtained, this attribute MUST NOT be set ( `net.host.name` should be used instead).\n *\n * Note: `http.url` is usually not readily available on the server side but would have to be assembled in a cumbersome and sometimes lossy process from other information (see e.g. open-telemetry/opentelemetry-python/pull/148). It is thus preferred to supply the raw data that is available.\n *\n * @deprecated Use ATTR_HTTP_SERVER_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_HTTP_SERVER_NAME = TMP_HTTP_SERVER_NAME;\n/**\n * The matched route (path template).\n *\n * @deprecated Use ATTR_HTTP_ROUTE.\n */\nexport const SEMATTRS_HTTP_ROUTE = TMP_HTTP_ROUTE;\n/**\n* The IP address of the original client behind all proxies, if known (e.g. from [X-Forwarded-For](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-For)).\n*\n* Note: This is not necessarily the same as `net.peer.ip`, which would\nidentify the network-level peer, which may be a proxy.\n\nThis attribute should be set when a source of information different\nfrom the one used for `net.peer.ip`, is available even if that other\nsource just confirms the same value as `net.peer.ip`.\nRationale: For `net.peer.ip`, one typically does not know if it\ncomes from a proxy, reverse proxy, or the actual client. Setting\n`http.client_ip` when it&#39;s the same as `net.peer.ip` means that\none is at least somewhat confident that the address is not that of\nthe closest proxy.\n*\n* @deprecated Use ATTR_HTTP_CLIENT_IP in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n*/\nexport const SEMATTRS_HTTP_CLIENT_IP = TMP_HTTP_CLIENT_IP;\n/**\n * The keys in the `RequestItems` object field.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_TABLE_NAMES in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_AWS_DYNAMODB_TABLE_NAMES = TMP_AWS_DYNAMODB_TABLE_NAMES;\n/**\n * The JSON-serialized value of each item in the `ConsumedCapacity` response field.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_CONSUMED_CAPACITY in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_AWS_DYNAMODB_CONSUMED_CAPACITY = TMP_AWS_DYNAMODB_CONSUMED_CAPACITY;\n/**\n * The JSON-serialized value of the `ItemCollectionMetrics` response field.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_ITEM_COLLECTION_METRICS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_AWS_DYNAMODB_ITEM_COLLECTION_METRICS = TMP_AWS_DYNAMODB_ITEM_COLLECTION_METRICS;\n/**\n * The value of the `ProvisionedThroughput.ReadCapacityUnits` request parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_PROVISIONED_READ_CAPACITY in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_AWS_DYNAMODB_PROVISIONED_READ_CAPACITY = TMP_AWS_DYNAMODB_PROVISIONED_READ_CAPACITY;\n/**\n * The value of the `ProvisionedThroughput.WriteCapacityUnits` request parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_PROVISIONED_WRITE_CAPACITY in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_AWS_DYNAMODB_PROVISIONED_WRITE_CAPACITY = TMP_AWS_DYNAMODB_PROVISIONED_WRITE_CAPACITY;\n/**\n * The value of the `ConsistentRead` request parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_CONSISTENT_READ in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_AWS_DYNAMODB_CONSISTENT_READ = TMP_AWS_DYNAMODB_CONSISTENT_READ;\n/**\n * The value of the `ProjectionExpression` request parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_PROJECTION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_AWS_DYNAMODB_PROJECTION = TMP_AWS_DYNAMODB_PROJECTION;\n/**\n * The value of the `Limit` request parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_LIMIT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_AWS_DYNAMODB_LIMIT = TMP_AWS_DYNAMODB_LIMIT;\n/**\n * The value of the `AttributesToGet` request parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_ATTRIBUTES_TO_GET in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_AWS_DYNAMODB_ATTRIBUTES_TO_GET = TMP_AWS_DYNAMODB_ATTRIBUTES_TO_GET;\n/**\n * The value of the `IndexName` request parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_INDEX_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_AWS_DYNAMODB_INDEX_NAME = TMP_AWS_DYNAMODB_INDEX_NAME;\n/**\n * The value of the `Select` request parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_SELECT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_AWS_DYNAMODB_SELECT = TMP_AWS_DYNAMODB_SELECT;\n/**\n * The JSON-serialized value of each item of the `GlobalSecondaryIndexes` request field.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEXES in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEXES = TMP_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEXES;\n/**\n * The JSON-serialized value of each item of the `LocalSecondaryIndexes` request field.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_LOCAL_SECONDARY_INDEXES in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_AWS_DYNAMODB_LOCAL_SECONDARY_INDEXES = TMP_AWS_DYNAMODB_LOCAL_SECONDARY_INDEXES;\n/**\n * The value of the `ExclusiveStartTableName` request parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_EXCLUSIVE_START_TABLE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_AWS_DYNAMODB_EXCLUSIVE_START_TABLE = TMP_AWS_DYNAMODB_EXCLUSIVE_START_TABLE;\n/**\n * The the number of items in the `TableNames` response parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_TABLE_COUNT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_AWS_DYNAMODB_TABLE_COUNT = TMP_AWS_DYNAMODB_TABLE_COUNT;\n/**\n * The value of the `ScanIndexForward` request parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_SCAN_FORWARD in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_AWS_DYNAMODB_SCAN_FORWARD = TMP_AWS_DYNAMODB_SCAN_FORWARD;\n/**\n * The value of the `Segment` request parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_SEGMENT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_AWS_DYNAMODB_SEGMENT = TMP_AWS_DYNAMODB_SEGMENT;\n/**\n * The value of the `TotalSegments` request parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_TOTAL_SEGMENTS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_AWS_DYNAMODB_TOTAL_SEGMENTS = TMP_AWS_DYNAMODB_TOTAL_SEGMENTS;\n/**\n * The value of the `Count` response parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_COUNT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_AWS_DYNAMODB_COUNT = TMP_AWS_DYNAMODB_COUNT;\n/**\n * The value of the `ScannedCount` response parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_SCANNED_COUNT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_AWS_DYNAMODB_SCANNED_COUNT = TMP_AWS_DYNAMODB_SCANNED_COUNT;\n/**\n * The JSON-serialized value of each item in the `AttributeDefinitions` request field.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_ATTRIBUTE_DEFINITIONS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_AWS_DYNAMODB_ATTRIBUTE_DEFINITIONS = TMP_AWS_DYNAMODB_ATTRIBUTE_DEFINITIONS;\n/**\n * The JSON-serialized value of each item in the the `GlobalSecondaryIndexUpdates` request field.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEX_UPDATES in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEX_UPDATES = TMP_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEX_UPDATES;\n/**\n * A string identifying the messaging system.\n *\n * @deprecated Use ATTR_MESSAGING_SYSTEM in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_MESSAGING_SYSTEM = TMP_MESSAGING_SYSTEM;\n/**\n * The message destination name. This might be equal to the span name but is required nevertheless.\n *\n * @deprecated Use ATTR_MESSAGING_DESTINATION_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_MESSAGING_DESTINATION = TMP_MESSAGING_DESTINATION;\n/**\n * The kind of message destination.\n *\n * @deprecated Removed in semconv v1.20.0.\n */\nexport const SEMATTRS_MESSAGING_DESTINATION_KIND = TMP_MESSAGING_DESTINATION_KIND;\n/**\n * A boolean that is true if the message destination is temporary.\n *\n * @deprecated Use ATTR_MESSAGING_DESTINATION_TEMPORARY in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_MESSAGING_TEMP_DESTINATION = TMP_MESSAGING_TEMP_DESTINATION;\n/**\n * The name of the transport protocol.\n *\n * @deprecated Use ATTR_NETWORK_PROTOCOL_NAME.\n */\nexport const SEMATTRS_MESSAGING_PROTOCOL = TMP_MESSAGING_PROTOCOL;\n/**\n * The version of the transport protocol.\n *\n * @deprecated Use ATTR_NETWORK_PROTOCOL_VERSION.\n */\nexport const SEMATTRS_MESSAGING_PROTOCOL_VERSION = TMP_MESSAGING_PROTOCOL_VERSION;\n/**\n * Connection string.\n *\n * @deprecated Removed in semconv v1.17.0.\n */\nexport const SEMATTRS_MESSAGING_URL = TMP_MESSAGING_URL;\n/**\n * A value used by the messaging system as an identifier for the message, represented as a string.\n *\n * @deprecated Use ATTR_MESSAGING_MESSAGE_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_MESSAGING_MESSAGE_ID = TMP_MESSAGING_MESSAGE_ID;\n/**\n * The [conversation ID](#conversations) identifying the conversation to which the message belongs, represented as a string. Sometimes called &#34;Correlation ID&#34;.\n *\n * @deprecated Use ATTR_MESSAGING_MESSAGE_CONVERSATION_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_MESSAGING_CONVERSATION_ID = TMP_MESSAGING_CONVERSATION_ID;\n/**\n * The (uncompressed) size of the message payload in bytes. Also use this attribute if it is unknown whether the compressed or uncompressed payload size is reported.\n *\n * @deprecated Use ATTR_MESSAGING_MESSAGE_BODY_SIZE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_MESSAGING_MESSAGE_PAYLOAD_SIZE_BYTES = TMP_MESSAGING_MESSAGE_PAYLOAD_SIZE_BYTES;\n/**\n * The compressed size of the message payload in bytes.\n *\n * @deprecated Removed in semconv v1.22.0.\n */\nexport const SEMATTRS_MESSAGING_MESSAGE_PAYLOAD_COMPRESSED_SIZE_BYTES = TMP_MESSAGING_MESSAGE_PAYLOAD_COMPRESSED_SIZE_BYTES;\n/**\n * A string identifying the kind of message consumption as defined in the [Operation names](#operation-names) section above. If the operation is &#34;send&#34;, this attribute MUST NOT be set, since the operation can be inferred from the span kind in that case.\n *\n * @deprecated Use ATTR_MESSAGING_OPERATION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_MESSAGING_OPERATION = TMP_MESSAGING_OPERATION;\n/**\n * The identifier for the consumer receiving a message. For Kafka, set it to `{messaging.kafka.consumer_group} - {messaging.kafka.client_id}`, if both are present, or only `messaging.kafka.consumer_group`. For brokers, such as RabbitMQ and Artemis, set it to the `client_id` of the client consuming the message.\n *\n * @deprecated Removed in semconv v1.21.0.\n */\nexport const SEMATTRS_MESSAGING_CONSUMER_ID = TMP_MESSAGING_CONSUMER_ID;\n/**\n * RabbitMQ message routing key.\n *\n * @deprecated Use ATTR_MESSAGING_RABBITMQ_DESTINATION_ROUTING_KEY in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_MESSAGING_RABBITMQ_ROUTING_KEY = TMP_MESSAGING_RABBITMQ_ROUTING_KEY;\n/**\n * Message keys in Kafka are used for grouping alike messages to ensure they&#39;re processed on the same partition. They differ from `messaging.message_id` in that they&#39;re not unique. If the key is `null`, the attribute MUST NOT be set.\n *\n * Note: If the key type is not string, it&#39;s string representation has to be supplied for the attribute. If the key has no unambiguous, canonical string form, don&#39;t include its value.\n *\n * @deprecated Use ATTR_MESSAGING_KAFKA_MESSAGE_KEY in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_MESSAGING_KAFKA_MESSAGE_KEY = TMP_MESSAGING_KAFKA_MESSAGE_KEY;\n/**\n * Name of the Kafka Consumer Group that is handling the message. Only applies to consumers, not producers.\n *\n * @deprecated Use ATTR_MESSAGING_KAFKA_CONSUMER_GROUP in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_MESSAGING_KAFKA_CONSUMER_GROUP = TMP_MESSAGING_KAFKA_CONSUMER_GROUP;\n/**\n * Client Id for the Consumer or Producer that is handling the message.\n *\n * @deprecated Use ATTR_MESSAGING_CLIENT_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_MESSAGING_KAFKA_CLIENT_ID = TMP_MESSAGING_KAFKA_CLIENT_ID;\n/**\n * Partition the message is sent to.\n *\n * @deprecated Use ATTR_MESSAGING_KAFKA_DESTINATION_PARTITION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_MESSAGING_KAFKA_PARTITION = TMP_MESSAGING_KAFKA_PARTITION;\n/**\n * A boolean that is true if the message is a tombstone.\n *\n * @deprecated Use ATTR_MESSAGING_KAFKA_MESSAGE_TOMBSTONE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_MESSAGING_KAFKA_TOMBSTONE = TMP_MESSAGING_KAFKA_TOMBSTONE;\n/**\n * A string identifying the remoting system.\n *\n * @deprecated Use ATTR_RPC_SYSTEM in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_RPC_SYSTEM = TMP_RPC_SYSTEM;\n/**\n * The full (logical) name of the service being called, including its package name, if applicable.\n *\n * Note: This is the logical name of the service from the RPC interface perspective, which can be different from the name of any implementing class. The `code.namespace` attribute may be used to store the latter (despite the attribute name, it may include a class name; e.g., class with method actually executing the call on the server side, RPC client stub class on the client side).\n *\n * @deprecated Use ATTR_RPC_SERVICE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_RPC_SERVICE = TMP_RPC_SERVICE;\n/**\n * The name of the (logical) method being called, must be equal to the $method part in the span name.\n *\n * Note: This is the logical name of the method from the RPC interface perspective, which can be different from the name of any implementing method/function. The `code.function` attribute may be used to store the latter (e.g., method actually executing the call on the server side, RPC client stub method on the client side).\n *\n * @deprecated Use ATTR_RPC_METHOD in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_RPC_METHOD = TMP_RPC_METHOD;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use ATTR_RPC_GRPC_STATUS_CODE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_RPC_GRPC_STATUS_CODE = TMP_RPC_GRPC_STATUS_CODE;\n/**\n * Protocol version as in `jsonrpc` property of request/response. Since JSON-RPC 1.0 does not specify this, the value can be omitted.\n *\n * @deprecated Use ATTR_RPC_JSONRPC_VERSION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_RPC_JSONRPC_VERSION = TMP_RPC_JSONRPC_VERSION;\n/**\n * `id` property of request or response. Since protocol allows id to be int, string, `null` or missing (for notifications), value is expected to be cast to string for simplicity. Use empty string in case of `null` value. Omit entirely if this is a notification.\n *\n * @deprecated Use ATTR_RPC_JSONRPC_REQUEST_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_RPC_JSONRPC_REQUEST_ID = TMP_RPC_JSONRPC_REQUEST_ID;\n/**\n * `error.code` property of response if it is an error response.\n *\n * @deprecated Use ATTR_RPC_JSONRPC_ERROR_CODE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_RPC_JSONRPC_ERROR_CODE = TMP_RPC_JSONRPC_ERROR_CODE;\n/**\n * `error.message` property of response if it is an error response.\n *\n * @deprecated Use ATTR_RPC_JSONRPC_ERROR_MESSAGE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_RPC_JSONRPC_ERROR_MESSAGE = TMP_RPC_JSONRPC_ERROR_MESSAGE;\n/**\n * Whether this is a received or sent message.\n *\n * @deprecated Use ATTR_MESSAGE_TYPE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_MESSAGE_TYPE = TMP_MESSAGE_TYPE;\n/**\n * MUST be calculated as two different counters starting from `1` one for sent messages and one for received message.\n *\n * Note: This way we guarantee that the values will be consistent between different implementations.\n *\n * @deprecated Use ATTR_MESSAGE_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_MESSAGE_ID = TMP_MESSAGE_ID;\n/**\n * Compressed size of the message in bytes.\n *\n * @deprecated Use ATTR_MESSAGE_COMPRESSED_SIZE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_MESSAGE_COMPRESSED_SIZE = TMP_MESSAGE_COMPRESSED_SIZE;\n/**\n * Uncompressed size of the message in bytes.\n *\n * @deprecated Use ATTR_MESSAGE_UNCOMPRESSED_SIZE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_MESSAGE_UNCOMPRESSED_SIZE = TMP_MESSAGE_UNCOMPRESSED_SIZE;\n/**\n * Create exported Value Map for SemanticAttributes values\n * @deprecated Use the SEMATTRS_XXXXX constants rather than the SemanticAttributes.XXXXX for bundle minification\n */\nexport const SemanticAttributes = \n/*#__PURE__*/ createConstMap([\n    TMP_AWS_LAMBDA_INVOKED_ARN,\n    TMP_DB_SYSTEM,\n    TMP_DB_CONNECTION_STRING,\n    TMP_DB_USER,\n    TMP_DB_JDBC_DRIVER_CLASSNAME,\n    TMP_DB_NAME,\n    TMP_DB_STATEMENT,\n    TMP_DB_OPERATION,\n    TMP_DB_MSSQL_INSTANCE_NAME,\n    TMP_DB_CASSANDRA_KEYSPACE,\n    TMP_DB_CASSANDRA_PAGE_SIZE,\n    TMP_DB_CASSANDRA_CONSISTENCY_LEVEL,\n    TMP_DB_CASSANDRA_TABLE,\n    TMP_DB_CASSANDRA_IDEMPOTENCE,\n    TMP_DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT,\n    TMP_DB_CASSANDRA_COORDINATOR_ID,\n    TMP_DB_CASSANDRA_COORDINATOR_DC,\n    TMP_DB_HBASE_NAMESPACE,\n    TMP_DB_REDIS_DATABASE_INDEX,\n    TMP_DB_MONGODB_COLLECTION,\n    TMP_DB_SQL_TABLE,\n    TMP_EXCEPTION_TYPE,\n    TMP_EXCEPTION_MESSAGE,\n    TMP_EXCEPTION_STACKTRACE,\n    TMP_EXCEPTION_ESCAPED,\n    TMP_FAAS_TRIGGER,\n    TMP_FAAS_EXECUTION,\n    TMP_FAAS_DOCUMENT_COLLECTION,\n    TMP_FAAS_DOCUMENT_OPERATION,\n    TMP_FAAS_DOCUMENT_TIME,\n    TMP_FAAS_DOCUMENT_NAME,\n    TMP_FAAS_TIME,\n    TMP_FAAS_CRON,\n    TMP_FAAS_COLDSTART,\n    TMP_FAAS_INVOKED_NAME,\n    TMP_FAAS_INVOKED_PROVIDER,\n    TMP_FAAS_INVOKED_REGION,\n    TMP_NET_TRANSPORT,\n    TMP_NET_PEER_IP,\n    TMP_NET_PEER_PORT,\n    TMP_NET_PEER_NAME,\n    TMP_NET_HOST_IP,\n    TMP_NET_HOST_PORT,\n    TMP_NET_HOST_NAME,\n    TMP_NET_HOST_CONNECTION_TYPE,\n    TMP_NET_HOST_CONNECTION_SUBTYPE,\n    TMP_NET_HOST_CARRIER_NAME,\n    TMP_NET_HOST_CARRIER_MCC,\n    TMP_NET_HOST_CARRIER_MNC,\n    TMP_NET_HOST_CARRIER_ICC,\n    TMP_PEER_SERVICE,\n    TMP_ENDUSER_ID,\n    TMP_ENDUSER_ROLE,\n    TMP_ENDUSER_SCOPE,\n    TMP_THREAD_ID,\n    TMP_THREAD_NAME,\n    TMP_CODE_FUNCTION,\n    TMP_CODE_NAMESPACE,\n    TMP_CODE_FILEPATH,\n    TMP_CODE_LINENO,\n    TMP_HTTP_METHOD,\n    TMP_HTTP_URL,\n    TMP_HTTP_TARGET,\n    TMP_HTTP_HOST,\n    TMP_HTTP_SCHEME,\n    TMP_HTTP_STATUS_CODE,\n    TMP_HTTP_FLAVOR,\n    TMP_HTTP_USER_AGENT,\n    TMP_HTTP_REQUEST_CONTENT_LENGTH,\n    TMP_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED,\n    TMP_HTTP_RESPONSE_CONTENT_LENGTH,\n    TMP_HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED,\n    TMP_HTTP_SERVER_NAME,\n    TMP_HTTP_ROUTE,\n    TMP_HTTP_CLIENT_IP,\n    TMP_AWS_DYNAMODB_TABLE_NAMES,\n    TMP_AWS_DYNAMODB_CONSUMED_CAPACITY,\n    TMP_AWS_DYNAMODB_ITEM_COLLECTION_METRICS,\n    TMP_AWS_DYNAMODB_PROVISIONED_READ_CAPACITY,\n    TMP_AWS_DYNAMODB_PROVISIONED_WRITE_CAPACITY,\n    TMP_AWS_DYNAMODB_CONSISTENT_READ,\n    TMP_AWS_DYNAMODB_PROJECTION,\n    TMP_AWS_DYNAMODB_LIMIT,\n    TMP_AWS_DYNAMODB_ATTRIBUTES_TO_GET,\n    TMP_AWS_DYNAMODB_INDEX_NAME,\n    TMP_AWS_DYNAMODB_SELECT,\n    TMP_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEXES,\n    TMP_AWS_DYNAMODB_LOCAL_SECONDARY_INDEXES,\n    TMP_AWS_DYNAMODB_EXCLUSIVE_START_TABLE,\n    TMP_AWS_DYNAMODB_TABLE_COUNT,\n    TMP_AWS_DYNAMODB_SCAN_FORWARD,\n    TMP_AWS_DYNAMODB_SEGMENT,\n    TMP_AWS_DYNAMODB_TOTAL_SEGMENTS,\n    TMP_AWS_DYNAMODB_COUNT,\n    TMP_AWS_DYNAMODB_SCANNED_COUNT,\n    TMP_AWS_DYNAMODB_ATTRIBUTE_DEFINITIONS,\n    TMP_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEX_UPDATES,\n    TMP_MESSAGING_SYSTEM,\n    TMP_MESSAGING_DESTINATION,\n    TMP_MESSAGING_DESTINATION_KIND,\n    TMP_MESSAGING_TEMP_DESTINATION,\n    TMP_MESSAGING_PROTOCOL,\n    TMP_MESSAGING_PROTOCOL_VERSION,\n    TMP_MESSAGING_URL,\n    TMP_MESSAGING_MESSAGE_ID,\n    TMP_MESSAGING_CONVERSATION_ID,\n    TMP_MESSAGING_MESSAGE_PAYLOAD_SIZE_BYTES,\n    TMP_MESSAGING_MESSAGE_PAYLOAD_COMPRESSED_SIZE_BYTES,\n    TMP_MESSAGING_OPERATION,\n    TMP_MESSAGING_CONSUMER_ID,\n    TMP_MESSAGING_RABBITMQ_ROUTING_KEY,\n    TMP_MESSAGING_KAFKA_MESSAGE_KEY,\n    TMP_MESSAGING_KAFKA_CONSUMER_GROUP,\n    TMP_MESSAGING_KAFKA_CLIENT_ID,\n    TMP_MESSAGING_KAFKA_PARTITION,\n    TMP_MESSAGING_KAFKA_TOMBSTONE,\n    TMP_RPC_SYSTEM,\n    TMP_RPC_SERVICE,\n    TMP_RPC_METHOD,\n    TMP_RPC_GRPC_STATUS_CODE,\n    TMP_RPC_JSONRPC_VERSION,\n    TMP_RPC_JSONRPC_REQUEST_ID,\n    TMP_RPC_JSONRPC_ERROR_CODE,\n    TMP_RPC_JSONRPC_ERROR_MESSAGE,\n    TMP_MESSAGE_TYPE,\n    TMP_MESSAGE_ID,\n    TMP_MESSAGE_COMPRESSED_SIZE,\n    TMP_MESSAGE_UNCOMPRESSED_SIZE,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for DbSystemValues enum definition\n *\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_DBSYSTEMVALUES_OTHER_SQL = 'other_sql';\nconst TMP_DBSYSTEMVALUES_MSSQL = 'mssql';\nconst TMP_DBSYSTEMVALUES_MYSQL = 'mysql';\nconst TMP_DBSYSTEMVALUES_ORACLE = 'oracle';\nconst TMP_DBSYSTEMVALUES_DB2 = 'db2';\nconst TMP_DBSYSTEMVALUES_POSTGRESQL = 'postgresql';\nconst TMP_DBSYSTEMVALUES_REDSHIFT = 'redshift';\nconst TMP_DBSYSTEMVALUES_HIVE = 'hive';\nconst TMP_DBSYSTEMVALUES_CLOUDSCAPE = 'cloudscape';\nconst TMP_DBSYSTEMVALUES_HSQLDB = 'hsqldb';\nconst TMP_DBSYSTEMVALUES_PROGRESS = 'progress';\nconst TMP_DBSYSTEMVALUES_MAXDB = 'maxdb';\nconst TMP_DBSYSTEMVALUES_HANADB = 'hanadb';\nconst TMP_DBSYSTEMVALUES_INGRES = 'ingres';\nconst TMP_DBSYSTEMVALUES_FIRSTSQL = 'firstsql';\nconst TMP_DBSYSTEMVALUES_EDB = 'edb';\nconst TMP_DBSYSTEMVALUES_CACHE = 'cache';\nconst TMP_DBSYSTEMVALUES_ADABAS = 'adabas';\nconst TMP_DBSYSTEMVALUES_FIREBIRD = 'firebird';\nconst TMP_DBSYSTEMVALUES_DERBY = 'derby';\nconst TMP_DBSYSTEMVALUES_FILEMAKER = 'filemaker';\nconst TMP_DBSYSTEMVALUES_INFORMIX = 'informix';\nconst TMP_DBSYSTEMVALUES_INSTANTDB = 'instantdb';\nconst TMP_DBSYSTEMVALUES_INTERBASE = 'interbase';\nconst TMP_DBSYSTEMVALUES_MARIADB = 'mariadb';\nconst TMP_DBSYSTEMVALUES_NETEZZA = 'netezza';\nconst TMP_DBSYSTEMVALUES_PERVASIVE = 'pervasive';\nconst TMP_DBSYSTEMVALUES_POINTBASE = 'pointbase';\nconst TMP_DBSYSTEMVALUES_SQLITE = 'sqlite';\nconst TMP_DBSYSTEMVALUES_SYBASE = 'sybase';\nconst TMP_DBSYSTEMVALUES_TERADATA = 'teradata';\nconst TMP_DBSYSTEMVALUES_VERTICA = 'vertica';\nconst TMP_DBSYSTEMVALUES_H2 = 'h2';\nconst TMP_DBSYSTEMVALUES_COLDFUSION = 'coldfusion';\nconst TMP_DBSYSTEMVALUES_CASSANDRA = 'cassandra';\nconst TMP_DBSYSTEMVALUES_HBASE = 'hbase';\nconst TMP_DBSYSTEMVALUES_MONGODB = 'mongodb';\nconst TMP_DBSYSTEMVALUES_REDIS = 'redis';\nconst TMP_DBSYSTEMVALUES_COUCHBASE = 'couchbase';\nconst TMP_DBSYSTEMVALUES_COUCHDB = 'couchdb';\nconst TMP_DBSYSTEMVALUES_COSMOSDB = 'cosmosdb';\nconst TMP_DBSYSTEMVALUES_DYNAMODB = 'dynamodb';\nconst TMP_DBSYSTEMVALUES_NEO4J = 'neo4j';\nconst TMP_DBSYSTEMVALUES_GEODE = 'geode';\nconst TMP_DBSYSTEMVALUES_ELASTICSEARCH = 'elasticsearch';\nconst TMP_DBSYSTEMVALUES_MEMCACHED = 'memcached';\nconst TMP_DBSYSTEMVALUES_COCKROACHDB = 'cockroachdb';\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_OTHER_SQL in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_OTHER_SQL = TMP_DBSYSTEMVALUES_OTHER_SQL;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_MSSQL in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_MSSQL = TMP_DBSYSTEMVALUES_MSSQL;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_MYSQL in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_MYSQL = TMP_DBSYSTEMVALUES_MYSQL;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_ORACLE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_ORACLE = TMP_DBSYSTEMVALUES_ORACLE;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_DB2 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_DB2 = TMP_DBSYSTEMVALUES_DB2;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_POSTGRESQL in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_POSTGRESQL = TMP_DBSYSTEMVALUES_POSTGRESQL;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_REDSHIFT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_REDSHIFT = TMP_DBSYSTEMVALUES_REDSHIFT;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_HIVE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_HIVE = TMP_DBSYSTEMVALUES_HIVE;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_CLOUDSCAPE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_CLOUDSCAPE = TMP_DBSYSTEMVALUES_CLOUDSCAPE;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_HSQLDB in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_HSQLDB = TMP_DBSYSTEMVALUES_HSQLDB;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_PROGRESS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_PROGRESS = TMP_DBSYSTEMVALUES_PROGRESS;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_MAXDB in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_MAXDB = TMP_DBSYSTEMVALUES_MAXDB;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_HANADB in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_HANADB = TMP_DBSYSTEMVALUES_HANADB;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_INGRES in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_INGRES = TMP_DBSYSTEMVALUES_INGRES;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_FIRSTSQL in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_FIRSTSQL = TMP_DBSYSTEMVALUES_FIRSTSQL;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_EDB in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_EDB = TMP_DBSYSTEMVALUES_EDB;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_CACHE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_CACHE = TMP_DBSYSTEMVALUES_CACHE;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_ADABAS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_ADABAS = TMP_DBSYSTEMVALUES_ADABAS;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_FIREBIRD in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_FIREBIRD = TMP_DBSYSTEMVALUES_FIREBIRD;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_DERBY in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_DERBY = TMP_DBSYSTEMVALUES_DERBY;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_FILEMAKER in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_FILEMAKER = TMP_DBSYSTEMVALUES_FILEMAKER;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_INFORMIX in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_INFORMIX = TMP_DBSYSTEMVALUES_INFORMIX;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_INSTANTDB in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_INSTANTDB = TMP_DBSYSTEMVALUES_INSTANTDB;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_INTERBASE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_INTERBASE = TMP_DBSYSTEMVALUES_INTERBASE;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_MARIADB in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_MARIADB = TMP_DBSYSTEMVALUES_MARIADB;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_NETEZZA in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_NETEZZA = TMP_DBSYSTEMVALUES_NETEZZA;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_PERVASIVE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_PERVASIVE = TMP_DBSYSTEMVALUES_PERVASIVE;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_POINTBASE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_POINTBASE = TMP_DBSYSTEMVALUES_POINTBASE;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_SQLITE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_SQLITE = TMP_DBSYSTEMVALUES_SQLITE;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_SYBASE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_SYBASE = TMP_DBSYSTEMVALUES_SYBASE;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_TERADATA in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_TERADATA = TMP_DBSYSTEMVALUES_TERADATA;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_VERTICA in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_VERTICA = TMP_DBSYSTEMVALUES_VERTICA;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_H2 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_H2 = TMP_DBSYSTEMVALUES_H2;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_COLDFUSION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_COLDFUSION = TMP_DBSYSTEMVALUES_COLDFUSION;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_CASSANDRA in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_CASSANDRA = TMP_DBSYSTEMVALUES_CASSANDRA;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_HBASE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_HBASE = TMP_DBSYSTEMVALUES_HBASE;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_MONGODB in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_MONGODB = TMP_DBSYSTEMVALUES_MONGODB;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_REDIS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_REDIS = TMP_DBSYSTEMVALUES_REDIS;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_COUCHBASE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_COUCHBASE = TMP_DBSYSTEMVALUES_COUCHBASE;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_COUCHDB in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_COUCHDB = TMP_DBSYSTEMVALUES_COUCHDB;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_COSMOSDB in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_COSMOSDB = TMP_DBSYSTEMVALUES_COSMOSDB;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_DYNAMODB in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_DYNAMODB = TMP_DBSYSTEMVALUES_DYNAMODB;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_NEO4J in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_NEO4J = TMP_DBSYSTEMVALUES_NEO4J;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_GEODE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_GEODE = TMP_DBSYSTEMVALUES_GEODE;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_ELASTICSEARCH in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_ELASTICSEARCH = TMP_DBSYSTEMVALUES_ELASTICSEARCH;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_MEMCACHED in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_MEMCACHED = TMP_DBSYSTEMVALUES_MEMCACHED;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_COCKROACHDB in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_COCKROACHDB = TMP_DBSYSTEMVALUES_COCKROACHDB;\n/**\n * The constant map of values for DbSystemValues.\n * @deprecated Use the DBSYSTEMVALUES_XXXXX constants rather than the DbSystemValues.XXXXX for bundle minification.\n */\nexport const DbSystemValues = \n/*#__PURE__*/ createConstMap([\n    TMP_DBSYSTEMVALUES_OTHER_SQL,\n    TMP_DBSYSTEMVALUES_MSSQL,\n    TMP_DBSYSTEMVALUES_MYSQL,\n    TMP_DBSYSTEMVALUES_ORACLE,\n    TMP_DBSYSTEMVALUES_DB2,\n    TMP_DBSYSTEMVALUES_POSTGRESQL,\n    TMP_DBSYSTEMVALUES_REDSHIFT,\n    TMP_DBSYSTEMVALUES_HIVE,\n    TMP_DBSYSTEMVALUES_CLOUDSCAPE,\n    TMP_DBSYSTEMVALUES_HSQLDB,\n    TMP_DBSYSTEMVALUES_PROGRESS,\n    TMP_DBSYSTEMVALUES_MAXDB,\n    TMP_DBSYSTEMVALUES_HANADB,\n    TMP_DBSYSTEMVALUES_INGRES,\n    TMP_DBSYSTEMVALUES_FIRSTSQL,\n    TMP_DBSYSTEMVALUES_EDB,\n    TMP_DBSYSTEMVALUES_CACHE,\n    TMP_DBSYSTEMVALUES_ADABAS,\n    TMP_DBSYSTEMVALUES_FIREBIRD,\n    TMP_DBSYSTEMVALUES_DERBY,\n    TMP_DBSYSTEMVALUES_FILEMAKER,\n    TMP_DBSYSTEMVALUES_INFORMIX,\n    TMP_DBSYSTEMVALUES_INSTANTDB,\n    TMP_DBSYSTEMVALUES_INTERBASE,\n    TMP_DBSYSTEMVALUES_MARIADB,\n    TMP_DBSYSTEMVALUES_NETEZZA,\n    TMP_DBSYSTEMVALUES_PERVASIVE,\n    TMP_DBSYSTEMVALUES_POINTBASE,\n    TMP_DBSYSTEMVALUES_SQLITE,\n    TMP_DBSYSTEMVALUES_SYBASE,\n    TMP_DBSYSTEMVALUES_TERADATA,\n    TMP_DBSYSTEMVALUES_VERTICA,\n    TMP_DBSYSTEMVALUES_H2,\n    TMP_DBSYSTEMVALUES_COLDFUSION,\n    TMP_DBSYSTEMVALUES_CASSANDRA,\n    TMP_DBSYSTEMVALUES_HBASE,\n    TMP_DBSYSTEMVALUES_MONGODB,\n    TMP_DBSYSTEMVALUES_REDIS,\n    TMP_DBSYSTEMVALUES_COUCHBASE,\n    TMP_DBSYSTEMVALUES_COUCHDB,\n    TMP_DBSYSTEMVALUES_COSMOSDB,\n    TMP_DBSYSTEMVALUES_DYNAMODB,\n    TMP_DBSYSTEMVALUES_NEO4J,\n    TMP_DBSYSTEMVALUES_GEODE,\n    TMP_DBSYSTEMVALUES_ELASTICSEARCH,\n    TMP_DBSYSTEMVALUES_MEMCACHED,\n    TMP_DBSYSTEMVALUES_COCKROACHDB,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for DbCassandraConsistencyLevelValues enum definition\n *\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ALL = 'all';\nconst TMP_DBCASSANDRACONSISTENCYLEVELVALUES_EACH_QUORUM = 'each_quorum';\nconst TMP_DBCASSANDRACONSISTENCYLEVELVALUES_QUORUM = 'quorum';\nconst TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_QUORUM = 'local_quorum';\nconst TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ONE = 'one';\nconst TMP_DBCASSANDRACONSISTENCYLEVELVALUES_TWO = 'two';\nconst TMP_DBCASSANDRACONSISTENCYLEVELVALUES_THREE = 'three';\nconst TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_ONE = 'local_one';\nconst TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ANY = 'any';\nconst TMP_DBCASSANDRACONSISTENCYLEVELVALUES_SERIAL = 'serial';\nconst TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_SERIAL = 'local_serial';\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n *\n * @deprecated Use DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_ALL in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBCASSANDRACONSISTENCYLEVELVALUES_ALL = TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ALL;\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n *\n * @deprecated Use DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_EACH_QUORUM in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBCASSANDRACONSISTENCYLEVELVALUES_EACH_QUORUM = TMP_DBCASSANDRACONSISTENCYLEVELVALUES_EACH_QUORUM;\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n *\n * @deprecated Use DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_QUORUM in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBCASSANDRACONSISTENCYLEVELVALUES_QUORUM = TMP_DBCASSANDRACONSISTENCYLEVELVALUES_QUORUM;\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n *\n * @deprecated Use DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_LOCAL_QUORUM in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_QUORUM = TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_QUORUM;\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n *\n * @deprecated Use DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_ONE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBCASSANDRACONSISTENCYLEVELVALUES_ONE = TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ONE;\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n *\n * @deprecated Use DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_TWO in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBCASSANDRACONSISTENCYLEVELVALUES_TWO = TMP_DBCASSANDRACONSISTENCYLEVELVALUES_TWO;\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n *\n * @deprecated Use DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_THREE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBCASSANDRACONSISTENCYLEVELVALUES_THREE = TMP_DBCASSANDRACONSISTENCYLEVELVALUES_THREE;\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n *\n * @deprecated Use DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_LOCAL_ONE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_ONE = TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_ONE;\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n *\n * @deprecated Use DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_ANY in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBCASSANDRACONSISTENCYLEVELVALUES_ANY = TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ANY;\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n *\n * @deprecated Use DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_SERIAL in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBCASSANDRACONSISTENCYLEVELVALUES_SERIAL = TMP_DBCASSANDRACONSISTENCYLEVELVALUES_SERIAL;\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n *\n * @deprecated Use DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_LOCAL_SERIAL in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_SERIAL = TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_SERIAL;\n/**\n * The constant map of values for DbCassandraConsistencyLevelValues.\n * @deprecated Use the DBCASSANDRACONSISTENCYLEVELVALUES_XXXXX constants rather than the DbCassandraConsistencyLevelValues.XXXXX for bundle minification.\n */\nexport const DbCassandraConsistencyLevelValues = \n/*#__PURE__*/ createConstMap([\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ALL,\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_EACH_QUORUM,\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_QUORUM,\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_QUORUM,\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ONE,\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_TWO,\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_THREE,\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_ONE,\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ANY,\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_SERIAL,\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_SERIAL,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for FaasTriggerValues enum definition\n *\n * Type of the trigger on which the function is executed.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_FAASTRIGGERVALUES_DATASOURCE = 'datasource';\nconst TMP_FAASTRIGGERVALUES_HTTP = 'http';\nconst TMP_FAASTRIGGERVALUES_PUBSUB = 'pubsub';\nconst TMP_FAASTRIGGERVALUES_TIMER = 'timer';\nconst TMP_FAASTRIGGERVALUES_OTHER = 'other';\n/**\n * Type of the trigger on which the function is executed.\n *\n * @deprecated Use FAAS_TRIGGER_VALUE_DATASOURCE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const FAASTRIGGERVALUES_DATASOURCE = TMP_FAASTRIGGERVALUES_DATASOURCE;\n/**\n * Type of the trigger on which the function is executed.\n *\n * @deprecated Use FAAS_TRIGGER_VALUE_HTTP in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const FAASTRIGGERVALUES_HTTP = TMP_FAASTRIGGERVALUES_HTTP;\n/**\n * Type of the trigger on which the function is executed.\n *\n * @deprecated Use FAAS_TRIGGER_VALUE_PUBSUB in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const FAASTRIGGERVALUES_PUBSUB = TMP_FAASTRIGGERVALUES_PUBSUB;\n/**\n * Type of the trigger on which the function is executed.\n *\n * @deprecated Use FAAS_TRIGGER_VALUE_TIMER in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const FAASTRIGGERVALUES_TIMER = TMP_FAASTRIGGERVALUES_TIMER;\n/**\n * Type of the trigger on which the function is executed.\n *\n * @deprecated Use FAAS_TRIGGER_VALUE_OTHER in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const FAASTRIGGERVALUES_OTHER = TMP_FAASTRIGGERVALUES_OTHER;\n/**\n * The constant map of values for FaasTriggerValues.\n * @deprecated Use the FAASTRIGGERVALUES_XXXXX constants rather than the FaasTriggerValues.XXXXX for bundle minification.\n */\nexport const FaasTriggerValues = \n/*#__PURE__*/ createConstMap([\n    TMP_FAASTRIGGERVALUES_DATASOURCE,\n    TMP_FAASTRIGGERVALUES_HTTP,\n    TMP_FAASTRIGGERVALUES_PUBSUB,\n    TMP_FAASTRIGGERVALUES_TIMER,\n    TMP_FAASTRIGGERVALUES_OTHER,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for FaasDocumentOperationValues enum definition\n *\n * Describes the type of the operation that was performed on the data.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_FAASDOCUMENTOPERATIONVALUES_INSERT = 'insert';\nconst TMP_FAASDOCUMENTOPERATIONVALUES_EDIT = 'edit';\nconst TMP_FAASDOCUMENTOPERATIONVALUES_DELETE = 'delete';\n/**\n * Describes the type of the operation that was performed on the data.\n *\n * @deprecated Use FAAS_DOCUMENT_OPERATION_VALUE_INSERT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const FAASDOCUMENTOPERATIONVALUES_INSERT = TMP_FAASDOCUMENTOPERATIONVALUES_INSERT;\n/**\n * Describes the type of the operation that was performed on the data.\n *\n * @deprecated Use FAAS_DOCUMENT_OPERATION_VALUE_EDIT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const FAASDOCUMENTOPERATIONVALUES_EDIT = TMP_FAASDOCUMENTOPERATIONVALUES_EDIT;\n/**\n * Describes the type of the operation that was performed on the data.\n *\n * @deprecated Use FAAS_DOCUMENT_OPERATION_VALUE_DELETE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const FAASDOCUMENTOPERATIONVALUES_DELETE = TMP_FAASDOCUMENTOPERATIONVALUES_DELETE;\n/**\n * The constant map of values for FaasDocumentOperationValues.\n * @deprecated Use the FAASDOCUMENTOPERATIONVALUES_XXXXX constants rather than the FaasDocumentOperationValues.XXXXX for bundle minification.\n */\nexport const FaasDocumentOperationValues = \n/*#__PURE__*/ createConstMap([\n    TMP_FAASDOCUMENTOPERATIONVALUES_INSERT,\n    TMP_FAASDOCUMENTOPERATIONVALUES_EDIT,\n    TMP_FAASDOCUMENTOPERATIONVALUES_DELETE,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for FaasInvokedProviderValues enum definition\n *\n * The cloud provider of the invoked function.\n *\n * Note: SHOULD be equal to the `cloud.provider` resource attribute of the invoked function.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_FAASINVOKEDPROVIDERVALUES_ALIBABA_CLOUD = 'alibaba_cloud';\nconst TMP_FAASINVOKEDPROVIDERVALUES_AWS = 'aws';\nconst TMP_FAASINVOKEDPROVIDERVALUES_AZURE = 'azure';\nconst TMP_FAASINVOKEDPROVIDERVALUES_GCP = 'gcp';\n/**\n * The cloud provider of the invoked function.\n *\n * Note: SHOULD be equal to the `cloud.provider` resource attribute of the invoked function.\n *\n * @deprecated Use FAAS_INVOKED_PROVIDER_VALUE_ALIBABA_CLOUD in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const FAASINVOKEDPROVIDERVALUES_ALIBABA_CLOUD = TMP_FAASINVOKEDPROVIDERVALUES_ALIBABA_CLOUD;\n/**\n * The cloud provider of the invoked function.\n *\n * Note: SHOULD be equal to the `cloud.provider` resource attribute of the invoked function.\n *\n * @deprecated Use FAAS_INVOKED_PROVIDER_VALUE_AWS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const FAASINVOKEDPROVIDERVALUES_AWS = TMP_FAASINVOKEDPROVIDERVALUES_AWS;\n/**\n * The cloud provider of the invoked function.\n *\n * Note: SHOULD be equal to the `cloud.provider` resource attribute of the invoked function.\n *\n * @deprecated Use FAAS_INVOKED_PROVIDER_VALUE_AZURE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const FAASINVOKEDPROVIDERVALUES_AZURE = TMP_FAASINVOKEDPROVIDERVALUES_AZURE;\n/**\n * The cloud provider of the invoked function.\n *\n * Note: SHOULD be equal to the `cloud.provider` resource attribute of the invoked function.\n *\n * @deprecated Use FAAS_INVOKED_PROVIDER_VALUE_GCP in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const FAASINVOKEDPROVIDERVALUES_GCP = TMP_FAASINVOKEDPROVIDERVALUES_GCP;\n/**\n * The constant map of values for FaasInvokedProviderValues.\n * @deprecated Use the FAASINVOKEDPROVIDERVALUES_XXXXX constants rather than the FaasInvokedProviderValues.XXXXX for bundle minification.\n */\nexport const FaasInvokedProviderValues = \n/*#__PURE__*/ createConstMap([\n    TMP_FAASINVOKEDPROVIDERVALUES_ALIBABA_CLOUD,\n    TMP_FAASINVOKEDPROVIDERVALUES_AWS,\n    TMP_FAASINVOKEDPROVIDERVALUES_AZURE,\n    TMP_FAASINVOKEDPROVIDERVALUES_GCP,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for NetTransportValues enum definition\n *\n * Transport protocol used. See note below.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_NETTRANSPORTVALUES_IP_TCP = 'ip_tcp';\nconst TMP_NETTRANSPORTVALUES_IP_UDP = 'ip_udp';\nconst TMP_NETTRANSPORTVALUES_IP = 'ip';\nconst TMP_NETTRANSPORTVALUES_UNIX = 'unix';\nconst TMP_NETTRANSPORTVALUES_PIPE = 'pipe';\nconst TMP_NETTRANSPORTVALUES_INPROC = 'inproc';\nconst TMP_NETTRANSPORTVALUES_OTHER = 'other';\n/**\n * Transport protocol used. See note below.\n *\n * @deprecated Use NET_TRANSPORT_VALUE_IP_TCP in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETTRANSPORTVALUES_IP_TCP = TMP_NETTRANSPORTVALUES_IP_TCP;\n/**\n * Transport protocol used. See note below.\n *\n * @deprecated Use NET_TRANSPORT_VALUE_IP_UDP in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETTRANSPORTVALUES_IP_UDP = TMP_NETTRANSPORTVALUES_IP_UDP;\n/**\n * Transport protocol used. See note below.\n *\n * @deprecated Removed in v1.21.0.\n */\nexport const NETTRANSPORTVALUES_IP = TMP_NETTRANSPORTVALUES_IP;\n/**\n * Transport protocol used. See note below.\n *\n * @deprecated Removed in v1.21.0.\n */\nexport const NETTRANSPORTVALUES_UNIX = TMP_NETTRANSPORTVALUES_UNIX;\n/**\n * Transport protocol used. See note below.\n *\n * @deprecated Use NET_TRANSPORT_VALUE_PIPE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETTRANSPORTVALUES_PIPE = TMP_NETTRANSPORTVALUES_PIPE;\n/**\n * Transport protocol used. See note below.\n *\n * @deprecated Use NET_TRANSPORT_VALUE_INPROC in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETTRANSPORTVALUES_INPROC = TMP_NETTRANSPORTVALUES_INPROC;\n/**\n * Transport protocol used. See note below.\n *\n * @deprecated Use NET_TRANSPORT_VALUE_OTHER in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETTRANSPORTVALUES_OTHER = TMP_NETTRANSPORTVALUES_OTHER;\n/**\n * The constant map of values for NetTransportValues.\n * @deprecated Use the NETTRANSPORTVALUES_XXXXX constants rather than the NetTransportValues.XXXXX for bundle minification.\n */\nexport const NetTransportValues = \n/*#__PURE__*/ createConstMap([\n    TMP_NETTRANSPORTVALUES_IP_TCP,\n    TMP_NETTRANSPORTVALUES_IP_UDP,\n    TMP_NETTRANSPORTVALUES_IP,\n    TMP_NETTRANSPORTVALUES_UNIX,\n    TMP_NETTRANSPORTVALUES_PIPE,\n    TMP_NETTRANSPORTVALUES_INPROC,\n    TMP_NETTRANSPORTVALUES_OTHER,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for NetHostConnectionTypeValues enum definition\n *\n * The internet connection type currently being used by the host.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_NETHOSTCONNECTIONTYPEVALUES_WIFI = 'wifi';\nconst TMP_NETHOSTCONNECTIONTYPEVALUES_WIRED = 'wired';\nconst TMP_NETHOSTCONNECTIONTYPEVALUES_CELL = 'cell';\nconst TMP_NETHOSTCONNECTIONTYPEVALUES_UNAVAILABLE = 'unavailable';\nconst TMP_NETHOSTCONNECTIONTYPEVALUES_UNKNOWN = 'unknown';\n/**\n * The internet connection type currently being used by the host.\n *\n * @deprecated Use NETWORK_CONNECTION_TYPE_VALUE_WIFI in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETHOSTCONNECTIONTYPEVALUES_WIFI = TMP_NETHOSTCONNECTIONTYPEVALUES_WIFI;\n/**\n * The internet connection type currently being used by the host.\n *\n * @deprecated Use NETWORK_CONNECTION_TYPE_VALUE_WIRED in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETHOSTCONNECTIONTYPEVALUES_WIRED = TMP_NETHOSTCONNECTIONTYPEVALUES_WIRED;\n/**\n * The internet connection type currently being used by the host.\n *\n * @deprecated Use NETWORK_CONNECTION_TYPE_VALUE_CELL in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETHOSTCONNECTIONTYPEVALUES_CELL = TMP_NETHOSTCONNECTIONTYPEVALUES_CELL;\n/**\n * The internet connection type currently being used by the host.\n *\n * @deprecated Use NETWORK_CONNECTION_TYPE_VALUE_UNAVAILABLE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETHOSTCONNECTIONTYPEVALUES_UNAVAILABLE = TMP_NETHOSTCONNECTIONTYPEVALUES_UNAVAILABLE;\n/**\n * The internet connection type currently being used by the host.\n *\n * @deprecated Use NETWORK_CONNECTION_TYPE_VALUE_UNKNOWN in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETHOSTCONNECTIONTYPEVALUES_UNKNOWN = TMP_NETHOSTCONNECTIONTYPEVALUES_UNKNOWN;\n/**\n * The constant map of values for NetHostConnectionTypeValues.\n * @deprecated Use the NETHOSTCONNECTIONTYPEVALUES_XXXXX constants rather than the NetHostConnectionTypeValues.XXXXX for bundle minification.\n */\nexport const NetHostConnectionTypeValues = \n/*#__PURE__*/ createConstMap([\n    TMP_NETHOSTCONNECTIONTYPEVALUES_WIFI,\n    TMP_NETHOSTCONNECTIONTYPEVALUES_WIRED,\n    TMP_NETHOSTCONNECTIONTYPEVALUES_CELL,\n    TMP_NETHOSTCONNECTIONTYPEVALUES_UNAVAILABLE,\n    TMP_NETHOSTCONNECTIONTYPEVALUES_UNKNOWN,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for NetHostConnectionSubtypeValues enum definition\n *\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_GPRS = 'gprs';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EDGE = 'edge';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_UMTS = 'umts';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_CDMA = 'cdma';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_0 = 'evdo_0';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_A = 'evdo_a';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_CDMA2000_1XRTT = 'cdma2000_1xrtt';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSDPA = 'hsdpa';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSUPA = 'hsupa';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSPA = 'hspa';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_IDEN = 'iden';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_B = 'evdo_b';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_LTE = 'lte';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EHRPD = 'ehrpd';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSPAP = 'hspap';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_GSM = 'gsm';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_TD_SCDMA = 'td_scdma';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_IWLAN = 'iwlan';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_NR = 'nr';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_NRNSA = 'nrnsa';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_LTE_CA = 'lte_ca';\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_GPRS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_GPRS = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_GPRS;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_EDGE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_EDGE = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EDGE;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_UMTS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_UMTS = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_UMTS;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_CDMA in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_CDMA = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_CDMA;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_EVDO_0 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_0 = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_0;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_EVDO_A in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_A = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_A;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_CDMA2000_1XRTT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_CDMA2000_1XRTT = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_CDMA2000_1XRTT;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_HSDPA in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_HSDPA = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSDPA;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_HSUPA in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_HSUPA = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSUPA;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_HSPA in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_HSPA = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSPA;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_IDEN in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_IDEN = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_IDEN;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_EVDO_B in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_B = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_B;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_LTE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_LTE = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_LTE;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_EHRPD in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_EHRPD = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EHRPD;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_HSPAP in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_HSPAP = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSPAP;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_GSM in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_GSM = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_GSM;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_TD_SCDMA in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_TD_SCDMA = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_TD_SCDMA;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_IWLAN in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_IWLAN = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_IWLAN;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_NR in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_NR = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_NR;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_NRNSA in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_NRNSA = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_NRNSA;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_LTE_CA in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_LTE_CA = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_LTE_CA;\n/**\n * The constant map of values for NetHostConnectionSubtypeValues.\n * @deprecated Use the NETHOSTCONNECTIONSUBTYPEVALUES_XXXXX constants rather than the NetHostConnectionSubtypeValues.XXXXX for bundle minification.\n */\nexport const NetHostConnectionSubtypeValues = \n/*#__PURE__*/ createConstMap([\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_GPRS,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EDGE,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_UMTS,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_CDMA,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_0,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_A,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_CDMA2000_1XRTT,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSDPA,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSUPA,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSPA,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_IDEN,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_B,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_LTE,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EHRPD,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSPAP,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_GSM,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_TD_SCDMA,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_IWLAN,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_NR,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_NRNSA,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_LTE_CA,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for HttpFlavorValues enum definition\n *\n * Kind of HTTP protocol used.\n *\n * Note: If `net.transport` is not specified, it can be assumed to be `IP.TCP` except if `http.flavor` is `QUIC`, in which case `IP.UDP` is assumed.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_HTTPFLAVORVALUES_HTTP_1_0 = '1.0';\nconst TMP_HTTPFLAVORVALUES_HTTP_1_1 = '1.1';\nconst TMP_HTTPFLAVORVALUES_HTTP_2_0 = '2.0';\nconst TMP_HTTPFLAVORVALUES_SPDY = 'SPDY';\nconst TMP_HTTPFLAVORVALUES_QUIC = 'QUIC';\n/**\n * Kind of HTTP protocol used.\n *\n * Note: If `net.transport` is not specified, it can be assumed to be `IP.TCP` except if `http.flavor` is `QUIC`, in which case `IP.UDP` is assumed.\n *\n * @deprecated Use HTTP_FLAVOR_VALUE_HTTP_1_0 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const HTTPFLAVORVALUES_HTTP_1_0 = TMP_HTTPFLAVORVALUES_HTTP_1_0;\n/**\n * Kind of HTTP protocol used.\n *\n * Note: If `net.transport` is not specified, it can be assumed to be `IP.TCP` except if `http.flavor` is `QUIC`, in which case `IP.UDP` is assumed.\n *\n * @deprecated Use HTTP_FLAVOR_VALUE_HTTP_1_1 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const HTTPFLAVORVALUES_HTTP_1_1 = TMP_HTTPFLAVORVALUES_HTTP_1_1;\n/**\n * Kind of HTTP protocol used.\n *\n * Note: If `net.transport` is not specified, it can be assumed to be `IP.TCP` except if `http.flavor` is `QUIC`, in which case `IP.UDP` is assumed.\n *\n * @deprecated Use HTTP_FLAVOR_VALUE_HTTP_2_0 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const HTTPFLAVORVALUES_HTTP_2_0 = TMP_HTTPFLAVORVALUES_HTTP_2_0;\n/**\n * Kind of HTTP protocol used.\n *\n * Note: If `net.transport` is not specified, it can be assumed to be `IP.TCP` except if `http.flavor` is `QUIC`, in which case `IP.UDP` is assumed.\n *\n * @deprecated Use HTTP_FLAVOR_VALUE_SPDY in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const HTTPFLAVORVALUES_SPDY = TMP_HTTPFLAVORVALUES_SPDY;\n/**\n * Kind of HTTP protocol used.\n *\n * Note: If `net.transport` is not specified, it can be assumed to be `IP.TCP` except if `http.flavor` is `QUIC`, in which case `IP.UDP` is assumed.\n *\n * @deprecated Use HTTP_FLAVOR_VALUE_QUIC in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const HTTPFLAVORVALUES_QUIC = TMP_HTTPFLAVORVALUES_QUIC;\n/**\n * The constant map of values for HttpFlavorValues.\n * @deprecated Use the HTTPFLAVORVALUES_XXXXX constants rather than the HttpFlavorValues.XXXXX for bundle minification.\n */\nexport const HttpFlavorValues = {\n    HTTP_1_0: TMP_HTTPFLAVORVALUES_HTTP_1_0,\n    HTTP_1_1: TMP_HTTPFLAVORVALUES_HTTP_1_1,\n    HTTP_2_0: TMP_HTTPFLAVORVALUES_HTTP_2_0,\n    SPDY: TMP_HTTPFLAVORVALUES_SPDY,\n    QUIC: TMP_HTTPFLAVORVALUES_QUIC,\n};\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for MessagingDestinationKindValues enum definition\n *\n * The kind of message destination.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_MESSAGINGDESTINATIONKINDVALUES_QUEUE = 'queue';\nconst TMP_MESSAGINGDESTINATIONKINDVALUES_TOPIC = 'topic';\n/**\n * The kind of message destination.\n *\n * @deprecated Removed in semconv v1.20.0.\n */\nexport const MESSAGINGDESTINATIONKINDVALUES_QUEUE = TMP_MESSAGINGDESTINATIONKINDVALUES_QUEUE;\n/**\n * The kind of message destination.\n *\n * @deprecated Removed in semconv v1.20.0.\n */\nexport const MESSAGINGDESTINATIONKINDVALUES_TOPIC = TMP_MESSAGINGDESTINATIONKINDVALUES_TOPIC;\n/**\n * The constant map of values for MessagingDestinationKindValues.\n * @deprecated Use the MESSAGINGDESTINATIONKINDVALUES_XXXXX constants rather than the MessagingDestinationKindValues.XXXXX for bundle minification.\n */\nexport const MessagingDestinationKindValues = \n/*#__PURE__*/ createConstMap([\n    TMP_MESSAGINGDESTINATIONKINDVALUES_QUEUE,\n    TMP_MESSAGINGDESTINATIONKINDVALUES_TOPIC,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for MessagingOperationValues enum definition\n *\n * A string identifying the kind of message consumption as defined in the [Operation names](#operation-names) section above. If the operation is &#34;send&#34;, this attribute MUST NOT be set, since the operation can be inferred from the span kind in that case.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_MESSAGINGOPERATIONVALUES_RECEIVE = 'receive';\nconst TMP_MESSAGINGOPERATIONVALUES_PROCESS = 'process';\n/**\n * A string identifying the kind of message consumption as defined in the [Operation names](#operation-names) section above. If the operation is &#34;send&#34;, this attribute MUST NOT be set, since the operation can be inferred from the span kind in that case.\n *\n * @deprecated Use MESSAGING_OPERATION_TYPE_VALUE_RECEIVE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const MESSAGINGOPERATIONVALUES_RECEIVE = TMP_MESSAGINGOPERATIONVALUES_RECEIVE;\n/**\n * A string identifying the kind of message consumption as defined in the [Operation names](#operation-names) section above. If the operation is &#34;send&#34;, this attribute MUST NOT be set, since the operation can be inferred from the span kind in that case.\n *\n * @deprecated Use MESSAGING_OPERATION_TYPE_VALUE_PROCESS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const MESSAGINGOPERATIONVALUES_PROCESS = TMP_MESSAGINGOPERATIONVALUES_PROCESS;\n/**\n * The constant map of values for MessagingOperationValues.\n * @deprecated Use the MESSAGINGOPERATIONVALUES_XXXXX constants rather than the MessagingOperationValues.XXXXX for bundle minification.\n */\nexport const MessagingOperationValues = \n/*#__PURE__*/ createConstMap([\n    TMP_MESSAGINGOPERATIONVALUES_RECEIVE,\n    TMP_MESSAGINGOPERATIONVALUES_PROCESS,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for RpcGrpcStatusCodeValues enum definition\n *\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_RPCGRPCSTATUSCODEVALUES_OK = 0;\nconst TMP_RPCGRPCSTATUSCODEVALUES_CANCELLED = 1;\nconst TMP_RPCGRPCSTATUSCODEVALUES_UNKNOWN = 2;\nconst TMP_RPCGRPCSTATUSCODEVALUES_INVALID_ARGUMENT = 3;\nconst TMP_RPCGRPCSTATUSCODEVALUES_DEADLINE_EXCEEDED = 4;\nconst TMP_RPCGRPCSTATUSCODEVALUES_NOT_FOUND = 5;\nconst TMP_RPCGRPCSTATUSCODEVALUES_ALREADY_EXISTS = 6;\nconst TMP_RPCGRPCSTATUSCODEVALUES_PERMISSION_DENIED = 7;\nconst TMP_RPCGRPCSTATUSCODEVALUES_RESOURCE_EXHAUSTED = 8;\nconst TMP_RPCGRPCSTATUSCODEVALUES_FAILED_PRECONDITION = 9;\nconst TMP_RPCGRPCSTATUSCODEVALUES_ABORTED = 10;\nconst TMP_RPCGRPCSTATUSCODEVALUES_OUT_OF_RANGE = 11;\nconst TMP_RPCGRPCSTATUSCODEVALUES_UNIMPLEMENTED = 12;\nconst TMP_RPCGRPCSTATUSCODEVALUES_INTERNAL = 13;\nconst TMP_RPCGRPCSTATUSCODEVALUES_UNAVAILABLE = 14;\nconst TMP_RPCGRPCSTATUSCODEVALUES_DATA_LOSS = 15;\nconst TMP_RPCGRPCSTATUSCODEVALUES_UNAUTHENTICATED = 16;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_OK in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const RPCGRPCSTATUSCODEVALUES_OK = TMP_RPCGRPCSTATUSCODEVALUES_OK;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_CANCELLED in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const RPCGRPCSTATUSCODEVALUES_CANCELLED = TMP_RPCGRPCSTATUSCODEVALUES_CANCELLED;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_UNKNOWN in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const RPCGRPCSTATUSCODEVALUES_UNKNOWN = TMP_RPCGRPCSTATUSCODEVALUES_UNKNOWN;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_INVALID_ARGUMENT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const RPCGRPCSTATUSCODEVALUES_INVALID_ARGUMENT = TMP_RPCGRPCSTATUSCODEVALUES_INVALID_ARGUMENT;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_DEADLINE_EXCEEDED in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const RPCGRPCSTATUSCODEVALUES_DEADLINE_EXCEEDED = TMP_RPCGRPCSTATUSCODEVALUES_DEADLINE_EXCEEDED;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_NOT_FOUND in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const RPCGRPCSTATUSCODEVALUES_NOT_FOUND = TMP_RPCGRPCSTATUSCODEVALUES_NOT_FOUND;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_ALREADY_EXISTS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const RPCGRPCSTATUSCODEVALUES_ALREADY_EXISTS = TMP_RPCGRPCSTATUSCODEVALUES_ALREADY_EXISTS;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_PERMISSION_DENIED in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const RPCGRPCSTATUSCODEVALUES_PERMISSION_DENIED = TMP_RPCGRPCSTATUSCODEVALUES_PERMISSION_DENIED;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_RESOURCE_EXHAUSTED in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const RPCGRPCSTATUSCODEVALUES_RESOURCE_EXHAUSTED = TMP_RPCGRPCSTATUSCODEVALUES_RESOURCE_EXHAUSTED;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_FAILED_PRECONDITION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const RPCGRPCSTATUSCODEVALUES_FAILED_PRECONDITION = TMP_RPCGRPCSTATUSCODEVALUES_FAILED_PRECONDITION;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_ABORTED in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const RPCGRPCSTATUSCODEVALUES_ABORTED = TMP_RPCGRPCSTATUSCODEVALUES_ABORTED;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_OUT_OF_RANGE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const RPCGRPCSTATUSCODEVALUES_OUT_OF_RANGE = TMP_RPCGRPCSTATUSCODEVALUES_OUT_OF_RANGE;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_UNIMPLEMENTED in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const RPCGRPCSTATUSCODEVALUES_UNIMPLEMENTED = TMP_RPCGRPCSTATUSCODEVALUES_UNIMPLEMENTED;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_INTERNAL in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const RPCGRPCSTATUSCODEVALUES_INTERNAL = TMP_RPCGRPCSTATUSCODEVALUES_INTERNAL;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_UNAVAILABLE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const RPCGRPCSTATUSCODEVALUES_UNAVAILABLE = TMP_RPCGRPCSTATUSCODEVALUES_UNAVAILABLE;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_DATA_LOSS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const RPCGRPCSTATUSCODEVALUES_DATA_LOSS = TMP_RPCGRPCSTATUSCODEVALUES_DATA_LOSS;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_UNAUTHENTICATED in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const RPCGRPCSTATUSCODEVALUES_UNAUTHENTICATED = TMP_RPCGRPCSTATUSCODEVALUES_UNAUTHENTICATED;\n/**\n * The constant map of values for RpcGrpcStatusCodeValues.\n * @deprecated Use the RPCGRPCSTATUSCODEVALUES_XXXXX constants rather than the RpcGrpcStatusCodeValues.XXXXX for bundle minification.\n */\nexport const RpcGrpcStatusCodeValues = {\n    OK: TMP_RPCGRPCSTATUSCODEVALUES_OK,\n    CANCELLED: TMP_RPCGRPCSTATUSCODEVALUES_CANCELLED,\n    UNKNOWN: TMP_RPCGRPCSTATUSCODEVALUES_UNKNOWN,\n    INVALID_ARGUMENT: TMP_RPCGRPCSTATUSCODEVALUES_INVALID_ARGUMENT,\n    DEADLINE_EXCEEDED: TMP_RPCGRPCSTATUSCODEVALUES_DEADLINE_EXCEEDED,\n    NOT_FOUND: TMP_RPCGRPCSTATUSCODEVALUES_NOT_FOUND,\n    ALREADY_EXISTS: TMP_RPCGRPCSTATUSCODEVALUES_ALREADY_EXISTS,\n    PERMISSION_DENIED: TMP_RPCGRPCSTATUSCODEVALUES_PERMISSION_DENIED,\n    RESOURCE_EXHAUSTED: TMP_RPCGRPCSTATUSCODEVALUES_RESOURCE_EXHAUSTED,\n    FAILED_PRECONDITION: TMP_RPCGRPCSTATUSCODEVALUES_FAILED_PRECONDITION,\n    ABORTED: TMP_RPCGRPCSTATUSCODEVALUES_ABORTED,\n    OUT_OF_RANGE: TMP_RPCGRPCSTATUSCODEVALUES_OUT_OF_RANGE,\n    UNIMPLEMENTED: TMP_RPCGRPCSTATUSCODEVALUES_UNIMPLEMENTED,\n    INTERNAL: TMP_RPCGRPCSTATUSCODEVALUES_INTERNAL,\n    UNAVAILABLE: TMP_RPCGRPCSTATUSCODEVALUES_UNAVAILABLE,\n    DATA_LOSS: TMP_RPCGRPCSTATUSCODEVALUES_DATA_LOSS,\n    UNAUTHENTICATED: TMP_RPCGRPCSTATUSCODEVALUES_UNAUTHENTICATED,\n};\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for MessageTypeValues enum definition\n *\n * Whether this is a received or sent message.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_MESSAGETYPEVALUES_SENT = 'SENT';\nconst TMP_MESSAGETYPEVALUES_RECEIVED = 'RECEIVED';\n/**\n * Whether this is a received or sent message.\n *\n * @deprecated Use MESSAGE_TYPE_VALUE_SENT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const MESSAGETYPEVALUES_SENT = TMP_MESSAGETYPEVALUES_SENT;\n/**\n * Whether this is a received or sent message.\n *\n * @deprecated Use MESSAGE_TYPE_VALUE_RECEIVED in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const MESSAGETYPEVALUES_RECEIVED = TMP_MESSAGETYPEVALUES_RECEIVED;\n/**\n * The constant map of values for MessageTypeValues.\n * @deprecated Use the MESSAGETYPEVALUES_XXXXX constants rather than the MessageTypeValues.XXXXX for bundle minification.\n */\nexport const MessageTypeValues = \n/*#__PURE__*/ createConstMap([\n    TMP_MESSAGETYPEVALUES_SENT,\n    TMP_MESSAGETYPEVALUES_RECEIVED,\n]);\n//# sourceMappingURL=SemanticAttributes.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { createConstMap } from '../internal/utils';\n//----------------------------------------------------------------------------------------------------------\n// DO NOT EDIT, this is an Auto-generated file from scripts/semconv/templates//templates/SemanticAttributes.ts.j2\n//----------------------------------------------------------------------------------------------------------\n//----------------------------------------------------------------------------------------------------------\n// Constant values for SemanticResourceAttributes\n//----------------------------------------------------------------------------------------------------------\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_CLOUD_PROVIDER = 'cloud.provider';\nconst TMP_CLOUD_ACCOUNT_ID = 'cloud.account.id';\nconst TMP_CLOUD_REGION = 'cloud.region';\nconst TMP_CLOUD_AVAILABILITY_ZONE = 'cloud.availability_zone';\nconst TMP_CLOUD_PLATFORM = 'cloud.platform';\nconst TMP_AWS_ECS_CONTAINER_ARN = 'aws.ecs.container.arn';\nconst TMP_AWS_ECS_CLUSTER_ARN = 'aws.ecs.cluster.arn';\nconst TMP_AWS_ECS_LAUNCHTYPE = 'aws.ecs.launchtype';\nconst TMP_AWS_ECS_TASK_ARN = 'aws.ecs.task.arn';\nconst TMP_AWS_ECS_TASK_FAMILY = 'aws.ecs.task.family';\nconst TMP_AWS_ECS_TASK_REVISION = 'aws.ecs.task.revision';\nconst TMP_AWS_EKS_CLUSTER_ARN = 'aws.eks.cluster.arn';\nconst TMP_AWS_LOG_GROUP_NAMES = 'aws.log.group.names';\nconst TMP_AWS_LOG_GROUP_ARNS = 'aws.log.group.arns';\nconst TMP_AWS_LOG_STREAM_NAMES = 'aws.log.stream.names';\nconst TMP_AWS_LOG_STREAM_ARNS = 'aws.log.stream.arns';\nconst TMP_CONTAINER_NAME = 'container.name';\nconst TMP_CONTAINER_ID = 'container.id';\nconst TMP_CONTAINER_RUNTIME = 'container.runtime';\nconst TMP_CONTAINER_IMAGE_NAME = 'container.image.name';\nconst TMP_CONTAINER_IMAGE_TAG = 'container.image.tag';\nconst TMP_DEPLOYMENT_ENVIRONMENT = 'deployment.environment';\nconst TMP_DEVICE_ID = 'device.id';\nconst TMP_DEVICE_MODEL_IDENTIFIER = 'device.model.identifier';\nconst TMP_DEVICE_MODEL_NAME = 'device.model.name';\nconst TMP_FAAS_NAME = 'faas.name';\nconst TMP_FAAS_ID = 'faas.id';\nconst TMP_FAAS_VERSION = 'faas.version';\nconst TMP_FAAS_INSTANCE = 'faas.instance';\nconst TMP_FAAS_MAX_MEMORY = 'faas.max_memory';\nconst TMP_HOST_ID = 'host.id';\nconst TMP_HOST_NAME = 'host.name';\nconst TMP_HOST_TYPE = 'host.type';\nconst TMP_HOST_ARCH = 'host.arch';\nconst TMP_HOST_IMAGE_NAME = 'host.image.name';\nconst TMP_HOST_IMAGE_ID = 'host.image.id';\nconst TMP_HOST_IMAGE_VERSION = 'host.image.version';\nconst TMP_K8S_CLUSTER_NAME = 'k8s.cluster.name';\nconst TMP_K8S_NODE_NAME = 'k8s.node.name';\nconst TMP_K8S_NODE_UID = 'k8s.node.uid';\nconst TMP_K8S_NAMESPACE_NAME = 'k8s.namespace.name';\nconst TMP_K8S_POD_UID = 'k8s.pod.uid';\nconst TMP_K8S_POD_NAME = 'k8s.pod.name';\nconst TMP_K8S_CONTAINER_NAME = 'k8s.container.name';\nconst TMP_K8S_REPLICASET_UID = 'k8s.replicaset.uid';\nconst TMP_K8S_REPLICASET_NAME = 'k8s.replicaset.name';\nconst TMP_K8S_DEPLOYMENT_UID = 'k8s.deployment.uid';\nconst TMP_K8S_DEPLOYMENT_NAME = 'k8s.deployment.name';\nconst TMP_K8S_STATEFULSET_UID = 'k8s.statefulset.uid';\nconst TMP_K8S_STATEFULSET_NAME = 'k8s.statefulset.name';\nconst TMP_K8S_DAEMONSET_UID = 'k8s.daemonset.uid';\nconst TMP_K8S_DAEMONSET_NAME = 'k8s.daemonset.name';\nconst TMP_K8S_JOB_UID = 'k8s.job.uid';\nconst TMP_K8S_JOB_NAME = 'k8s.job.name';\nconst TMP_K8S_CRONJOB_UID = 'k8s.cronjob.uid';\nconst TMP_K8S_CRONJOB_NAME = 'k8s.cronjob.name';\nconst TMP_OS_TYPE = 'os.type';\nconst TMP_OS_DESCRIPTION = 'os.description';\nconst TMP_OS_NAME = 'os.name';\nconst TMP_OS_VERSION = 'os.version';\nconst TMP_PROCESS_PID = 'process.pid';\nconst TMP_PROCESS_EXECUTABLE_NAME = 'process.executable.name';\nconst TMP_PROCESS_EXECUTABLE_PATH = 'process.executable.path';\nconst TMP_PROCESS_COMMAND = 'process.command';\nconst TMP_PROCESS_COMMAND_LINE = 'process.command_line';\nconst TMP_PROCESS_COMMAND_ARGS = 'process.command_args';\nconst TMP_PROCESS_OWNER = 'process.owner';\nconst TMP_PROCESS_RUNTIME_NAME = 'process.runtime.name';\nconst TMP_PROCESS_RUNTIME_VERSION = 'process.runtime.version';\nconst TMP_PROCESS_RUNTIME_DESCRIPTION = 'process.runtime.description';\nconst TMP_SERVICE_NAME = 'service.name';\nconst TMP_SERVICE_NAMESPACE = 'service.namespace';\nconst TMP_SERVICE_INSTANCE_ID = 'service.instance.id';\nconst TMP_SERVICE_VERSION = 'service.version';\nconst TMP_TELEMETRY_SDK_NAME = 'telemetry.sdk.name';\nconst TMP_TELEMETRY_SDK_LANGUAGE = 'telemetry.sdk.language';\nconst TMP_TELEMETRY_SDK_VERSION = 'telemetry.sdk.version';\nconst TMP_TELEMETRY_AUTO_VERSION = 'telemetry.auto.version';\nconst TMP_WEBENGINE_NAME = 'webengine.name';\nconst TMP_WEBENGINE_VERSION = 'webengine.version';\nconst TMP_WEBENGINE_DESCRIPTION = 'webengine.description';\n/**\n * Name of the cloud provider.\n *\n * @deprecated Use ATTR_CLOUD_PROVIDER in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_CLOUD_PROVIDER = TMP_CLOUD_PROVIDER;\n/**\n * The cloud account ID the resource is assigned to.\n *\n * @deprecated Use ATTR_CLOUD_ACCOUNT_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_CLOUD_ACCOUNT_ID = TMP_CLOUD_ACCOUNT_ID;\n/**\n * The geographical region the resource is running. Refer to your provider&#39;s docs to see the available regions, for example [Alibaba Cloud regions](https://www.alibabacloud.com/help/doc-detail/40654.htm), [AWS regions](https://aws.amazon.com/about-aws/global-infrastructure/regions_az/), [Azure regions](https://azure.microsoft.com/en-us/global-infrastructure/geographies/), or [Google Cloud regions](https://cloud.google.com/about/locations).\n *\n * @deprecated Use ATTR_CLOUD_REGION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_CLOUD_REGION = TMP_CLOUD_REGION;\n/**\n * Cloud regions often have multiple, isolated locations known as zones to increase availability. Availability zone represents the zone where the resource is running.\n *\n * Note: Availability zones are called &#34;zones&#34; on Alibaba Cloud and Google Cloud.\n *\n * @deprecated Use ATTR_CLOUD_AVAILABILITY_ZONE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_CLOUD_AVAILABILITY_ZONE = TMP_CLOUD_AVAILABILITY_ZONE;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use ATTR_CLOUD_PLATFORM in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_CLOUD_PLATFORM = TMP_CLOUD_PLATFORM;\n/**\n * The Amazon Resource Name (ARN) of an [ECS container instance](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ECS_instances.html).\n *\n * @deprecated Use ATTR_AWS_ECS_CONTAINER_ARN in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_AWS_ECS_CONTAINER_ARN = TMP_AWS_ECS_CONTAINER_ARN;\n/**\n * The ARN of an [ECS cluster](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/clusters.html).\n *\n * @deprecated Use ATTR_AWS_ECS_CLUSTER_ARN in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_AWS_ECS_CLUSTER_ARN = TMP_AWS_ECS_CLUSTER_ARN;\n/**\n * The [launch type](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) for an ECS task.\n *\n * @deprecated Use ATTR_AWS_ECS_LAUNCHTYPE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_AWS_ECS_LAUNCHTYPE = TMP_AWS_ECS_LAUNCHTYPE;\n/**\n * The ARN of an [ECS task definition](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definitions.html).\n *\n * @deprecated Use ATTR_AWS_ECS_TASK_ARN in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_AWS_ECS_TASK_ARN = TMP_AWS_ECS_TASK_ARN;\n/**\n * The task definition family this task definition is a member of.\n *\n * @deprecated Use ATTR_AWS_ECS_TASK_FAMILY in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_AWS_ECS_TASK_FAMILY = TMP_AWS_ECS_TASK_FAMILY;\n/**\n * The revision for this task definition.\n *\n * @deprecated Use ATTR_AWS_ECS_TASK_REVISION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_AWS_ECS_TASK_REVISION = TMP_AWS_ECS_TASK_REVISION;\n/**\n * The ARN of an EKS cluster.\n *\n * @deprecated Use ATTR_AWS_EKS_CLUSTER_ARN in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_AWS_EKS_CLUSTER_ARN = TMP_AWS_EKS_CLUSTER_ARN;\n/**\n * The name(s) of the AWS log group(s) an application is writing to.\n *\n * Note: Multiple log groups must be supported for cases like multi-container applications, where a single application has sidecar containers, and each write to their own log group.\n *\n * @deprecated Use ATTR_AWS_LOG_GROUP_NAMES in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_AWS_LOG_GROUP_NAMES = TMP_AWS_LOG_GROUP_NAMES;\n/**\n * The Amazon Resource Name(s) (ARN) of the AWS log group(s).\n *\n * Note: See the [log group ARN format documentation](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/iam-access-control-overview-cwl.html#CWL_ARN_Format).\n *\n * @deprecated Use ATTR_AWS_LOG_GROUP_ARNS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_AWS_LOG_GROUP_ARNS = TMP_AWS_LOG_GROUP_ARNS;\n/**\n * The name(s) of the AWS log stream(s) an application is writing to.\n *\n * @deprecated Use ATTR_AWS_LOG_STREAM_NAMES in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_AWS_LOG_STREAM_NAMES = TMP_AWS_LOG_STREAM_NAMES;\n/**\n * The ARN(s) of the AWS log stream(s).\n *\n * Note: See the [log stream ARN format documentation](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/iam-access-control-overview-cwl.html#CWL_ARN_Format). One log group can contain several log streams, so these ARNs necessarily identify both a log group and a log stream.\n *\n * @deprecated Use ATTR_AWS_LOG_STREAM_ARNS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_AWS_LOG_STREAM_ARNS = TMP_AWS_LOG_STREAM_ARNS;\n/**\n * Container name.\n *\n * @deprecated Use ATTR_CONTAINER_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_CONTAINER_NAME = TMP_CONTAINER_NAME;\n/**\n * Container ID. Usually a UUID, as for example used to [identify Docker containers](https://docs.docker.com/engine/reference/run/#container-identification). The UUID might be abbreviated.\n *\n * @deprecated Use ATTR_CONTAINER_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_CONTAINER_ID = TMP_CONTAINER_ID;\n/**\n * The container runtime managing this container.\n *\n * @deprecated Use ATTR_CONTAINER_RUNTIME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_CONTAINER_RUNTIME = TMP_CONTAINER_RUNTIME;\n/**\n * Name of the image the container was built on.\n *\n * @deprecated Use ATTR_CONTAINER_IMAGE_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_CONTAINER_IMAGE_NAME = TMP_CONTAINER_IMAGE_NAME;\n/**\n * Container image tag.\n *\n * @deprecated Use ATTR_CONTAINER_IMAGE_TAGS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_CONTAINER_IMAGE_TAG = TMP_CONTAINER_IMAGE_TAG;\n/**\n * Name of the [deployment environment](https://en.wikipedia.org/wiki/Deployment_environment) (aka deployment tier).\n *\n * @deprecated Use ATTR_DEPLOYMENT_ENVIRONMENT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_DEPLOYMENT_ENVIRONMENT = TMP_DEPLOYMENT_ENVIRONMENT;\n/**\n * A unique identifier representing the device.\n *\n * Note: The device identifier MUST only be defined using the values outlined below. This value is not an advertising identifier and MUST NOT be used as such. On iOS (Swift or Objective-C), this value MUST be equal to the [vendor identifier](https://developer.apple.com/documentation/uikit/uidevice/1620059-identifierforvendor). On Android (Java or Kotlin), this value MUST be equal to the Firebase Installation ID or a globally unique UUID which is persisted across sessions in your application. More information can be found [here](https://developer.android.com/training/articles/user-data-ids) on best practices and exact implementation details. Caution should be taken when storing personal data or anything which can identify a user. GDPR and data protection laws may apply, ensure you do your own due diligence.\n *\n * @deprecated Use ATTR_DEVICE_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_DEVICE_ID = TMP_DEVICE_ID;\n/**\n * The model identifier for the device.\n *\n * Note: It&#39;s recommended this value represents a machine readable version of the model identifier rather than the market or consumer-friendly name of the device.\n *\n * @deprecated Use ATTR_DEVICE_MODEL_IDENTIFIER in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_DEVICE_MODEL_IDENTIFIER = TMP_DEVICE_MODEL_IDENTIFIER;\n/**\n * The marketing name for the device model.\n *\n * Note: It&#39;s recommended this value represents a human readable version of the device model rather than a machine readable alternative.\n *\n * @deprecated Use ATTR_DEVICE_MODEL_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_DEVICE_MODEL_NAME = TMP_DEVICE_MODEL_NAME;\n/**\n * The name of the single function that this runtime instance executes.\n *\n * Note: This is the name of the function as configured/deployed on the FaaS platform and is usually different from the name of the callback function (which may be stored in the [`code.namespace`/`code.function`](../../trace/semantic_conventions/span-general.md#source-code-attributes) span attributes).\n *\n * @deprecated Use ATTR_FAAS_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_FAAS_NAME = TMP_FAAS_NAME;\n/**\n* The unique ID of the single function that this runtime instance executes.\n*\n* Note: Depending on the cloud provider, use:\n\n* **AWS Lambda:** The function [ARN](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).\nTake care not to use the &#34;invoked ARN&#34; directly but replace any\n[alias suffix](https://docs.aws.amazon.com/lambda/latest/dg/configuration-aliases.html) with the resolved function version, as the same runtime instance may be invokable with multiple\ndifferent aliases.\n* **GCP:** The [URI of the resource](https://cloud.google.com/iam/docs/full-resource-names)\n* **Azure:** The [Fully Qualified Resource ID](https://docs.microsoft.com/en-us/rest/api/resources/resources/get-by-id).\n\nOn some providers, it may not be possible to determine the full ID at startup,\nwhich is why this field cannot be made required. For example, on AWS the account ID\npart of the ARN is not available without calling another AWS API\nwhich may be deemed too slow for a short-running lambda function.\nAs an alternative, consider setting `faas.id` as a span attribute instead.\n*\n* @deprecated Use ATTR_CLOUD_RESOURCE_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n*/\nexport const SEMRESATTRS_FAAS_ID = TMP_FAAS_ID;\n/**\n* The immutable version of the function being executed.\n*\n* Note: Depending on the cloud provider and platform, use:\n\n* **AWS Lambda:** The [function version](https://docs.aws.amazon.com/lambda/latest/dg/configuration-versions.html)\n  (an integer represented as a decimal string).\n* **Google Cloud Run:** The [revision](https://cloud.google.com/run/docs/managing/revisions)\n  (i.e., the function name plus the revision suffix).\n* **Google Cloud Functions:** The value of the\n  [`K_REVISION` environment variable](https://cloud.google.com/functions/docs/env-var#runtime_environment_variables_set_automatically).\n* **Azure Functions:** Not applicable. Do not set this attribute.\n*\n* @deprecated Use ATTR_FAAS_VERSION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n*/\nexport const SEMRESATTRS_FAAS_VERSION = TMP_FAAS_VERSION;\n/**\n * The execution environment ID as a string, that will be potentially reused for other invocations to the same function/function version.\n *\n * Note: * **AWS Lambda:** Use the (full) log stream name.\n *\n * @deprecated Use ATTR_FAAS_INSTANCE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_FAAS_INSTANCE = TMP_FAAS_INSTANCE;\n/**\n * The amount of memory available to the serverless function in MiB.\n *\n * Note: It&#39;s recommended to set this attribute since e.g. too little memory can easily stop a Java AWS Lambda function from working correctly. On AWS Lambda, the environment variable `AWS_LAMBDA_FUNCTION_MEMORY_SIZE` provides this information.\n *\n * @deprecated Use ATTR_FAAS_MAX_MEMORY in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_FAAS_MAX_MEMORY = TMP_FAAS_MAX_MEMORY;\n/**\n * Unique host ID. For Cloud, this must be the instance_id assigned by the cloud provider.\n *\n * @deprecated Use ATTR_HOST_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_HOST_ID = TMP_HOST_ID;\n/**\n * Name of the host. On Unix systems, it may contain what the hostname command returns, or the fully qualified hostname, or another name specified by the user.\n *\n * @deprecated Use ATTR_HOST_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_HOST_NAME = TMP_HOST_NAME;\n/**\n * Type of host. For Cloud, this must be the machine type.\n *\n * @deprecated Use ATTR_HOST_TYPE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_HOST_TYPE = TMP_HOST_TYPE;\n/**\n * The CPU architecture the host system is running on.\n *\n * @deprecated Use ATTR_HOST_ARCH in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_HOST_ARCH = TMP_HOST_ARCH;\n/**\n * Name of the VM image or OS install the host was instantiated from.\n *\n * @deprecated Use ATTR_HOST_IMAGE_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_HOST_IMAGE_NAME = TMP_HOST_IMAGE_NAME;\n/**\n * VM image ID. For Cloud, this value is from the provider.\n *\n * @deprecated Use ATTR_HOST_IMAGE_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_HOST_IMAGE_ID = TMP_HOST_IMAGE_ID;\n/**\n * The version string of the VM image as defined in [Version Attributes](README.md#version-attributes).\n *\n * @deprecated Use ATTR_HOST_IMAGE_VERSION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_HOST_IMAGE_VERSION = TMP_HOST_IMAGE_VERSION;\n/**\n * The name of the cluster.\n *\n * @deprecated Use ATTR_K8S_CLUSTER_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_K8S_CLUSTER_NAME = TMP_K8S_CLUSTER_NAME;\n/**\n * The name of the Node.\n *\n * @deprecated Use ATTR_K8S_NODE_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_K8S_NODE_NAME = TMP_K8S_NODE_NAME;\n/**\n * The UID of the Node.\n *\n * @deprecated Use ATTR_K8S_NODE_UID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_K8S_NODE_UID = TMP_K8S_NODE_UID;\n/**\n * The name of the namespace that the pod is running in.\n *\n * @deprecated Use ATTR_K8S_NAMESPACE_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_K8S_NAMESPACE_NAME = TMP_K8S_NAMESPACE_NAME;\n/**\n * The UID of the Pod.\n *\n * @deprecated Use ATTR_K8S_POD_UID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_K8S_POD_UID = TMP_K8S_POD_UID;\n/**\n * The name of the Pod.\n *\n * @deprecated Use ATTR_K8S_POD_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_K8S_POD_NAME = TMP_K8S_POD_NAME;\n/**\n * The name of the Container in a Pod template.\n *\n * @deprecated Use ATTR_K8S_CONTAINER_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_K8S_CONTAINER_NAME = TMP_K8S_CONTAINER_NAME;\n/**\n * The UID of the ReplicaSet.\n *\n * @deprecated Use ATTR_K8S_REPLICASET_UID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_K8S_REPLICASET_UID = TMP_K8S_REPLICASET_UID;\n/**\n * The name of the ReplicaSet.\n *\n * @deprecated Use ATTR_K8S_REPLICASET_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_K8S_REPLICASET_NAME = TMP_K8S_REPLICASET_NAME;\n/**\n * The UID of the Deployment.\n *\n * @deprecated Use ATTR_K8S_DEPLOYMENT_UID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_K8S_DEPLOYMENT_UID = TMP_K8S_DEPLOYMENT_UID;\n/**\n * The name of the Deployment.\n *\n * @deprecated Use ATTR_K8S_DEPLOYMENT_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_K8S_DEPLOYMENT_NAME = TMP_K8S_DEPLOYMENT_NAME;\n/**\n * The UID of the StatefulSet.\n *\n * @deprecated Use ATTR_K8S_STATEFULSET_UID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_K8S_STATEFULSET_UID = TMP_K8S_STATEFULSET_UID;\n/**\n * The name of the StatefulSet.\n *\n * @deprecated Use ATTR_K8S_STATEFULSET_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_K8S_STATEFULSET_NAME = TMP_K8S_STATEFULSET_NAME;\n/**\n * The UID of the DaemonSet.\n *\n * @deprecated Use ATTR_K8S_DAEMONSET_UID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_K8S_DAEMONSET_UID = TMP_K8S_DAEMONSET_UID;\n/**\n * The name of the DaemonSet.\n *\n * @deprecated Use ATTR_K8S_DAEMONSET_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_K8S_DAEMONSET_NAME = TMP_K8S_DAEMONSET_NAME;\n/**\n * The UID of the Job.\n *\n * @deprecated Use ATTR_K8S_JOB_UID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_K8S_JOB_UID = TMP_K8S_JOB_UID;\n/**\n * The name of the Job.\n *\n * @deprecated Use ATTR_K8S_JOB_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_K8S_JOB_NAME = TMP_K8S_JOB_NAME;\n/**\n * The UID of the CronJob.\n *\n * @deprecated Use ATTR_K8S_CRONJOB_UID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_K8S_CRONJOB_UID = TMP_K8S_CRONJOB_UID;\n/**\n * The name of the CronJob.\n *\n * @deprecated Use ATTR_K8S_CRONJOB_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_K8S_CRONJOB_NAME = TMP_K8S_CRONJOB_NAME;\n/**\n * The operating system type.\n *\n * @deprecated Use ATTR_OS_TYPE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_OS_TYPE = TMP_OS_TYPE;\n/**\n * Human readable (not intended to be parsed) OS version information, like e.g. reported by `ver` or `lsb_release -a` commands.\n *\n * @deprecated Use ATTR_OS_DESCRIPTION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_OS_DESCRIPTION = TMP_OS_DESCRIPTION;\n/**\n * Human readable operating system name.\n *\n * @deprecated Use ATTR_OS_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_OS_NAME = TMP_OS_NAME;\n/**\n * The version string of the operating system as defined in [Version Attributes](../../resource/semantic_conventions/README.md#version-attributes).\n *\n * @deprecated Use ATTR_OS_VERSION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_OS_VERSION = TMP_OS_VERSION;\n/**\n * Process identifier (PID).\n *\n * @deprecated Use ATTR_PROCESS_PID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_PROCESS_PID = TMP_PROCESS_PID;\n/**\n * The name of the process executable. On Linux based systems, can be set to the `Name` in `proc/[pid]/status`. On Windows, can be set to the base name of `GetProcessImageFileNameW`.\n *\n * @deprecated Use ATTR_PROCESS_EXECUTABLE_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_PROCESS_EXECUTABLE_NAME = TMP_PROCESS_EXECUTABLE_NAME;\n/**\n * The full path to the process executable. On Linux based systems, can be set to the target of `proc/[pid]/exe`. On Windows, can be set to the result of `GetProcessImageFileNameW`.\n *\n * @deprecated Use ATTR_PROCESS_EXECUTABLE_PATH in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_PROCESS_EXECUTABLE_PATH = TMP_PROCESS_EXECUTABLE_PATH;\n/**\n * The command used to launch the process (i.e. the command name). On Linux based systems, can be set to the zeroth string in `proc/[pid]/cmdline`. On Windows, can be set to the first parameter extracted from `GetCommandLineW`.\n *\n * @deprecated Use ATTR_PROCESS_COMMAND in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_PROCESS_COMMAND = TMP_PROCESS_COMMAND;\n/**\n * The full command used to launch the process as a single string representing the full command. On Windows, can be set to the result of `GetCommandLineW`. Do not set this if you have to assemble it just for monitoring; use `process.command_args` instead.\n *\n * @deprecated Use ATTR_PROCESS_COMMAND_LINE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_PROCESS_COMMAND_LINE = TMP_PROCESS_COMMAND_LINE;\n/**\n * All the command arguments (including the command/executable itself) as received by the process. On Linux-based systems (and some other Unixoid systems supporting procfs), can be set according to the list of null-delimited strings extracted from `proc/[pid]/cmdline`. For libc-based executables, this would be the full argv vector passed to `main`.\n *\n * @deprecated Use ATTR_PROCESS_COMMAND_ARGS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_PROCESS_COMMAND_ARGS = TMP_PROCESS_COMMAND_ARGS;\n/**\n * The username of the user that owns the process.\n *\n * @deprecated Use ATTR_PROCESS_OWNER in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_PROCESS_OWNER = TMP_PROCESS_OWNER;\n/**\n * The name of the runtime of this process. For compiled native binaries, this SHOULD be the name of the compiler.\n *\n * @deprecated Use ATTR_PROCESS_RUNTIME_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_PROCESS_RUNTIME_NAME = TMP_PROCESS_RUNTIME_NAME;\n/**\n * The version of the runtime of this process, as returned by the runtime without modification.\n *\n * @deprecated Use ATTR_PROCESS_RUNTIME_VERSION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_PROCESS_RUNTIME_VERSION = TMP_PROCESS_RUNTIME_VERSION;\n/**\n * An additional description about the runtime of the process, for example a specific vendor customization of the runtime environment.\n *\n * @deprecated Use ATTR_PROCESS_RUNTIME_DESCRIPTION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_PROCESS_RUNTIME_DESCRIPTION = TMP_PROCESS_RUNTIME_DESCRIPTION;\n/**\n * Logical name of the service.\n *\n * Note: MUST be the same for all instances of horizontally scaled services. If the value was not specified, SDKs MUST fallback to `unknown_service:` concatenated with [`process.executable.name`](process.md#process), e.g. `unknown_service:bash`. If `process.executable.name` is not available, the value MUST be set to `unknown_service`.\n *\n * @deprecated Use ATTR_SERVICE_NAME.\n */\nexport const SEMRESATTRS_SERVICE_NAME = TMP_SERVICE_NAME;\n/**\n * A namespace for `service.name`.\n *\n * Note: A string value having a meaning that helps to distinguish a group of services, for example the team name that owns a group of services. `service.name` is expected to be unique within the same namespace. If `service.namespace` is not specified in the Resource then `service.name` is expected to be unique for all services that have no explicit namespace defined (so the empty/unspecified namespace is simply one more valid namespace). Zero-length namespace string is assumed equal to unspecified namespace.\n *\n * @deprecated Use ATTR_SERVICE_NAMESPACE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_SERVICE_NAMESPACE = TMP_SERVICE_NAMESPACE;\n/**\n * The string ID of the service instance.\n *\n * Note: MUST be unique for each instance of the same `service.namespace,service.name` pair (in other words `service.namespace,service.name,service.instance.id` triplet MUST be globally unique). The ID helps to distinguish instances of the same service that exist at the same time (e.g. instances of a horizontally scaled service). It is preferable for the ID to be persistent and stay the same for the lifetime of the service instance, however it is acceptable that the ID is ephemeral and changes during important lifetime events for the service (e.g. service restarts). If the service has no inherent unique ID that can be used as the value of this attribute it is recommended to generate a random Version 1 or Version 4 RFC 4122 UUID (services aiming for reproducible UUIDs may also use Version 5, see RFC 4122 for more recommendations).\n *\n * @deprecated Use ATTR_SERVICE_INSTANCE_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_SERVICE_INSTANCE_ID = TMP_SERVICE_INSTANCE_ID;\n/**\n * The version string of the service API or implementation.\n *\n * @deprecated Use ATTR_SERVICE_VERSION.\n */\nexport const SEMRESATTRS_SERVICE_VERSION = TMP_SERVICE_VERSION;\n/**\n * The name of the telemetry SDK as defined above.\n *\n * @deprecated Use ATTR_TELEMETRY_SDK_NAME.\n */\nexport const SEMRESATTRS_TELEMETRY_SDK_NAME = TMP_TELEMETRY_SDK_NAME;\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use ATTR_TELEMETRY_SDK_LANGUAGE.\n */\nexport const SEMRESATTRS_TELEMETRY_SDK_LANGUAGE = TMP_TELEMETRY_SDK_LANGUAGE;\n/**\n * The version string of the telemetry SDK.\n *\n * @deprecated Use ATTR_TELEMETRY_SDK_VERSION.\n */\nexport const SEMRESATTRS_TELEMETRY_SDK_VERSION = TMP_TELEMETRY_SDK_VERSION;\n/**\n * The version string of the auto instrumentation agent, if used.\n *\n * @deprecated Use ATTR_TELEMETRY_DISTRO_VERSION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_TELEMETRY_AUTO_VERSION = TMP_TELEMETRY_AUTO_VERSION;\n/**\n * The name of the web engine.\n *\n * @deprecated Use ATTR_WEBENGINE_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_WEBENGINE_NAME = TMP_WEBENGINE_NAME;\n/**\n * The version of the web engine.\n *\n * @deprecated Use ATTR_WEBENGINE_VERSION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_WEBENGINE_VERSION = TMP_WEBENGINE_VERSION;\n/**\n * Additional description of the web engine (e.g. detailed version and edition information).\n *\n * @deprecated Use ATTR_WEBENGINE_DESCRIPTION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_WEBENGINE_DESCRIPTION = TMP_WEBENGINE_DESCRIPTION;\n/**\n * Create exported Value Map for SemanticResourceAttributes values\n * @deprecated Use the SEMRESATTRS_XXXXX constants rather than the SemanticResourceAttributes.XXXXX for bundle minification\n */\nexport const SemanticResourceAttributes = \n/*#__PURE__*/ createConstMap([\n    TMP_CLOUD_PROVIDER,\n    TMP_CLOUD_ACCOUNT_ID,\n    TMP_CLOUD_REGION,\n    TMP_CLOUD_AVAILABILITY_ZONE,\n    TMP_CLOUD_PLATFORM,\n    TMP_AWS_ECS_CONTAINER_ARN,\n    TMP_AWS_ECS_CLUSTER_ARN,\n    TMP_AWS_ECS_LAUNCHTYPE,\n    TMP_AWS_ECS_TASK_ARN,\n    TMP_AWS_ECS_TASK_FAMILY,\n    TMP_AWS_ECS_TASK_REVISION,\n    TMP_AWS_EKS_CLUSTER_ARN,\n    TMP_AWS_LOG_GROUP_NAMES,\n    TMP_AWS_LOG_GROUP_ARNS,\n    TMP_AWS_LOG_STREAM_NAMES,\n    TMP_AWS_LOG_STREAM_ARNS,\n    TMP_CONTAINER_NAME,\n    TMP_CONTAINER_ID,\n    TMP_CONTAINER_RUNTIME,\n    TMP_CONTAINER_IMAGE_NAME,\n    TMP_CONTAINER_IMAGE_TAG,\n    TMP_DEPLOYMENT_ENVIRONMENT,\n    TMP_DEVICE_ID,\n    TMP_DEVICE_MODEL_IDENTIFIER,\n    TMP_DEVICE_MODEL_NAME,\n    TMP_FAAS_NAME,\n    TMP_FAAS_ID,\n    TMP_FAAS_VERSION,\n    TMP_FAAS_INSTANCE,\n    TMP_FAAS_MAX_MEMORY,\n    TMP_HOST_ID,\n    TMP_HOST_NAME,\n    TMP_HOST_TYPE,\n    TMP_HOST_ARCH,\n    TMP_HOST_IMAGE_NAME,\n    TMP_HOST_IMAGE_ID,\n    TMP_HOST_IMAGE_VERSION,\n    TMP_K8S_CLUSTER_NAME,\n    TMP_K8S_NODE_NAME,\n    TMP_K8S_NODE_UID,\n    TMP_K8S_NAMESPACE_NAME,\n    TMP_K8S_POD_UID,\n    TMP_K8S_POD_NAME,\n    TMP_K8S_CONTAINER_NAME,\n    TMP_K8S_REPLICASET_UID,\n    TMP_K8S_REPLICASET_NAME,\n    TMP_K8S_DEPLOYMENT_UID,\n    TMP_K8S_DEPLOYMENT_NAME,\n    TMP_K8S_STATEFULSET_UID,\n    TMP_K8S_STATEFULSET_NAME,\n    TMP_K8S_DAEMONSET_UID,\n    TMP_K8S_DAEMONSET_NAME,\n    TMP_K8S_JOB_UID,\n    TMP_K8S_JOB_NAME,\n    TMP_K8S_CRONJOB_UID,\n    TMP_K8S_CRONJOB_NAME,\n    TMP_OS_TYPE,\n    TMP_OS_DESCRIPTION,\n    TMP_OS_NAME,\n    TMP_OS_VERSION,\n    TMP_PROCESS_PID,\n    TMP_PROCESS_EXECUTABLE_NAME,\n    TMP_PROCESS_EXECUTABLE_PATH,\n    TMP_PROCESS_COMMAND,\n    TMP_PROCESS_COMMAND_LINE,\n    TMP_PROCESS_COMMAND_ARGS,\n    TMP_PROCESS_OWNER,\n    TMP_PROCESS_RUNTIME_NAME,\n    TMP_PROCESS_RUNTIME_VERSION,\n    TMP_PROCESS_RUNTIME_DESCRIPTION,\n    TMP_SERVICE_NAME,\n    TMP_SERVICE_NAMESPACE,\n    TMP_SERVICE_INSTANCE_ID,\n    TMP_SERVICE_VERSION,\n    TMP_TELEMETRY_SDK_NAME,\n    TMP_TELEMETRY_SDK_LANGUAGE,\n    TMP_TELEMETRY_SDK_VERSION,\n    TMP_TELEMETRY_AUTO_VERSION,\n    TMP_WEBENGINE_NAME,\n    TMP_WEBENGINE_VERSION,\n    TMP_WEBENGINE_DESCRIPTION,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for CloudProviderValues enum definition\n *\n * Name of the cloud provider.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_CLOUDPROVIDERVALUES_ALIBABA_CLOUD = 'alibaba_cloud';\nconst TMP_CLOUDPROVIDERVALUES_AWS = 'aws';\nconst TMP_CLOUDPROVIDERVALUES_AZURE = 'azure';\nconst TMP_CLOUDPROVIDERVALUES_GCP = 'gcp';\n/**\n * Name of the cloud provider.\n *\n * @deprecated Use CLOUD_PROVIDER_VALUE_ALIBABA_CLOUD in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const CLOUDPROVIDERVALUES_ALIBABA_CLOUD = TMP_CLOUDPROVIDERVALUES_ALIBABA_CLOUD;\n/**\n * Name of the cloud provider.\n *\n * @deprecated Use CLOUD_PROVIDER_VALUE_AWS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const CLOUDPROVIDERVALUES_AWS = TMP_CLOUDPROVIDERVALUES_AWS;\n/**\n * Name of the cloud provider.\n *\n * @deprecated Use CLOUD_PROVIDER_VALUE_AZURE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const CLOUDPROVIDERVALUES_AZURE = TMP_CLOUDPROVIDERVALUES_AZURE;\n/**\n * Name of the cloud provider.\n *\n * @deprecated Use CLOUD_PROVIDER_VALUE_GCP in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const CLOUDPROVIDERVALUES_GCP = TMP_CLOUDPROVIDERVALUES_GCP;\n/**\n * The constant map of values for CloudProviderValues.\n * @deprecated Use the CLOUDPROVIDERVALUES_XXXXX constants rather than the CloudProviderValues.XXXXX for bundle minification.\n */\nexport const CloudProviderValues = \n/*#__PURE__*/ createConstMap([\n    TMP_CLOUDPROVIDERVALUES_ALIBABA_CLOUD,\n    TMP_CLOUDPROVIDERVALUES_AWS,\n    TMP_CLOUDPROVIDERVALUES_AZURE,\n    TMP_CLOUDPROVIDERVALUES_GCP,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for CloudPlatformValues enum definition\n *\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_CLOUDPLATFORMVALUES_ALIBABA_CLOUD_ECS = 'alibaba_cloud_ecs';\nconst TMP_CLOUDPLATFORMVALUES_ALIBABA_CLOUD_FC = 'alibaba_cloud_fc';\nconst TMP_CLOUDPLATFORMVALUES_AWS_EC2 = 'aws_ec2';\nconst TMP_CLOUDPLATFORMVALUES_AWS_ECS = 'aws_ecs';\nconst TMP_CLOUDPLATFORMVALUES_AWS_EKS = 'aws_eks';\nconst TMP_CLOUDPLATFORMVALUES_AWS_LAMBDA = 'aws_lambda';\nconst TMP_CLOUDPLATFORMVALUES_AWS_ELASTIC_BEANSTALK = 'aws_elastic_beanstalk';\nconst TMP_CLOUDPLATFORMVALUES_AZURE_VM = 'azure_vm';\nconst TMP_CLOUDPLATFORMVALUES_AZURE_CONTAINER_INSTANCES = 'azure_container_instances';\nconst TMP_CLOUDPLATFORMVALUES_AZURE_AKS = 'azure_aks';\nconst TMP_CLOUDPLATFORMVALUES_AZURE_FUNCTIONS = 'azure_functions';\nconst TMP_CLOUDPLATFORMVALUES_AZURE_APP_SERVICE = 'azure_app_service';\nconst TMP_CLOUDPLATFORMVALUES_GCP_COMPUTE_ENGINE = 'gcp_compute_engine';\nconst TMP_CLOUDPLATFORMVALUES_GCP_CLOUD_RUN = 'gcp_cloud_run';\nconst TMP_CLOUDPLATFORMVALUES_GCP_KUBERNETES_ENGINE = 'gcp_kubernetes_engine';\nconst TMP_CLOUDPLATFORMVALUES_GCP_CLOUD_FUNCTIONS = 'gcp_cloud_functions';\nconst TMP_CLOUDPLATFORMVALUES_GCP_APP_ENGINE = 'gcp_app_engine';\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_ALIBABA_CLOUD_ECS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const CLOUDPLATFORMVALUES_ALIBABA_CLOUD_ECS = TMP_CLOUDPLATFORMVALUES_ALIBABA_CLOUD_ECS;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_ALIBABA_CLOUD_FC in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const CLOUDPLATFORMVALUES_ALIBABA_CLOUD_FC = TMP_CLOUDPLATFORMVALUES_ALIBABA_CLOUD_FC;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_AWS_EC2 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const CLOUDPLATFORMVALUES_AWS_EC2 = TMP_CLOUDPLATFORMVALUES_AWS_EC2;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_AWS_ECS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const CLOUDPLATFORMVALUES_AWS_ECS = TMP_CLOUDPLATFORMVALUES_AWS_ECS;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_AWS_EKS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const CLOUDPLATFORMVALUES_AWS_EKS = TMP_CLOUDPLATFORMVALUES_AWS_EKS;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_AWS_LAMBDA in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const CLOUDPLATFORMVALUES_AWS_LAMBDA = TMP_CLOUDPLATFORMVALUES_AWS_LAMBDA;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_AWS_ELASTIC_BEANSTALK in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const CLOUDPLATFORMVALUES_AWS_ELASTIC_BEANSTALK = TMP_CLOUDPLATFORMVALUES_AWS_ELASTIC_BEANSTALK;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_AZURE_VM in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const CLOUDPLATFORMVALUES_AZURE_VM = TMP_CLOUDPLATFORMVALUES_AZURE_VM;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_AZURE_CONTAINER_INSTANCES in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const CLOUDPLATFORMVALUES_AZURE_CONTAINER_INSTANCES = TMP_CLOUDPLATFORMVALUES_AZURE_CONTAINER_INSTANCES;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_AZURE_AKS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const CLOUDPLATFORMVALUES_AZURE_AKS = TMP_CLOUDPLATFORMVALUES_AZURE_AKS;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_AZURE_FUNCTIONS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const CLOUDPLATFORMVALUES_AZURE_FUNCTIONS = TMP_CLOUDPLATFORMVALUES_AZURE_FUNCTIONS;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_AZURE_APP_SERVICE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const CLOUDPLATFORMVALUES_AZURE_APP_SERVICE = TMP_CLOUDPLATFORMVALUES_AZURE_APP_SERVICE;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_GCP_COMPUTE_ENGINE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const CLOUDPLATFORMVALUES_GCP_COMPUTE_ENGINE = TMP_CLOUDPLATFORMVALUES_GCP_COMPUTE_ENGINE;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_GCP_CLOUD_RUN in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const CLOUDPLATFORMVALUES_GCP_CLOUD_RUN = TMP_CLOUDPLATFORMVALUES_GCP_CLOUD_RUN;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_GCP_KUBERNETES_ENGINE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const CLOUDPLATFORMVALUES_GCP_KUBERNETES_ENGINE = TMP_CLOUDPLATFORMVALUES_GCP_KUBERNETES_ENGINE;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_GCP_CLOUD_FUNCTIONS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const CLOUDPLATFORMVALUES_GCP_CLOUD_FUNCTIONS = TMP_CLOUDPLATFORMVALUES_GCP_CLOUD_FUNCTIONS;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_GCP_APP_ENGINE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const CLOUDPLATFORMVALUES_GCP_APP_ENGINE = TMP_CLOUDPLATFORMVALUES_GCP_APP_ENGINE;\n/**\n * The constant map of values for CloudPlatformValues.\n * @deprecated Use the CLOUDPLATFORMVALUES_XXXXX constants rather than the CloudPlatformValues.XXXXX for bundle minification.\n */\nexport const CloudPlatformValues = \n/*#__PURE__*/ createConstMap([\n    TMP_CLOUDPLATFORMVALUES_ALIBABA_CLOUD_ECS,\n    TMP_CLOUDPLATFORMVALUES_ALIBABA_CLOUD_FC,\n    TMP_CLOUDPLATFORMVALUES_AWS_EC2,\n    TMP_CLOUDPLATFORMVALUES_AWS_ECS,\n    TMP_CLOUDPLATFORMVALUES_AWS_EKS,\n    TMP_CLOUDPLATFORMVALUES_AWS_LAMBDA,\n    TMP_CLOUDPLATFORMVALUES_AWS_ELASTIC_BEANSTALK,\n    TMP_CLOUDPLATFORMVALUES_AZURE_VM,\n    TMP_CLOUDPLATFORMVALUES_AZURE_CONTAINER_INSTANCES,\n    TMP_CLOUDPLATFORMVALUES_AZURE_AKS,\n    TMP_CLOUDPLATFORMVALUES_AZURE_FUNCTIONS,\n    TMP_CLOUDPLATFORMVALUES_AZURE_APP_SERVICE,\n    TMP_CLOUDPLATFORMVALUES_GCP_COMPUTE_ENGINE,\n    TMP_CLOUDPLATFORMVALUES_GCP_CLOUD_RUN,\n    TMP_CLOUDPLATFORMVALUES_GCP_KUBERNETES_ENGINE,\n    TMP_CLOUDPLATFORMVALUES_GCP_CLOUD_FUNCTIONS,\n    TMP_CLOUDPLATFORMVALUES_GCP_APP_ENGINE,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for AwsEcsLaunchtypeValues enum definition\n *\n * The [launch type](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) for an ECS task.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_AWSECSLAUNCHTYPEVALUES_EC2 = 'ec2';\nconst TMP_AWSECSLAUNCHTYPEVALUES_FARGATE = 'fargate';\n/**\n * The [launch type](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) for an ECS task.\n *\n * @deprecated Use AWS_ECS_LAUNCHTYPE_VALUE_EC2 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const AWSECSLAUNCHTYPEVALUES_EC2 = TMP_AWSECSLAUNCHTYPEVALUES_EC2;\n/**\n * The [launch type](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) for an ECS task.\n *\n * @deprecated Use AWS_ECS_LAUNCHTYPE_VALUE_FARGATE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const AWSECSLAUNCHTYPEVALUES_FARGATE = TMP_AWSECSLAUNCHTYPEVALUES_FARGATE;\n/**\n * The constant map of values for AwsEcsLaunchtypeValues.\n * @deprecated Use the AWSECSLAUNCHTYPEVALUES_XXXXX constants rather than the AwsEcsLaunchtypeValues.XXXXX for bundle minification.\n */\nexport const AwsEcsLaunchtypeValues = \n/*#__PURE__*/ createConstMap([\n    TMP_AWSECSLAUNCHTYPEVALUES_EC2,\n    TMP_AWSECSLAUNCHTYPEVALUES_FARGATE,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for HostArchValues enum definition\n *\n * The CPU architecture the host system is running on.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_HOSTARCHVALUES_AMD64 = 'amd64';\nconst TMP_HOSTARCHVALUES_ARM32 = 'arm32';\nconst TMP_HOSTARCHVALUES_ARM64 = 'arm64';\nconst TMP_HOSTARCHVALUES_IA64 = 'ia64';\nconst TMP_HOSTARCHVALUES_PPC32 = 'ppc32';\nconst TMP_HOSTARCHVALUES_PPC64 = 'ppc64';\nconst TMP_HOSTARCHVALUES_X86 = 'x86';\n/**\n * The CPU architecture the host system is running on.\n *\n * @deprecated Use HOST_ARCH_VALUE_AMD64 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const HOSTARCHVALUES_AMD64 = TMP_HOSTARCHVALUES_AMD64;\n/**\n * The CPU architecture the host system is running on.\n *\n * @deprecated Use HOST_ARCH_VALUE_ARM32 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const HOSTARCHVALUES_ARM32 = TMP_HOSTARCHVALUES_ARM32;\n/**\n * The CPU architecture the host system is running on.\n *\n * @deprecated Use HOST_ARCH_VALUE_ARM64 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const HOSTARCHVALUES_ARM64 = TMP_HOSTARCHVALUES_ARM64;\n/**\n * The CPU architecture the host system is running on.\n *\n * @deprecated Use HOST_ARCH_VALUE_IA64 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const HOSTARCHVALUES_IA64 = TMP_HOSTARCHVALUES_IA64;\n/**\n * The CPU architecture the host system is running on.\n *\n * @deprecated Use HOST_ARCH_VALUE_PPC32 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const HOSTARCHVALUES_PPC32 = TMP_HOSTARCHVALUES_PPC32;\n/**\n * The CPU architecture the host system is running on.\n *\n * @deprecated Use HOST_ARCH_VALUE_PPC64 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const HOSTARCHVALUES_PPC64 = TMP_HOSTARCHVALUES_PPC64;\n/**\n * The CPU architecture the host system is running on.\n *\n * @deprecated Use HOST_ARCH_VALUE_X86 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const HOSTARCHVALUES_X86 = TMP_HOSTARCHVALUES_X86;\n/**\n * The constant map of values for HostArchValues.\n * @deprecated Use the HOSTARCHVALUES_XXXXX constants rather than the HostArchValues.XXXXX for bundle minification.\n */\nexport const HostArchValues = \n/*#__PURE__*/ createConstMap([\n    TMP_HOSTARCHVALUES_AMD64,\n    TMP_HOSTARCHVALUES_ARM32,\n    TMP_HOSTARCHVALUES_ARM64,\n    TMP_HOSTARCHVALUES_IA64,\n    TMP_HOSTARCHVALUES_PPC32,\n    TMP_HOSTARCHVALUES_PPC64,\n    TMP_HOSTARCHVALUES_X86,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for OsTypeValues enum definition\n *\n * The operating system type.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_OSTYPEVALUES_WINDOWS = 'windows';\nconst TMP_OSTYPEVALUES_LINUX = 'linux';\nconst TMP_OSTYPEVALUES_DARWIN = 'darwin';\nconst TMP_OSTYPEVALUES_FREEBSD = 'freebsd';\nconst TMP_OSTYPEVALUES_NETBSD = 'netbsd';\nconst TMP_OSTYPEVALUES_OPENBSD = 'openbsd';\nconst TMP_OSTYPEVALUES_DRAGONFLYBSD = 'dragonflybsd';\nconst TMP_OSTYPEVALUES_HPUX = 'hpux';\nconst TMP_OSTYPEVALUES_AIX = 'aix';\nconst TMP_OSTYPEVALUES_SOLARIS = 'solaris';\nconst TMP_OSTYPEVALUES_Z_OS = 'z_os';\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_WINDOWS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const OSTYPEVALUES_WINDOWS = TMP_OSTYPEVALUES_WINDOWS;\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_LINUX in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const OSTYPEVALUES_LINUX = TMP_OSTYPEVALUES_LINUX;\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_DARWIN in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const OSTYPEVALUES_DARWIN = TMP_OSTYPEVALUES_DARWIN;\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_FREEBSD in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const OSTYPEVALUES_FREEBSD = TMP_OSTYPEVALUES_FREEBSD;\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_NETBSD in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const OSTYPEVALUES_NETBSD = TMP_OSTYPEVALUES_NETBSD;\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_OPENBSD in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const OSTYPEVALUES_OPENBSD = TMP_OSTYPEVALUES_OPENBSD;\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_DRAGONFLYBSD in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const OSTYPEVALUES_DRAGONFLYBSD = TMP_OSTYPEVALUES_DRAGONFLYBSD;\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_HPUX in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const OSTYPEVALUES_HPUX = TMP_OSTYPEVALUES_HPUX;\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_AIX in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const OSTYPEVALUES_AIX = TMP_OSTYPEVALUES_AIX;\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_SOLARIS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const OSTYPEVALUES_SOLARIS = TMP_OSTYPEVALUES_SOLARIS;\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_Z_OS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const OSTYPEVALUES_Z_OS = TMP_OSTYPEVALUES_Z_OS;\n/**\n * The constant map of values for OsTypeValues.\n * @deprecated Use the OSTYPEVALUES_XXXXX constants rather than the OsTypeValues.XXXXX for bundle minification.\n */\nexport const OsTypeValues = \n/*#__PURE__*/ createConstMap([\n    TMP_OSTYPEVALUES_WINDOWS,\n    TMP_OSTYPEVALUES_LINUX,\n    TMP_OSTYPEVALUES_DARWIN,\n    TMP_OSTYPEVALUES_FREEBSD,\n    TMP_OSTYPEVALUES_NETBSD,\n    TMP_OSTYPEVALUES_OPENBSD,\n    TMP_OSTYPEVALUES_DRAGONFLYBSD,\n    TMP_OSTYPEVALUES_HPUX,\n    TMP_OSTYPEVALUES_AIX,\n    TMP_OSTYPEVALUES_SOLARIS,\n    TMP_OSTYPEVALUES_Z_OS,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for TelemetrySdkLanguageValues enum definition\n *\n * The language of the telemetry SDK.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_TELEMETRYSDKLANGUAGEVALUES_CPP = 'cpp';\nconst TMP_TELEMETRYSDKLANGUAGEVALUES_DOTNET = 'dotnet';\nconst TMP_TELEMETRYSDKLANGUAGEVALUES_ERLANG = 'erlang';\nconst TMP_TELEMETRYSDKLANGUAGEVALUES_GO = 'go';\nconst TMP_TELEMETRYSDKLANGUAGEVALUES_JAVA = 'java';\nconst TMP_TELEMETRYSDKLANGUAGEVALUES_NODEJS = 'nodejs';\nconst TMP_TELEMETRYSDKLANGUAGEVALUES_PHP = 'php';\nconst TMP_TELEMETRYSDKLANGUAGEVALUES_PYTHON = 'python';\nconst TMP_TELEMETRYSDKLANGUAGEVALUES_RUBY = 'ruby';\nconst TMP_TELEMETRYSDKLANGUAGEVALUES_WEBJS = 'webjs';\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_CPP.\n */\nexport const TELEMETRYSDKLANGUAGEVALUES_CPP = TMP_TELEMETRYSDKLANGUAGEVALUES_CPP;\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_DOTNET.\n */\nexport const TELEMETRYSDKLANGUAGEVALUES_DOTNET = TMP_TELEMETRYSDKLANGUAGEVALUES_DOTNET;\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_ERLANG.\n */\nexport const TELEMETRYSDKLANGUAGEVALUES_ERLANG = TMP_TELEMETRYSDKLANGUAGEVALUES_ERLANG;\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_GO.\n */\nexport const TELEMETRYSDKLANGUAGEVALUES_GO = TMP_TELEMETRYSDKLANGUAGEVALUES_GO;\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_JAVA.\n */\nexport const TELEMETRYSDKLANGUAGEVALUES_JAVA = TMP_TELEMETRYSDKLANGUAGEVALUES_JAVA;\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_NODEJS.\n */\nexport const TELEMETRYSDKLANGUAGEVALUES_NODEJS = TMP_TELEMETRYSDKLANGUAGEVALUES_NODEJS;\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_PHP.\n */\nexport const TELEMETRYSDKLANGUAGEVALUES_PHP = TMP_TELEMETRYSDKLANGUAGEVALUES_PHP;\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_PYTHON.\n */\nexport const TELEMETRYSDKLANGUAGEVALUES_PYTHON = TMP_TELEMETRYSDKLANGUAGEVALUES_PYTHON;\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_RUBY.\n */\nexport const TELEMETRYSDKLANGUAGEVALUES_RUBY = TMP_TELEMETRYSDKLANGUAGEVALUES_RUBY;\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_WEBJS.\n */\nexport const TELEMETRYSDKLANGUAGEVALUES_WEBJS = TMP_TELEMETRYSDKLANGUAGEVALUES_WEBJS;\n/**\n * The constant map of values for TelemetrySdkLanguageValues.\n * @deprecated Use the TELEMETRYSDKLANGUAGEVALUES_XXXXX constants rather than the TelemetrySdkLanguageValues.XXXXX for bundle minification.\n */\nexport const TelemetrySdkLanguageValues = \n/*#__PURE__*/ createConstMap([\n    TMP_TELEMETRYSDKLANGUAGEVALUES_CPP,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_DOTNET,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_ERLANG,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_GO,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_JAVA,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_NODEJS,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_PHP,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_PYTHON,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_RUBY,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_WEBJS,\n]);\n//# sourceMappingURL=SemanticResourceAttributes.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n//----------------------------------------------------------------------------------------------------------\n// DO NOT EDIT, this is an Auto-generated file from scripts/semconv/templates/registry/stable/attributes.ts.j2\n//----------------------------------------------------------------------------------------------------------\n/**\n * ASP.NET Core exception middleware handling result\n *\n * @example handled\n * @example unhandled\n */\nexport const ATTR_ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT = 'aspnetcore.diagnostics.exception.result';\n/**\n * Enum value \"aborted\" for attribute {@link ATTR_ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT}.\n */\nexport const ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT_VALUE_ABORTED = \"aborted\";\n/**\n * Enum value \"handled\" for attribute {@link ATTR_ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT}.\n */\nexport const ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT_VALUE_HANDLED = \"handled\";\n/**\n * Enum value \"skipped\" for attribute {@link ATTR_ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT}.\n */\nexport const ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT_VALUE_SKIPPED = \"skipped\";\n/**\n * Enum value \"unhandled\" for attribute {@link ATTR_ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT}.\n */\nexport const ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT_VALUE_UNHANDLED = \"unhandled\";\n/**\n * Full type name of the [`IExceptionHandler`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.diagnostics.iexceptionhandler) implementation that handled the exception.\n *\n * @example Contoso.MyHandler\n */\nexport const ATTR_ASPNETCORE_DIAGNOSTICS_HANDLER_TYPE = 'aspnetcore.diagnostics.handler.type';\n/**\n * Rate limiting policy name.\n *\n * @example fixed\n * @example sliding\n * @example token\n */\nexport const ATTR_ASPNETCORE_RATE_LIMITING_POLICY = 'aspnetcore.rate_limiting.policy';\n/**\n * Rate-limiting result, shows whether the lease was acquired or contains a rejection reason\n *\n * @example acquired\n * @example request_canceled\n */\nexport const ATTR_ASPNETCORE_RATE_LIMITING_RESULT = 'aspnetcore.rate_limiting.result';\n/**\n * Enum value \"acquired\" for attribute {@link ATTR_ASPNETCORE_RATE_LIMITING_RESULT}.\n */\nexport const ASPNETCORE_RATE_LIMITING_RESULT_VALUE_ACQUIRED = \"acquired\";\n/**\n * Enum value \"endpoint_limiter\" for attribute {@link ATTR_ASPNETCORE_RATE_LIMITING_RESULT}.\n */\nexport const ASPNETCORE_RATE_LIMITING_RESULT_VALUE_ENDPOINT_LIMITER = \"endpoint_limiter\";\n/**\n * Enum value \"global_limiter\" for attribute {@link ATTR_ASPNETCORE_RATE_LIMITING_RESULT}.\n */\nexport const ASPNETCORE_RATE_LIMITING_RESULT_VALUE_GLOBAL_LIMITER = \"global_limiter\";\n/**\n * Enum value \"request_canceled\" for attribute {@link ATTR_ASPNETCORE_RATE_LIMITING_RESULT}.\n */\nexport const ASPNETCORE_RATE_LIMITING_RESULT_VALUE_REQUEST_CANCELED = \"request_canceled\";\n/**\n * Flag indicating if request was handled by the application pipeline.\n *\n * @example true\n */\nexport const ATTR_ASPNETCORE_REQUEST_IS_UNHANDLED = 'aspnetcore.request.is_unhandled';\n/**\n * A value that indicates whether the matched route is a fallback route.\n *\n * @example true\n */\nexport const ATTR_ASPNETCORE_ROUTING_IS_FALLBACK = 'aspnetcore.routing.is_fallback';\n/**\n * Match result - success or failure\n *\n * @example success\n * @example failure\n */\nexport const ATTR_ASPNETCORE_ROUTING_MATCH_STATUS = 'aspnetcore.routing.match_status';\n/**\n * Enum value \"failure\" for attribute {@link ATTR_ASPNETCORE_ROUTING_MATCH_STATUS}.\n */\nexport const ASPNETCORE_ROUTING_MATCH_STATUS_VALUE_FAILURE = \"failure\";\n/**\n * Enum value \"success\" for attribute {@link ATTR_ASPNETCORE_ROUTING_MATCH_STATUS}.\n */\nexport const ASPNETCORE_ROUTING_MATCH_STATUS_VALUE_SUCCESS = \"success\";\n/**\n * Client address - domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.\n *\n * @example client.example.com\n * @example 10.1.2.80\n * @example /tmp/my.sock\n *\n * @note When observed from the server side, and when communicating through an intermediary, `client.address` **SHOULD** represent the client address behind any intermediaries,  for example proxies, if it's available.\n */\nexport const ATTR_CLIENT_ADDRESS = 'client.address';\n/**\n * Client port number.\n *\n * @example 65123\n *\n * @note When observed from the server side, and when communicating through an intermediary, `client.port` **SHOULD** represent the client port behind any intermediaries,  for example proxies, if it's available.\n */\nexport const ATTR_CLIENT_PORT = 'client.port';\n/**\n * The column number in `code.file.path` best representing the operation. It **SHOULD** point within the code unit named in `code.function.name`. This attribute **MUST NOT** be used on the Profile signal since the data is already captured in 'message Line'. This constraint is imposed to prevent redundancy and maintain data integrity.\n *\n * @example 16\n */\nexport const ATTR_CODE_COLUMN_NUMBER = 'code.column.number';\n/**\n * The source code file name that identifies the code unit as uniquely as possible (preferably an absolute file path). This attribute **MUST NOT** be used on the Profile signal since the data is already captured in 'message Function'. This constraint is imposed to prevent redundancy and maintain data integrity.\n *\n * @example \"/usr/local/MyApplication/content_root/app/index.php\"\n */\nexport const ATTR_CODE_FILE_PATH = 'code.file.path';\n/**\n * The method or function fully-qualified name without arguments. The value should fit the natural representation of the language runtime, which is also likely the same used within `code.stacktrace` attribute value. This attribute **MUST NOT** be used on the Profile signal since the data is already captured in 'message Function'. This constraint is imposed to prevent redundancy and maintain data integrity.\n *\n * @example com.example.MyHttpService.serveRequest\n * @example GuzzleHttp\\\\Client::transfer\n * @example fopen\n *\n * @note Values and format depends on each language runtime, thus it is impossible to provide an exhaustive list of examples.\n * The values are usually the same (or prefixes of) the ones found in native stack trace representation stored in\n * `code.stacktrace` without information on arguments.\n *\n * Examples:\n *\n *   - Java method: `com.example.MyHttpService.serveRequest`\n *   - Java anonymous class method: `com.mycompany.Main$1.myMethod`\n *   - Java lambda method: `com.mycompany.Main$$Lambda/0x0000748ae4149c00.myMethod`\n *   - PHP function: `GuzzleHttp\\Client::transfer`\n *   - Go function: `github.com/my/repo/pkg.foo.func5`\n *   - Elixir: `OpenTelemetry.Ctx.new`\n *   - Erlang: `opentelemetry_ctx:new`\n *   - Rust: `playground::my_module::my_cool_func`\n *   - C function: `fopen`\n */\nexport const ATTR_CODE_FUNCTION_NAME = 'code.function.name';\n/**\n * The line number in `code.file.path` best representing the operation. It **SHOULD** point within the code unit named in `code.function.name`. This attribute **MUST NOT** be used on the Profile signal since the data is already captured in 'message Line'. This constraint is imposed to prevent redundancy and maintain data integrity.\n *\n * @example 42\n */\nexport const ATTR_CODE_LINE_NUMBER = 'code.line.number';\n/**\n * A stacktrace as a string in the natural representation for the language runtime. The representation is identical to [`exception.stacktrace`](/docs/exceptions/exceptions-spans.md#stacktrace-representation). This attribute **MUST NOT** be used on the Profile signal since the data is already captured in 'message Location'. This constraint is imposed to prevent redundancy and maintain data integrity.\n *\n * @example \"at com.example.GenerateTrace.methodB(GenerateTrace.java:13)\\\\n at com.example.GenerateTrace.methodA(GenerateTrace.java:9)\\\\n at com.example.GenerateTrace.main(GenerateTrace.java:5)\\\\n\"\n */\nexport const ATTR_CODE_STACKTRACE = 'code.stacktrace';\n/**\n * The name of a collection (table, container) within the database.\n *\n * @example public.users\n * @example customers\n *\n * @note It is **RECOMMENDED** to capture the value as provided by the application\n * without attempting to do any case normalization.\n *\n * The collection name **SHOULD NOT** be extracted from `db.query.text`,\n * when the database system supports query text with multiple collections\n * in non-batch operations.\n *\n * For batch operations, if the individual operations are known to have the same\n * collection name then that collection name **SHOULD** be used.\n */\nexport const ATTR_DB_COLLECTION_NAME = 'db.collection.name';\n/**\n * The name of the database, fully qualified within the server address and port.\n *\n * @example customers\n * @example test.users\n *\n * @note If a database system has multiple namespace components, they **SHOULD** be concatenated from the most general to the most specific namespace component, using `|` as a separator between the components. Any missing components (and their associated separators) **SHOULD** be omitted.\n * Semantic conventions for individual database systems **SHOULD** document what `db.namespace` means in the context of that system.\n * It is **RECOMMENDED** to capture the value as provided by the application without attempting to do any case normalization.\n */\nexport const ATTR_DB_NAMESPACE = 'db.namespace';\n/**\n * The number of queries included in a batch operation.\n *\n * @example 2\n * @example 3\n * @example 4\n *\n * @note Operations are only considered batches when they contain two or more operations, and so `db.operation.batch.size` **SHOULD** never be `1`.\n */\nexport const ATTR_DB_OPERATION_BATCH_SIZE = 'db.operation.batch.size';\n/**\n * The name of the operation or command being executed.\n *\n * @example findAndModify\n * @example HMSET\n * @example SELECT\n *\n * @note It is **RECOMMENDED** to capture the value as provided by the application\n * without attempting to do any case normalization.\n *\n * The operation name **SHOULD NOT** be extracted from `db.query.text`,\n * when the database system supports query text with multiple operations\n * in non-batch operations.\n *\n * If spaces can occur in the operation name, multiple consecutive spaces\n * **SHOULD** be normalized to a single space.\n *\n * For batch operations, if the individual operations are known to have the same operation name\n * then that operation name **SHOULD** be used prepended by `BATCH `,\n * otherwise `db.operation.name` **SHOULD** be `BATCH` or some other database\n * system specific term if more applicable.\n */\nexport const ATTR_DB_OPERATION_NAME = 'db.operation.name';\n/**\n * Low cardinality summary of a database query.\n *\n * @example SELECT wuser_table\n * @example INSERT shipping_details SELECT orders\n * @example get user by id\n *\n * @note The query summary describes a class of database queries and is useful\n * as a grouping key, especially when analyzing telemetry for database\n * calls involving complex queries.\n *\n * Summary may be available to the instrumentation through\n * instrumentation hooks or other means. If it is not available, instrumentations\n * that support query parsing **SHOULD** generate a summary following\n * [Generating query summary](/docs/database/database-spans.md#generating-a-summary-of-the-query)\n * section.\n */\nexport const ATTR_DB_QUERY_SUMMARY = 'db.query.summary';\n/**\n * The database query being executed.\n *\n * @example SELECT * FROM wuser_table where username = ?\n * @example SET mykey ?\n *\n * @note For sanitization see [Sanitization of `db.query.text`](/docs/database/database-spans.md#sanitization-of-dbquerytext).\n * For batch operations, if the individual operations are known to have the same query text then that query text **SHOULD** be used, otherwise all of the individual query texts **SHOULD** be concatenated with separator `; ` or some other database system specific separator if more applicable.\n * Parameterized query text **SHOULD NOT** be sanitized. Even though parameterized query text can potentially have sensitive data, by using a parameterized query the user is giving a strong signal that any sensitive data will be passed as parameter values, and the benefit to observability of capturing the static part of the query text by default outweighs the risk.\n */\nexport const ATTR_DB_QUERY_TEXT = 'db.query.text';\n/**\n * Database response status code.\n *\n * @example 102\n * @example ORA-17002\n * @example 08P01\n * @example 404\n *\n * @note The status code returned by the database. Usually it represents an error code, but may also represent partial success, warning, or differentiate between various types of successful outcomes.\n * Semantic conventions for individual database systems **SHOULD** document what `db.response.status_code` means in the context of that system.\n */\nexport const ATTR_DB_RESPONSE_STATUS_CODE = 'db.response.status_code';\n/**\n * The name of a stored procedure within the database.\n *\n * @example GetCustomer\n *\n * @note It is **RECOMMENDED** to capture the value as provided by the application\n * without attempting to do any case normalization.\n *\n * For batch operations, if the individual operations are known to have the same\n * stored procedure name then that stored procedure name **SHOULD** be used.\n */\nexport const ATTR_DB_STORED_PROCEDURE_NAME = 'db.stored_procedure.name';\n/**\n * The database management system (DBMS) product as identified by the client instrumentation.\n *\n * @note The actual DBMS may differ from the one identified by the client. For example, when using PostgreSQL client libraries to connect to a CockroachDB, the `db.system.name` is set to `postgresql` based on the instrumentation's best knowledge.\n */\nexport const ATTR_DB_SYSTEM_NAME = 'db.system.name';\n/**\n * Enum value \"mariadb\" for attribute {@link ATTR_DB_SYSTEM_NAME}.\n */\nexport const DB_SYSTEM_NAME_VALUE_MARIADB = \"mariadb\";\n/**\n * Enum value \"microsoft.sql_server\" for attribute {@link ATTR_DB_SYSTEM_NAME}.\n */\nexport const DB_SYSTEM_NAME_VALUE_MICROSOFT_SQL_SERVER = \"microsoft.sql_server\";\n/**\n * Enum value \"mysql\" for attribute {@link ATTR_DB_SYSTEM_NAME}.\n */\nexport const DB_SYSTEM_NAME_VALUE_MYSQL = \"mysql\";\n/**\n * Enum value \"postgresql\" for attribute {@link ATTR_DB_SYSTEM_NAME}.\n */\nexport const DB_SYSTEM_NAME_VALUE_POSTGRESQL = \"postgresql\";\n/**\n * Name of the garbage collector managed heap generation.\n *\n * @example gen0\n * @example gen1\n * @example gen2\n */\nexport const ATTR_DOTNET_GC_HEAP_GENERATION = 'dotnet.gc.heap.generation';\n/**\n * Enum value \"gen0\" for attribute {@link ATTR_DOTNET_GC_HEAP_GENERATION}.\n */\nexport const DOTNET_GC_HEAP_GENERATION_VALUE_GEN0 = \"gen0\";\n/**\n * Enum value \"gen1\" for attribute {@link ATTR_DOTNET_GC_HEAP_GENERATION}.\n */\nexport const DOTNET_GC_HEAP_GENERATION_VALUE_GEN1 = \"gen1\";\n/**\n * Enum value \"gen2\" for attribute {@link ATTR_DOTNET_GC_HEAP_GENERATION}.\n */\nexport const DOTNET_GC_HEAP_GENERATION_VALUE_GEN2 = \"gen2\";\n/**\n * Enum value \"loh\" for attribute {@link ATTR_DOTNET_GC_HEAP_GENERATION}.\n */\nexport const DOTNET_GC_HEAP_GENERATION_VALUE_LOH = \"loh\";\n/**\n * Enum value \"poh\" for attribute {@link ATTR_DOTNET_GC_HEAP_GENERATION}.\n */\nexport const DOTNET_GC_HEAP_GENERATION_VALUE_POH = \"poh\";\n/**\n * Describes a class of error the operation ended with.\n *\n * @example timeout\n * @example java.net.UnknownHostException\n * @example server_certificate_invalid\n * @example 500\n *\n * @note The `error.type` **SHOULD** be predictable, and **SHOULD** have low cardinality.\n *\n * When `error.type` is set to a type (e.g., an exception type), its\n * canonical class name identifying the type within the artifact **SHOULD** be used.\n *\n * Instrumentations **SHOULD** document the list of errors they report.\n *\n * The cardinality of `error.type` within one instrumentation library **SHOULD** be low.\n * Telemetry consumers that aggregate data from multiple instrumentation libraries and applications\n * should be prepared for `error.type` to have high cardinality at query time when no\n * additional filters are applied.\n *\n * If the operation has completed successfully, instrumentations **SHOULD NOT** set `error.type`.\n *\n * If a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),\n * it's **RECOMMENDED** to:\n *\n *   - Use a domain-specific attribute\n *   - Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.\n */\nexport const ATTR_ERROR_TYPE = 'error.type';\n/**\n * Enum value \"_OTHER\" for attribute {@link ATTR_ERROR_TYPE}.\n */\nexport const ERROR_TYPE_VALUE_OTHER = \"_OTHER\";\n/**\n * Indicates that the exception is escaping the scope of the span.\n *\n * @deprecated It's no longer recommended to record exceptions that are handled and do not escape the scope of a span.\n */\nexport const ATTR_EXCEPTION_ESCAPED = 'exception.escaped';\n/**\n * The exception message.\n *\n * @example Division by zero\n * @example Can't convert 'int' object to str implicitly\n */\nexport const ATTR_EXCEPTION_MESSAGE = 'exception.message';\n/**\n * A stacktrace as a string in the natural representation for the language runtime. The representation is to be determined and documented by each language SIG.\n *\n * @example \"Exception in thread \"main\" java.lang.RuntimeException: Test exception\\\\n at com.example.GenerateTrace.methodB(GenerateTrace.java:13)\\\\n at com.example.GenerateTrace.methodA(GenerateTrace.java:9)\\\\n at com.example.GenerateTrace.main(GenerateTrace.java:5)\\\\n\"\n */\nexport const ATTR_EXCEPTION_STACKTRACE = 'exception.stacktrace';\n/**\n * The type of the exception (its fully-qualified class name, if applicable). The dynamic type of the exception should be preferred over the static type in languages that support it.\n *\n * @example java.net.ConnectException\n * @example OSError\n */\nexport const ATTR_EXCEPTION_TYPE = 'exception.type';\n/**\n * HTTP request headers, `<key>` being the normalized HTTP Header name (lowercase), the value being the header values.\n *\n * @example [\"application/json\"]\n * @example [\"1.2.3.4\", \"1.2.3.5\"]\n *\n * @note Instrumentations **SHOULD** require an explicit configuration of which headers are to be captured.\n * Including all request headers can be a security risk - explicit configuration helps avoid leaking sensitive information.\n *\n * The `User-Agent` header is already captured in the `user_agent.original` attribute.\n * Users **MAY** explicitly configure instrumentations to capture them even though it is not recommended.\n *\n * The attribute value **MUST** consist of either multiple header values as an array of strings\n * or a single-item array containing a possibly comma-concatenated string, depending on the way\n * the HTTP library provides access to headers.\n *\n * Examples:\n *\n *   - A header `Content-Type: application/json` **SHOULD** be recorded as the `http.request.header.content-type`\n *     attribute with value `[\"application/json\"]`.\n *   - A header `X-Forwarded-For: 1.2.3.4, 1.2.3.5` **SHOULD** be recorded as the `http.request.header.x-forwarded-for`\n *     attribute with value `[\"1.2.3.4\", \"1.2.3.5\"]` or `[\"1.2.3.4, 1.2.3.5\"]` depending on the HTTP library.\n */\nexport const ATTR_HTTP_REQUEST_HEADER = (key) => `http.request.header.${key}`;\n/**\n * HTTP request method.\n *\n * @example GET\n * @example POST\n * @example HEAD\n *\n * @note HTTP request method value **SHOULD** be \"known\" to the instrumentation.\n * By default, this convention defines \"known\" methods as the ones listed in [RFC9110](https://www.rfc-editor.org/rfc/rfc9110.html#name-methods)\n * and the PATCH method defined in [RFC5789](https://www.rfc-editor.org/rfc/rfc5789.html).\n *\n * If the HTTP request method is not known to instrumentation, it **MUST** set the `http.request.method` attribute to `_OTHER`.\n *\n * If the HTTP instrumentation could end up converting valid HTTP request methods to `_OTHER`, then it **MUST** provide a way to override\n * the list of known HTTP methods. If this override is done via environment variable, then the environment variable **MUST** be named\n * OTEL_INSTRUMENTATION_HTTP_KNOWN_METHODS and support a comma-separated list of case-sensitive known HTTP methods\n * (this list **MUST** be a full override of the default known method, it is not a list of known methods in addition to the defaults).\n *\n * HTTP method names are case-sensitive and `http.request.method` attribute value **MUST** match a known HTTP method name exactly.\n * Instrumentations for specific web frameworks that consider HTTP methods to be case insensitive, **SHOULD** populate a canonical equivalent.\n * Tracing instrumentations that do so, **MUST** also set `http.request.method_original` to the original value.\n */\nexport const ATTR_HTTP_REQUEST_METHOD = 'http.request.method';\n/**\n * Enum value \"_OTHER\" for attribute {@link ATTR_HTTP_REQUEST_METHOD}.\n */\nexport const HTTP_REQUEST_METHOD_VALUE_OTHER = \"_OTHER\";\n/**\n * Enum value \"CONNECT\" for attribute {@link ATTR_HTTP_REQUEST_METHOD}.\n */\nexport const HTTP_REQUEST_METHOD_VALUE_CONNECT = \"CONNECT\";\n/**\n * Enum value \"DELETE\" for attribute {@link ATTR_HTTP_REQUEST_METHOD}.\n */\nexport const HTTP_REQUEST_METHOD_VALUE_DELETE = \"DELETE\";\n/**\n * Enum value \"GET\" for attribute {@link ATTR_HTTP_REQUEST_METHOD}.\n */\nexport const HTTP_REQUEST_METHOD_VALUE_GET = \"GET\";\n/**\n * Enum value \"HEAD\" for attribute {@link ATTR_HTTP_REQUEST_METHOD}.\n */\nexport const HTTP_REQUEST_METHOD_VALUE_HEAD = \"HEAD\";\n/**\n * Enum value \"OPTIONS\" for attribute {@link ATTR_HTTP_REQUEST_METHOD}.\n */\nexport const HTTP_REQUEST_METHOD_VALUE_OPTIONS = \"OPTIONS\";\n/**\n * Enum value \"PATCH\" for attribute {@link ATTR_HTTP_REQUEST_METHOD}.\n */\nexport const HTTP_REQUEST_METHOD_VALUE_PATCH = \"PATCH\";\n/**\n * Enum value \"POST\" for attribute {@link ATTR_HTTP_REQUEST_METHOD}.\n */\nexport const HTTP_REQUEST_METHOD_VALUE_POST = \"POST\";\n/**\n * Enum value \"PUT\" for attribute {@link ATTR_HTTP_REQUEST_METHOD}.\n */\nexport const HTTP_REQUEST_METHOD_VALUE_PUT = \"PUT\";\n/**\n * Enum value \"TRACE\" for attribute {@link ATTR_HTTP_REQUEST_METHOD}.\n */\nexport const HTTP_REQUEST_METHOD_VALUE_TRACE = \"TRACE\";\n/**\n * Original HTTP method sent by the client in the request line.\n *\n * @example GeT\n * @example ACL\n * @example foo\n */\nexport const ATTR_HTTP_REQUEST_METHOD_ORIGINAL = 'http.request.method_original';\n/**\n * The ordinal number of request resending attempt (for any reason, including redirects).\n *\n * @example 3\n *\n * @note The resend count **SHOULD** be updated each time an HTTP request gets resent by the client, regardless of what was the cause of the resending (e.g. redirection, authorization failure, 503 Server Unavailable, network issues, or any other).\n */\nexport const ATTR_HTTP_REQUEST_RESEND_COUNT = 'http.request.resend_count';\n/**\n * HTTP response headers, `<key>` being the normalized HTTP Header name (lowercase), the value being the header values.\n *\n * @example [\"application/json\"]\n * @example [\"abc\", \"def\"]\n *\n * @note Instrumentations **SHOULD** require an explicit configuration of which headers are to be captured.\n * Including all response headers can be a security risk - explicit configuration helps avoid leaking sensitive information.\n *\n * Users **MAY** explicitly configure instrumentations to capture them even though it is not recommended.\n *\n * The attribute value **MUST** consist of either multiple header values as an array of strings\n * or a single-item array containing a possibly comma-concatenated string, depending on the way\n * the HTTP library provides access to headers.\n *\n * Examples:\n *\n *   - A header `Content-Type: application/json` header **SHOULD** be recorded as the `http.request.response.content-type`\n *     attribute with value `[\"application/json\"]`.\n *   - A header `My-custom-header: abc, def` header **SHOULD** be recorded as the `http.response.header.my-custom-header`\n *     attribute with value `[\"abc\", \"def\"]` or `[\"abc, def\"]` depending on the HTTP library.\n */\nexport const ATTR_HTTP_RESPONSE_HEADER = (key) => `http.response.header.${key}`;\n/**\n * [HTTP response status code](https://tools.ietf.org/html/rfc7231#section-6).\n *\n * @example 200\n */\nexport const ATTR_HTTP_RESPONSE_STATUS_CODE = 'http.response.status_code';\n/**\n * The matched route, that is, the path template in the format used by the respective server framework.\n *\n * @example /users/:userID?\n * @example {controller}/{action}/{id?}\n *\n * @note **MUST NOT** be populated when this is not supported by the HTTP server framework as the route attribute should have low-cardinality and the URI path can NOT substitute it.\n * **SHOULD** include the [application root](/docs/http/http-spans.md#http-server-definitions) if there is one.\n */\nexport const ATTR_HTTP_ROUTE = 'http.route';\n/**\n * Name of the garbage collector action.\n *\n * @example end of minor GC\n * @example end of major GC\n *\n * @note Garbage collector action is generally obtained via [GarbageCollectionNotificationInfo#getGcAction()](https://docs.oracle.com/en/java/javase/11/docs/api/jdk.management/com/sun/management/GarbageCollectionNotificationInfo.html#getGcAction()).\n */\nexport const ATTR_JVM_GC_ACTION = 'jvm.gc.action';\n/**\n * Name of the garbage collector.\n *\n * @example G1 Young Generation\n * @example G1 Old Generation\n *\n * @note Garbage collector name is generally obtained via [GarbageCollectionNotificationInfo#getGcName()](https://docs.oracle.com/en/java/javase/11/docs/api/jdk.management/com/sun/management/GarbageCollectionNotificationInfo.html#getGcName()).\n */\nexport const ATTR_JVM_GC_NAME = 'jvm.gc.name';\n/**\n * Name of the memory pool.\n *\n * @example G1 Old Gen\n * @example G1 Eden space\n * @example G1 Survivor Space\n *\n * @note Pool names are generally obtained via [MemoryPoolMXBean#getName()](https://docs.oracle.com/en/java/javase/11/docs/api/java.management/java/lang/management/MemoryPoolMXBean.html#getName()).\n */\nexport const ATTR_JVM_MEMORY_POOL_NAME = 'jvm.memory.pool.name';\n/**\n * The type of memory.\n *\n * @example heap\n * @example non_heap\n */\nexport const ATTR_JVM_MEMORY_TYPE = 'jvm.memory.type';\n/**\n * Enum value \"heap\" for attribute {@link ATTR_JVM_MEMORY_TYPE}.\n */\nexport const JVM_MEMORY_TYPE_VALUE_HEAP = \"heap\";\n/**\n * Enum value \"non_heap\" for attribute {@link ATTR_JVM_MEMORY_TYPE}.\n */\nexport const JVM_MEMORY_TYPE_VALUE_NON_HEAP = \"non_heap\";\n/**\n * Whether the thread is daemon or not.\n */\nexport const ATTR_JVM_THREAD_DAEMON = 'jvm.thread.daemon';\n/**\n * State of the thread.\n *\n * @example runnable\n * @example blocked\n */\nexport const ATTR_JVM_THREAD_STATE = 'jvm.thread.state';\n/**\n * Enum value \"blocked\" for attribute {@link ATTR_JVM_THREAD_STATE}.\n */\nexport const JVM_THREAD_STATE_VALUE_BLOCKED = \"blocked\";\n/**\n * Enum value \"new\" for attribute {@link ATTR_JVM_THREAD_STATE}.\n */\nexport const JVM_THREAD_STATE_VALUE_NEW = \"new\";\n/**\n * Enum value \"runnable\" for attribute {@link ATTR_JVM_THREAD_STATE}.\n */\nexport const JVM_THREAD_STATE_VALUE_RUNNABLE = \"runnable\";\n/**\n * Enum value \"terminated\" for attribute {@link ATTR_JVM_THREAD_STATE}.\n */\nexport const JVM_THREAD_STATE_VALUE_TERMINATED = \"terminated\";\n/**\n * Enum value \"timed_waiting\" for attribute {@link ATTR_JVM_THREAD_STATE}.\n */\nexport const JVM_THREAD_STATE_VALUE_TIMED_WAITING = \"timed_waiting\";\n/**\n * Enum value \"waiting\" for attribute {@link ATTR_JVM_THREAD_STATE}.\n */\nexport const JVM_THREAD_STATE_VALUE_WAITING = \"waiting\";\n/**\n * Local address of the network connection - IP address or Unix domain socket name.\n *\n * @example 10.1.2.80\n * @example /tmp/my.sock\n */\nexport const ATTR_NETWORK_LOCAL_ADDRESS = 'network.local.address';\n/**\n * Local port number of the network connection.\n *\n * @example 65123\n */\nexport const ATTR_NETWORK_LOCAL_PORT = 'network.local.port';\n/**\n * Peer address of the network connection - IP address or Unix domain socket name.\n *\n * @example 10.1.2.80\n * @example /tmp/my.sock\n */\nexport const ATTR_NETWORK_PEER_ADDRESS = 'network.peer.address';\n/**\n * Peer port number of the network connection.\n *\n * @example 65123\n */\nexport const ATTR_NETWORK_PEER_PORT = 'network.peer.port';\n/**\n * [OSI application layer](https://wikipedia.org/wiki/Application_layer) or non-OSI equivalent.\n *\n * @example amqp\n * @example http\n * @example mqtt\n *\n * @note The value **SHOULD** be normalized to lowercase.\n */\nexport const ATTR_NETWORK_PROTOCOL_NAME = 'network.protocol.name';\n/**\n * The actual version of the protocol used for network communication.\n *\n * @example 1.1\n * @example 2\n *\n * @note If protocol version is subject to negotiation (for example using [ALPN](https://www.rfc-editor.org/rfc/rfc7301.html)), this attribute **SHOULD** be set to the negotiated version. If the actual protocol version is not known, this attribute **SHOULD NOT** be set.\n */\nexport const ATTR_NETWORK_PROTOCOL_VERSION = 'network.protocol.version';\n/**\n * [OSI transport layer](https://wikipedia.org/wiki/Transport_layer) or [inter-process communication method](https://wikipedia.org/wiki/Inter-process_communication).\n *\n * @example tcp\n * @example udp\n *\n * @note The value **SHOULD** be normalized to lowercase.\n *\n * Consider always setting the transport when setting a port number, since\n * a port number is ambiguous without knowing the transport. For example\n * different processes could be listening on TCP port 12345 and UDP port 12345.\n */\nexport const ATTR_NETWORK_TRANSPORT = 'network.transport';\n/**\n * Enum value \"pipe\" for attribute {@link ATTR_NETWORK_TRANSPORT}.\n */\nexport const NETWORK_TRANSPORT_VALUE_PIPE = \"pipe\";\n/**\n * Enum value \"quic\" for attribute {@link ATTR_NETWORK_TRANSPORT}.\n */\nexport const NETWORK_TRANSPORT_VALUE_QUIC = \"quic\";\n/**\n * Enum value \"tcp\" for attribute {@link ATTR_NETWORK_TRANSPORT}.\n */\nexport const NETWORK_TRANSPORT_VALUE_TCP = \"tcp\";\n/**\n * Enum value \"udp\" for attribute {@link ATTR_NETWORK_TRANSPORT}.\n */\nexport const NETWORK_TRANSPORT_VALUE_UDP = \"udp\";\n/**\n * Enum value \"unix\" for attribute {@link ATTR_NETWORK_TRANSPORT}.\n */\nexport const NETWORK_TRANSPORT_VALUE_UNIX = \"unix\";\n/**\n * [OSI network layer](https://wikipedia.org/wiki/Network_layer) or non-OSI equivalent.\n *\n * @example ipv4\n * @example ipv6\n *\n * @note The value **SHOULD** be normalized to lowercase.\n */\nexport const ATTR_NETWORK_TYPE = 'network.type';\n/**\n * Enum value \"ipv4\" for attribute {@link ATTR_NETWORK_TYPE}.\n */\nexport const NETWORK_TYPE_VALUE_IPV4 = \"ipv4\";\n/**\n * Enum value \"ipv6\" for attribute {@link ATTR_NETWORK_TYPE}.\n */\nexport const NETWORK_TYPE_VALUE_IPV6 = \"ipv6\";\n/**\n * The name of the instrumentation scope - (`InstrumentationScope.Name` in OTLP).\n *\n * @example io.opentelemetry.contrib.mongodb\n */\nexport const ATTR_OTEL_SCOPE_NAME = 'otel.scope.name';\n/**\n * The version of the instrumentation scope - (`InstrumentationScope.Version` in OTLP).\n *\n * @example 1.0.0\n */\nexport const ATTR_OTEL_SCOPE_VERSION = 'otel.scope.version';\n/**\n * Name of the code, either \"OK\" or \"ERROR\". **MUST NOT** be set if the status code is UNSET.\n */\nexport const ATTR_OTEL_STATUS_CODE = 'otel.status_code';\n/**\n * Enum value \"ERROR\" for attribute {@link ATTR_OTEL_STATUS_CODE}.\n */\nexport const OTEL_STATUS_CODE_VALUE_ERROR = \"ERROR\";\n/**\n * Enum value \"OK\" for attribute {@link ATTR_OTEL_STATUS_CODE}.\n */\nexport const OTEL_STATUS_CODE_VALUE_OK = \"OK\";\n/**\n * Description of the Status if it has a value, otherwise not set.\n *\n * @example resource not found\n */\nexport const ATTR_OTEL_STATUS_DESCRIPTION = 'otel.status_description';\n/**\n * Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.\n *\n * @example example.com\n * @example 10.1.2.80\n * @example /tmp/my.sock\n *\n * @note When observed from the client side, and when communicating through an intermediary, `server.address` **SHOULD** represent the server address behind any intermediaries, for example proxies, if it's available.\n */\nexport const ATTR_SERVER_ADDRESS = 'server.address';\n/**\n * Server port number.\n *\n * @example 80\n * @example 8080\n * @example 443\n *\n * @note When observed from the client side, and when communicating through an intermediary, `server.port` **SHOULD** represent the server port behind any intermediaries, for example proxies, if it's available.\n */\nexport const ATTR_SERVER_PORT = 'server.port';\n/**\n * Logical name of the service.\n *\n * @example shoppingcart\n *\n * @note **MUST** be the same for all instances of horizontally scaled services. If the value was not specified, SDKs **MUST** fallback to `unknown_service:` concatenated with [`process.executable.name`](process.md), e.g. `unknown_service:bash`. If `process.executable.name` is not available, the value **MUST** be set to `unknown_service`.\n */\nexport const ATTR_SERVICE_NAME = 'service.name';\n/**\n * The version string of the service API or implementation. The format is not defined by these conventions.\n *\n * @example 2.0.0\n * @example a01dbef8a\n */\nexport const ATTR_SERVICE_VERSION = 'service.version';\n/**\n * SignalR HTTP connection closure status.\n *\n * @example app_shutdown\n * @example timeout\n */\nexport const ATTR_SIGNALR_CONNECTION_STATUS = 'signalr.connection.status';\n/**\n * Enum value \"app_shutdown\" for attribute {@link ATTR_SIGNALR_CONNECTION_STATUS}.\n */\nexport const SIGNALR_CONNECTION_STATUS_VALUE_APP_SHUTDOWN = \"app_shutdown\";\n/**\n * Enum value \"normal_closure\" for attribute {@link ATTR_SIGNALR_CONNECTION_STATUS}.\n */\nexport const SIGNALR_CONNECTION_STATUS_VALUE_NORMAL_CLOSURE = \"normal_closure\";\n/**\n * Enum value \"timeout\" for attribute {@link ATTR_SIGNALR_CONNECTION_STATUS}.\n */\nexport const SIGNALR_CONNECTION_STATUS_VALUE_TIMEOUT = \"timeout\";\n/**\n * [SignalR transport type](https://github.com/dotnet/aspnetcore/blob/main/src/SignalR/docs/specs/TransportProtocols.md)\n *\n * @example web_sockets\n * @example long_polling\n */\nexport const ATTR_SIGNALR_TRANSPORT = 'signalr.transport';\n/**\n * Enum value \"long_polling\" for attribute {@link ATTR_SIGNALR_TRANSPORT}.\n */\nexport const SIGNALR_TRANSPORT_VALUE_LONG_POLLING = \"long_polling\";\n/**\n * Enum value \"server_sent_events\" for attribute {@link ATTR_SIGNALR_TRANSPORT}.\n */\nexport const SIGNALR_TRANSPORT_VALUE_SERVER_SENT_EVENTS = \"server_sent_events\";\n/**\n * Enum value \"web_sockets\" for attribute {@link ATTR_SIGNALR_TRANSPORT}.\n */\nexport const SIGNALR_TRANSPORT_VALUE_WEB_SOCKETS = \"web_sockets\";\n/**\n * The language of the telemetry SDK.\n */\nexport const ATTR_TELEMETRY_SDK_LANGUAGE = 'telemetry.sdk.language';\n/**\n * Enum value \"cpp\" for attribute {@link ATTR_TELEMETRY_SDK_LANGUAGE}.\n */\nexport const TELEMETRY_SDK_LANGUAGE_VALUE_CPP = \"cpp\";\n/**\n * Enum value \"dotnet\" for attribute {@link ATTR_TELEMETRY_SDK_LANGUAGE}.\n */\nexport const TELEMETRY_SDK_LANGUAGE_VALUE_DOTNET = \"dotnet\";\n/**\n * Enum value \"erlang\" for attribute {@link ATTR_TELEMETRY_SDK_LANGUAGE}.\n */\nexport const TELEMETRY_SDK_LANGUAGE_VALUE_ERLANG = \"erlang\";\n/**\n * Enum value \"go\" for attribute {@link ATTR_TELEMETRY_SDK_LANGUAGE}.\n */\nexport const TELEMETRY_SDK_LANGUAGE_VALUE_GO = \"go\";\n/**\n * Enum value \"java\" for attribute {@link ATTR_TELEMETRY_SDK_LANGUAGE}.\n */\nexport const TELEMETRY_SDK_LANGUAGE_VALUE_JAVA = \"java\";\n/**\n * Enum value \"nodejs\" for attribute {@link ATTR_TELEMETRY_SDK_LANGUAGE}.\n */\nexport const TELEMETRY_SDK_LANGUAGE_VALUE_NODEJS = \"nodejs\";\n/**\n * Enum value \"php\" for attribute {@link ATTR_TELEMETRY_SDK_LANGUAGE}.\n */\nexport const TELEMETRY_SDK_LANGUAGE_VALUE_PHP = \"php\";\n/**\n * Enum value \"python\" for attribute {@link ATTR_TELEMETRY_SDK_LANGUAGE}.\n */\nexport const TELEMETRY_SDK_LANGUAGE_VALUE_PYTHON = \"python\";\n/**\n * Enum value \"ruby\" for attribute {@link ATTR_TELEMETRY_SDK_LANGUAGE}.\n */\nexport const TELEMETRY_SDK_LANGUAGE_VALUE_RUBY = \"ruby\";\n/**\n * Enum value \"rust\" for attribute {@link ATTR_TELEMETRY_SDK_LANGUAGE}.\n */\nexport const TELEMETRY_SDK_LANGUAGE_VALUE_RUST = \"rust\";\n/**\n * Enum value \"swift\" for attribute {@link ATTR_TELEMETRY_SDK_LANGUAGE}.\n */\nexport const TELEMETRY_SDK_LANGUAGE_VALUE_SWIFT = \"swift\";\n/**\n * Enum value \"webjs\" for attribute {@link ATTR_TELEMETRY_SDK_LANGUAGE}.\n */\nexport const TELEMETRY_SDK_LANGUAGE_VALUE_WEBJS = \"webjs\";\n/**\n * The name of the telemetry SDK as defined above.\n *\n * @example opentelemetry\n *\n * @note The OpenTelemetry SDK **MUST** set the `telemetry.sdk.name` attribute to `opentelemetry`.\n * If another SDK, like a fork or a vendor-provided implementation, is used, this SDK **MUST** set the\n * `telemetry.sdk.name` attribute to the fully-qualified class or module name of this SDK's main entry point\n * or another suitable identifier depending on the language.\n * The identifier `opentelemetry` is reserved and **MUST NOT** be used in this case.\n * All custom identifiers **SHOULD** be stable across different versions of an implementation.\n */\nexport const ATTR_TELEMETRY_SDK_NAME = 'telemetry.sdk.name';\n/**\n * The version string of the telemetry SDK.\n *\n * @example 1.2.3\n */\nexport const ATTR_TELEMETRY_SDK_VERSION = 'telemetry.sdk.version';\n/**\n * The [URI fragment](https://www.rfc-editor.org/rfc/rfc3986#section-3.5) component\n *\n * @example SemConv\n */\nexport const ATTR_URL_FRAGMENT = 'url.fragment';\n/**\n * Absolute URL describing a network resource according to [RFC3986](https://www.rfc-editor.org/rfc/rfc3986)\n *\n * @example https://www.foo.bar/search?q=OpenTelemetry#SemConv\n * @example //localhost\n *\n * @note For network calls, URL usually has `scheme://host[:port][path][?query][#fragment]` format, where the fragment\n * is not transmitted over HTTP, but if it is known, it **SHOULD** be included nevertheless.\n *\n * `url.full` **MUST NOT** contain credentials passed via URL in form of `https://username:password@www.example.com/`.\n * In such case username and password **SHOULD** be redacted and attribute's value **SHOULD** be `https://REDACTED:REDACTED@www.example.com/`.\n *\n * `url.full` **SHOULD** capture the absolute URL when it is available (or can be reconstructed).\n *\n * Sensitive content provided in `url.full` **SHOULD** be scrubbed when instrumentations can identify it.\n *\n *\n * Query string values for the following keys **SHOULD** be redacted by default and replaced by the\n * value `REDACTED`:\n *\n *   - [`AWSAccessKeyId`](https://docs.aws.amazon.com/AmazonS3/latest/userguide/RESTAuthentication.html#RESTAuthenticationQueryStringAuth)\n *   - [`Signature`](https://docs.aws.amazon.com/AmazonS3/latest/userguide/RESTAuthentication.html#RESTAuthenticationQueryStringAuth)\n *   - [`sig`](https://learn.microsoft.com/azure/storage/common/storage-sas-overview#sas-token)\n *   - [`X-Goog-Signature`](https://cloud.google.com/storage/docs/access-control/signed-urls)\n *\n * This list is subject to change over time.\n *\n * When a query string value is redacted, the query string key **SHOULD** still be preserved, e.g.\n * `https://www.example.com/path?color=blue&sig=REDACTED`.\n */\nexport const ATTR_URL_FULL = 'url.full';\n/**\n * The [URI path](https://www.rfc-editor.org/rfc/rfc3986#section-3.3) component\n *\n * @example /search\n *\n * @note Sensitive content provided in `url.path` **SHOULD** be scrubbed when instrumentations can identify it.\n */\nexport const ATTR_URL_PATH = 'url.path';\n/**\n * The [URI query](https://www.rfc-editor.org/rfc/rfc3986#section-3.4) component\n *\n * @example q=OpenTelemetry\n *\n * @note Sensitive content provided in `url.query` **SHOULD** be scrubbed when instrumentations can identify it.\n *\n *\n * Query string values for the following keys **SHOULD** be redacted by default and replaced by the value `REDACTED`:\n *\n *   - [`AWSAccessKeyId`](https://docs.aws.amazon.com/AmazonS3/latest/userguide/RESTAuthentication.html#RESTAuthenticationQueryStringAuth)\n *   - [`Signature`](https://docs.aws.amazon.com/AmazonS3/latest/userguide/RESTAuthentication.html#RESTAuthenticationQueryStringAuth)\n *   - [`sig`](https://learn.microsoft.com/azure/storage/common/storage-sas-overview#sas-token)\n *   - [`X-Goog-Signature`](https://cloud.google.com/storage/docs/access-control/signed-urls)\n *\n * This list is subject to change over time.\n *\n * When a query string value is redacted, the query string key **SHOULD** still be preserved, e.g.\n * `q=OpenTelemetry&sig=REDACTED`.\n */\nexport const ATTR_URL_QUERY = 'url.query';\n/**\n * The [URI scheme](https://www.rfc-editor.org/rfc/rfc3986#section-3.1) component identifying the used protocol.\n *\n * @example https\n * @example ftp\n * @example telnet\n */\nexport const ATTR_URL_SCHEME = 'url.scheme';\n/**\n * Value of the [HTTP User-Agent](https://www.rfc-editor.org/rfc/rfc9110.html#field.user-agent) header sent by the client.\n *\n * @example CERN-LineMode/2.15 libwww/2.17b3\n * @example Mozilla/5.0 (iPhone; CPU iPhone OS 14_7_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.1.2 Mobile/15E148 Safari/604.1\n * @example YourApp/1.0.0 grpc-java-okhttp/1.27.2\n */\nexport const ATTR_USER_AGENT_ORIGINAL = 'user_agent.original';\n//# sourceMappingURL=stable_attributes.js.map","import { ATTR_URL_FULL, SEMATTRS_HTTP_URL, ATTR_HTTP_REQUEST_METHOD, SEMATTRS_HTTP_METHOD, SEMATTRS_DB_SYSTEM, SEMATTRS_RPC_SERVICE, SEMATTRS_MESSAGING_SYSTEM, SEMATTRS_FAAS_TRIGGER, SEMATTRS_DB_STATEMENT, SEMATTRS_HTTP_TARGET, ATTR_HTTP_ROUTE, ATTR_HTTP_RESPONSE_STATUS_CODE, SEMATTRS_HTTP_STATUS_CODE, SEMATTRS_RPC_GRPC_STATUS_CODE } from '@opentelemetry/semantic-conventions';\nimport { parseUrl, getSanitizedUrlString, SDK_VERSION, addNonEnumerableProperty, isSentryRequestUrl, getClient, baggageHeaderToDynamicSamplingContext, SEMANTIC_ATTRIBUTE_SENTRY_OP, SEMANTIC_ATTRIBUTE_SENTRY_SOURCE, SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME, stripUrlQueryAndFragment, spanToJSON, hasSpansEnabled, dynamicSamplingContextToSentryBaggageHeader, LRUMap, logger, parseBaggageHeader, SENTRY_BAGGAGE_KEY_PREFIX, generateSentryTraceHeader, stringMatchesSomePattern, getDynamicSamplingContextFromSpan, getCurrentScope, getDynamicSamplingContextFromScope, getIsolationScope, propagationContextFromHeaders, handleCallbackErrors, spanToTraceContext, getTraceContextFromScope, getRootSpan, getCapturedScopesOnSpan, setAsyncContextStrategy, getDefaultIsolationScope, getDefaultCurrentScope, SPAN_STATUS_OK, SPAN_STATUS_ERROR, getSpanStatusFromHttpCode, timedEventsToMeasurements, captureEvent, SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE, convertSpanLinksForEnvelope, getStatusMessage, spanTimeInputToSeconds, addChildSpanToSpan, setCapturedScopesOnSpan, logSpanStart, logSpanEnd, parseSampleRate, sampleSpan } from '@sentry/core';\nexport { getClient, getDynamicSamplingContextFromSpan } from '@sentry/core';\nimport * as api from '@opentelemetry/api';\nimport { trace, SpanKind, createContextKey, TraceFlags, propagation, INVALID_TRACEID, context, SpanStatusCode, ROOT_CONTEXT, isSpanContextValid } from '@opentelemetry/api';\nimport { TraceState, W3CBaggagePropagator, isTracingSuppressed, suppressTracing as suppressTracing$1 } from '@opentelemetry/core';\nimport { SamplingDecision } from '@opentelemetry/sdk-trace-base';\n\n/** If this attribute is true, it means that the parent is a remote span. */\nconst SEMANTIC_ATTRIBUTE_SENTRY_PARENT_IS_REMOTE = 'sentry.parentIsRemote';\n\n// These are not standardized yet, but used by the graphql instrumentation\nconst SEMANTIC_ATTRIBUTE_SENTRY_GRAPHQL_OPERATION = 'sentry.graphql.operation';\n\n/**\n * Get the parent span id from a span.\n * In OTel v1, the parent span id is accessed as `parentSpanId`\n * In OTel v2, the parent span id is accessed as `spanId` on the `parentSpanContext`\n */\nfunction getParentSpanId(span) {\n  if ('parentSpanId' in span) {\n    return span.parentSpanId ;\n  } else if ('parentSpanContext' in span) {\n    return (span.parentSpanContext )?.spanId;\n  }\n\n  return undefined;\n}\n\n/**\n * Check if a given span has attributes.\n * This is necessary because the base `Span` type does not have attributes,\n * so in places where we are passed a generic span, we need to check if we want to access them.\n */\nfunction spanHasAttributes(\n  span,\n) {\n  const castSpan = span ;\n  return !!castSpan.attributes && typeof castSpan.attributes === 'object';\n}\n\n/**\n * Check if a given span has a kind.\n * This is necessary because the base `Span` type does not have a kind,\n * so in places where we are passed a generic span, we need to check if we want to access it.\n */\nfunction spanHasKind(span) {\n  const castSpan = span ;\n  return typeof castSpan.kind === 'number';\n}\n\n/**\n * Check if a given span has a status.\n * This is necessary because the base `Span` type does not have a status,\n * so in places where we are passed a generic span, we need to check if we want to access it.\n */\nfunction spanHasStatus(\n  span,\n) {\n  const castSpan = span ;\n  return !!castSpan.status;\n}\n\n/**\n * Check if a given span has a name.\n * This is necessary because the base `Span` type does not have a name,\n * so in places where we are passed a generic span, we need to check if we want to access it.\n */\nfunction spanHasName(span) {\n  const castSpan = span ;\n  return !!castSpan.name;\n}\n\n/**\n * Check if a given span has a kind.\n * This is necessary because the base `Span` type does not have a kind,\n * so in places where we are passed a generic span, we need to check if we want to access it.\n */\nfunction spanHasParentId(\n  span,\n) {\n  const castSpan = span ;\n  return !!getParentSpanId(castSpan);\n}\n\n/**\n * Check if a given span has events.\n * This is necessary because the base `Span` type does not have events,\n * so in places where we are passed a generic span, we need to check if we want to access it.\n */\nfunction spanHasEvents(\n  span,\n) {\n  const castSpan = span ;\n  return Array.isArray(castSpan.events);\n}\n\n/**\n * Get sanitizied request data from an OTEL span.\n */\nfunction getRequestSpanData(span) {\n  // The base `Span` type has no `attributes`, so we need to guard here against that\n  if (!spanHasAttributes(span)) {\n    return {};\n  }\n\n  // eslint-disable-next-line deprecation/deprecation\n  const maybeUrlAttribute = (span.attributes[ATTR_URL_FULL] || span.attributes[SEMATTRS_HTTP_URL])\n\n;\n\n  const data = {\n    url: maybeUrlAttribute,\n    // eslint-disable-next-line deprecation/deprecation\n    'http.method': (span.attributes[ATTR_HTTP_REQUEST_METHOD] || span.attributes[SEMATTRS_HTTP_METHOD])\n\n,\n  };\n\n  // Default to GET if URL is set but method is not\n  if (!data['http.method'] && data.url) {\n    data['http.method'] = 'GET';\n  }\n\n  try {\n    if (typeof maybeUrlAttribute === 'string') {\n      const url = parseUrl(maybeUrlAttribute);\n\n      data.url = getSanitizedUrlString(url);\n\n      if (url.search) {\n        data['http.query'] = url.search;\n      }\n      if (url.hash) {\n        data['http.fragment'] = url.hash;\n      }\n    }\n  } catch {\n    // ignore\n  }\n\n  return data;\n}\n\n// Typescript complains if we do not use `...args: any[]` for the mixin, with:\n// A mixin class must have a constructor with a single rest parameter of type 'any[]'.ts(2545)\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/**\n * Wrap an Client class with things we need for OpenTelemetry support.\n * Make sure that the Client class passed in is non-abstract!\n *\n * Usage:\n * const OpenTelemetryClient = getWrappedClientClass(NodeClient);\n * const client = new OpenTelemetryClient(options);\n */\nfunction wrapClientClass\n\n(ClientClass) {\n  // @ts-expect-error We just assume that this is non-abstract, if you pass in an abstract class this would make it non-abstract\n  class OpenTelemetryClient extends ClientClass  {\n\n     constructor(...args) {\n      super(...args);\n    }\n\n    /** Get the OTEL tracer. */\n     get tracer() {\n      if (this._tracer) {\n        return this._tracer;\n      }\n\n      const name = '@sentry/opentelemetry';\n      const version = SDK_VERSION;\n      const tracer = trace.getTracer(name, version);\n      this._tracer = tracer;\n\n      return tracer;\n    }\n\n    /**\n     * @inheritDoc\n     */\n     async flush(timeout) {\n      const provider = this.traceProvider;\n      await provider?.forceFlush();\n      return super.flush(timeout);\n    }\n  }\n\n  return OpenTelemetryClient ;\n}\n/* eslint-enable @typescript-eslint/no-explicit-any */\n\n/**\n * Get the span kind from a span.\n * For whatever reason, this is not public API on the generic \"Span\" type,\n * so we need to check if we actually have a `SDKTraceBaseSpan` where we can fetch this from.\n * Otherwise, we fall back to `SpanKind.INTERNAL`.\n */\nfunction getSpanKind(span) {\n  if (spanHasKind(span)) {\n    return span.kind;\n  }\n\n  return SpanKind.INTERNAL;\n}\n\nconst SENTRY_TRACE_HEADER = 'sentry-trace';\nconst SENTRY_BAGGAGE_HEADER = 'baggage';\n\nconst SENTRY_TRACE_STATE_DSC = 'sentry.dsc';\nconst SENTRY_TRACE_STATE_SAMPLED_NOT_RECORDING = 'sentry.sampled_not_recording';\nconst SENTRY_TRACE_STATE_URL = 'sentry.url';\nconst SENTRY_TRACE_STATE_SAMPLE_RAND = 'sentry.sample_rand';\nconst SENTRY_TRACE_STATE_SAMPLE_RATE = 'sentry.sample_rate';\n\nconst SENTRY_SCOPES_CONTEXT_KEY = createContextKey('sentry_scopes');\n\nconst SENTRY_FORK_ISOLATION_SCOPE_CONTEXT_KEY = createContextKey('sentry_fork_isolation_scope');\n\nconst SENTRY_FORK_SET_SCOPE_CONTEXT_KEY = createContextKey('sentry_fork_set_scope');\n\nconst SENTRY_FORK_SET_ISOLATION_SCOPE_CONTEXT_KEY = createContextKey('sentry_fork_set_isolation_scope');\n\nconst SCOPE_CONTEXT_FIELD = '_scopeContext';\n\n/**\n * Try to get the current scopes from the given OTEL context.\n * This requires a Context Manager that was wrapped with getWrappedContextManager.\n */\nfunction getScopesFromContext(context) {\n  return context.getValue(SENTRY_SCOPES_CONTEXT_KEY) ;\n}\n\n/**\n * Set the current scopes on an OTEL context.\n * This will return a forked context with the Propagation Context set.\n */\nfunction setScopesOnContext(context, scopes) {\n  return context.setValue(SENTRY_SCOPES_CONTEXT_KEY, scopes);\n}\n\n/**\n * Set the context on the scope so we can later look it up.\n * We need this to get the context from the scope in the `trace` functions.\n */\nfunction setContextOnScope(scope, context) {\n  addNonEnumerableProperty(scope, SCOPE_CONTEXT_FIELD, context);\n}\n\n/**\n * Get the context related to a scope.\n */\nfunction getContextFromScope(scope) {\n  return (scope )[SCOPE_CONTEXT_FIELD];\n}\n\n/**\n *\n * @param otelSpan Checks whether a given OTEL Span is an http request to sentry.\n * @returns boolean\n */\nfunction isSentryRequestSpan(span) {\n  if (!spanHasAttributes(span)) {\n    return false;\n  }\n\n  const { attributes } = span;\n\n  // `ATTR_URL_FULL` is the new attribute, but we still support the old one, `ATTR_HTTP_URL`, for now.\n  // eslint-disable-next-line deprecation/deprecation\n  const httpUrl = attributes[SEMATTRS_HTTP_URL] || attributes[ATTR_URL_FULL];\n\n  if (!httpUrl) {\n    return false;\n  }\n\n  return isSentryRequestUrl(httpUrl.toString(), getClient());\n}\n\n/**\n * OpenTelemetry only knows about SAMPLED or NONE decision,\n * but for us it is important to differentiate between unset and unsampled.\n *\n * Both of these are identified as `traceFlags === TracegFlags.NONE`,\n * but we additionally look at a special trace state to differentiate between them.\n */\nfunction getSamplingDecision(spanContext) {\n  const { traceFlags, traceState } = spanContext;\n\n  const sampledNotRecording = traceState ? traceState.get(SENTRY_TRACE_STATE_SAMPLED_NOT_RECORDING) === '1' : false;\n\n  // If trace flag is `SAMPLED`, we interpret this as sampled\n  // If it is `NONE`, it could mean either it was sampled to be not recorder, or that it was not sampled at all\n  // For us this is an important difference, sow e look at the SENTRY_TRACE_STATE_SAMPLED_NOT_RECORDING\n  // to identify which it is\n  if (traceFlags === TraceFlags.SAMPLED) {\n    return true;\n  }\n\n  if (sampledNotRecording) {\n    return false;\n  }\n\n  // Fall back to DSC as a last resort, that may also contain `sampled`...\n  const dscString = traceState ? traceState.get(SENTRY_TRACE_STATE_DSC) : undefined;\n  const dsc = dscString ? baggageHeaderToDynamicSamplingContext(dscString) : undefined;\n\n  if (dsc?.sampled === 'true') {\n    return true;\n  }\n  if (dsc?.sampled === 'false') {\n    return false;\n  }\n\n  return undefined;\n}\n\n/**\n * Infer the op & description for a set of name, attributes and kind of a span.\n */\nfunction inferSpanData(spanName, attributes, kind) {\n  // if http.method exists, this is an http request span\n  // eslint-disable-next-line deprecation/deprecation\n  const httpMethod = attributes[ATTR_HTTP_REQUEST_METHOD] || attributes[SEMATTRS_HTTP_METHOD];\n  if (httpMethod) {\n    return descriptionForHttpMethod({ attributes, name: spanName, kind }, httpMethod);\n  }\n\n  // eslint-disable-next-line deprecation/deprecation\n  const dbSystem = attributes[SEMATTRS_DB_SYSTEM];\n  const opIsCache =\n    typeof attributes[SEMANTIC_ATTRIBUTE_SENTRY_OP] === 'string' &&\n    attributes[SEMANTIC_ATTRIBUTE_SENTRY_OP].startsWith('cache.');\n\n  // If db.type exists then this is a database call span\n  // If the Redis DB is used as a cache, the span description should not be changed\n  if (dbSystem && !opIsCache) {\n    return descriptionForDbSystem({ attributes, name: spanName });\n  }\n\n  const customSourceOrRoute = attributes[SEMANTIC_ATTRIBUTE_SENTRY_SOURCE] === 'custom' ? 'custom' : 'route';\n\n  // If rpc.service exists then this is a rpc call span.\n  // eslint-disable-next-line deprecation/deprecation\n  const rpcService = attributes[SEMATTRS_RPC_SERVICE];\n  if (rpcService) {\n    return {\n      ...getUserUpdatedNameAndSource(spanName, attributes, 'route'),\n      op: 'rpc',\n    };\n  }\n\n  // If messaging.system exists then this is a messaging system span.\n  // eslint-disable-next-line deprecation/deprecation\n  const messagingSystem = attributes[SEMATTRS_MESSAGING_SYSTEM];\n  if (messagingSystem) {\n    return {\n      ...getUserUpdatedNameAndSource(spanName, attributes, customSourceOrRoute),\n      op: 'message',\n    };\n  }\n\n  // If faas.trigger exists then this is a function as a service span.\n  // eslint-disable-next-line deprecation/deprecation\n  const faasTrigger = attributes[SEMATTRS_FAAS_TRIGGER];\n  if (faasTrigger) {\n    return {\n      ...getUserUpdatedNameAndSource(spanName, attributes, customSourceOrRoute),\n      op: faasTrigger.toString(),\n    };\n  }\n\n  return { op: undefined, description: spanName, source: 'custom' };\n}\n\n/**\n * Extract better op/description from an otel span.\n *\n * Does not overwrite the span name if the source is already set to custom to ensure\n * that user-updated span names are preserved. In this case, we only adjust the op but\n * leave span description and source unchanged.\n *\n * Based on https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/7422ce2a06337f68a59b552b8c5a2ac125d6bae5/exporter/sentryexporter/sentry_exporter.go#L306\n */\nfunction parseSpanDescription(span) {\n  const attributes = spanHasAttributes(span) ? span.attributes : {};\n  const name = spanHasName(span) ? span.name : '<unknown>';\n  const kind = getSpanKind(span);\n\n  return inferSpanData(name, attributes, kind);\n}\n\nfunction descriptionForDbSystem({ attributes, name }) {\n  // if we already have a custom name, we don't overwrite it but only set the op\n  const userDefinedName = attributes[SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME];\n  if (typeof userDefinedName === 'string') {\n    return {\n      op: 'db',\n      description: userDefinedName,\n      source: (attributes[SEMANTIC_ATTRIBUTE_SENTRY_SOURCE] ) || 'custom',\n    };\n  }\n\n  // if we already have the source set to custom, we don't overwrite the span description but only set the op\n  if (attributes[SEMANTIC_ATTRIBUTE_SENTRY_SOURCE] === 'custom') {\n    return { op: 'db', description: name, source: 'custom' };\n  }\n\n  // Use DB statement (Ex \"SELECT * FROM table\") if possible as description.\n  // eslint-disable-next-line deprecation/deprecation\n  const statement = attributes[SEMATTRS_DB_STATEMENT];\n\n  const description = statement ? statement.toString() : name;\n\n  return { op: 'db', description, source: 'task' };\n}\n\n/** Only exported for tests. */\nfunction descriptionForHttpMethod(\n  { name, kind, attributes },\n  httpMethod,\n) {\n  const opParts = ['http'];\n\n  switch (kind) {\n    case SpanKind.CLIENT:\n      opParts.push('client');\n      break;\n    case SpanKind.SERVER:\n      opParts.push('server');\n      break;\n  }\n\n  // Spans for HTTP requests we have determined to be prefetch requests will have a `.prefetch` postfix in the op\n  if (attributes['sentry.http.prefetch']) {\n    opParts.push('prefetch');\n  }\n\n  const { urlPath, url, query, fragment, hasRoute } = getSanitizedUrl(attributes, kind);\n\n  if (!urlPath) {\n    return { ...getUserUpdatedNameAndSource(name, attributes), op: opParts.join('.') };\n  }\n\n  const graphqlOperationsAttribute = attributes[SEMANTIC_ATTRIBUTE_SENTRY_GRAPHQL_OPERATION];\n\n  // Ex. GET /api/users\n  const baseDescription = `${httpMethod} ${urlPath}`;\n\n  // When the http span has a graphql operation, append it to the description\n  // We add these in the graphqlIntegration\n  const inferredDescription = graphqlOperationsAttribute\n    ? `${baseDescription} (${getGraphqlOperationNamesFromAttribute(graphqlOperationsAttribute)})`\n    : baseDescription;\n\n  // If `httpPath` is a root path, then we can categorize the transaction source as route.\n  const inferredSource = hasRoute || urlPath === '/' ? 'route' : 'url';\n\n  const data = {};\n\n  if (url) {\n    data.url = url;\n  }\n  if (query) {\n    data['http.query'] = query;\n  }\n  if (fragment) {\n    data['http.fragment'] = fragment;\n  }\n\n  // If the span kind is neither client nor server, we use the original name\n  // this infers that somebody manually started this span, in which case we don't want to overwrite the name\n  const isClientOrServerKind = kind === SpanKind.CLIENT || kind === SpanKind.SERVER;\n\n  // If the span is an auto-span (=it comes from one of our instrumentations),\n  // we always want to infer the name\n  // this is necessary because some of the auto-instrumentation we use uses kind=INTERNAL\n  const origin = attributes[SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN] || 'manual';\n  const isManualSpan = !`${origin}`.startsWith('auto');\n\n  // If users (or in very rare occasions we) set the source to custom, we don't overwrite the name\n  const alreadyHasCustomSource = attributes[SEMANTIC_ATTRIBUTE_SENTRY_SOURCE] === 'custom';\n  const customSpanName = attributes[SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME];\n\n  const useInferredDescription =\n    !alreadyHasCustomSource && customSpanName == null && (isClientOrServerKind || !isManualSpan);\n\n  const { description, source } = useInferredDescription\n    ? { description: inferredDescription, source: inferredSource }\n    : getUserUpdatedNameAndSource(name, attributes);\n\n  return {\n    op: opParts.join('.'),\n    description,\n    source,\n    data,\n  };\n}\n\nfunction getGraphqlOperationNamesFromAttribute(attr) {\n  if (Array.isArray(attr)) {\n    const sorted = attr.slice().sort();\n\n    // Up to 5 items, we just add all of them\n    if (sorted.length <= 5) {\n      return sorted.join(', ');\n    } else {\n      // Else, we add the first 5 and the diff of other operations\n      return `${sorted.slice(0, 5).join(', ')}, +${sorted.length - 5}`;\n    }\n  }\n\n  return `${attr}`;\n}\n\n/** Exported for tests only */\nfunction getSanitizedUrl(\n  attributes,\n  kind,\n)\n\n {\n  // This is the relative path of the URL, e.g. /sub\n  // eslint-disable-next-line deprecation/deprecation\n  const httpTarget = attributes[SEMATTRS_HTTP_TARGET];\n  // This is the full URL, including host & query params etc., e.g. https://example.com/sub?foo=bar\n  // eslint-disable-next-line deprecation/deprecation\n  const httpUrl = attributes[SEMATTRS_HTTP_URL] || attributes[ATTR_URL_FULL];\n  // This is the normalized route name - may not always be available!\n  const httpRoute = attributes[ATTR_HTTP_ROUTE];\n\n  const parsedUrl = typeof httpUrl === 'string' ? parseUrl(httpUrl) : undefined;\n  const url = parsedUrl ? getSanitizedUrlString(parsedUrl) : undefined;\n  const query = parsedUrl?.search || undefined;\n  const fragment = parsedUrl?.hash || undefined;\n\n  if (typeof httpRoute === 'string') {\n    return { urlPath: httpRoute, url, query, fragment, hasRoute: true };\n  }\n\n  if (kind === SpanKind.SERVER && typeof httpTarget === 'string') {\n    return { urlPath: stripUrlQueryAndFragment(httpTarget), url, query, fragment, hasRoute: false };\n  }\n\n  if (parsedUrl) {\n    return { urlPath: url, url, query, fragment, hasRoute: false };\n  }\n\n  // fall back to target even for client spans, if no URL is present\n  if (typeof httpTarget === 'string') {\n    return { urlPath: stripUrlQueryAndFragment(httpTarget), url, query, fragment, hasRoute: false };\n  }\n\n  return { urlPath: undefined, url, query, fragment, hasRoute: false };\n}\n\n/**\n * Because Otel instrumentation sometimes mutates span names via `span.updateName`, the only way\n * to ensure that a user-set span name is preserved is to store it as a tmp attribute on the span.\n * We delete this attribute once we're done with it when preparing the event envelope.\n *\n * This temp attribute always takes precedence over the original name.\n *\n * We also need to take care of setting the correct source. Users can always update the source\n * after updating the name, so we need to respect that.\n *\n * @internal exported only for testing\n */\nfunction getUserUpdatedNameAndSource(\n  originalName,\n  attributes,\n  fallbackSource = 'custom',\n)\n\n {\n  const source = (attributes[SEMANTIC_ATTRIBUTE_SENTRY_SOURCE] ) || fallbackSource;\n  const description = attributes[SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME];\n\n  if (description && typeof description === 'string') {\n    return {\n      description,\n      source,\n    };\n  }\n\n  return { description: originalName, source };\n}\n\n/**\n * Setup a DSC handler on the passed client,\n * ensuring that the transaction name is inferred from the span correctly.\n */\nfunction enhanceDscWithOpenTelemetryRootSpanName(client) {\n  client.on('createDsc', (dsc, rootSpan) => {\n    if (!rootSpan) {\n      return;\n    }\n\n    // We want to overwrite the transaction on the DSC that is created by default in core\n    // The reason for this is that we want to infer the span name, not use the initial one\n    // Otherwise, we'll get names like \"GET\" instead of e.g. \"GET /foo\"\n    // `parseSpanDescription` takes the attributes of the span into account for the name\n    // This mutates the passed-in DSC\n\n    const jsonSpan = spanToJSON(rootSpan);\n    const attributes = jsonSpan.data;\n    const source = attributes[SEMANTIC_ATTRIBUTE_SENTRY_SOURCE];\n\n    const { description } = spanHasName(rootSpan) ? parseSpanDescription(rootSpan) : { description: undefined };\n    if (source !== 'url' && description) {\n      dsc.transaction = description;\n    }\n\n    // Also ensure sampling decision is correctly inferred\n    // In core, we use `spanIsSampled`, which just looks at the trace flags\n    // but in OTEL, we use a slightly more complex logic to be able to differntiate between unsampled and deferred sampling\n    if (hasSpansEnabled()) {\n      const sampled = getSamplingDecision(rootSpan.spanContext());\n      dsc.sampled = sampled == undefined ? undefined : String(sampled);\n    }\n  });\n}\n\n/**\n * Returns the currently active span.\n */\nfunction getActiveSpan() {\n  return trace.getActiveSpan();\n}\n\n/**\n * This serves as a build time flag that will be true by default, but false in non-debug builds or if users replace `__SENTRY_DEBUG__` in their generated code.\n *\n * ATTENTION: This constant must never cross package boundaries (i.e. be exported) to guarantee that it can be used for tree shaking.\n */\nconst DEBUG_BUILD = (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__);\n\n/**\n * Generate a TraceState for the given data.\n */\nfunction makeTraceState({\n  dsc,\n  sampled,\n}\n\n) {\n  // We store the DSC as OTEL trace state on the span context\n  const dscString = dsc ? dynamicSamplingContextToSentryBaggageHeader(dsc) : undefined;\n\n  const traceStateBase = new TraceState();\n\n  const traceStateWithDsc = dscString ? traceStateBase.set(SENTRY_TRACE_STATE_DSC, dscString) : traceStateBase;\n\n  // We also specifically want to store if this is sampled to be not recording,\n  // or unsampled (=could be either sampled or not)\n  return sampled === false ? traceStateWithDsc.set(SENTRY_TRACE_STATE_SAMPLED_NOT_RECORDING, '1') : traceStateWithDsc;\n}\n\nconst setupElements = new Set();\n\n/** Get all the OpenTelemetry elements that have been set up. */\nfunction openTelemetrySetupCheck() {\n  return Array.from(setupElements);\n}\n\n/** Mark an OpenTelemetry element as setup. */\nfunction setIsSetup(element) {\n  setupElements.add(element);\n}\n\n/**\n * Injects and extracts `sentry-trace` and `baggage` headers from carriers.\n */\nclass SentryPropagator extends W3CBaggagePropagator {\n  /** A map of URLs that have already been checked for if they match tracePropagationTargets. */\n\n   constructor() {\n    super();\n    setIsSetup('SentryPropagator');\n\n    // We're caching results so we don't have to recompute regexp every time we create a request.\n    this._urlMatchesTargetsMap = new LRUMap(100);\n  }\n\n  /**\n   * @inheritDoc\n   */\n   inject(context, carrier, setter) {\n    if (isTracingSuppressed(context)) {\n      DEBUG_BUILD && logger.log('[Tracing] Not injecting trace data for url because tracing is suppressed.');\n      return;\n    }\n\n    const activeSpan = trace.getSpan(context);\n    const url = activeSpan && getCurrentURL(activeSpan);\n\n    const tracePropagationTargets = getClient()?.getOptions()?.tracePropagationTargets;\n    if (!shouldPropagateTraceForUrl(url, tracePropagationTargets, this._urlMatchesTargetsMap)) {\n      DEBUG_BUILD &&\n        logger.log(\n          '[Tracing] Not injecting trace data for url because it does not match tracePropagationTargets:',\n          url,\n        );\n      return;\n    }\n\n    const existingBaggageHeader = getExistingBaggage(carrier);\n    let baggage = propagation.getBaggage(context) || propagation.createBaggage({});\n\n    const { dynamicSamplingContext, traceId, spanId, sampled } = getInjectionData(context);\n\n    if (existingBaggageHeader) {\n      const baggageEntries = parseBaggageHeader(existingBaggageHeader);\n\n      if (baggageEntries) {\n        Object.entries(baggageEntries).forEach(([key, value]) => {\n          baggage = baggage.setEntry(key, { value });\n        });\n      }\n    }\n\n    if (dynamicSamplingContext) {\n      baggage = Object.entries(dynamicSamplingContext).reduce((b, [dscKey, dscValue]) => {\n        if (dscValue) {\n          return b.setEntry(`${SENTRY_BAGGAGE_KEY_PREFIX}${dscKey}`, { value: dscValue });\n        }\n        return b;\n      }, baggage);\n    }\n\n    // We also want to avoid setting the default OTEL trace ID, if we get that for whatever reason\n    if (traceId && traceId !== INVALID_TRACEID) {\n      setter.set(carrier, SENTRY_TRACE_HEADER, generateSentryTraceHeader(traceId, spanId, sampled));\n    }\n\n    super.inject(propagation.setBaggage(context, baggage), carrier, setter);\n  }\n\n  /**\n   * @inheritDoc\n   */\n   extract(context, carrier, getter) {\n    const maybeSentryTraceHeader = getter.get(carrier, SENTRY_TRACE_HEADER);\n    const baggage = getter.get(carrier, SENTRY_BAGGAGE_HEADER);\n\n    const sentryTrace = maybeSentryTraceHeader\n      ? Array.isArray(maybeSentryTraceHeader)\n        ? maybeSentryTraceHeader[0]\n        : maybeSentryTraceHeader\n      : undefined;\n\n    // Add remote parent span context\n    // If there is no incoming trace, this will return the context as-is\n    return ensureScopesOnContext(getContextWithRemoteActiveSpan(context, { sentryTrace, baggage }));\n  }\n\n  /**\n   * @inheritDoc\n   */\n   fields() {\n    return [SENTRY_TRACE_HEADER, SENTRY_BAGGAGE_HEADER];\n  }\n}\n\nconst NOT_PROPAGATED_MESSAGE =\n  '[Tracing] Not injecting trace data for url because it does not match tracePropagationTargets:';\n\n/**\n * Check if a given URL should be propagated to or not.\n * If no url is defined, or no trace propagation targets are defined, this will always return `true`.\n * You can also optionally provide a decision map, to cache decisions and avoid repeated regex lookups.\n */\nfunction shouldPropagateTraceForUrl(\n  url,\n  tracePropagationTargets,\n  decisionMap,\n) {\n  if (typeof url !== 'string' || !tracePropagationTargets) {\n    return true;\n  }\n\n  const cachedDecision = decisionMap?.get(url);\n  if (cachedDecision !== undefined) {\n    DEBUG_BUILD && !cachedDecision && logger.log(NOT_PROPAGATED_MESSAGE, url);\n    return cachedDecision;\n  }\n\n  const decision = stringMatchesSomePattern(url, tracePropagationTargets);\n  decisionMap?.set(url, decision);\n\n  DEBUG_BUILD && !decision && logger.log(NOT_PROPAGATED_MESSAGE, url);\n  return decision;\n}\n\n/**\n * Get propagation injection data for the given context.\n */\nfunction getInjectionData(context)\n\n {\n  const span = trace.getSpan(context);\n\n  // If we have a remote span, the spanId should be considered as the parentSpanId, not spanId itself\n  // Instead, we use a virtual (generated) spanId for propagation\n  if (span?.spanContext().isRemote) {\n    const spanContext = span.spanContext();\n    const dynamicSamplingContext = getDynamicSamplingContextFromSpan(span);\n\n    return {\n      dynamicSamplingContext,\n      traceId: spanContext.traceId,\n      spanId: undefined,\n      sampled: getSamplingDecision(spanContext), // TODO: Do we need to change something here?\n    };\n  }\n\n  // If we have a local span, we just use this\n  if (span) {\n    const spanContext = span.spanContext();\n    const dynamicSamplingContext = getDynamicSamplingContextFromSpan(span);\n\n    return {\n      dynamicSamplingContext,\n      traceId: spanContext.traceId,\n      spanId: spanContext.spanId,\n      sampled: getSamplingDecision(spanContext), // TODO: Do we need to change something here?\n    };\n  }\n\n  // Else we try to use the propagation context from the scope\n  // The only scenario where this should happen is when we neither have a span, nor an incoming trace\n  const scope = getScopesFromContext(context)?.scope || getCurrentScope();\n  const client = getClient();\n\n  const propagationContext = scope.getPropagationContext();\n  const dynamicSamplingContext = client ? getDynamicSamplingContextFromScope(client, scope) : undefined;\n  return {\n    dynamicSamplingContext,\n    traceId: propagationContext.traceId,\n    spanId: propagationContext.propagationSpanId,\n    sampled: propagationContext.sampled,\n  };\n}\n\nfunction getContextWithRemoteActiveSpan(\n  ctx,\n  { sentryTrace, baggage },\n) {\n  const propagationContext = propagationContextFromHeaders(sentryTrace, baggage);\n\n  const { traceId, parentSpanId, sampled, dsc } = propagationContext;\n\n  // We only want to set the virtual span if we are continuing a concrete trace\n  // Otherwise, we ignore the incoming trace here, e.g. if we have no trace headers\n  if (!parentSpanId) {\n    return ctx;\n  }\n\n  const spanContext = generateRemoteSpanContext({\n    traceId,\n    spanId: parentSpanId,\n    sampled,\n    dsc,\n  });\n\n  return trace.setSpanContext(ctx, spanContext);\n}\n\n/**\n * Takes trace strings and propagates them as a remote active span.\n * This should be used in addition to `continueTrace` in OTEL-powered environments.\n */\nfunction continueTraceAsRemoteSpan(\n  ctx,\n  options,\n  callback,\n) {\n  const ctxWithSpanContext = ensureScopesOnContext(getContextWithRemoteActiveSpan(ctx, options));\n\n  return context.with(ctxWithSpanContext, callback);\n}\n\nfunction ensureScopesOnContext(ctx) {\n  // If there are no scopes yet on the context, ensure we have them\n  const scopes = getScopesFromContext(ctx);\n  const newScopes = {\n    // If we have no scope here, this is most likely either the root context or a context manually derived from it\n    // In this case, we want to fork the current scope, to ensure we do not pollute the root scope\n    scope: scopes ? scopes.scope : getCurrentScope().clone(),\n    isolationScope: scopes ? scopes.isolationScope : getIsolationScope(),\n  };\n\n  return setScopesOnContext(ctx, newScopes);\n}\n\n/** Try to get the existing baggage header so we can merge this in. */\nfunction getExistingBaggage(carrier) {\n  try {\n    const baggage = (carrier )[SENTRY_BAGGAGE_HEADER];\n    return Array.isArray(baggage) ? baggage.join(',') : baggage;\n  } catch {\n    return undefined;\n  }\n}\n\n/**\n * It is pretty tricky to get access to the outgoing request URL of a request in the propagator.\n * As we only have access to the context of the span to be sent and the carrier (=headers),\n * but the span may be unsampled and thus have no attributes.\n *\n * So we use the following logic:\n * 1. If we have an active span, we check if it has a URL attribute.\n * 2. Else, if the active span has no URL attribute (e.g. it is unsampled), we check a special trace state (which we set in our sampler).\n */\nfunction getCurrentURL(span) {\n  const spanData = spanToJSON(span).data;\n  // `ATTR_URL_FULL` is the new attribute, but we still support the old one, `SEMATTRS_HTTP_URL`, for now.\n  // eslint-disable-next-line deprecation/deprecation\n  const urlAttribute = spanData[SEMATTRS_HTTP_URL] || spanData[ATTR_URL_FULL];\n  if (typeof urlAttribute === 'string') {\n    return urlAttribute;\n  }\n\n  // Also look at the traceState, which we may set in the sampler even for unsampled spans\n  const urlTraceState = span.spanContext().traceState?.get(SENTRY_TRACE_STATE_URL);\n  if (urlTraceState) {\n    return urlTraceState;\n  }\n\n  return undefined;\n}\n\nfunction generateRemoteSpanContext({\n  spanId,\n  traceId,\n  sampled,\n  dsc,\n}\n\n) {\n  // We store the DSC as OTEL trace state on the span context\n  const traceState = makeTraceState({\n    dsc,\n    sampled,\n  });\n\n  const spanContext = {\n    traceId,\n    spanId,\n    isRemote: true,\n    traceFlags: sampled ? TraceFlags.SAMPLED : TraceFlags.NONE,\n    traceState,\n  };\n\n  return spanContext;\n}\n\n/**\n * Wraps a function with a transaction/span and finishes the span after the function is done.\n * The created span is the active span and will be used as parent by other spans created inside the function\n * and can be accessed via `Sentry.getActiveSpan()`, as long as the function is executed while the scope is active.\n *\n * If you want to create a span that is not set as active, use {@link startInactiveSpan}.\n *\n * You'll always get a span passed to the callback,\n * it may just be a non-recording span if the span is not sampled or if tracing is disabled.\n */\nfunction startSpan(options, callback) {\n  const tracer = getTracer();\n\n  const { name, parentSpan: customParentSpan } = options;\n\n  // If `options.parentSpan` is defined, we want to wrap the callback in `withActiveSpan`\n  const wrapper = getActiveSpanWrapper(customParentSpan);\n\n  return wrapper(() => {\n    const activeCtx = getContext(options.scope, options.forceTransaction);\n    const shouldSkipSpan = options.onlyIfParent && !trace.getSpan(activeCtx);\n    const ctx = shouldSkipSpan ? suppressTracing$1(activeCtx) : activeCtx;\n\n    const spanOptions = getSpanOptions(options);\n\n    return tracer.startActiveSpan(name, spanOptions, ctx, span => {\n      return handleCallbackErrors(\n        () => callback(span),\n        () => {\n          // Only set the span status to ERROR when there wasn't any status set before, in order to avoid stomping useful span statuses\n          if (spanToJSON(span).status === undefined) {\n            span.setStatus({ code: SpanStatusCode.ERROR });\n          }\n        },\n        () => span.end(),\n      );\n    });\n  });\n}\n\n/**\n * Similar to `Sentry.startSpan`. Wraps a function with a span, but does not finish the span\n * after the function is done automatically. You'll have to call `span.end()` manually.\n *\n * The created span is the active span and will be used as parent by other spans created inside the function\n * and can be accessed via `Sentry.getActiveSpan()`, as long as the function is executed while the scope is active.\n *\n * You'll always get a span passed to the callback,\n * it may just be a non-recording span if the span is not sampled or if tracing is disabled.\n */\nfunction startSpanManual(\n  options,\n  callback,\n) {\n  const tracer = getTracer();\n\n  const { name, parentSpan: customParentSpan } = options;\n\n  // If `options.parentSpan` is defined, we want to wrap the callback in `withActiveSpan`\n  const wrapper = getActiveSpanWrapper(customParentSpan);\n\n  return wrapper(() => {\n    const activeCtx = getContext(options.scope, options.forceTransaction);\n    const shouldSkipSpan = options.onlyIfParent && !trace.getSpan(activeCtx);\n    const ctx = shouldSkipSpan ? suppressTracing$1(activeCtx) : activeCtx;\n\n    const spanOptions = getSpanOptions(options);\n\n    return tracer.startActiveSpan(name, spanOptions, ctx, span => {\n      return handleCallbackErrors(\n        () => callback(span, () => span.end()),\n        () => {\n          // Only set the span status to ERROR when there wasn't any status set before, in order to avoid stomping useful span statuses\n          if (spanToJSON(span).status === undefined) {\n            span.setStatus({ code: SpanStatusCode.ERROR });\n          }\n        },\n      );\n    });\n  });\n}\n\n/**\n * Creates a span. This span is not set as active, so will not get automatic instrumentation spans\n * as children or be able to be accessed via `Sentry.getActiveSpan()`.\n *\n * If you want to create a span that is set as active, use {@link startSpan}.\n *\n * This function will always return a span,\n * it may just be a non-recording span if the span is not sampled or if tracing is disabled.\n */\nfunction startInactiveSpan(options) {\n  const tracer = getTracer();\n\n  const { name, parentSpan: customParentSpan } = options;\n\n  // If `options.parentSpan` is defined, we want to wrap the callback in `withActiveSpan`\n  const wrapper = getActiveSpanWrapper(customParentSpan);\n\n  return wrapper(() => {\n    const activeCtx = getContext(options.scope, options.forceTransaction);\n    const shouldSkipSpan = options.onlyIfParent && !trace.getSpan(activeCtx);\n    const ctx = shouldSkipSpan ? suppressTracing$1(activeCtx) : activeCtx;\n\n    const spanOptions = getSpanOptions(options);\n\n    const span = tracer.startSpan(name, spanOptions, ctx);\n\n    return span;\n  });\n}\n\n/**\n * Forks the current scope and sets the provided span as active span in the context of the provided callback. Can be\n * passed `null` to start an entirely new span tree.\n *\n * @param span Spans started in the context of the provided callback will be children of this span. If `null` is passed,\n * spans started within the callback will be root spans.\n * @param callback Execution context in which the provided span will be active. Is passed the newly forked scope.\n * @returns the value returned from the provided callback function.\n */\nfunction withActiveSpan(span, callback) {\n  const newContextWithActiveSpan = span ? trace.setSpan(context.active(), span) : trace.deleteSpan(context.active());\n  return context.with(newContextWithActiveSpan, () => callback(getCurrentScope()));\n}\n\nfunction getTracer() {\n  const client = getClient();\n  return client?.tracer || trace.getTracer('@sentry/opentelemetry', SDK_VERSION);\n}\n\nfunction getSpanOptions(options) {\n  const { startTime, attributes, kind, op, links } = options;\n\n  // OTEL expects timestamps in ms, not seconds\n  const fixedStartTime = typeof startTime === 'number' ? ensureTimestampInMilliseconds(startTime) : startTime;\n\n  return {\n    attributes: op\n      ? {\n          [SEMANTIC_ATTRIBUTE_SENTRY_OP]: op,\n          ...attributes,\n        }\n      : attributes,\n    kind,\n    links,\n    startTime: fixedStartTime,\n  };\n}\n\nfunction ensureTimestampInMilliseconds(timestamp) {\n  const isMs = timestamp < 9999999999;\n  return isMs ? timestamp * 1000 : timestamp;\n}\n\nfunction getContext(scope, forceTransaction) {\n  const ctx = getContextForScope(scope);\n  const parentSpan = trace.getSpan(ctx);\n\n  // In the case that we have no parent span, we start a new trace\n  // Note that if we continue a trace, we'll always have a remote parent span here anyhow\n  if (!parentSpan) {\n    return ctx;\n  }\n\n  // If we don't want to force a transaction, and we have a parent span, all good, we just return as-is!\n  if (!forceTransaction) {\n    return ctx;\n  }\n\n  // Else, if we do have a parent span but want to force a transaction, we have to simulate a \"root\" context\n\n  // Else, we need to do two things:\n  // 1. Unset the parent span from the context, so we'll create a new root span\n  // 2. Ensure the propagation context is correct, so we'll continue from the parent span\n  const ctxWithoutSpan = trace.deleteSpan(ctx);\n\n  const { spanId, traceId } = parentSpan.spanContext();\n  const sampled = getSamplingDecision(parentSpan.spanContext());\n\n  // In this case, when we are forcing a transaction, we want to treat this like continuing an incoming trace\n  // so we set the traceState according to the root span\n  const rootSpan = getRootSpan(parentSpan);\n  const dsc = getDynamicSamplingContextFromSpan(rootSpan);\n\n  const traceState = makeTraceState({\n    dsc,\n    sampled,\n  });\n\n  const spanOptions = {\n    traceId,\n    spanId,\n    isRemote: true,\n    traceFlags: sampled ? TraceFlags.SAMPLED : TraceFlags.NONE,\n    traceState,\n  };\n\n  const ctxWithSpanContext = trace.setSpanContext(ctxWithoutSpan, spanOptions);\n\n  return ctxWithSpanContext;\n}\n\nfunction getContextForScope(scope) {\n  if (scope) {\n    const ctx = getContextFromScope(scope);\n    if (ctx) {\n      return ctx;\n    }\n  }\n\n  return context.active();\n}\n\n/**\n * Continue a trace from `sentry-trace` and `baggage` values.\n * These values can be obtained from incoming request headers, or in the browser from `<meta name=\"sentry-trace\">`\n * and `<meta name=\"baggage\">` HTML tags.\n *\n * Spans started with `startSpan`, `startSpanManual` and `startInactiveSpan`, within the callback will automatically\n * be attached to the incoming trace.\n *\n * This is a custom version of `continueTrace` that is used in OTEL-powered environments.\n * It propagates the trace as a remote span, in addition to setting it on the propagation context.\n */\nfunction continueTrace(options, callback) {\n  return continueTraceAsRemoteSpan(context.active(), options, callback);\n}\n\n/**\n * Get the trace context for a given scope.\n * We have a custom implemention here because we need an OTEL-specific way to get the span from a scope.\n */\nfunction getTraceContextForScope(\n  client,\n  scope,\n) {\n  const ctx = getContextFromScope(scope);\n  const span = ctx && trace.getSpan(ctx);\n\n  const traceContext = span ? spanToTraceContext(span) : getTraceContextFromScope(scope);\n\n  const dynamicSamplingContext = span\n    ? getDynamicSamplingContextFromSpan(span)\n    : getDynamicSamplingContextFromScope(client, scope);\n  return [dynamicSamplingContext, traceContext];\n}\n\nfunction getActiveSpanWrapper(parentSpan) {\n  return parentSpan !== undefined\n    ? (callback) => {\n        return withActiveSpan(parentSpan, callback);\n      }\n    : (callback) => callback();\n}\n\n/** Suppress tracing in the given callback, ensuring no spans are generated inside of it. */\nfunction suppressTracing(callback) {\n  const ctx = suppressTracing$1(context.active());\n  return context.with(ctx, callback);\n}\n\n/** Ensure the `trace` context is set on all events. */\nfunction setupEventContextTrace(client) {\n  client.on('preprocessEvent', event => {\n    const span = getActiveSpan();\n    // For transaction events, this is handled separately\n    // Because the active span may not be the span that is actually the transaction event\n    if (!span || event.type === 'transaction') {\n      return;\n    }\n\n    // If event has already set `trace` context, use that one.\n    event.contexts = {\n      trace: spanToTraceContext(span),\n      ...event.contexts,\n    };\n\n    const rootSpan = getRootSpan(span);\n\n    event.sdkProcessingMetadata = {\n      dynamicSamplingContext: getDynamicSamplingContextFromSpan(rootSpan),\n      ...event.sdkProcessingMetadata,\n    };\n\n    return event;\n  });\n}\n\n/**\n * Otel-specific implementation of `getTraceData`.\n * @see `@sentry/core` version of `getTraceData` for more information\n */\nfunction getTraceData({ span } = {}) {\n  let ctx = api.context.active();\n\n  if (span) {\n    const { scope } = getCapturedScopesOnSpan(span);\n    // fall back to current context if for whatever reason we can't find the one of the span\n    ctx = (scope && getContextFromScope(scope)) || api.trace.setSpan(api.context.active(), span);\n  }\n\n  const { traceId, spanId, sampled, dynamicSamplingContext } = getInjectionData(ctx);\n\n  return {\n    'sentry-trace': generateSentryTraceHeader(traceId, spanId, sampled),\n    baggage: dynamicSamplingContextToSentryBaggageHeader(dynamicSamplingContext),\n  };\n}\n\n/**\n * Sets the async context strategy to use follow the OTEL context under the hood.\n * We handle forking a hub inside of our custom OTEL Context Manager (./otelContextManager.ts)\n */\nfunction setOpenTelemetryContextAsyncContextStrategy() {\n  function getScopes() {\n    const ctx = api.context.active();\n    const scopes = getScopesFromContext(ctx);\n\n    if (scopes) {\n      return scopes;\n    }\n\n    // fallback behavior:\n    // if, for whatever reason, we can't find scopes on the context here, we have to fix this somehow\n    return {\n      scope: getDefaultCurrentScope(),\n      isolationScope: getDefaultIsolationScope(),\n    };\n  }\n\n  function withScope(callback) {\n    const ctx = api.context.active();\n\n    // We depend on the otelContextManager to handle the context/hub\n    // We set the `SENTRY_FORK_ISOLATION_SCOPE_CONTEXT_KEY` context value, which is picked up by\n    // the OTEL context manager, which uses the presence of this key to determine if it should\n    // fork the isolation scope, or not\n    // as by default, we don't want to fork this, unless triggered explicitly by `withScope`\n    return api.context.with(ctx, () => {\n      return callback(getCurrentScope());\n    });\n  }\n\n  function withSetScope(scope, callback) {\n    const ctx = getContextFromScope(scope) || api.context.active();\n\n    // We depend on the otelContextManager to handle the context/hub\n    // We set the `SENTRY_FORK_SET_SCOPE_CONTEXT_KEY` context value, which is picked up by\n    // the OTEL context manager, which picks up this scope as the current scope\n    return api.context.with(ctx.setValue(SENTRY_FORK_SET_SCOPE_CONTEXT_KEY, scope), () => {\n      return callback(scope);\n    });\n  }\n\n  function withIsolationScope(callback) {\n    const ctx = api.context.active();\n\n    // We depend on the otelContextManager to handle the context/hub\n    // We set the `SENTRY_FORK_ISOLATION_SCOPE_CONTEXT_KEY` context value, which is picked up by\n    // the OTEL context manager, which uses the presence of this key to determine if it should\n    // fork the isolation scope, or not\n    return api.context.with(ctx.setValue(SENTRY_FORK_ISOLATION_SCOPE_CONTEXT_KEY, true), () => {\n      return callback(getIsolationScope());\n    });\n  }\n\n  function withSetIsolationScope(isolationScope, callback) {\n    const ctx = api.context.active();\n\n    // We depend on the otelContextManager to handle the context/hub\n    // We set the `SENTRY_FORK_ISOLATION_SCOPE_CONTEXT_KEY` context value, which is picked up by\n    // the OTEL context manager, which uses the presence of this key to determine if it should\n    // fork the isolation scope, or not\n    return api.context.with(ctx.setValue(SENTRY_FORK_SET_ISOLATION_SCOPE_CONTEXT_KEY, isolationScope), () => {\n      return callback(getIsolationScope());\n    });\n  }\n\n  function getCurrentScope() {\n    return getScopes().scope;\n  }\n\n  function getIsolationScope() {\n    return getScopes().isolationScope;\n  }\n\n  setAsyncContextStrategy({\n    withScope,\n    withSetScope,\n    withSetIsolationScope,\n    withIsolationScope,\n    getCurrentScope,\n    getIsolationScope,\n    startSpan,\n    startSpanManual,\n    startInactiveSpan,\n    getActiveSpan,\n    suppressTracing,\n    getTraceData,\n    continueTrace,\n    // The types here don't fully align, because our own `Span` type is narrower\n    // than the OTEL one - but this is OK for here, as we now we'll only have OTEL spans passed around\n    withActiveSpan: withActiveSpan ,\n  });\n}\n\n/**\n * Wrap an OpenTelemetry ContextManager in a way that ensures the context is kept in sync with the Sentry Scope.\n *\n * Usage:\n * import { AsyncLocalStorageContextManager } from '@opentelemetry/context-async-hooks';\n * const SentryContextManager = wrapContextManagerClass(AsyncLocalStorageContextManager);\n * const contextManager = new SentryContextManager();\n */\nfunction wrapContextManagerClass(\n  ContextManagerClass,\n) {\n  /**\n   * This is a custom ContextManager for OpenTelemetry, which extends the default AsyncLocalStorageContextManager.\n   * It ensures that we create new scopes per context, so that the OTEL Context & the Sentry Scope are always in sync.\n   *\n   * Note that we currently only support AsyncHooks with this,\n   * but since this should work for Node 14+ anyhow that should be good enough.\n   */\n\n  // @ts-expect-error TS does not like this, but we know this is fine\n  class SentryContextManager extends ContextManagerClass {\n     constructor(...args) {\n      super(...args);\n      setIsSetup('SentryContextManager');\n    }\n    /**\n     * Overwrite with() of the original AsyncLocalStorageContextManager\n     * to ensure we also create new scopes per context.\n     */\n     with(\n      context,\n      fn,\n      thisArg,\n      ...args\n    ) {\n      const currentScopes = getScopesFromContext(context);\n      const currentScope = currentScopes?.scope || getCurrentScope();\n      const currentIsolationScope = currentScopes?.isolationScope || getIsolationScope();\n\n      const shouldForkIsolationScope = context.getValue(SENTRY_FORK_ISOLATION_SCOPE_CONTEXT_KEY) === true;\n      const scope = context.getValue(SENTRY_FORK_SET_SCOPE_CONTEXT_KEY) ;\n      const isolationScope = context.getValue(SENTRY_FORK_SET_ISOLATION_SCOPE_CONTEXT_KEY) ;\n\n      const newCurrentScope = scope || currentScope.clone();\n      const newIsolationScope =\n        isolationScope || (shouldForkIsolationScope ? currentIsolationScope.clone() : currentIsolationScope);\n      const scopes = { scope: newCurrentScope, isolationScope: newIsolationScope };\n\n      const ctx1 = setScopesOnContext(context, scopes);\n\n      // Remove the unneeded values again\n      const ctx2 = ctx1\n        .deleteValue(SENTRY_FORK_ISOLATION_SCOPE_CONTEXT_KEY)\n        .deleteValue(SENTRY_FORK_SET_SCOPE_CONTEXT_KEY)\n        .deleteValue(SENTRY_FORK_SET_ISOLATION_SCOPE_CONTEXT_KEY);\n\n      setContextOnScope(newCurrentScope, ctx2);\n\n      return super.with(ctx2, fn, thisArg, ...args);\n    }\n  }\n\n  return SentryContextManager ;\n}\n\n/**\n * This function runs through a list of OTEL Spans, and wraps them in an `SpanNode`\n * where each node holds a reference to their parent node.\n */\nfunction groupSpansWithParents(spans) {\n  const nodeMap = new Map();\n\n  for (const span of spans) {\n    createOrUpdateSpanNodeAndRefs(nodeMap, span);\n  }\n\n  return Array.from(nodeMap, function ([_id, spanNode]) {\n    return spanNode;\n  });\n}\n\n/**\n * This returns the _local_ parent ID - `parentId` on the span may point to a remote span.\n */\nfunction getLocalParentId(span) {\n  const parentIsRemote = span.attributes[SEMANTIC_ATTRIBUTE_SENTRY_PARENT_IS_REMOTE] === true;\n  // If the parentId is the trace parent ID, we pretend it's undefined\n  // As this means the parent exists somewhere else\n  return !parentIsRemote ? getParentSpanId(span) : undefined;\n}\n\nfunction createOrUpdateSpanNodeAndRefs(nodeMap, span) {\n  const id = span.spanContext().spanId;\n  const parentId = getLocalParentId(span);\n\n  if (!parentId) {\n    createOrUpdateNode(nodeMap, { id, span, children: [] });\n    return;\n  }\n\n  // Else make sure to create parent node as well\n  // Note that the parent may not know it's parent _yet_, this may be updated in a later pass\n  const parentNode = createOrGetParentNode(nodeMap, parentId);\n  const node = createOrUpdateNode(nodeMap, { id, span, parentNode, children: [] });\n  parentNode.children.push(node);\n}\n\nfunction createOrGetParentNode(nodeMap, id) {\n  const existing = nodeMap.get(id);\n\n  if (existing) {\n    return existing;\n  }\n\n  return createOrUpdateNode(nodeMap, { id, children: [] });\n}\n\nfunction createOrUpdateNode(nodeMap, spanNode) {\n  const existing = nodeMap.get(spanNode.id);\n\n  // If span is already set, nothing to do here\n  if (existing?.span) {\n    return existing;\n  }\n\n  // If it exists but span is not set yet, we update it\n  if (existing && !existing.span) {\n    existing.span = spanNode.span;\n    existing.parentNode = spanNode.parentNode;\n    return existing;\n  }\n\n  // Else, we create a new one...\n  nodeMap.set(spanNode.id, spanNode);\n  return spanNode;\n}\n\n// canonicalCodesGrpcMap maps some GRPC codes to Sentry's span statuses. See description in grpc documentation.\nconst canonicalGrpcErrorCodesMap = {\n  '1': 'cancelled',\n  '2': 'unknown_error',\n  '3': 'invalid_argument',\n  '4': 'deadline_exceeded',\n  '5': 'not_found',\n  '6': 'already_exists',\n  '7': 'permission_denied',\n  '8': 'resource_exhausted',\n  '9': 'failed_precondition',\n  '10': 'aborted',\n  '11': 'out_of_range',\n  '12': 'unimplemented',\n  '13': 'internal_error',\n  '14': 'unavailable',\n  '15': 'data_loss',\n  '16': 'unauthenticated',\n} ;\n\nconst isStatusErrorMessageValid = (message) => {\n  return Object.values(canonicalGrpcErrorCodesMap).includes(message );\n};\n\n/**\n * Get a Sentry span status from an otel span.\n */\nfunction mapStatus(span) {\n  const attributes = spanHasAttributes(span) ? span.attributes : {};\n  const status = spanHasStatus(span) ? span.status : undefined;\n\n  if (status) {\n    // Since span status OK is not set by default, we give it priority: https://opentelemetry.io/docs/concepts/signals/traces/#span-status\n    if (status.code === SpanStatusCode.OK) {\n      return { code: SPAN_STATUS_OK };\n      // If the span is already marked as erroneous we return that exact status\n    } else if (status.code === SpanStatusCode.ERROR) {\n      if (typeof status.message === 'undefined') {\n        const inferredStatus = inferStatusFromAttributes(attributes);\n        if (inferredStatus) {\n          return inferredStatus;\n        }\n      }\n\n      if (status.message && isStatusErrorMessageValid(status.message)) {\n        return { code: SPAN_STATUS_ERROR, message: status.message };\n      } else {\n        return { code: SPAN_STATUS_ERROR, message: 'unknown_error' };\n      }\n    }\n  }\n\n  // If the span status is UNSET, we try to infer it from HTTP or GRPC status codes.\n  const inferredStatus = inferStatusFromAttributes(attributes);\n\n  if (inferredStatus) {\n    return inferredStatus;\n  }\n\n  // We default to setting the spans status to ok.\n  if (status?.code === SpanStatusCode.UNSET) {\n    return { code: SPAN_STATUS_OK };\n  } else {\n    return { code: SPAN_STATUS_ERROR, message: 'unknown_error' };\n  }\n}\n\nfunction inferStatusFromAttributes(attributes) {\n  // If the span status is UNSET, we try to infer it from HTTP or GRPC status codes.\n\n  // eslint-disable-next-line deprecation/deprecation\n  const httpCodeAttribute = attributes[ATTR_HTTP_RESPONSE_STATUS_CODE] || attributes[SEMATTRS_HTTP_STATUS_CODE];\n  // eslint-disable-next-line deprecation/deprecation\n  const grpcCodeAttribute = attributes[SEMATTRS_RPC_GRPC_STATUS_CODE];\n\n  const numberHttpCode =\n    typeof httpCodeAttribute === 'number'\n      ? httpCodeAttribute\n      : typeof httpCodeAttribute === 'string'\n        ? parseInt(httpCodeAttribute)\n        : undefined;\n\n  if (typeof numberHttpCode === 'number') {\n    return getSpanStatusFromHttpCode(numberHttpCode);\n  }\n\n  if (typeof grpcCodeAttribute === 'string') {\n    return { code: SPAN_STATUS_ERROR, message: canonicalGrpcErrorCodesMap[grpcCodeAttribute] || 'unknown_error' };\n  }\n\n  return undefined;\n}\n\nconst MAX_SPAN_COUNT = 1000;\nconst DEFAULT_TIMEOUT = 300; // 5 min\n\n/**\n * A Sentry-specific exporter that converts OpenTelemetry Spans to Sentry Spans & Transactions.\n */\nclass SentrySpanExporter {\n\n  /*\n   * A quick explanation on the buckets: We do bucketing of finished spans for efficiency. This span exporter is\n   * accumulating spans until a root span is encountered and then it flushes all the spans that are descendants of that\n   * root span. Because it is totally in the realm of possibilities that root spans are never finished, and we don't\n   * want to accumulate spans indefinitely in memory, we need to periodically evacuate spans. Naively we could simply\n   * store the spans in an array and each time a new span comes in we could iterate through the entire array and\n   * evacuate all spans that have an end-timestamp that is older than our limit. This could get quite expensive because\n   * we would have to iterate a potentially large number of spans every time we evacuate. We want to avoid these large\n   * bursts of computation.\n   *\n   * Instead we go for a bucketing approach and put spans into buckets, based on what second\n   * (modulo the time limit) the span was put into the exporter. With buckets, when we decide to evacuate, we can\n   * iterate through the bucket entries instead, which have an upper bound of items, making the evacuation much more\n   * efficient. Cleaning up also becomes much more efficient since it simply involves de-referencing a bucket within the\n   * bucket array, and letting garbage collection take care of the rest.\n   */\n\n  // Essentially a a set of span ids that are already sent. The values are expiration\n  // times in this cache so we don't hold onto them indefinitely.\n\n   constructor(options\n\n) {\n    this._finishedSpanBucketSize = options?.timeout || DEFAULT_TIMEOUT;\n    this._finishedSpanBuckets = new Array(this._finishedSpanBucketSize).fill(undefined);\n    this._lastCleanupTimestampInS = Math.floor(Date.now() / 1000);\n    this._spansToBucketEntry = new WeakMap();\n    this._sentSpans = new Map();\n  }\n\n  /**\n   * Check if a span with the given ID has already been sent using the `_sentSpans` as a cache.\n   * Purges \"expired\" spans from the cache upon checking.\n   * @param spanId The span id to check.\n   * @returns Whether the span is already sent in the past X seconds.\n   */\n   isSpanAlreadySent(spanId) {\n    const expirationTime = this._sentSpans.get(spanId);\n    if (expirationTime) {\n      if (Date.now() >= expirationTime) {\n        this._sentSpans.delete(spanId); // Remove expired span\n      } else {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /** Remove \"expired\" span id entries from the _sentSpans cache. */\n   flushSentSpanCache() {\n    const currentTimestamp = Date.now();\n    // Note, it is safe to delete items from the map as we go: https://stackoverflow.com/a/35943995/90297\n    for (const [spanId, expirationTime] of this._sentSpans.entries()) {\n      if (expirationTime <= currentTimestamp) {\n        this._sentSpans.delete(spanId);\n      }\n    }\n  }\n\n  /** Check if a node is a completed root node or a node whose parent has already been sent */\n   nodeIsCompletedRootNode(node) {\n    return !!node.span && (!node.parentNode || this.isSpanAlreadySent(node.parentNode.id));\n  }\n\n  /** Get all completed root nodes from a list of nodes */\n   getCompletedRootNodes(nodes) {\n    // TODO: We should be able to remove the explicit `node is SpanNodeCompleted` type guard\n    //       once we stop supporting TS < 5.5\n    return nodes.filter((node) => this.nodeIsCompletedRootNode(node));\n  }\n\n  /** Export a single span. */\n   export(span) {\n    const currentTimestampInS = Math.floor(Date.now() / 1000);\n\n    if (this._lastCleanupTimestampInS !== currentTimestampInS) {\n      let droppedSpanCount = 0;\n      this._finishedSpanBuckets.forEach((bucket, i) => {\n        if (bucket && bucket.timestampInS <= currentTimestampInS - this._finishedSpanBucketSize) {\n          droppedSpanCount += bucket.spans.size;\n          this._finishedSpanBuckets[i] = undefined;\n        }\n      });\n      if (droppedSpanCount > 0) {\n        DEBUG_BUILD &&\n          logger.log(\n            `SpanExporter dropped ${droppedSpanCount} spans because they were pending for more than ${this._finishedSpanBucketSize} seconds.`,\n          );\n      }\n      this._lastCleanupTimestampInS = currentTimestampInS;\n    }\n\n    const currentBucketIndex = currentTimestampInS % this._finishedSpanBucketSize;\n    const currentBucket = this._finishedSpanBuckets[currentBucketIndex] || {\n      timestampInS: currentTimestampInS,\n      spans: new Set(),\n    };\n    this._finishedSpanBuckets[currentBucketIndex] = currentBucket;\n    currentBucket.spans.add(span);\n    this._spansToBucketEntry.set(span, currentBucket);\n\n    // If the span doesn't have a local parent ID (it's a root span), we're gonna flush all the ended spans\n    const localParentId = getLocalParentId(span);\n    if (!localParentId || this.isSpanAlreadySent(localParentId)) {\n      this._clearTimeout();\n\n      // If we got a parent span, we try to send the span tree\n      // Wait a tick for this, to ensure we avoid race conditions\n      this._flushTimeout = setTimeout(() => {\n        this.flush();\n      }, 1);\n    }\n  }\n\n  /** Try to flush any pending spans immediately. */\n   flush() {\n    this._clearTimeout();\n\n    const finishedSpans = this._finishedSpanBuckets.flatMap(bucket =>\n      bucket ? Array.from(bucket.spans) : [],\n    );\n\n    this.flushSentSpanCache();\n    const sentSpans = this._maybeSend(finishedSpans);\n    for (const span of finishedSpans) {\n      this._sentSpans.set(span.spanContext().spanId, Date.now() + DEFAULT_TIMEOUT * 1000);\n    }\n\n    const sentSpanCount = sentSpans.size;\n    const remainingOpenSpanCount = finishedSpans.length - sentSpanCount;\n    DEBUG_BUILD &&\n      logger.log(\n        `SpanExporter exported ${sentSpanCount} spans, ${remainingOpenSpanCount} spans are waiting for their parent spans to finish`,\n      );\n\n    for (const span of sentSpans) {\n      const bucketEntry = this._spansToBucketEntry.get(span);\n      if (bucketEntry) {\n        bucketEntry.spans.delete(span);\n      }\n    }\n  }\n\n  /** Clear the exporter. */\n   clear() {\n    this._finishedSpanBuckets = this._finishedSpanBuckets.fill(undefined);\n    this._clearTimeout();\n  }\n\n  /** Clear the flush timeout. */\n   _clearTimeout() {\n    if (this._flushTimeout) {\n      clearTimeout(this._flushTimeout);\n      this._flushTimeout = undefined;\n    }\n  }\n\n  /**\n   * Send the given spans, but only if they are part of a finished transaction.\n   *\n   * Returns the sent spans.\n   * Spans remain unsent when their parent span is not yet finished.\n   * This will happen regularly, as child spans are generally finished before their parents.\n   * But it _could_ also happen because, for whatever reason, a parent span was lost.\n   * In this case, we'll eventually need to clean this up.\n   */\n   _maybeSend(spans) {\n    const grouped = groupSpansWithParents(spans);\n    const sentSpans = new Set();\n\n    const rootNodes = this.getCompletedRootNodes(grouped);\n\n    for (const root of rootNodes) {\n      const span = root.span;\n      sentSpans.add(span);\n      const transactionEvent = createTransactionForOtelSpan(span);\n\n      // We'll recursively add all the child spans to this array\n      const spans = transactionEvent.spans || [];\n\n      for (const child of root.children) {\n        createAndFinishSpanForOtelSpan(child, spans, sentSpans);\n      }\n\n      // spans.sort() mutates the array, but we do not use this anymore after this point\n      // so we can safely mutate it here\n      transactionEvent.spans =\n        spans.length > MAX_SPAN_COUNT\n          ? spans.sort((a, b) => a.start_timestamp - b.start_timestamp).slice(0, MAX_SPAN_COUNT)\n          : spans;\n\n      const measurements = timedEventsToMeasurements(span.events);\n      if (measurements) {\n        transactionEvent.measurements = measurements;\n      }\n\n      captureEvent(transactionEvent);\n    }\n\n    return sentSpans;\n  }\n}\n\nfunction parseSpan(span) {\n  const attributes = span.attributes;\n\n  const origin = attributes[SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN] ;\n  const op = attributes[SEMANTIC_ATTRIBUTE_SENTRY_OP] ;\n  const source = attributes[SEMANTIC_ATTRIBUTE_SENTRY_SOURCE] ;\n\n  return { origin, op, source };\n}\n\n/** Exported only for tests. */\nfunction createTransactionForOtelSpan(span) {\n  const { op, description, data, origin = 'manual', source } = getSpanData(span);\n  const capturedSpanScopes = getCapturedScopesOnSpan(span );\n\n  const sampleRate = span.attributes[SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE] ;\n\n  const attributes = {\n    [SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: source,\n    [SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE]: sampleRate,\n    [SEMANTIC_ATTRIBUTE_SENTRY_OP]: op,\n    [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: origin,\n    ...data,\n    ...removeSentryAttributes(span.attributes),\n  };\n\n  const { links } = span;\n  const { traceId: trace_id, spanId: span_id } = span.spanContext();\n\n  // If parentSpanIdFromTraceState is defined at all, we want it to take precedence\n  // In that case, an empty string should be interpreted as \"no parent span id\",\n  // even if `span.parentSpanId` is set\n  // this is the case when we are starting a new trace, where we have a virtual span based on the propagationContext\n  // We only want to continue the traceId in this case, but ignore the parent span\n  const parent_span_id = getParentSpanId(span);\n\n  const status = mapStatus(span);\n\n  const traceContext = {\n    parent_span_id,\n    span_id,\n    trace_id,\n    data: attributes,\n    origin,\n    op,\n    status: getStatusMessage(status), // As per protocol, span status is allowed to be undefined\n    links: convertSpanLinksForEnvelope(links),\n  };\n\n  const statusCode = attributes[ATTR_HTTP_RESPONSE_STATUS_CODE];\n  const responseContext = typeof statusCode === 'number' ? { response: { status_code: statusCode } } : undefined;\n\n  const transactionEvent = {\n    contexts: {\n      trace: traceContext,\n      otel: {\n        resource: span.resource.attributes,\n      },\n      ...responseContext,\n    },\n    spans: [],\n    start_timestamp: spanTimeInputToSeconds(span.startTime),\n    timestamp: spanTimeInputToSeconds(span.endTime),\n    transaction: description,\n    type: 'transaction',\n    sdkProcessingMetadata: {\n      capturedSpanScope: capturedSpanScopes.scope,\n      capturedSpanIsolationScope: capturedSpanScopes.isolationScope,\n      sampleRate,\n      dynamicSamplingContext: getDynamicSamplingContextFromSpan(span ),\n    },\n    ...(source && {\n      transaction_info: {\n        source,\n      },\n    }),\n  };\n\n  return transactionEvent;\n}\n\nfunction createAndFinishSpanForOtelSpan(node, spans, sentSpans) {\n  const span = node.span;\n\n  if (span) {\n    sentSpans.add(span);\n  }\n\n  const shouldDrop = !span;\n\n  // If this span should be dropped, we still want to create spans for the children of this\n  if (shouldDrop) {\n    node.children.forEach(child => {\n      createAndFinishSpanForOtelSpan(child, spans, sentSpans);\n    });\n    return;\n  }\n\n  const span_id = span.spanContext().spanId;\n  const trace_id = span.spanContext().traceId;\n  const parentSpanId = getParentSpanId(span);\n\n  const { attributes, startTime, endTime, links } = span;\n\n  const { op, description, data, origin = 'manual' } = getSpanData(span);\n  const allData = {\n    [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: origin,\n    [SEMANTIC_ATTRIBUTE_SENTRY_OP]: op,\n    ...removeSentryAttributes(attributes),\n    ...data,\n  };\n\n  const status = mapStatus(span);\n\n  const spanJSON = {\n    span_id,\n    trace_id,\n    data: allData,\n    description,\n    parent_span_id: parentSpanId,\n    start_timestamp: spanTimeInputToSeconds(startTime),\n    // This is [0,0] by default in OTEL, in which case we want to interpret this as no end time\n    timestamp: spanTimeInputToSeconds(endTime) || undefined,\n    status: getStatusMessage(status), // As per protocol, span status is allowed to be undefined\n    op,\n    origin,\n    measurements: timedEventsToMeasurements(span.events),\n    links: convertSpanLinksForEnvelope(links),\n  };\n\n  spans.push(spanJSON);\n\n  node.children.forEach(child => {\n    createAndFinishSpanForOtelSpan(child, spans, sentSpans);\n  });\n}\n\nfunction getSpanData(span)\n\n {\n  const { op: definedOp, source: definedSource, origin } = parseSpan(span);\n  const { op: inferredOp, description, source: inferredSource, data: inferredData } = parseSpanDescription(span);\n\n  const op = definedOp || inferredOp;\n  const source = definedSource || inferredSource;\n\n  const data = { ...inferredData, ...getData(span) };\n\n  return {\n    op,\n    description,\n    source,\n    origin,\n    data,\n  };\n}\n\n/**\n * Remove custom `sentry.` attributes we do not need to send.\n * These are more carrier attributes we use inside of the SDK, we do not need to send them to the API.\n */\nfunction removeSentryAttributes(data) {\n  const cleanedData = { ...data };\n\n  /* eslint-disable @typescript-eslint/no-dynamic-delete */\n  delete cleanedData[SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE];\n  delete cleanedData[SEMANTIC_ATTRIBUTE_SENTRY_PARENT_IS_REMOTE];\n  delete cleanedData[SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME];\n  /* eslint-enable @typescript-eslint/no-dynamic-delete */\n\n  return cleanedData;\n}\n\nfunction getData(span) {\n  const attributes = span.attributes;\n  const data = {};\n\n  if (span.kind !== SpanKind.INTERNAL) {\n    data['otel.kind'] = SpanKind[span.kind];\n  }\n\n  // eslint-disable-next-line deprecation/deprecation\n  const maybeHttpStatusCodeAttribute = attributes[SEMATTRS_HTTP_STATUS_CODE];\n  if (maybeHttpStatusCodeAttribute) {\n    data[ATTR_HTTP_RESPONSE_STATUS_CODE] = maybeHttpStatusCodeAttribute ;\n  }\n\n  const requestData = getRequestSpanData(span);\n\n  if (requestData.url) {\n    data.url = requestData.url;\n  }\n\n  if (requestData['http.query']) {\n    data['http.query'] = requestData['http.query'].slice(1);\n  }\n  if (requestData['http.fragment']) {\n    data['http.fragment'] = requestData['http.fragment'].slice(1);\n  }\n\n  return data;\n}\n\nfunction onSpanStart(span, parentContext) {\n  // This is a reliable way to get the parent span - because this is exactly how the parent is identified in the OTEL SDK\n  const parentSpan = trace.getSpan(parentContext);\n\n  let scopes = getScopesFromContext(parentContext);\n\n  // We need access to the parent span in order to be able to move up the span tree for breadcrumbs\n  if (parentSpan && !parentSpan.spanContext().isRemote) {\n    addChildSpanToSpan(parentSpan, span);\n  }\n\n  // We need this in the span exporter\n  if (parentSpan?.spanContext().isRemote) {\n    span.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_PARENT_IS_REMOTE, true);\n  }\n\n  // The root context does not have scopes stored, so we check for this specifically\n  // As fallback we attach the global scopes\n  if (parentContext === ROOT_CONTEXT) {\n    scopes = {\n      scope: getDefaultCurrentScope(),\n      isolationScope: getDefaultIsolationScope(),\n    };\n  }\n\n  // We need the scope at time of span creation in order to apply it to the event when the span is finished\n  if (scopes) {\n    setCapturedScopesOnSpan(span, scopes.scope, scopes.isolationScope);\n  }\n\n  logSpanStart(span);\n\n  const client = getClient();\n  client?.emit('spanStart', span);\n}\n\nfunction onSpanEnd(span) {\n  logSpanEnd(span);\n\n  const client = getClient();\n  client?.emit('spanEnd', span);\n}\n\n/**\n * Converts OpenTelemetry Spans to Sentry Spans and sends them to Sentry via\n * the Sentry SDK.\n */\nclass SentrySpanProcessor  {\n\n   constructor(options) {\n    setIsSetup('SentrySpanProcessor');\n    this._exporter = new SentrySpanExporter(options);\n  }\n\n  /**\n   * @inheritDoc\n   */\n   async forceFlush() {\n    this._exporter.flush();\n  }\n\n  /**\n   * @inheritDoc\n   */\n   async shutdown() {\n    this._exporter.clear();\n  }\n\n  /**\n   * @inheritDoc\n   */\n   onStart(span, parentContext) {\n    onSpanStart(span, parentContext);\n  }\n\n  /** @inheritDoc */\n   onEnd(span) {\n    onSpanEnd(span);\n\n    this._exporter.export(span);\n  }\n}\n\n/**\n * A custom OTEL sampler that uses Sentry sampling rates to make its decision\n */\nclass SentrySampler  {\n\n   constructor(client) {\n    this._client = client;\n    setIsSetup('SentrySampler');\n  }\n\n  /** @inheritDoc */\n   shouldSample(\n    context,\n    traceId,\n    spanName,\n    spanKind,\n    spanAttributes,\n    _links,\n  ) {\n    const options = this._client.getOptions();\n\n    const parentSpan = getValidSpan(context);\n    const parentContext = parentSpan?.spanContext();\n\n    if (!hasSpansEnabled(options)) {\n      return wrapSamplingDecision({ decision: undefined, context, spanAttributes });\n    }\n\n    // `ATTR_HTTP_REQUEST_METHOD` is the new attribute, but we still support the old one, `SEMATTRS_HTTP_METHOD`, for now.\n    // eslint-disable-next-line deprecation/deprecation\n    const maybeSpanHttpMethod = spanAttributes[SEMATTRS_HTTP_METHOD] || spanAttributes[ATTR_HTTP_REQUEST_METHOD];\n\n    // If we have a http.client span that has no local parent, we never want to sample it\n    // but we want to leave downstream sampling decisions up to the server\n    if (spanKind === SpanKind.CLIENT && maybeSpanHttpMethod && (!parentSpan || parentContext?.isRemote)) {\n      return wrapSamplingDecision({ decision: undefined, context, spanAttributes });\n    }\n\n    const parentSampled = parentSpan ? getParentSampled(parentSpan, traceId, spanName) : undefined;\n    const isRootSpan = !parentSpan || parentContext?.isRemote;\n\n    // We only sample based on parameters (like tracesSampleRate or tracesSampler) for root spans (which is done in sampleSpan).\n    // Non-root-spans simply inherit the sampling decision from their parent.\n    if (!isRootSpan) {\n      return wrapSamplingDecision({\n        decision: parentSampled ? SamplingDecision.RECORD_AND_SAMPLED : SamplingDecision.NOT_RECORD,\n        context,\n        spanAttributes,\n      });\n    }\n\n    // We want to pass the inferred name & attributes to the sampler method\n    const {\n      description: inferredSpanName,\n      data: inferredAttributes,\n      op,\n    } = inferSpanData(spanName, spanAttributes, spanKind);\n\n    const mergedAttributes = {\n      ...inferredAttributes,\n      ...spanAttributes,\n    };\n\n    if (op) {\n      mergedAttributes[SEMANTIC_ATTRIBUTE_SENTRY_OP] = op;\n    }\n\n    const mutableSamplingDecision = { decision: true };\n    this._client.emit(\n      'beforeSampling',\n      {\n        spanAttributes: mergedAttributes,\n        spanName: inferredSpanName,\n        parentSampled: parentSampled,\n        parentContext: parentContext,\n      },\n      mutableSamplingDecision,\n    );\n    if (!mutableSamplingDecision.decision) {\n      return wrapSamplingDecision({ decision: undefined, context, spanAttributes });\n    }\n\n    const { isolationScope } = getScopesFromContext(context) ?? {};\n\n    const dscString = parentContext?.traceState ? parentContext.traceState.get(SENTRY_TRACE_STATE_DSC) : undefined;\n    const dsc = dscString ? baggageHeaderToDynamicSamplingContext(dscString) : undefined;\n\n    const sampleRand = parseSampleRate(dsc?.sample_rand) ?? Math.random();\n\n    const [sampled, sampleRate, localSampleRateWasApplied] = sampleSpan(\n      options,\n      {\n        name: inferredSpanName,\n        attributes: mergedAttributes,\n        normalizedRequest: isolationScope?.getScopeData().sdkProcessingMetadata.normalizedRequest,\n        parentSampled,\n        parentSampleRate: parseSampleRate(dsc?.sample_rate),\n      },\n      sampleRand,\n    );\n\n    const method = `${maybeSpanHttpMethod}`.toUpperCase();\n    if (method === 'OPTIONS' || method === 'HEAD') {\n      DEBUG_BUILD && logger.log(`[Tracing] Not sampling span because HTTP method is '${method}' for ${spanName}`);\n\n      return wrapSamplingDecision({\n        decision: SamplingDecision.NOT_RECORD,\n        context,\n        spanAttributes,\n        sampleRand,\n        downstreamTraceSampleRate: 0, // we don't want to sample anything in the downstream trace either\n      });\n    }\n\n    if (\n      !sampled &&\n      // We check for `parentSampled === undefined` because we only want to record client reports for spans that are trace roots (ie. when there was incoming trace)\n      parentSampled === undefined\n    ) {\n      DEBUG_BUILD && logger.log('[Tracing] Discarding root span because its trace was not chosen to be sampled.');\n      this._client.recordDroppedEvent('sample_rate', 'transaction');\n    }\n\n    return {\n      ...wrapSamplingDecision({\n        decision: sampled ? SamplingDecision.RECORD_AND_SAMPLED : SamplingDecision.NOT_RECORD,\n        context,\n        spanAttributes,\n        sampleRand,\n        downstreamTraceSampleRate: localSampleRateWasApplied ? sampleRate : undefined,\n      }),\n      attributes: {\n        // We set the sample rate on the span when a local sample rate was applied to better understand how traces were sampled in Sentry\n        [SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE]: localSampleRateWasApplied ? sampleRate : undefined,\n      },\n    };\n  }\n\n  /** Returns the sampler name or short description with the configuration. */\n   toString() {\n    return 'SentrySampler';\n  }\n}\n\nfunction getParentSampled(parentSpan, traceId, spanName) {\n  const parentContext = parentSpan.spanContext();\n\n  // Only inherit sample rate if `traceId` is the same\n  // Note for testing: `isSpanContextValid()` checks the format of the traceId/spanId, so we need to pass valid ones\n  if (isSpanContextValid(parentContext) && parentContext.traceId === traceId) {\n    if (parentContext.isRemote) {\n      const parentSampled = getSamplingDecision(parentSpan.spanContext());\n      DEBUG_BUILD &&\n        logger.log(`[Tracing] Inheriting remote parent's sampled decision for ${spanName}: ${parentSampled}`);\n      return parentSampled;\n    }\n\n    const parentSampled = getSamplingDecision(parentContext);\n    DEBUG_BUILD && logger.log(`[Tracing] Inheriting parent's sampled decision for ${spanName}: ${parentSampled}`);\n    return parentSampled;\n  }\n\n  return undefined;\n}\n\n/**\n * Wrap a sampling decision with data that Sentry needs to work properly with it.\n * If you pass `decision: undefined`, it will be treated as `NOT_RECORDING`, but in contrast to passing `NOT_RECORDING`\n * it will not propagate this decision to downstream Sentry SDKs.\n */\nfunction wrapSamplingDecision({\n  decision,\n  context,\n  spanAttributes,\n  sampleRand,\n  downstreamTraceSampleRate,\n}\n\n) {\n  let traceState = getBaseTraceState(context, spanAttributes);\n\n  // We will override the propagated sample rate downstream when\n  // - the tracesSampleRate is applied\n  // - the tracesSampler is invoked\n  // Since unsampled OTEL spans (NonRecordingSpans) cannot hold attributes we need to store this on the (trace)context.\n  if (downstreamTraceSampleRate !== undefined) {\n    traceState = traceState.set(SENTRY_TRACE_STATE_SAMPLE_RATE, `${downstreamTraceSampleRate}`);\n  }\n\n  if (sampleRand !== undefined) {\n    traceState = traceState.set(SENTRY_TRACE_STATE_SAMPLE_RAND, `${sampleRand}`);\n  }\n\n  // If the decision is undefined, we treat it as NOT_RECORDING, but we don't propagate this decision to downstream SDKs\n  // Which is done by not setting `SENTRY_TRACE_STATE_SAMPLED_NOT_RECORDING` traceState\n  if (decision == undefined) {\n    return { decision: SamplingDecision.NOT_RECORD, traceState };\n  }\n\n  if (decision === SamplingDecision.NOT_RECORD) {\n    return { decision, traceState: traceState.set(SENTRY_TRACE_STATE_SAMPLED_NOT_RECORDING, '1') };\n  }\n\n  return { decision, traceState };\n}\n\nfunction getBaseTraceState(context, spanAttributes) {\n  const parentSpan = trace.getSpan(context);\n  const parentContext = parentSpan?.spanContext();\n\n  let traceState = parentContext?.traceState || new TraceState();\n\n  // We always keep the URL on the trace state, so we can access it in the propagator\n  // `ATTR_URL_FULL` is the new attribute, but we still support the old one, `ATTR_HTTP_URL`, for now.\n  // eslint-disable-next-line deprecation/deprecation\n  const url = spanAttributes[SEMATTRS_HTTP_URL] || spanAttributes[ATTR_URL_FULL];\n  if (url && typeof url === 'string') {\n    traceState = traceState.set(SENTRY_TRACE_STATE_URL, url);\n  }\n\n  return traceState;\n}\n\n/**\n * If the active span is invalid, we want to ignore it as parent.\n * This aligns with how otel tracers and default samplers handle these cases.\n */\nfunction getValidSpan(context) {\n  const span = trace.getSpan(context);\n  return span && isSpanContextValid(span.spanContext()) ? span : undefined;\n}\n\nexport { SEMANTIC_ATTRIBUTE_SENTRY_GRAPHQL_OPERATION, SentryPropagator, SentrySampler, SentrySpanProcessor, continueTrace, enhanceDscWithOpenTelemetryRootSpanName, getActiveSpan, getRequestSpanData, getScopesFromContext, getSpanKind, getTraceContextForScope, isSentryRequestSpan, openTelemetrySetupCheck, setOpenTelemetryContextAsyncContextStrategy, setupEventContextTrace, shouldPropagateTraceForUrl, spanHasAttributes, spanHasEvents, spanHasKind, spanHasName, spanHasParentId, spanHasStatus, startInactiveSpan, startSpan, startSpanManual, suppressTracing, withActiveSpan, wrapClientClass, wrapContextManagerClass, wrapSamplingDecision };\n//# sourceMappingURL=index.js.map\n","declare const __DEBUG_BUILD__: boolean;\n\n/**\n * This serves as a build time flag that will be true by default, but false in non-debug builds or if users replace `__SENTRY_DEBUG__` in their generated code.\n *\n * ATTENTION: This constant must never cross package boundaries (i.e. be exported) to guarantee that it can be used for tree shaking.\n */\nexport const DEBUG_BUILD = __DEBUG_BUILD__;\n","import type {\n  Client,\n  FetchBreadcrumbData,\n  FetchBreadcrumbHint,\n  HandlerDataFetch,\n  IntegrationFn,\n  Span,\n} from '@sentry/core';\nimport {\n  addBreadcrumb,\n  addFetchInstrumentationHandler,\n  defineIntegration,\n  getBreadcrumbLogLevelFromHttpStatusCode,\n  getClient,\n  instrumentFetchRequest,\n  isSentryRequestUrl,\n  LRUMap,\n  stringMatchesSomePattern,\n} from '@sentry/core';\n\nconst INTEGRATION_NAME = 'WinterCGFetch';\n\nconst HAS_CLIENT_MAP = new WeakMap<Client, boolean>();\n\nexport interface Options {\n  /**\n   * Whether breadcrumbs should be recorded for requests\n   * Defaults to true\n   */\n  breadcrumbs: boolean;\n\n  /**\n   * Function determining whether or not to create spans to track outgoing requests to the given URL.\n   * By default, spans will be created for all outgoing requests.\n   */\n  shouldCreateSpanForRequest?: (url: string) => boolean;\n}\n\nconst _winterCGFetch = ((options: Partial<Options> = {}) => {\n  const breadcrumbs = options.breadcrumbs === undefined ? true : options.breadcrumbs;\n  const shouldCreateSpanForRequest = options.shouldCreateSpanForRequest;\n\n  const _createSpanUrlMap = new LRUMap<string, boolean>(100);\n  const _headersUrlMap = new LRUMap<string, boolean>(100);\n\n  const spans: Record<string, Span> = {};\n\n  /** Decides whether to attach trace data to the outgoing fetch request */\n  function _shouldAttachTraceData(url: string): boolean {\n    const client = getClient();\n\n    if (!client) {\n      return false;\n    }\n\n    const clientOptions = client.getOptions();\n\n    if (clientOptions.tracePropagationTargets === undefined) {\n      return true;\n    }\n\n    const cachedDecision = _headersUrlMap.get(url);\n    if (cachedDecision !== undefined) {\n      return cachedDecision;\n    }\n\n    const decision = stringMatchesSomePattern(url, clientOptions.tracePropagationTargets);\n    _headersUrlMap.set(url, decision);\n    return decision;\n  }\n\n  /** Helper that wraps shouldCreateSpanForRequest option */\n  function _shouldCreateSpan(url: string): boolean {\n    if (shouldCreateSpanForRequest === undefined) {\n      return true;\n    }\n\n    const cachedDecision = _createSpanUrlMap.get(url);\n    if (cachedDecision !== undefined) {\n      return cachedDecision;\n    }\n\n    const decision = shouldCreateSpanForRequest(url);\n    _createSpanUrlMap.set(url, decision);\n    return decision;\n  }\n\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      addFetchInstrumentationHandler(handlerData => {\n        const client = getClient();\n        if (!client || !HAS_CLIENT_MAP.get(client)) {\n          return;\n        }\n\n        if (isSentryRequestUrl(handlerData.fetchData.url, client)) {\n          return;\n        }\n\n        instrumentFetchRequest(\n          handlerData,\n          _shouldCreateSpan,\n          _shouldAttachTraceData,\n          spans,\n          'auto.http.wintercg_fetch',\n        );\n\n        if (breadcrumbs) {\n          createBreadcrumb(handlerData);\n        }\n      });\n    },\n    setup(client) {\n      HAS_CLIENT_MAP.set(client, true);\n    },\n  };\n}) satisfies IntegrationFn;\n\n/**\n * Creates spans and attaches tracing headers to fetch requests on WinterCG runtimes.\n */\nexport const winterCGFetchIntegration = defineIntegration(_winterCGFetch);\n\nfunction createBreadcrumb(handlerData: HandlerDataFetch): void {\n  const { startTimestamp, endTimestamp } = handlerData;\n\n  // We only capture complete fetch requests\n  if (!endTimestamp) {\n    return;\n  }\n\n  const breadcrumbData: FetchBreadcrumbData = {\n    method: handlerData.fetchData.method,\n    url: handlerData.fetchData.url,\n  };\n\n  if (handlerData.error) {\n    const hint: FetchBreadcrumbHint = {\n      data: handlerData.error,\n      input: handlerData.args,\n      startTimestamp,\n      endTimestamp,\n    };\n\n    addBreadcrumb(\n      {\n        category: 'fetch',\n        data: breadcrumbData,\n        level: 'error',\n        type: 'http',\n      },\n      hint,\n    );\n  } else {\n    const response = handlerData.response as Response | undefined;\n\n    breadcrumbData.request_body_size = handlerData.fetchData.request_body_size;\n    breadcrumbData.response_body_size = handlerData.fetchData.response_body_size;\n    breadcrumbData.status_code = response?.status;\n\n    const hint: FetchBreadcrumbHint = {\n      input: handlerData.args,\n      response,\n      startTimestamp,\n      endTimestamp,\n    };\n    const level = getBreadcrumbLogLevelFromHttpStatusCode(breadcrumbData.status_code);\n\n    addBreadcrumb(\n      {\n        category: 'fetch',\n        data: breadcrumbData,\n        type: 'http',\n        level,\n      },\n      hint,\n    );\n  }\n}\n","import type { BaseTransportOptions, Transport, TransportMakeRequestResponse, TransportRequest } from '@sentry/core';\nimport { createTransport, SENTRY_BUFFER_FULL_ERROR, suppressTracing } from '@sentry/core';\n\nexport interface VercelEdgeTransportOptions extends BaseTransportOptions {\n  /** Fetch API init parameters. */\n  fetchOptions?: RequestInit;\n  /** Custom headers for the transport. */\n  headers?: { [key: string]: string };\n}\n\nconst DEFAULT_TRANSPORT_BUFFER_SIZE = 30;\n\n/**\n * This is a modified promise buffer that collects tasks until drain is called.\n * We need this in the edge runtime because edge function invocations may not share I/O objects, like fetch requests\n * and responses, and the normal PromiseBuffer inherently buffers stuff inbetween incoming requests.\n *\n * A limitation we need to be aware of is that DEFAULT_TRANSPORT_BUFFER_SIZE is the maximum amount of payloads the\n * SDK can send for a given edge function invocation.\n */\nexport class IsolatedPromiseBuffer {\n  // We just have this field because the promise buffer interface requires it.\n  // If we ever remove it from the interface we should also remove it here.\n  public $: Array<PromiseLike<TransportMakeRequestResponse>>;\n\n  private _taskProducers: (() => PromiseLike<TransportMakeRequestResponse>)[];\n\n  private readonly _bufferSize: number;\n\n  public constructor(_bufferSize = DEFAULT_TRANSPORT_BUFFER_SIZE) {\n    this.$ = [];\n    this._taskProducers = [];\n    this._bufferSize = _bufferSize;\n  }\n\n  /**\n   * @inheritdoc\n   */\n  public add(taskProducer: () => PromiseLike<TransportMakeRequestResponse>): PromiseLike<TransportMakeRequestResponse> {\n    if (this._taskProducers.length >= this._bufferSize) {\n      return Promise.reject(SENTRY_BUFFER_FULL_ERROR);\n    }\n\n    this._taskProducers.push(taskProducer);\n    return Promise.resolve({});\n  }\n\n  /**\n   * @inheritdoc\n   */\n  public drain(timeout?: number): PromiseLike<boolean> {\n    const oldTaskProducers = [...this._taskProducers];\n    this._taskProducers = [];\n\n    return new Promise(resolve => {\n      const timer = setTimeout(() => {\n        if (timeout && timeout > 0) {\n          resolve(false);\n        }\n      }, timeout);\n\n      // This cannot reject\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      Promise.all(\n        oldTaskProducers.map(taskProducer =>\n          taskProducer().then(null, () => {\n            // catch all failed requests\n          }),\n        ),\n      ).then(() => {\n        // resolve to true if all fetch requests settled\n        clearTimeout(timer);\n        resolve(true);\n      });\n    });\n  }\n}\n\n/**\n * Creates a Transport that uses the Edge Runtimes native fetch API to send events to Sentry.\n */\nexport function makeEdgeTransport(options: VercelEdgeTransportOptions): Transport {\n  function makeRequest(request: TransportRequest): PromiseLike<TransportMakeRequestResponse> {\n    const requestOptions: RequestInit = {\n      body: request.body,\n      method: 'POST',\n      headers: options.headers,\n      ...options.fetchOptions,\n    };\n\n    return suppressTracing(() => {\n      return fetch(options.url, requestOptions).then(response => {\n        return {\n          statusCode: response.status,\n          headers: {\n            'x-sentry-rate-limits': response.headers.get('X-Sentry-Rate-Limits'),\n            'retry-after': response.headers.get('Retry-After'),\n          },\n        };\n      });\n    });\n  }\n\n  return createTransport(options, makeRequest, new IsolatedPromiseBuffer(options.bufferSize));\n}\n","declare const process: {\n  env: Record<string, string>;\n};\n\n/**\n * Returns an environment setting value determined by Vercel's `VERCEL_ENV` environment variable.\n *\n * @param isClient Flag to indicate whether to use the `NEXT_PUBLIC_` prefixed version of the environment variable.\n */\nexport function getVercelEnv(isClient: boolean): string | undefined {\n  const vercelEnvVar = isClient ? process.env.NEXT_PUBLIC_VERCEL_ENV : process.env.VERCEL_ENV;\n  return vercelEnvVar ? `vercel-${vercelEnvVar}` : undefined;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * NOTICE from the Sentry authors:\n * - Code vendored from: https://github.com/open-telemetry/opentelemetry-js/blob/6515ed8098333646a63a74a8c0150cc2daf520db/packages/opentelemetry-context-async-hooks/src/AbstractAsyncHooksContextManager.ts\n * - Modifications:\n *   - Added lint rules\n *   - Modified bind() method not to rely on Node.js specific APIs\n */\n\n/* eslint-disable @typescript-eslint/explicit-member-accessibility */\n/* eslint-disable @typescript-eslint/member-ordering */\n/* eslint-disable jsdoc/require-jsdoc */\n/* eslint-disable @typescript-eslint/ban-types */\n/* eslint-disable @typescript-eslint/explicit-function-return-type */\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable prefer-rest-params */\n/* eslint-disable @typescript-eslint/no-dynamic-delete */\n/* eslint-disable @typescript-eslint/unbound-method */\n/* eslint-disable @typescript-eslint/no-this-alias */\n\nimport type { Context, ContextManager } from '@opentelemetry/api';\nimport type { EventEmitter } from 'events';\n\ntype Func<T> = (...args: unknown[]) => T;\n\n/**\n * Store a map for each event of all original listeners and their \"patched\"\n * version. So when a listener is removed by the user, the corresponding\n * patched function will be also removed.\n */\ninterface PatchMap {\n  [name: string]: WeakMap<Func<void>, Func<void>>;\n}\n\nconst ADD_LISTENER_METHODS = [\n  'addListener' as const,\n  'on' as const,\n  'once' as const,\n  'prependListener' as const,\n  'prependOnceListener' as const,\n];\n\nexport abstract class AbstractAsyncHooksContextManager implements ContextManager {\n  abstract active(): Context;\n\n  abstract with<A extends unknown[], F extends (...args: A) => ReturnType<F>>(\n    context: Context,\n    fn: F,\n    thisArg?: ThisParameterType<F>,\n    ...args: A\n  ): ReturnType<F>;\n\n  abstract enable(): this;\n\n  abstract disable(): this;\n\n  /**\n   * Binds a the certain context or the active one to the target function and then returns the target\n   * @param context A context (span) to be bind to target\n   * @param target a function or event emitter. When target or one of its callbacks is called,\n   *  the provided context will be used as the active context for the duration of the call.\n   */\n  bind<T>(context: Context, target: T): T {\n    if (typeof target === 'object' && target !== null && 'on' in target) {\n      return this._bindEventEmitter(context, target as unknown as EventEmitter) as T;\n    }\n\n    if (typeof target === 'function') {\n      return this._bindFunction(context, target);\n    }\n    return target;\n  }\n\n  private _bindFunction<T extends Function>(context: Context, target: T): T {\n    const manager = this;\n    const contextWrapper = function (this: never, ...args: unknown[]) {\n      return manager.with(context, () => target.apply(this, args));\n    };\n    Object.defineProperty(contextWrapper, 'length', {\n      enumerable: false,\n      configurable: true,\n      writable: false,\n      value: target.length,\n    });\n    /**\n     * It isn't possible to tell Typescript that contextWrapper is the same as T\n     * so we forced to cast as any here.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return contextWrapper as any;\n  }\n\n  /**\n   * By default, EventEmitter call their callback with their context, which we do\n   * not want, instead we will bind a specific context to all callbacks that\n   * go through it.\n   * @param context the context we want to bind\n   * @param ee EventEmitter an instance of EventEmitter to patch\n   */\n  private _bindEventEmitter<T extends EventEmitter>(context: Context, ee: T): T {\n    const map = this._getPatchMap(ee);\n    if (map !== undefined) return ee;\n    this._createPatchMap(ee);\n\n    // patch methods that add a listener to propagate context\n    ADD_LISTENER_METHODS.forEach(methodName => {\n      if (ee[methodName] === undefined) return;\n      ee[methodName] = this._patchAddListener(ee, ee[methodName], context);\n    });\n    // patch methods that remove a listener\n    if (typeof ee.removeListener === 'function') {\n      ee.removeListener = this._patchRemoveListener(ee, ee.removeListener);\n    }\n    if (typeof ee.off === 'function') {\n      ee.off = this._patchRemoveListener(ee, ee.off);\n    }\n    // patch method that remove all listeners\n    if (typeof ee.removeAllListeners === 'function') {\n      ee.removeAllListeners = this._patchRemoveAllListeners(ee, ee.removeAllListeners);\n    }\n    return ee;\n  }\n\n  /**\n   * Patch methods that remove a given listener so that we match the \"patched\"\n   * version of that listener (the one that propagate context).\n   * @param ee EventEmitter instance\n   * @param original reference to the patched method\n   */\n  private _patchRemoveListener(ee: EventEmitter, original: Function) {\n    const contextManager = this;\n    return function (this: never, event: string, listener: Func<void>) {\n      const events = contextManager._getPatchMap(ee)?.[event];\n      if (events === undefined) {\n        return original.call(this, event, listener);\n      }\n      const patchedListener = events.get(listener);\n      return original.call(this, event, patchedListener || listener);\n    };\n  }\n\n  /**\n   * Patch methods that remove all listeners so we remove our\n   * internal references for a given event.\n   * @param ee EventEmitter instance\n   * @param original reference to the patched method\n   */\n  private _patchRemoveAllListeners(ee: EventEmitter, original: Function) {\n    const contextManager = this;\n    return function (this: never, event: string) {\n      const map = contextManager._getPatchMap(ee);\n      if (map !== undefined) {\n        if (arguments.length === 0) {\n          contextManager._createPatchMap(ee);\n        } else if (map[event] !== undefined) {\n          delete map[event];\n        }\n      }\n      return original.apply(this, arguments);\n    };\n  }\n\n  /**\n   * Patch methods on an event emitter instance that can add listeners so we\n   * can force them to propagate a given context.\n   * @param ee EventEmitter instance\n   * @param original reference to the patched method\n   * @param [context] context to propagate when calling listeners\n   */\n  private _patchAddListener(ee: EventEmitter, original: Function, context: Context) {\n    const contextManager = this;\n    return function (this: never, event: string, listener: Func<void>) {\n      /**\n       * This check is required to prevent double-wrapping the listener.\n       * The implementation for ee.once wraps the listener and calls ee.on.\n       * Without this check, we would wrap that wrapped listener.\n       * This causes an issue because ee.removeListener depends on the onceWrapper\n       * to properly remove the listener. If we wrap their wrapper, we break\n       * that detection.\n       */\n      if (contextManager._wrapped) {\n        return original.call(this, event, listener);\n      }\n      let map = contextManager._getPatchMap(ee);\n      if (map === undefined) {\n        map = contextManager._createPatchMap(ee);\n      }\n      let listeners = map[event];\n      if (listeners === undefined) {\n        listeners = new WeakMap();\n        map[event] = listeners;\n      }\n      const patchedListener = contextManager.bind(context, listener);\n      // store a weak reference of the user listener to ours\n      listeners.set(listener, patchedListener);\n\n      /**\n       * See comment at the start of this function for the explanation of this property.\n       */\n      contextManager._wrapped = true;\n      try {\n        return original.call(this, event, patchedListener);\n      } finally {\n        contextManager._wrapped = false;\n      }\n    };\n  }\n\n  private _createPatchMap(ee: EventEmitter): PatchMap {\n    const map = Object.create(null);\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (ee as any)[this._kOtListeners] = map;\n    return map;\n  }\n  private _getPatchMap(ee: EventEmitter): PatchMap | undefined {\n    return (ee as never)[this._kOtListeners];\n  }\n\n  private readonly _kOtListeners = Symbol('OtListeners');\n  private _wrapped = false;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * NOTICE from the Sentry authors:\n * - Code vendored from: https://github.com/open-telemetry/opentelemetry-js/blob/6515ed8098333646a63a74a8c0150cc2daf520db/packages/opentelemetry-context-async-hooks/src/AbstractAsyncHooksContextManager.ts\n * - Modifications:\n *   - Added lint rules\n *   - Modified import path to AbstractAsyncHooksContextManager\n *   - Added Sentry logging\n *   - Modified constructor to access AsyncLocalStorage class from global object instead of the Node.js API\n */\n\n/* eslint-disable @typescript-eslint/explicit-member-accessibility */\n/* eslint-disable jsdoc/require-jsdoc */\n\nimport type { Context } from '@opentelemetry/api';\nimport { ROOT_CONTEXT } from '@opentelemetry/api';\nimport { GLOBAL_OBJ, logger } from '@sentry/core';\nimport type { AsyncLocalStorage } from 'async_hooks';\nimport { DEBUG_BUILD } from '../debug-build';\nimport { AbstractAsyncHooksContextManager } from './abstract-async-hooks-context-manager';\n\nexport class AsyncLocalStorageContextManager extends AbstractAsyncHooksContextManager {\n  private _asyncLocalStorage: AsyncLocalStorage<Context>;\n\n  constructor() {\n    super();\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-explicit-any\n    const MaybeGlobalAsyncLocalStorageConstructor = (GLOBAL_OBJ as any).AsyncLocalStorage;\n\n    if (!MaybeGlobalAsyncLocalStorageConstructor) {\n      DEBUG_BUILD &&\n        logger.warn(\n          \"Tried to register AsyncLocalStorage async context strategy in a runtime that doesn't support AsyncLocalStorage.\",\n        );\n\n      // @ts-expect-error Vendored type shenanigans\n      this._asyncLocalStorage = {\n        getStore() {\n          return undefined;\n        },\n        run(_store: unknown, callback: () => Context, ...args: unknown[]) {\n          return callback.apply(this, args);\n        },\n        disable() {\n          // noop\n        },\n      };\n    } else {\n      this._asyncLocalStorage = new MaybeGlobalAsyncLocalStorageConstructor();\n    }\n  }\n\n  active(): Context {\n    return this._asyncLocalStorage.getStore() ?? ROOT_CONTEXT;\n  }\n\n  with<A extends unknown[], F extends (...args: A) => ReturnType<F>>(\n    context: Context,\n    fn: F,\n    thisArg?: ThisParameterType<F>,\n    ...args: A\n  ): ReturnType<F> {\n    const cb = thisArg == null ? fn : fn.bind(thisArg);\n    return this._asyncLocalStorage.run(context, cb as never, ...args);\n  }\n\n  enable(): this {\n    return this;\n  }\n\n  disable(): this {\n    this._asyncLocalStorage.disable();\n    return this;\n  }\n}\n","import { context, diag, DiagLogLevel, propagation, trace } from '@opentelemetry/api';\nimport { Resource } from '@opentelemetry/resources';\nimport { BasicTracerProvider } from '@opentelemetry/sdk-trace-base';\nimport {\n  ATTR_SERVICE_NAME,\n  ATTR_SERVICE_VERSION,\n  SEMRESATTRS_SERVICE_NAMESPACE,\n} from '@opentelemetry/semantic-conventions';\nimport type { Client, Integration, Options } from '@sentry/core';\nimport {\n  consoleIntegration,\n  createStackParser,\n  dedupeIntegration,\n  functionToStringIntegration,\n  getCurrentScope,\n  getIntegrationsToSetup,\n  GLOBAL_OBJ,\n  hasSpansEnabled,\n  inboundFiltersIntegration,\n  linkedErrorsIntegration,\n  logger,\n  nodeStackLineParser,\n  requestDataIntegration,\n  SDK_VERSION,\n  stackParserFromStackParserOptions,\n} from '@sentry/core';\nimport {\n  enhanceDscWithOpenTelemetryRootSpanName,\n  openTelemetrySetupCheck,\n  SentryPropagator,\n  SentrySampler,\n  SentrySpanProcessor,\n  setOpenTelemetryContextAsyncContextStrategy,\n  setupEventContextTrace,\n  wrapContextManagerClass,\n} from '@sentry/opentelemetry';\nimport { VercelEdgeClient } from './client';\nimport { DEBUG_BUILD } from './debug-build';\nimport { winterCGFetchIntegration } from './integrations/wintercg-fetch';\nimport { makeEdgeTransport } from './transports';\nimport type { VercelEdgeOptions } from './types';\nimport { getVercelEnv } from './utils/vercel';\nimport { AsyncLocalStorageContextManager } from './vendored/async-local-storage-context-manager';\n\ndeclare const process: {\n  env: Record<string, string>;\n};\n\nconst nodeStackParser = createStackParser(nodeStackLineParser());\n\n/** Get the default integrations for the browser SDK. */\nexport function getDefaultIntegrations(options: Options): Integration[] {\n  return [\n    dedupeIntegration(),\n    // TODO(v10): Replace with `eventFiltersIntegration` once we remove the deprecated `inboundFiltersIntegration`\n    // eslint-disable-next-line deprecation/deprecation\n    inboundFiltersIntegration(),\n    functionToStringIntegration(),\n    linkedErrorsIntegration(),\n    winterCGFetchIntegration(),\n    consoleIntegration(),\n    // TODO(v10): integration can be included - but integration should not add IP address etc\n    ...(options.sendDefaultPii ? [requestDataIntegration()] : []),\n  ];\n}\n\n/** Inits the Sentry NextJS SDK on the Edge Runtime. */\nexport function init(options: VercelEdgeOptions = {}): Client | undefined {\n  setOpenTelemetryContextAsyncContextStrategy();\n\n  const scope = getCurrentScope();\n  scope.update(options.initialScope);\n\n  if (options.defaultIntegrations === undefined) {\n    options.defaultIntegrations = getDefaultIntegrations(options);\n  }\n\n  if (options.dsn === undefined && process.env.SENTRY_DSN) {\n    options.dsn = process.env.SENTRY_DSN;\n  }\n\n  if (options.tracesSampleRate === undefined && process.env.SENTRY_TRACES_SAMPLE_RATE) {\n    const tracesSampleRate = parseFloat(process.env.SENTRY_TRACES_SAMPLE_RATE);\n    if (isFinite(tracesSampleRate)) {\n      options.tracesSampleRate = tracesSampleRate;\n    }\n  }\n\n  if (options.release === undefined) {\n    const detectedRelease = getSentryRelease();\n    if (detectedRelease !== undefined) {\n      options.release = detectedRelease;\n    }\n  }\n\n  options.environment =\n    options.environment || process.env.SENTRY_ENVIRONMENT || getVercelEnv(false) || process.env.NODE_ENV;\n\n  const client = new VercelEdgeClient({\n    ...options,\n    stackParser: stackParserFromStackParserOptions(options.stackParser || nodeStackParser),\n    integrations: getIntegrationsToSetup(options),\n    transport: options.transport || makeEdgeTransport,\n  });\n  // The client is on the current scope, from where it generally is inherited\n  getCurrentScope().setClient(client);\n\n  client.init();\n\n  // If users opt-out of this, they _have_ to set up OpenTelemetry themselves\n  // There is no way to use this SDK without OpenTelemetry!\n  if (!options.skipOpenTelemetrySetup) {\n    setupOtel(client);\n    validateOpenTelemetrySetup();\n  }\n\n  enhanceDscWithOpenTelemetryRootSpanName(client);\n  setupEventContextTrace(client);\n\n  return client;\n}\n\nfunction validateOpenTelemetrySetup(): void {\n  if (!DEBUG_BUILD) {\n    return;\n  }\n\n  const setup = openTelemetrySetupCheck();\n\n  const required: ReturnType<typeof openTelemetrySetupCheck> = ['SentryContextManager', 'SentryPropagator'];\n\n  if (hasSpansEnabled()) {\n    required.push('SentrySpanProcessor');\n  }\n\n  for (const k of required) {\n    if (!setup.includes(k)) {\n      logger.error(\n        `You have to set up the ${k}. Without this, the OpenTelemetry & Sentry integration will not work properly.`,\n      );\n    }\n  }\n\n  if (!setup.includes('SentrySampler')) {\n    logger.warn(\n      'You have to set up the SentrySampler. Without this, the OpenTelemetry & Sentry integration may still work, but sample rates set for the Sentry SDK will not be respected. If you use a custom sampler, make sure to use `wrapSamplingDecision`.',\n    );\n  }\n}\n\n// exported for tests\n// eslint-disable-next-line jsdoc/require-jsdoc\nexport function setupOtel(client: VercelEdgeClient): void {\n  if (client.getOptions().debug) {\n    setupOpenTelemetryLogger();\n  }\n\n  // Create and configure NodeTracerProvider\n  const provider = new BasicTracerProvider({\n    sampler: new SentrySampler(client),\n    resource: new Resource({\n      [ATTR_SERVICE_NAME]: 'edge',\n      // eslint-disable-next-line deprecation/deprecation\n      [SEMRESATTRS_SERVICE_NAMESPACE]: 'sentry',\n      [ATTR_SERVICE_VERSION]: SDK_VERSION,\n    }),\n    forceFlushTimeoutMillis: 500,\n    spanProcessors: [\n      new SentrySpanProcessor({\n        timeout: client.getOptions().maxSpanWaitDuration,\n      }),\n    ],\n  });\n\n  const SentryContextManager = wrapContextManagerClass(AsyncLocalStorageContextManager);\n\n  trace.setGlobalTracerProvider(provider);\n  propagation.setGlobalPropagator(new SentryPropagator());\n  context.setGlobalContextManager(new SentryContextManager());\n\n  client.traceProvider = provider;\n}\n\n/**\n * Setup the OTEL logger to use our own logger.\n */\nfunction setupOpenTelemetryLogger(): void {\n  const otelLogger = new Proxy(logger as typeof logger & { verbose: (typeof logger)['debug'] }, {\n    get(target, prop, receiver) {\n      const actualProp = prop === 'verbose' ? 'debug' : prop;\n      return Reflect.get(target, actualProp, receiver);\n    },\n  });\n\n  // Disable diag, to ensure this works even if called multiple times\n  diag.disable();\n  diag.setLogger(otelLogger, DiagLogLevel.DEBUG);\n}\n\n/**\n * Returns a release dynamically from environment variables.\n */\n// eslint-disable-next-line complexity\nexport function getSentryRelease(fallback?: string): string | undefined {\n  // Always read first as Sentry takes this as precedence\n  if (process.env.SENTRY_RELEASE) {\n    return process.env.SENTRY_RELEASE;\n  }\n\n  // This supports the variable that sentry-webpack-plugin injects\n  if (GLOBAL_OBJ.SENTRY_RELEASE?.id) {\n    return GLOBAL_OBJ.SENTRY_RELEASE.id;\n  }\n\n  // This list is in approximate alpha order, separated into 3 categories:\n  // 1. Git providers\n  // 2. CI providers with specific environment variables (has the provider name in the variable name)\n  // 3. CI providers with generic environment variables (checked for last to prevent possible false positives)\n\n  const possibleReleaseNameOfGitProvider =\n    // GitHub Actions - https://help.github.com/en/actions/configuring-and-managing-workflows/using-environment-variables#default-environment-variables\n    process.env['GITHUB_SHA'] ||\n    // GitLab CI - https://docs.gitlab.com/ee/ci/variables/predefined_variables.html\n    process.env['CI_MERGE_REQUEST_SOURCE_BRANCH_SHA'] ||\n    process.env['CI_BUILD_REF'] ||\n    process.env['CI_COMMIT_SHA'] ||\n    // Bitbucket - https://support.atlassian.com/bitbucket-cloud/docs/variables-and-secrets/\n    process.env['BITBUCKET_COMMIT'];\n\n  const possibleReleaseNameOfCiProvidersWithSpecificEnvVar =\n    // AppVeyor - https://www.appveyor.com/docs/environment-variables/\n    process.env['APPVEYOR_PULL_REQUEST_HEAD_COMMIT'] ||\n    process.env['APPVEYOR_REPO_COMMIT'] ||\n    // AWS CodeBuild - https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-env-vars.html\n    process.env['CODEBUILD_RESOLVED_SOURCE_VERSION'] ||\n    // AWS Amplify - https://docs.aws.amazon.com/amplify/latest/userguide/environment-variables.html\n    process.env['AWS_COMMIT_ID'] ||\n    // Azure Pipelines - https://docs.microsoft.com/en-us/azure/devops/pipelines/build/variables?view=azure-devops&tabs=yaml\n    process.env['BUILD_SOURCEVERSION'] ||\n    // Bitrise - https://devcenter.bitrise.io/builds/available-environment-variables/\n    process.env['GIT_CLONE_COMMIT_HASH'] ||\n    // Buddy CI - https://buddy.works/docs/pipelines/environment-variables#default-environment-variables\n    process.env['BUDDY_EXECUTION_REVISION'] ||\n    // Builtkite - https://buildkite.com/docs/pipelines/environment-variables\n    process.env['BUILDKITE_COMMIT'] ||\n    // CircleCI - https://circleci.com/docs/variables/\n    process.env['CIRCLE_SHA1'] ||\n    // Cirrus CI - https://cirrus-ci.org/guide/writing-tasks/#environment-variables\n    process.env['CIRRUS_CHANGE_IN_REPO'] ||\n    // Codefresh - https://codefresh.io/docs/docs/codefresh-yaml/variables/\n    process.env['CF_REVISION'] ||\n    // Codemagic - https://docs.codemagic.io/yaml-basic-configuration/environment-variables/\n    process.env['CM_COMMIT'] ||\n    // Cloudflare Pages - https://developers.cloudflare.com/pages/platform/build-configuration/#environment-variables\n    process.env['CF_PAGES_COMMIT_SHA'] ||\n    // Drone - https://docs.drone.io/pipeline/environment/reference/\n    process.env['DRONE_COMMIT_SHA'] ||\n    // Flightcontrol - https://www.flightcontrol.dev/docs/guides/flightcontrol/environment-variables#built-in-environment-variables\n    process.env['FC_GIT_COMMIT_SHA'] ||\n    // Heroku #1 https://devcenter.heroku.com/articles/heroku-ci\n    process.env['HEROKU_TEST_RUN_COMMIT_VERSION'] ||\n    // Heroku #2 https://docs.sentry.io/product/integrations/deployment/heroku/#configure-releases\n    process.env['HEROKU_SLUG_COMMIT'] ||\n    // Railway - https://docs.railway.app/reference/variables#git-variables\n    process.env['RAILWAY_GIT_COMMIT_SHA'] ||\n    // Render - https://render.com/docs/environment-variables\n    process.env['RENDER_GIT_COMMIT'] ||\n    // Semaphore CI - https://docs.semaphoreci.com/ci-cd-environment/environment-variables\n    process.env['SEMAPHORE_GIT_SHA'] ||\n    // TravisCI - https://docs.travis-ci.com/user/environment-variables/#default-environment-variables\n    process.env['TRAVIS_PULL_REQUEST_SHA'] ||\n    // Vercel - https://vercel.com/docs/v2/build-step#system-environment-variables\n    process.env['VERCEL_GIT_COMMIT_SHA'] ||\n    process.env['VERCEL_GITHUB_COMMIT_SHA'] ||\n    process.env['VERCEL_GITLAB_COMMIT_SHA'] ||\n    process.env['VERCEL_BITBUCKET_COMMIT_SHA'] ||\n    // Zeit (now known as Vercel)\n    process.env['ZEIT_GITHUB_COMMIT_SHA'] ||\n    process.env['ZEIT_GITLAB_COMMIT_SHA'] ||\n    process.env['ZEIT_BITBUCKET_COMMIT_SHA'];\n\n  const possibleReleaseNameOfCiProvidersWithGenericEnvVar =\n    // CloudBees CodeShip - https://docs.cloudbees.com/docs/cloudbees-codeship/latest/pro-builds-and-configuration/environment-variables\n    process.env['CI_COMMIT_ID'] ||\n    // Coolify - https://coolify.io/docs/knowledge-base/environment-variables\n    process.env['SOURCE_COMMIT'] ||\n    // Heroku #3 https://devcenter.heroku.com/changelog-items/630\n    process.env['SOURCE_VERSION'] ||\n    // Jenkins - https://plugins.jenkins.io/git/#environment-variables\n    process.env['GIT_COMMIT'] ||\n    // Netlify - https://docs.netlify.com/configure-builds/environment-variables/#build-metadata\n    process.env['COMMIT_REF'] ||\n    // TeamCity - https://www.jetbrains.com/help/teamcity/predefined-build-parameters.html\n    process.env['BUILD_VCS_NUMBER'] ||\n    // Woodpecker CI - https://woodpecker-ci.org/docs/usage/environment\n    process.env['CI_COMMIT_SHA'];\n\n  return (\n    possibleReleaseNameOfGitProvider ||\n    possibleReleaseNameOfCiProvidersWithSpecificEnvVar ||\n    possibleReleaseNameOfCiProvidersWithGenericEnvVar ||\n    fallback\n  );\n}\n","import type { Log, LogSeverityLevel, ParameterizedString } from '@sentry/core';\nimport { _INTERNAL_captureLog } from '@sentry/core';\n\n/**\n * Capture a log with the given level.\n *\n * @param level - The level of the log.\n * @param message - The message to log.\n * @param attributes - Arbitrary structured data that stores information about the log - e.g., userId: 100.\n * @param severityNumber - The severity number of the log.\n */\nfunction captureLog(\n  level: LogSeverityLevel,\n  message: ParameterizedString,\n  attributes?: Log['attributes'],\n  severityNumber?: Log['severityNumber'],\n): void {\n  _INTERNAL_captureLog({ level, message, attributes, severityNumber });\n}\n\n/**\n * @summary Capture a log with the `trace` level. Requires `_experiments.enableLogs` to be enabled.\n *\n * @param message - The message to log.\n * @param attributes - Arbitrary structured data that stores information about the log - e.g., { userId: 100, route: '/dashboard' }.\n *\n * @example\n *\n * ```\n * Sentry.logger.trace('User clicked submit button', {\n *   buttonId: 'submit-form',\n *   formId: 'user-profile',\n *   timestamp: Date.now()\n * });\n * ```\n *\n * @example With template strings\n *\n * ```\n * Sentry.logger.trace(Sentry.logger.fmt`User ${user} navigated to ${page}`, {\n *   userId: '123',\n *   sessionId: 'abc-xyz'\n * });\n * ```\n */\nexport function trace(message: ParameterizedString, attributes?: Log['attributes']): void {\n  captureLog('trace', message, attributes);\n}\n\n/**\n * @summary Capture a log with the `debug` level. Requires `_experiments.enableLogs` to be enabled.\n *\n * @param message - The message to log.\n * @param attributes - Arbitrary structured data that stores information about the log - e.g., { component: 'Header', state: 'loading' }.\n *\n * @example\n *\n * ```\n * Sentry.logger.debug('Component mounted', {\n *   component: 'UserProfile',\n *   props: { userId: 123 },\n *   renderTime: 150\n * });\n * ```\n *\n * @example With template strings\n *\n * ```\n * Sentry.logger.debug(Sentry.logger.fmt`API request to ${endpoint} failed`, {\n *   statusCode: 404,\n *   requestId: 'req-123',\n *   duration: 250\n * });\n * ```\n */\nexport function debug(message: ParameterizedString, attributes?: Log['attributes']): void {\n  captureLog('debug', message, attributes);\n}\n\n/**\n * @summary Capture a log with the `info` level. Requires `_experiments.enableLogs` to be enabled.\n *\n * @param message - The message to log.\n * @param attributes - Arbitrary structured data that stores information about the log - e.g., { feature: 'checkout', status: 'completed' }.\n *\n * @example\n *\n * ```\n * Sentry.logger.info('User completed checkout', {\n *   orderId: 'order-123',\n *   amount: 99.99,\n *   paymentMethod: 'credit_card'\n * });\n * ```\n *\n * @example With template strings\n *\n * ```\n * Sentry.logger.info(Sentry.logger.fmt`User ${user} updated profile picture`, {\n *   userId: 'user-123',\n *   imageSize: '2.5MB',\n *   timestamp: Date.now()\n * });\n * ```\n */\nexport function info(message: ParameterizedString, attributes?: Log['attributes']): void {\n  captureLog('info', message, attributes);\n}\n\n/**\n * @summary Capture a log with the `warn` level. Requires `_experiments.enableLogs` to be enabled.\n *\n * @param message - The message to log.\n * @param attributes - Arbitrary structured data that stores information about the log - e.g., { browser: 'Chrome', version: '91.0' }.\n *\n * @example\n *\n * ```\n * Sentry.logger.warn('Browser compatibility issue detected', {\n *   browser: 'Safari',\n *   version: '14.0',\n *   feature: 'WebRTC',\n *   fallback: 'enabled'\n * });\n * ```\n *\n * @example With template strings\n *\n * ```\n * Sentry.logger.warn(Sentry.logger.fmt`API endpoint ${endpoint} is deprecated`, {\n *   recommendedEndpoint: '/api/v2/users',\n *   sunsetDate: '2024-12-31',\n *   clientVersion: '1.2.3'\n * });\n * ```\n */\nexport function warn(message: ParameterizedString, attributes?: Log['attributes']): void {\n  captureLog('warn', message, attributes);\n}\n\n/**\n * @summary Capture a log with the `error` level. Requires `_experiments.enableLogs` to be enabled.\n *\n * @param message - The message to log.\n * @param attributes - Arbitrary structured data that stores information about the log - e.g., { error: 'NetworkError', url: '/api/data' }.\n *\n * @example\n *\n * ```\n * Sentry.logger.error('Failed to load user data', {\n *   error: 'NetworkError',\n *   url: '/api/users/123',\n *   statusCode: 500,\n *   retryCount: 3\n * });\n * ```\n *\n * @example With template strings\n *\n * ```\n * Sentry.logger.error(Sentry.logger.fmt`Payment processing failed for order ${orderId}`, {\n *   error: 'InsufficientFunds',\n *   amount: 100.00,\n *   currency: 'USD',\n *   userId: 'user-456'\n * });\n * ```\n */\nexport function error(message: ParameterizedString, attributes?: Log['attributes']): void {\n  captureLog('error', message, attributes);\n}\n\n/**\n * @summary Capture a log with the `fatal` level. Requires `_experiments.enableLogs` to be enabled.\n *\n * @param message - The message to log.\n * @param attributes - Arbitrary structured data that stores information about the log - e.g., { appState: 'corrupted', sessionId: 'abc-123' }.\n *\n * @example\n *\n * ```\n * Sentry.logger.fatal('Application state corrupted', {\n *   lastKnownState: 'authenticated',\n *   sessionId: 'session-123',\n *   timestamp: Date.now(),\n *   recoveryAttempted: true\n * });\n * ```\n *\n * @example With template strings\n *\n * ```\n * Sentry.logger.fatal(Sentry.logger.fmt`Critical system failure in ${service}`, {\n *   service: 'payment-processor',\n *   errorCode: 'CRITICAL_FAILURE',\n *   affectedUsers: 150,\n *   timestamp: Date.now()\n * });\n * ```\n */\nexport function fatal(message: ParameterizedString, attributes?: Log['attributes']): void {\n  captureLog('fatal', message, attributes);\n}\n\nexport { fmt } from '@sentry/core';\n","\"use strict\";\n\nfunction _interop_require_default(obj) {\n    return obj && obj.__esModule ? obj : { default: obj };\n}\nexports._ = _interop_require_default;\n","// Note: This file is JS because it's used by the taskfile-swc.js file, which is JS.\n// Keep file changes in sync with the corresponding `.d.ts` files.\n/**\n * These are the browser versions that support all of the following:\n * static import: https://caniuse.com/es6-module\n * dynamic import: https://caniuse.com/es6-module-dynamic-import\n * import.meta: https://caniuse.com/mdn-javascript_operators_import_meta\n */\nconst MODERN_BROWSERSLIST_TARGET = [\n  'chrome 64',\n  'edge 79',\n  'firefox 67',\n  'opera 51',\n  'safari 12',\n]\n\nmodule.exports = MODERN_BROWSERSLIST_TARGET\n","import MODERN_BROWSERSLIST_TARGET from './modern-browserslist-target'\n\nexport { MODERN_BROWSERSLIST_TARGET }\n\nexport type ValueOf<T> = Required<T>[keyof T]\n\nexport const COMPILER_NAMES = {\n  client: 'client',\n  server: 'server',\n  edgeServer: 'edge-server',\n} as const\n\nexport type CompilerNameValues = ValueOf<typeof COMPILER_NAMES>\n\nexport const COMPILER_INDEXES: {\n  [compilerKey in CompilerNameValues]: number\n} = {\n  [COMPILER_NAMES.client]: 0,\n  [COMPILER_NAMES.server]: 1,\n  [COMPILER_NAMES.edgeServer]: 2,\n} as const\n\nexport const UNDERSCORE_NOT_FOUND_ROUTE = '/_not-found'\nexport const UNDERSCORE_NOT_FOUND_ROUTE_ENTRY = `${UNDERSCORE_NOT_FOUND_ROUTE}/page`\nexport const PHASE_EXPORT = 'phase-export'\nexport const PHASE_PRODUCTION_BUILD = 'phase-production-build'\nexport const PHASE_PRODUCTION_SERVER = 'phase-production-server'\nexport const PHASE_DEVELOPMENT_SERVER = 'phase-development-server'\nexport const PHASE_TEST = 'phase-test'\nexport const PHASE_INFO = 'phase-info'\nexport const PAGES_MANIFEST = 'pages-manifest.json'\nexport const WEBPACK_STATS = 'webpack-stats.json'\nexport const APP_PATHS_MANIFEST = 'app-paths-manifest.json'\nexport const APP_PATH_ROUTES_MANIFEST = 'app-path-routes-manifest.json'\nexport const BUILD_MANIFEST = 'build-manifest.json'\nexport const APP_BUILD_MANIFEST = 'app-build-manifest.json'\nexport const FUNCTIONS_CONFIG_MANIFEST = 'functions-config-manifest.json'\nexport const SUBRESOURCE_INTEGRITY_MANIFEST = 'subresource-integrity-manifest'\nexport const NEXT_FONT_MANIFEST = 'next-font-manifest'\nexport const EXPORT_MARKER = 'export-marker.json'\nexport const EXPORT_DETAIL = 'export-detail.json'\nexport const PRERENDER_MANIFEST = 'prerender-manifest.json'\nexport const ROUTES_MANIFEST = 'routes-manifest.json'\nexport const IMAGES_MANIFEST = 'images-manifest.json'\nexport const SERVER_FILES_MANIFEST = 'required-server-files.json'\nexport const DEV_CLIENT_PAGES_MANIFEST = '_devPagesManifest.json'\nexport const MIDDLEWARE_MANIFEST = 'middleware-manifest.json'\nexport const TURBOPACK_CLIENT_MIDDLEWARE_MANIFEST =\n  '_clientMiddlewareManifest.json'\nexport const DEV_CLIENT_MIDDLEWARE_MANIFEST = '_devMiddlewareManifest.json'\nexport const REACT_LOADABLE_MANIFEST = 'react-loadable-manifest.json'\nexport const SERVER_DIRECTORY = 'server'\nexport const CONFIG_FILES = [\n  'next.config.js',\n  'next.config.mjs',\n  'next.config.ts',\n]\nexport const BUILD_ID_FILE = 'BUILD_ID'\nexport const BLOCKED_PAGES = ['/_document', '/_app', '/_error']\nexport const CLIENT_PUBLIC_FILES_PATH = 'public'\nexport const CLIENT_STATIC_FILES_PATH = 'static'\nexport const STRING_LITERAL_DROP_BUNDLE = '__NEXT_DROP_CLIENT_FILE__'\nexport const NEXT_BUILTIN_DOCUMENT = '__NEXT_BUILTIN_DOCUMENT__'\nexport const BARREL_OPTIMIZATION_PREFIX = '__barrel_optimize__'\n\n// server/[entry]/page_client-reference-manifest.js\nexport const CLIENT_REFERENCE_MANIFEST = 'client-reference-manifest'\n// server/server-reference-manifest\nexport const SERVER_REFERENCE_MANIFEST = 'server-reference-manifest'\n// server/middleware-build-manifest.js\nexport const MIDDLEWARE_BUILD_MANIFEST = 'middleware-build-manifest'\n// server/middleware-react-loadable-manifest.js\nexport const MIDDLEWARE_REACT_LOADABLE_MANIFEST =\n  'middleware-react-loadable-manifest'\n// server/interception-route-rewrite-manifest.js\nexport const INTERCEPTION_ROUTE_REWRITE_MANIFEST =\n  'interception-route-rewrite-manifest'\n// server/dynamic-css-manifest.js\nexport const DYNAMIC_CSS_MANIFEST = 'dynamic-css-manifest'\n\n// static/runtime/main.js\nexport const CLIENT_STATIC_FILES_RUNTIME_MAIN = `main`\nexport const CLIENT_STATIC_FILES_RUNTIME_MAIN_APP = `${CLIENT_STATIC_FILES_RUNTIME_MAIN}-app`\n// next internal client components chunk for layouts\nexport const APP_CLIENT_INTERNALS = 'app-pages-internals'\n// static/runtime/react-refresh.js\nexport const CLIENT_STATIC_FILES_RUNTIME_REACT_REFRESH = `react-refresh`\n// static/runtime/amp.js\nexport const CLIENT_STATIC_FILES_RUNTIME_AMP = `amp`\n// static/runtime/webpack.js\nexport const CLIENT_STATIC_FILES_RUNTIME_WEBPACK = `webpack`\n// static/runtime/polyfills.js\nexport const CLIENT_STATIC_FILES_RUNTIME_POLYFILLS = 'polyfills'\nexport const CLIENT_STATIC_FILES_RUNTIME_POLYFILLS_SYMBOL = Symbol(\n  CLIENT_STATIC_FILES_RUNTIME_POLYFILLS\n)\nexport const DEFAULT_RUNTIME_WEBPACK = 'webpack-runtime'\nexport const EDGE_RUNTIME_WEBPACK = 'edge-runtime-webpack'\nexport const STATIC_PROPS_ID = '__N_SSG'\nexport const SERVER_PROPS_ID = '__N_SSP'\nexport const DEFAULT_SERIF_FONT = {\n  name: 'Times New Roman',\n  xAvgCharWidth: 821,\n  azAvgWidth: 854.3953488372093,\n  unitsPerEm: 2048,\n}\nexport const DEFAULT_SANS_SERIF_FONT = {\n  name: 'Arial',\n  xAvgCharWidth: 904,\n  azAvgWidth: 934.5116279069767,\n  unitsPerEm: 2048,\n}\nexport const STATIC_STATUS_PAGES = ['/500']\nexport const TRACE_OUTPUT_VERSION = 1\n// in `MB`\nexport const TURBO_TRACE_DEFAULT_MEMORY_LIMIT = 6000\n\nexport const RSC_MODULE_TYPES = {\n  client: 'client',\n  server: 'server',\n} as const\n\n// comparing\n// https://nextjs.org/docs/api-reference/edge-runtime\n// with\n// https://nodejs.org/docs/latest/api/globals.html\nexport const EDGE_UNSUPPORTED_NODE_APIS = [\n  'clearImmediate',\n  'setImmediate',\n  'BroadcastChannel',\n  'ByteLengthQueuingStrategy',\n  'CompressionStream',\n  'CountQueuingStrategy',\n  'DecompressionStream',\n  'DomException',\n  'MessageChannel',\n  'MessageEvent',\n  'MessagePort',\n  'ReadableByteStreamController',\n  'ReadableStreamBYOBRequest',\n  'ReadableStreamDefaultController',\n  'TransformStreamDefaultController',\n  'WritableStreamDefaultController',\n]\n\nexport const SYSTEM_ENTRYPOINTS = new Set<string>([\n  CLIENT_STATIC_FILES_RUNTIME_MAIN,\n  CLIENT_STATIC_FILES_RUNTIME_REACT_REFRESH,\n  CLIENT_STATIC_FILES_RUNTIME_AMP,\n  CLIENT_STATIC_FILES_RUNTIME_MAIN_APP,\n])\n","module.exports = require('./dist/shared/lib/constants')\n","import { PHASE_PRODUCTION_BUILD } from 'next/constants';\n\n/**\n * Decide if the currently running process is part of the build phase or happening at runtime.\n */\nexport function isBuild(): boolean {\n  return process.env.NEXT_PHASE === PHASE_PRODUCTION_BUILD;\n}\n","// Based on https://github.com/sindresorhus/escape-string-regexp but with modifications to:\n//   a) reduce the size by skipping the runtime type - checking\n//   b) ensure it gets down - compiled for old versions of Node(the published package only supports Node 14+).\n//\n// MIT License\n//\n// Copyright (c) Sindre Sorhus <sindresorhus@gmail.com> (https://sindresorhus.com)\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated\n// documentation files(the \"Software\"), to deal in the Software without restriction, including without limitation\n// the rights to use, copy, modify, merge, publish, distribute, sublicense, and / or sell copies of the Software, and\n// to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all copies or substantial portions of\n// the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO\n// THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n// IN THE SOFTWARE.\n\n/**\n * Given a string, escape characters which have meaning in the regex grammar, such that the result is safe to feed to\n * `new RegExp()`.\n *\n * @param regexString The string to escape\n * @returns An version of the string with all special regex characters escaped\n */\nexport function escapeStringForRegex(regexString: string): string {\n  // escape the hyphen separately so we can also replace it with a unicode literal hyphen, to avoid the problems\n  // discussed in https://github.com/sindresorhus/escape-string-regexp/issues/20.\n  return regexString.replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&').replace(/-/g, '\\\\x2d');\n}\n","// Slightly modified (no IE8 support, ES6) and transcribed to TypeScript\n// https://github.com/calvinmetcalf/rollup-plugin-node-builtins/blob/63ab8aacd013767445ca299e468d9a60a95328d7/src/es6/path.js\n//\n// Copyright Joyent, Inc.and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n/** JSDoc */\nfunction normalizeArray(parts: string[], allowAboveRoot?: boolean): string[] {\n  // if the path tries to go above the root, `up` ends up > 0\n  let up = 0;\n  for (let i = parts.length - 1; i >= 0; i--) {\n    const last = parts[i];\n    if (last === '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1);\n      up++;\n    } else if (up) {\n      parts.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (allowAboveRoot) {\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n\n  return parts;\n}\n\n// Split a filename into [root, dir, basename, ext], unix version\n// 'root' is just a slash, or nothing.\nconst splitPathRe = /^(\\S+:\\\\|\\/?)([\\s\\S]*?)((?:\\.{1,2}|[^/\\\\]+?|)(\\.[^./\\\\]*|))(?:[/\\\\]*)$/;\n/** JSDoc */\nfunction splitPath(filename: string): string[] {\n  // Truncate files names greater than 1024 characters to avoid regex dos\n  // https://github.com/getsentry/sentry-javascript/pull/8737#discussion_r1285719172\n  const truncated = filename.length > 1024 ? `<truncated>${filename.slice(-1024)}` : filename;\n  const parts = splitPathRe.exec(truncated);\n  return parts ? parts.slice(1) : [];\n}\n\n// path.resolve([from ...], to)\n// posix version\n/** JSDoc */\nexport function resolve(...args: string[]): string {\n  let resolvedPath = '';\n  let resolvedAbsolute = false;\n\n  for (let i = args.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    const path = i >= 0 ? args[i] : '/';\n\n    // Skip empty entries\n    if (!path) {\n      continue;\n    }\n\n    resolvedPath = `${path}/${resolvedPath}`;\n    resolvedAbsolute = path.charAt(0) === '/';\n  }\n\n  // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n\n  // Normalize the path\n  resolvedPath = normalizeArray(\n    resolvedPath.split('/').filter(p => !!p),\n    !resolvedAbsolute,\n  ).join('/');\n\n  return (resolvedAbsolute ? '/' : '') + resolvedPath || '.';\n}\n\n/** JSDoc */\nfunction trim(arr: string[]): string[] {\n  let start = 0;\n  for (; start < arr.length; start++) {\n    if (arr[start] !== '') {\n      break;\n    }\n  }\n\n  let end = arr.length - 1;\n  for (; end >= 0; end--) {\n    if (arr[end] !== '') {\n      break;\n    }\n  }\n\n  if (start > end) {\n    return [];\n  }\n  return arr.slice(start, end - start + 1);\n}\n\n// path.relative(from, to)\n// posix version\n/** JSDoc */\nexport function relative(from: string, to: string): string {\n  /* eslint-disable no-param-reassign */\n  from = resolve(from).slice(1);\n  to = resolve(to).slice(1);\n  /* eslint-enable no-param-reassign */\n\n  const fromParts = trim(from.split('/'));\n  const toParts = trim(to.split('/'));\n\n  const length = Math.min(fromParts.length, toParts.length);\n  let samePartsLength = length;\n  for (let i = 0; i < length; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      samePartsLength = i;\n      break;\n    }\n  }\n\n  let outputParts = [];\n  for (let i = samePartsLength; i < fromParts.length; i++) {\n    outputParts.push('..');\n  }\n\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\n\n  return outputParts.join('/');\n}\n\n// path.normalize(path)\n// posix version\n/** JSDoc */\nexport function normalizePath(path: string): string {\n  const isPathAbsolute = isAbsolute(path);\n  const trailingSlash = path.slice(-1) === '/';\n\n  // Normalize the path\n  let normalizedPath = normalizeArray(\n    path.split('/').filter(p => !!p),\n    !isPathAbsolute,\n  ).join('/');\n\n  if (!normalizedPath && !isPathAbsolute) {\n    normalizedPath = '.';\n  }\n  if (normalizedPath && trailingSlash) {\n    normalizedPath += '/';\n  }\n\n  return (isPathAbsolute ? '/' : '') + normalizedPath;\n}\n\n// posix version\n/** JSDoc */\nexport function isAbsolute(path: string): boolean {\n  return path.charAt(0) === '/';\n}\n\n// posix version\n/** JSDoc */\nexport function join(...args: string[]): string {\n  return normalizePath(args.join('/'));\n}\n\n/** JSDoc */\nexport function dirname(path: string): string {\n  const result = splitPath(path);\n  const root = result[0] || '';\n  let dir = result[1];\n\n  if (!root && !dir) {\n    // No dirname whatsoever\n    return '.';\n  }\n\n  if (dir) {\n    // It has a dirname, strip trailing slash\n    dir = dir.slice(0, dir.length - 1);\n  }\n\n  return root + dir;\n}\n\n/** JSDoc */\nexport function basename(path: string, ext?: string): string {\n  let f = splitPath(path)[2] || '';\n  if (ext && f.slice(ext.length * -1) === ext) {\n    f = f.slice(0, f.length - ext.length);\n  }\n  return f;\n}\n","import { defineIntegration } from '../integration';\nimport type { Event } from '../types-hoist/event';\nimport type { StackFrame } from '../types-hoist/stackframe';\nimport type { Stacktrace } from '../types-hoist/stacktrace';\nimport { basename, relative } from '../utils-hoist/path';\nimport { GLOBAL_OBJ } from '../utils-hoist/worldwide';\n\ntype StackFrameIteratee = (frame: StackFrame) => StackFrame;\n\nconst INTEGRATION_NAME = 'RewriteFrames';\n\ninterface RewriteFramesOptions {\n  /**\n   * Root path (the beginning of the path) that will be stripped from the frames' filename.\n   *\n   * This option has slightly different behaviour in the browser and on servers:\n   * - In the browser, the value you provide in `root` will be stripped from the beginning stack frames' paths (if the path started with the value).\n   * - On the server, the root value will only replace the beginning of stack frame filepaths, when the path is absolute. If no `root` value is provided and the path is absolute, the frame will be reduced to only the filename and the provided `prefix` option.\n   *\n   * Browser example:\n   * - Original frame: `'http://example.com/my/path/static/asset.js'`\n   * - `root: 'http://example.com/my/path'`\n   * - `assetPrefix: 'app://'`\n   * - Resulting frame: `'app:///static/asset.js'`\n   *\n   * Server example:\n   * - Original frame: `'/User/local/my/path/static/asset.js'`\n   * - `root: '/User/local/my/path'`\n   * - `assetPrefix: 'app://'`\n   * - Resulting frame: `'app:///static/asset.js'`\n   */\n  root?: string;\n\n  /**\n   * A custom prefix that stack frames will be prepended with.\n   *\n   * Default: `'app://'`\n   *\n   * This option has slightly different behaviour in the browser and on servers:\n   * - In the browser, the value you provide in `prefix` will prefix the resulting filename when the value you provided in `root` was applied. Effectively replacing whatever `root` matched in the beginning of the frame with `prefix`.\n   * - On the server, the prefix is applied to all stackframes with absolute paths. On Windows, the drive identifier (e.g. \"C://\") is replaced with the prefix.\n   */\n  prefix?: string;\n\n  /**\n   * Defines an iterator that is used to iterate through all of the stack frames for modification before being sent to Sentry.\n   * Setting this option will effectively disable both the `root` and the `prefix` options.\n   */\n  iteratee?: StackFrameIteratee;\n}\n\n/**\n * Rewrite event frames paths.\n */\nexport const rewriteFramesIntegration = defineIntegration((options: RewriteFramesOptions = {}) => {\n  const root = options.root;\n  const prefix = options.prefix || 'app:///';\n\n  const isBrowser = 'window' in GLOBAL_OBJ && !!GLOBAL_OBJ.window;\n\n  const iteratee: StackFrameIteratee = options.iteratee || generateIteratee({ isBrowser, root, prefix });\n\n  /** Process an exception event. */\n  function _processExceptionsEvent(event: Event): Event {\n    try {\n      return {\n        ...event,\n        exception: {\n          ...event.exception,\n          // The check for this is performed inside `process` call itself, safe to skip here\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          values: event.exception!.values!.map(value => ({\n            ...value,\n            ...(value.stacktrace && { stacktrace: _processStacktrace(value.stacktrace) }),\n          })),\n        },\n      };\n    } catch (_oO) {\n      return event;\n    }\n  }\n\n  /** Process a stack trace. */\n  function _processStacktrace(stacktrace?: Stacktrace): Stacktrace {\n    return {\n      ...stacktrace,\n      frames: stacktrace?.frames && stacktrace.frames.map(f => iteratee(f)),\n    };\n  }\n\n  return {\n    name: INTEGRATION_NAME,\n    processEvent(originalEvent) {\n      let processedEvent = originalEvent;\n\n      if (originalEvent.exception && Array.isArray(originalEvent.exception.values)) {\n        processedEvent = _processExceptionsEvent(processedEvent);\n      }\n\n      return processedEvent;\n    },\n  };\n});\n\n/**\n * Exported only for tests.\n */\nexport function generateIteratee({\n  isBrowser,\n  root,\n  prefix,\n}: {\n  isBrowser: boolean;\n  root?: string;\n  prefix: string;\n}): StackFrameIteratee {\n  return (frame: StackFrame) => {\n    if (!frame.filename) {\n      return frame;\n    }\n\n    // Determine if this is a Windows frame by checking for a Windows-style prefix such as `C:\\`\n    const isWindowsFrame =\n      /^[a-zA-Z]:\\\\/.test(frame.filename) ||\n      // or the presence of a backslash without a forward slash (which are not allowed on Windows)\n      (frame.filename.includes('\\\\') && !frame.filename.includes('/'));\n\n    // Check if the frame filename begins with `/`\n    const startsWithSlash = /^\\//.test(frame.filename);\n\n    if (isBrowser) {\n      if (root) {\n        const oldFilename = frame.filename;\n        if (oldFilename.indexOf(root) === 0) {\n          frame.filename = oldFilename.replace(root, prefix);\n        }\n      }\n    } else {\n      if (isWindowsFrame || startsWithSlash) {\n        const filename = isWindowsFrame\n          ? frame.filename\n              .replace(/^[a-zA-Z]:/, '') // remove Windows-style prefix\n              .replace(/\\\\/g, '/') // replace all `\\\\` instances with `/`\n          : frame.filename;\n        const base = root ? relative(root, filename) : basename(filename);\n        frame.filename = `${prefix}${base}`;\n      }\n    }\n\n    return frame;\n  };\n}\n","import { defineIntegration, escapeStringForRegex, rewriteFramesIntegration } from '@sentry/core';\n\nexport const distDirRewriteFramesIntegration = defineIntegration(({ distDirName }: { distDirName: string }) => {\n  const distDirAbsPath = distDirName.replace(/(\\/|\\\\)$/, ''); // We strip trailing slashes because \"app:///_next\" also doesn't have one\n\n  // Normally we would use `path.resolve` to obtain the absolute path we will strip from the stack frame to align with\n  // the uploaded artifacts, however we don't have access to that API in edge so we need to be a bit more lax.\n  // eslint-disable-next-line @sentry-internal/sdk/no-regexp-constructor -- user input is escaped\n  const SOURCEMAP_FILENAME_REGEX = new RegExp(`.*${escapeStringForRegex(distDirAbsPath)}`);\n\n  const rewriteFramesIntegrationInstance = rewriteFramesIntegration({\n    iteratee: frame => {\n      frame.filename = frame.filename?.replace(SOURCEMAP_FILENAME_REGEX, 'app:///_next');\n      return frame;\n    },\n  });\n\n  return {\n    ...rewriteFramesIntegrationInstance,\n    name: 'DistDirRewriteFrames',\n  };\n});\n","import {\n  applySdkMetadata,\n  getGlobalScope,\n  getRootSpan,\n  GLOBAL_OBJ,\n  registerSpanErrorInstrumentation,\n  SEMANTIC_ATTRIBUTE_SENTRY_OP,\n  SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN,\n  SEMANTIC_ATTRIBUTE_SENTRY_SOURCE,\n  spanToJSON,\n  stripUrlQueryAndFragment,\n  vercelWaitUntil,\n} from '@sentry/core';\nimport type { VercelEdgeOptions } from '@sentry/vercel-edge';\nimport { getDefaultIntegrations, init as vercelEdgeInit } from '@sentry/vercel-edge';\nimport { isBuild } from '../common/utils/isBuild';\nimport { flushSafelyWithTimeout } from '../common/utils/responseEnd';\nimport { distDirRewriteFramesIntegration } from './distDirRewriteFramesIntegration';\n\nexport * from '@sentry/vercel-edge';\nexport * from '../common';\nexport { captureUnderscoreErrorException } from '../common/pages-router-instrumentation/_error';\nexport { wrapApiHandlerWithSentry } from './wrapApiHandlerWithSentry';\n\nexport type EdgeOptions = VercelEdgeOptions;\n\nconst globalWithInjectedValues = GLOBAL_OBJ as typeof GLOBAL_OBJ & {\n  _sentryRewriteFramesDistDir?: string;\n  _sentryRelease?: string;\n};\n\n/** Inits the Sentry NextJS SDK on the Edge Runtime. */\nexport function init(options: VercelEdgeOptions = {}): void {\n  registerSpanErrorInstrumentation();\n\n  if (isBuild()) {\n    return;\n  }\n\n  const customDefaultIntegrations = getDefaultIntegrations(options);\n\n  // This value is injected at build time, based on the output directory specified in the build config. Though a default\n  // is set there, we set it here as well, just in case something has gone wrong with the injection.\n  const distDirName = process.env._sentryRewriteFramesDistDir || globalWithInjectedValues._sentryRewriteFramesDistDir;\n\n  if (distDirName) {\n    customDefaultIntegrations.push(distDirRewriteFramesIntegration({ distDirName }));\n  }\n\n  const opts = {\n    defaultIntegrations: customDefaultIntegrations,\n    release: process.env._sentryRelease || globalWithInjectedValues._sentryRelease,\n    ...options,\n  };\n\n  applySdkMetadata(opts, 'nextjs', ['nextjs', 'vercel-edge']);\n\n  const client = vercelEdgeInit(opts);\n\n  client?.on('spanStart', span => {\n    const spanAttributes = spanToJSON(span).data;\n\n    // Mark all spans generated by Next.js as 'auto'\n    if (spanAttributes?.['next.span_type'] !== undefined) {\n      span.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, 'auto');\n    }\n\n    // Make sure middleware spans get the right op\n    if (spanAttributes?.['next.span_type'] === 'Middleware.execute') {\n      span.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_OP, 'http.server.middleware');\n      span.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_SOURCE, 'url');\n    }\n  });\n\n  // Use the preprocessEvent hook instead of an event processor, so that the users event processors receive the most\n  // up-to-date value, but also so that the logic that detects changes to the transaction names to set the source to\n  // \"custom\", doesn't trigger.\n  client?.on('preprocessEvent', event => {\n    // The otel auto inference will clobber the transaction name because the span has an http.target\n    if (\n      event.type === 'transaction' &&\n      event.contexts?.trace?.data?.['next.span_type'] === 'Middleware.execute' &&\n      event.contexts?.trace?.data?.['next.span_name']\n    ) {\n      if (event.transaction) {\n        event.transaction = stripUrlQueryAndFragment(event.contexts.trace.data['next.span_name']);\n      }\n    }\n  });\n\n  client?.on('spanEnd', span => {\n    if (span === getRootSpan(span)) {\n      vercelWaitUntil(flushSafelyWithTimeout());\n    }\n  });\n\n  try {\n    // @ts-expect-error `process.turbopack` is a magic string that will be replaced by Next.js\n    if (process.turbopack) {\n      getGlobalScope().setTag('turbopack', true);\n    }\n  } catch {\n    // Noop\n    // The statement above can throw because process is not defined on the client\n  }\n}\n\n/**\n * Just a passthrough in case this is imported from the client.\n */\nexport function withSentryConfig<T>(exportedUserNextConfig: T): T {\n  return exportedUserNextConfig;\n}\n","// This file configures the initialization of Sentry for edge features (middleware, edge routes, and so on).\n// The config you add here will be used whenever one of the edge features is loaded.\n// Note that this config is unrelated to the Vercel Edge Runtime and is also required when running locally.\n// https://docs.sentry.io/platforms/javascript/guides/nextjs/\n\nimport * as Sentry from \"@sentry/nextjs\";\n\nSentry.init({\n  dsn: \"https://cc6673097b7fe8856211b5d531bab8d9@o4509397176745984.ingest.us.sentry.io/4509453372817408\",\n\n  // Define how likely traces are sampled. Adjust this value in production, or use tracesSampler for greater control.\n  tracesSampleRate: 1,\n\n  // Setting this option to true will print useful information to the console while you're setting up Sentry.\n  debug: false,\n});\n"],"names":["TMP_TELEMETRY_SDK_NAME","TMP_TELEMETRY_SDK_LANGUAGE","TMP_TELEMETRY_SDK_VERSION","SEMRESATTRS_TELEMETRY_SDK_NAME","SEMRESATTRS_TELEMETRY_SDK_LANGUAGE","SEMRESATTRS_TELEMETRY_SDK_VERSION","suppressTracing","__read","this","__values","VERSION","performance","trace","__spreadArray","__assign","DEBUG_BUILD","MODERN_BROWSERSLIST_TARGET","module","exports","APP_BUILD_MANIFEST","APP_CLIENT_INTERNALS","APP_PATHS_MANIFEST","APP_PATH_ROUTES_MANIFEST","BARREL_OPTIMIZATION_PREFIX","BLOCKED_PAGES","BUILD_ID_FILE","BUILD_MANIFEST","CLIENT_PUBLIC_FILES_PATH","CLIENT_REFERENCE_MANIFEST","CLIENT_STATIC_FILES_PATH","CLIENT_STATIC_FILES_RUNTIME_AMP","CLIENT_STATIC_FILES_RUNTIME_MAIN","CLIENT_STATIC_FILES_RUNTIME_MAIN_APP","CLIENT_STATIC_FILES_RUNTIME_POLYFILLS","CLIENT_STATIC_FILES_RUNTIME_POLYFILLS_SYMBOL","CLIENT_STATIC_FILES_RUNTIME_REACT_REFRESH","CLIENT_STATIC_FILES_RUNTIME_WEBPACK","COMPILER_INDEXES","COMPILER_NAMES","CONFIG_FILES","DEFAULT_RUNTIME_WEBPACK","DEFAULT_SANS_SERIF_FONT","DEFAULT_SERIF_FONT","DEV_CLIENT_MIDDLEWARE_MANIFEST","DEV_CLIENT_PAGES_MANIFEST","DYNAMIC_CSS_MANIFEST","EDGE_RUNTIME_WEBPACK","EDGE_UNSUPPORTED_NODE_APIS","EXPORT_DETAIL","EXPORT_MARKER","FUNCTIONS_CONFIG_MANIFEST","IMAGES_MANIFEST","INTERCEPTION_ROUTE_REWRITE_MANIFEST","MIDDLEWARE_BUILD_MANIFEST","MIDDLEWARE_MANIFEST","MIDDLEWARE_REACT_LOADABLE_MANIFEST","NEXT_BUILTIN_DOCUMENT","NEXT_FONT_MANIFEST","PAGES_MANIFEST","PHASE_DEVELOPMENT_SERVER","PHASE_EXPORT","PHASE_INFO","PHASE_PRODUCTION_BUILD","PHASE_PRODUCTION_SERVER","PHASE_TEST","PRERENDER_MANIFEST","REACT_LOADABLE_MANIFEST","ROUTES_MANIFEST","RSC_MODULE_TYPES","SERVER_DIRECTORY","SERVER_FILES_MANIFEST","SERVER_PROPS_ID","SERVER_REFERENCE_MANIFEST","STATIC_PROPS_ID","STATIC_STATUS_PAGES","STRING_LITERAL_DROP_BUNDLE","SUBRESOURCE_INTEGRITY_MANIFEST","SYSTEM_ENTRYPOINTS","TRACE_OUTPUT_VERSION","TURBOPACK_CLIENT_MIDDLEWARE_MANIFEST","TURBO_TRACE_DEFAULT_MEMORY_LIMIT","UNDERSCORE_NOT_FOUND_ROUTE","UNDERSCORE_NOT_FOUND_ROUTE_ENTRY","WEBPACK_STATS","client","server","edgeServer","Symbol","name","xAvgCharWidth","azAvgWidth","unitsPerEm","Set","vercelEdgeInit"],"mappings":"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","ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119]}