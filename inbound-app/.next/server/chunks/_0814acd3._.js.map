{"version":3,"sources":["turbopack:///[project]/app/api/v2/domains/[id]/route.ts","turbopack:///[project]/node_modules/next/dist/src/build/templates/app-route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server'\nimport { validateRequest } from '../../helper/main'\nimport { db } from '@/lib/db'\nimport { emailDomains, emailAddresses, endpoints, domainDnsRecords } from '@/lib/db/schema'\nimport { eq, and, count } from 'drizzle-orm'\nimport { AWSSESReceiptRuleManager } from '@/lib/aws-ses/aws-ses-rules'\nimport { verifyDnsRecords } from '@/lib/domains-and-dns/dns'\nimport { SESClient, GetIdentityVerificationAttributesCommand } from '@aws-sdk/client-ses'\n\n// AWS SES Client setup\nconst awsRegion = process.env.AWS_REGION || 'us-east-2'\nconst awsAccessKeyId = process.env.AWS_ACCESS_KEY_ID\nconst awsSecretAccessKey = process.env.AWS_SECRET_ACCESS_KEY\n\nlet sesClient: SESClient | null = null\n\nif (awsAccessKeyId && awsSecretAccessKey) {\n  sesClient = new SESClient({\n    region: awsRegion,\n    credentials: {\n      accessKeyId: awsAccessKeyId,\n      secretAccessKey: awsSecretAccessKey,\n    }\n  })\n}\n\n/**\n * GET /api/v2/domains/{id}\n * Gets detailed information about a specific domain\n * Supports both session-based auth and API key auth\n * Has tests? ‚è≥\n * Has logging? ‚úÖ\n * Has types? ‚úÖ\n */\n\n// GET /api/v2/domains/{id} types\nexport interface GetDomainByIdRequest {\n    id: string // from params\n}\n\nexport interface DomainStats {\n    totalEmailAddresses: number\n    activeEmailAddresses: number\n    emailsLast24h: number\n    emailsLast7d: number\n    emailsLast30d: number\n}\n\nexport interface GetDomainByIdResponse {\n    id: string\n    domain: string\n    status: string\n    canReceiveEmails: boolean\n    hasMxRecords: boolean\n    domainProvider: string | null\n    providerConfidence: string | null\n    lastDnsCheck: Date | null\n    lastSesCheck: Date | null\n    isCatchAllEnabled: boolean\n    catchAllEndpointId: string | null\n    createdAt: Date\n    updatedAt: Date\n    userId: string\n    stats: DomainStats\n    catchAllEndpoint?: {\n        id: string\n        name: string\n        type: string\n        isActive: boolean\n    } | null\n    // Additional fields when check=true\n    verificationCheck?: {\n        dnsRecords?: Array<{\n            type: string\n            name: string\n            value: string\n            isVerified: boolean\n            error?: string\n        }>\n        sesStatus?: string\n        isFullyVerified?: boolean\n        lastChecked?: Date\n    }\n}\n\nexport async function GET(\n    request: NextRequest,\n    { params }: { params: Promise<{ id: string }> }\n) {\n    const { id } = await params\n    console.log('üåê GET /api/v2/domains/{id} - Starting request for domain:', id)\n    \n    try {\n        console.log('üîê Validating request authentication')\n        const { userId, error } = await validateRequest(request)\n        if (!userId) {\n            console.log('‚ùå Authentication failed:', error)\n            return NextResponse.json(\n                { error: error },\n                { status: 401 }\n            )\n        }\n        console.log('‚úÖ Authentication successful for userId:', userId)\n\n        // Extract query parameters\n        const { searchParams } = new URL(request.url)\n        const check = searchParams.get('check') === 'true'\n        \n        if (check) {\n            console.log('üîç Check parameter detected - will perform verification check')\n        }\n\n        // Get domain with user verification\n        console.log('üîç Querying domain from database')\n        const domainResult = await db\n            .select()\n            .from(emailDomains)\n            .where(and(\n                eq(emailDomains.id, id),\n                eq(emailDomains.userId, userId)\n            ))\n            .limit(1)\n\n        if (!domainResult[0]) {\n            console.log('‚ùå Domain not found for user:', userId, 'domain:', id)\n            return NextResponse.json(\n                { error: 'Domain not found' },\n                { status: 404 }\n            )\n        }\n\n        const domain = domainResult[0]\n        console.log('‚úÖ Found domain:', domain.domain, 'status:', domain.status)\n\n        // Get domain statistics\n        console.log('üìä Calculating domain statistics')\n        const emailCountResult = await db\n            .select({ count: count() })\n            .from(emailAddresses)\n            .where(eq(emailAddresses.domainId, id))\n        \n        const emailCount = emailCountResult[0]?.count || 0\n\n        const activeEmailCountResult = await db\n            .select({ count: count() })\n            .from(emailAddresses)\n            .where(and(\n                eq(emailAddresses.domainId, id),\n                eq(emailAddresses.isActive, true)\n            ))\n        \n        const activeEmailCount = activeEmailCountResult[0]?.count || 0\n\n        // Get catch-all endpoint information\n        let catchAllEndpoint = null\n        if (domain.catchAllEndpointId) {\n            console.log('üîç Getting catch-all endpoint information')\n            const endpointResult = await db\n                .select({\n                    id: endpoints.id,\n                    name: endpoints.name,\n                    type: endpoints.type,\n                    isActive: endpoints.isActive\n                })\n                .from(endpoints)\n                .where(eq(endpoints.id, domain.catchAllEndpointId))\n                .limit(1)\n            \n            catchAllEndpoint = endpointResult[0] || null\n        }\n\n        // Calculate time-based email statistics (simplified for now)\n        const stats: DomainStats = {\n            totalEmailAddresses: emailCount,\n            activeEmailAddresses: activeEmailCount,\n            emailsLast24h: 0, // TODO: Implement actual email counting\n            emailsLast7d: 0,\n            emailsLast30d: 0\n        }\n\n        // Get recent emails (simplified for now)\n        const recentEmails: Array<{\n            id: string\n            from: string\n            to: string\n            subject: string\n            receivedAt: Date\n            status: string\n        }> = [] // TODO: Implement actual recent emails query\n\n        console.log('‚úÖ Successfully retrieved domain details')\n\n        // Prepare base response\n        let response: GetDomainByIdResponse = {\n            id: domain.id,\n            domain: domain.domain,\n            status: domain.status,\n            canReceiveEmails: domain.canReceiveEmails || false,\n            hasMxRecords: domain.hasMxRecords || false,\n            domainProvider: domain.domainProvider,\n            providerConfidence: domain.providerConfidence,\n            lastDnsCheck: domain.lastDnsCheck,\n            lastSesCheck: domain.lastSesCheck,\n            isCatchAllEnabled: domain.isCatchAllEnabled || false,\n            catchAllEndpointId: domain.catchAllEndpointId,\n            createdAt: domain.createdAt || new Date(),\n            updatedAt: domain.updatedAt || new Date(),\n            userId: domain.userId,\n            stats,\n            catchAllEndpoint: catchAllEndpoint ? {\n                ...catchAllEndpoint,\n                isActive: catchAllEndpoint.isActive || false\n            } : null\n        }\n\n        // If check=true, perform DNS and SES verification checks\n        if (check) {\n            console.log(`üîç Performing verification check for domain: ${domain.domain}`)\n            \n            try {\n                // Get DNS records from database\n                const dnsRecords = await db\n                    .select()\n                    .from(domainDnsRecords)\n                    .where(eq(domainDnsRecords.domainId, domain.id))\n\n                let verificationResults: Array<{\n                    type: string\n                    name: string\n                    value: string\n                    isVerified: boolean\n                    error?: string\n                }> = []\n\n                if (dnsRecords.length > 0) {\n                    // Verify DNS records\n                    console.log(`üîç Verifying ${dnsRecords.length} DNS records`)\n                    const results = await verifyDnsRecords(\n                        dnsRecords.map(record => ({\n                            type: record.recordType,\n                            name: record.name,\n                            value: record.value\n                        }))\n                    )\n\n                    verificationResults = results.map((result, index) => ({\n                        type: result.type,\n                        name: result.name,\n                        value: result.expectedValue,\n                        isVerified: result.isVerified,\n                        error: result.error\n                    }))\n\n                    // Update DNS record verification status in database\n                    await Promise.all(\n                        dnsRecords.map(async (record, index) => {\n                            const verificationResult = results[index]\n                            await db\n                                .update(domainDnsRecords)\n                                .set({\n                                    isVerified: verificationResult.isVerified,\n                                    lastChecked: new Date()\n                                })\n                                .where(eq(domainDnsRecords.id, record.id))\n                        })\n                    )\n                }\n\n                // Check SES verification status\n                let sesStatus = 'Unknown'\n                if (sesClient) {\n                    try {\n                        console.log(`üîç Checking SES verification status`)\n                        const getAttributesCommand = new GetIdentityVerificationAttributesCommand({\n                            Identities: [domain.domain]\n                        })\n                        const attributesResponse = await sesClient.send(getAttributesCommand)\n                        const attributes = attributesResponse.VerificationAttributes?.[domain.domain]\n                        sesStatus = attributes?.VerificationStatus || 'NotFound'\n                        \n                        // Update domain status based on SES verification\n                        if (sesStatus === 'Success' && domain.status !== 'verified') {\n                            await db\n                                .update(emailDomains)\n                                .set({\n                                    status: 'verified',\n                                    lastSesCheck: new Date(),\n                                    updatedAt: new Date()\n                                })\n                                .where(eq(emailDomains.id, domain.id))\n                            response.status = 'verified'\n                        } else if (sesStatus === 'Failed' && domain.status !== 'failed') {\n                            await db\n                                .update(emailDomains)\n                                .set({\n                                    status: 'failed',\n                                    lastSesCheck: new Date(),\n                                    updatedAt: new Date()\n                                })\n                                .where(eq(emailDomains.id, domain.id))\n                            response.status = 'failed'\n                        } else {\n                            // Just update last check time\n                            await db\n                                .update(emailDomains)\n                                .set({\n                                    lastSesCheck: new Date()\n                                })\n                                .where(eq(emailDomains.id, domain.id))\n                        }\n                    } catch (sesError) {\n                        console.error(`‚ùå SES verification check failed:`, sesError)\n                        sesStatus = 'Error'\n                    }\n                }\n\n                const allDnsVerified = verificationResults.length > 0 && \n                    verificationResults.every(r => r.isVerified)\n                const isFullyVerified = allDnsVerified && sesStatus === 'Success'\n\n                response.verificationCheck = {\n                    dnsRecords: verificationResults,\n                    sesStatus,\n                    isFullyVerified,\n                    lastChecked: new Date()\n                }\n\n                console.log(`‚úÖ Verification check complete for ${domain.domain}:`, {\n                    dnsVerified: allDnsVerified,\n                    sesStatus,\n                    isFullyVerified\n                })\n\n            } catch (checkError) {\n                console.error(`‚ùå Verification check failed for ${domain.domain}:`, checkError)\n                response.verificationCheck = {\n                    dnsRecords: [],\n                    sesStatus: 'Error',\n                    isFullyVerified: false,\n                    lastChecked: new Date()\n                }\n            }\n        }\n\n        return NextResponse.json(response)\n\n    } catch (error) {\n        console.error('‚ùå GET /api/v2/domains/{id} - Error:', error)\n        return NextResponse.json(\n            { \n                error: 'Failed to fetch domain details',\n                details: error instanceof Error ? error.message : 'Unknown error'\n            },\n            { status: 500 }\n        )\n    }\n}\n\n/**\n * PUT /api/v2/domains/{id}\n * Updates domain catch-all settings (enable/disable with endpoint configuration)\n * Supports both session-based auth and API key auth\n * Has tests? ‚è≥\n * Has logging? ‚úÖ\n * Has types? ‚úÖ\n */\n\n// PUT /api/v2/domains/{id} types\nexport interface PutDomainByIdRequest {\n    isCatchAllEnabled: boolean\n    catchAllEndpointId?: string | null\n}\n\nexport interface PutDomainByIdResponse {\n    id: string\n    domain: string\n    status: string\n    isCatchAllEnabled: boolean\n    catchAllEndpointId: string | null\n    catchAllEndpoint?: {\n        id: string\n        name: string\n        type: string\n        isActive: boolean\n    } | null\n    receiptRuleName?: string | null\n    awsConfigurationWarning?: string\n    updatedAt: Date\n}\n\nexport async function PUT(\n    request: NextRequest,\n    { params }: { params: Promise<{ id: string }> }\n) {\n    const { id } = await params\n    console.log('‚úèÔ∏è PUT /api/v2/domains/{id} - Starting update for domain:', id)\n    \n    try {\n        console.log('üîê Validating request authentication')\n        const { userId, error } = await validateRequest(request)\n        if (!userId) {\n            console.log('‚ùå Authentication failed:', error)\n            return NextResponse.json(\n                { error: error },\n                { status: 401 }\n            )\n        }\n        console.log('‚úÖ Authentication successful for userId:', userId)\n\n        const data: PutDomainByIdRequest = await request.json()\n        console.log('üìù Update data received:', {\n            isCatchAllEnabled: data.isCatchAllEnabled,\n            catchAllEndpointId: data.catchAllEndpointId\n        })\n\n        // Check if domain exists and belongs to user\n        console.log('üîç Checking if domain exists and belongs to user')\n        const existingDomain = await db\n            .select()\n            .from(emailDomains)\n            .where(and(\n                eq(emailDomains.id, id),\n                eq(emailDomains.userId, userId)\n            ))\n            .limit(1)\n\n        if (!existingDomain[0]) {\n            console.log('‚ùå Domain not found for user:', userId, 'domain:', id)\n            return NextResponse.json(\n                { error: 'Domain not found' },\n                { status: 404 }\n            )\n        }\n\n        console.log('‚úÖ Found existing domain:', existingDomain[0].domain)\n\n        // Check if domain is verified\n        if (existingDomain[0].status !== 'verified') {\n            console.log('‚ùå Domain not verified:', existingDomain[0].status)\n            return NextResponse.json(\n                { error: 'Domain must be verified before configuring catch-all' },\n                { status: 400 }\n            )\n        }\n\n        // Validate endpoint if enabling catch-all\n        if (data.isCatchAllEnabled && data.catchAllEndpointId) {\n            console.log('üîç Validating endpoint')\n            const endpointResult = await db\n                .select()\n                .from(endpoints)\n                .where(and(\n                    eq(endpoints.id, data.catchAllEndpointId),\n                    eq(endpoints.userId, userId)\n                ))\n                .limit(1)\n\n            if (!endpointResult[0]) {\n                console.log('‚ùå Endpoint not found:', data.catchAllEndpointId)\n                return NextResponse.json(\n                    { error: 'Endpoint not found or does not belong to user' },\n                    { status: 400 }\n                )\n            }\n\n            if (!endpointResult[0].isActive) {\n                console.log('‚ùå Endpoint is inactive:', data.catchAllEndpointId)\n                return NextResponse.json(\n                    { error: 'Selected endpoint is not active' },\n                    { status: 400 }\n                )\n            }\n        }\n\n        let receiptRuleName = null\n        let awsConfigurationWarning = null\n\n        if (data.isCatchAllEnabled && data.catchAllEndpointId) {\n            // ENABLE catch-all: Configure AWS SES catch-all receipt rule\n            try {\n                console.log('üîß Configuring AWS SES catch-all for domain:', existingDomain[0].domain)\n                const sesManager = new AWSSESReceiptRuleManager()\n                \n                // Get AWS configuration\n                const awsRegion = process.env.AWS_REGION || 'us-east-2'\n                const lambdaFunctionName = process.env.LAMBDA_FUNCTION_NAME || 'email-processor'\n                const s3BucketName = process.env.S3_BUCKET_NAME\n                const awsAccountId = process.env.AWS_ACCOUNT_ID\n\n                if (!s3BucketName || !awsAccountId) {\n                    awsConfigurationWarning = 'AWS configuration incomplete. Missing S3_BUCKET_NAME or AWS_ACCOUNT_ID'\n                    console.warn('‚ö†Ô∏è AWS configuration incomplete')\n                } else {\n                    const lambdaArn = AWSSESReceiptRuleManager.getLambdaFunctionArn(\n                        lambdaFunctionName,\n                        awsAccountId,\n                        awsRegion\n                    )\n\n                    const receiptResult = await sesManager.configureCatchAllDomain({\n                        domain: existingDomain[0].domain,\n                        webhookId: data.catchAllEndpointId,\n                        lambdaFunctionArn: lambdaArn,\n                        s3BucketName\n                    })\n                    \n                    if (receiptResult.status === 'created' || receiptResult.status === 'updated') {\n                        receiptRuleName = receiptResult.ruleName\n                        console.log('‚úÖ AWS SES catch-all configured successfully')\n                    } else {\n                        awsConfigurationWarning = `SES catch-all configuration failed: ${receiptResult.error}`\n                        console.warn('‚ö†Ô∏è SES catch-all configuration failed')\n                    }\n                }\n            } catch (error) {\n                console.error('‚ùå AWS SES configuration error:', error)\n                awsConfigurationWarning = `AWS SES configuration error: ${error instanceof Error ? error.message : 'Unknown error'}`\n            }\n        } else {\n            // DISABLE catch-all: Remove AWS SES catch-all receipt rule\n            try {\n                console.log('üîß Removing AWS SES catch-all for domain:', existingDomain[0].domain)\n                const sesManager = new AWSSESReceiptRuleManager()\n                \n                const ruleRemoved = await sesManager.removeCatchAllDomain(existingDomain[0].domain)\n                \n                if (ruleRemoved) {\n                    console.log('‚úÖ AWS SES catch-all removed successfully')\n                } else {\n                    console.warn('‚ö†Ô∏è Failed to remove AWS SES catch-all rule')\n                }\n            } catch (error) {\n                console.error('‚ùå AWS SES removal error:', error)\n            }\n        }\n\n        // Update domain in database\n        console.log('üíæ Updating domain in database')\n        const [updatedDomain] = await db\n            .update(emailDomains)\n            .set({\n                isCatchAllEnabled: data.isCatchAllEnabled,\n                catchAllEndpointId: data.isCatchAllEnabled ? data.catchAllEndpointId : null,\n                catchAllReceiptRuleName: receiptRuleName,\n                updatedAt: new Date()\n            })\n            .where(eq(emailDomains.id, id))\n            .returning()\n\n                 // Get updated endpoint information\n         let catchAllEndpoint = null\n         if (updatedDomain.catchAllEndpointId) {\n             const endpointResult = await db\n                 .select({\n                     id: endpoints.id,\n                     name: endpoints.name,\n                     type: endpoints.type,\n                     isActive: endpoints.isActive\n                 })\n                 .from(endpoints)\n                 .where(eq(endpoints.id, updatedDomain.catchAllEndpointId))\n                 .limit(1)\n             \n             const endpoint = endpointResult[0]\n             if (endpoint) {\n                 catchAllEndpoint = {\n                     id: endpoint.id,\n                     name: endpoint.name,\n                     type: endpoint.type,\n                     isActive: endpoint.isActive || false\n                 }\n             }\n         }\n\n         console.log('‚úÖ Successfully updated domain catch-all settings')\n\n         const response: PutDomainByIdResponse = {\n             id: updatedDomain.id,\n             domain: updatedDomain.domain,\n             status: updatedDomain.status,\n             isCatchAllEnabled: updatedDomain.isCatchAllEnabled || false,\n             catchAllEndpointId: updatedDomain.catchAllEndpointId,\n             catchAllEndpoint,\n             receiptRuleName,\n             updatedAt: updatedDomain.updatedAt || new Date()\n         }\n\n        if (awsConfigurationWarning) {\n            response.awsConfigurationWarning = awsConfigurationWarning\n        }\n\n        return NextResponse.json(response)\n\n    } catch (error) {\n        console.error('‚ùå PUT /api/v2/domains/{id} - Error:', error)\n        return NextResponse.json(\n            { \n                error: 'Failed to update domain',\n                details: error instanceof Error ? error.message : 'Unknown error'\n            },\n            { status: 500 }\n        )\n    }\n}\n\n/**\n * DELETE /api/v2/domains/{id}\n * Deletes a domain and all associated resources\n * Supports both session-based auth and API key auth\n * Has tests? ‚è≥\n * Has logging? ‚úÖ\n * Has types? ‚úÖ\n */\n\n// DELETE /api/v2/domains/{id} types\nexport interface DeleteDomainByIdResponse {\n    success: boolean\n    message: string\n    deletedResources: {\n        domain: string\n        emailAddresses: number\n        dnsRecords: number\n        blockedEmails: number\n        sesIdentity: boolean\n        sesReceiptRules: boolean\n    }\n}\n\nexport async function DELETE(\n    request: NextRequest,\n    { params }: { params: Promise<{ id: string }> }\n) {\n    const { id } = await params\n    console.log('üóëÔ∏è DELETE /api/v2/domains/{id} - Starting deletion for domain:', id)\n    \n    try {\n        console.log('üîê Validating request authentication')\n        const { userId, error } = await validateRequest(request)\n        if (!userId) {\n            console.log('‚ùå Authentication failed:', error)\n            return NextResponse.json(\n                { error: error },\n                { status: 401 }\n            )\n        }\n        console.log('‚úÖ Authentication successful for userId:', userId)\n\n        // Get domain with user verification\n        console.log('üîç Fetching domain details')\n        const domainResult = await db\n            .select()\n            .from(emailDomains)\n            .where(and(\n                eq(emailDomains.id, id),\n                eq(emailDomains.userId, userId)\n            ))\n            .limit(1)\n\n        if (!domainResult[0]) {\n            console.log('‚ùå Domain not found for user:', userId, 'domain:', id)\n            return NextResponse.json(\n                { error: 'Domain not found' },\n                { status: 404 }\n            )\n        }\n\n        const domain = domainResult[0]\n        console.log('‚úÖ Found domain:', domain.domain, 'status:', domain.status)\n\n        // Track deletion stats\n        const deletionStats = {\n            domain: domain.domain,\n            emailAddresses: 0,\n            dnsRecords: 0,\n            blockedEmails: 0,\n            sesIdentity: false,\n            sesReceiptRules: false\n        }\n\n        // 1. Delete AWS SES receipt rules (both catch-all and individual)\n        if (domain.domain) {\n            try {\n                console.log('üîß Removing AWS SES receipt rules')\n                const sesManager = new AWSSESReceiptRuleManager()\n                \n                // Remove catch-all rule if exists\n                if (domain.isCatchAllEnabled || domain.catchAllReceiptRuleName) {\n                    console.log('üîß Removing catch-all receipt rule')\n                    const catchAllRemoved = await sesManager.removeCatchAllDomain(domain.domain)\n                    if (catchAllRemoved) {\n                        deletionStats.sesReceiptRules = true\n                        console.log('‚úÖ Catch-all receipt rule removed')\n                    }\n                }\n\n                // Remove individual email receipt rule\n                console.log('üîß Removing individual email receipt rule')\n                const individualRemoved = await sesManager.removeEmailReceiving(domain.domain)\n                if (individualRemoved) {\n                    deletionStats.sesReceiptRules = true\n                    console.log('‚úÖ Individual email receipt rule removed')\n                }\n            } catch (sesRuleError) {\n                console.error('‚ö†Ô∏è Failed to remove SES receipt rules:', sesRuleError)\n                // Continue with deletion even if SES rule removal fails\n            }\n        }\n\n        // 2. Delete AWS SES identity\n        if (domain.domain) {\n            try {\n                console.log('üîß Deleting AWS SES identity')\n                const { deleteDomainFromSES } = await import('@/lib/domains-and-dns/domain-verification')\n                const sesResult = await deleteDomainFromSES(domain.domain)\n                deletionStats.sesIdentity = sesResult.success\n                if (sesResult.success) {\n                    console.log('‚úÖ SES identity deleted')\n                } else {\n                    console.warn('‚ö†Ô∏è Failed to delete SES identity:', sesResult.error)\n                }\n            } catch (sesError) {\n                console.error('‚ö†Ô∏è Failed to delete SES identity:', sesError)\n                // Continue with deletion even if SES identity deletion fails\n            }\n        }\n\n        // 3. Delete blocked emails for this domain\n        try {\n            console.log('üîß Deleting blocked emails')\n            const { blockedEmails } = await import('@/lib/db/schema')\n            const blockedResult = await db\n                .delete(blockedEmails)\n                .where(eq(blockedEmails.domainId, id))\n                .returning({ id: blockedEmails.id })\n            \n            deletionStats.blockedEmails = blockedResult.length\n            console.log(`‚úÖ Deleted ${blockedResult.length} blocked emails`)\n        } catch (blockedError) {\n            console.error('‚ö†Ô∏è Failed to delete blocked emails:', blockedError)\n            // Continue with deletion\n        }\n\n        // 4. Delete email addresses\n        try {\n            console.log('üîß Deleting email addresses')\n            const emailResult = await db\n                .delete(emailAddresses)\n                .where(eq(emailAddresses.domainId, id))\n                .returning({ id: emailAddresses.id })\n            \n            deletionStats.emailAddresses = emailResult.length\n            console.log(`‚úÖ Deleted ${emailResult.length} email addresses`)\n        } catch (emailError) {\n            console.error('‚ùå Failed to delete email addresses:', emailError)\n            return NextResponse.json(\n                { \n                    error: 'Failed to delete email addresses',\n                    details: emailError instanceof Error ? emailError.message : 'Unknown error'\n                },\n                { status: 500 }\n            )\n        }\n\n        // 5. Delete DNS records\n        try {\n            console.log('üîß Deleting DNS records')\n            const dnsResult = await db\n                .delete(domainDnsRecords)\n                .where(eq(domainDnsRecords.domainId, id))\n                .returning({ id: domainDnsRecords.id })\n            \n            deletionStats.dnsRecords = dnsResult.length\n            console.log(`‚úÖ Deleted ${dnsResult.length} DNS records`)\n        } catch (dnsError) {\n            console.error('‚ùå Failed to delete DNS records:', dnsError)\n            return NextResponse.json(\n                { \n                    error: 'Failed to delete DNS records',\n                    details: dnsError instanceof Error ? dnsError.message : 'Unknown error'\n                },\n                { status: 500 }\n            )\n        }\n\n        // 6. Delete the domain itself\n        try {\n            console.log('üîß Deleting domain record')\n            await db\n                .delete(emailDomains)\n                .where(eq(emailDomains.id, id))\n            \n            console.log('‚úÖ Domain record deleted')\n        } catch (domainError) {\n            console.error('‚ùå Failed to delete domain:', domainError)\n            return NextResponse.json(\n                { \n                    error: 'Failed to delete domain',\n                    details: domainError instanceof Error ? domainError.message : 'Unknown error'\n                },\n                { status: 500 }\n            )\n        }\n\n        console.log('‚úÖ Successfully deleted domain and all associated resources')\n\n        const response: DeleteDomainByIdResponse = {\n            success: true,\n            message: `Successfully deleted domain ${domain.domain} and all associated resources`,\n            deletedResources: deletionStats\n        }\n\n        return NextResponse.json(response)\n\n    } catch (error) {\n        console.error('‚ùå DELETE /api/v2/domains/{id} - Error:', error)\n        return NextResponse.json(\n            { \n                error: 'Failed to delete domain',\n                details: error instanceof Error ? error.message : 'Unknown error'\n            },\n            { status: 500 }\n        )\n    }\n}","import {\n  AppRouteRouteModule,\n  type AppRouteRouteModuleOptions,\n} from '../../server/route-modules/app-route/module.compiled'\nimport { RouteKind } from '../../server/route-kind'\nimport { patchFetch as _patchFetch } from '../../server/lib/patch-fetch'\n\nimport * as userland from 'VAR_USERLAND'\n\n// These are injected by the loader afterwards. This is injected as a variable\n// instead of a replacement because this could also be `undefined` instead of\n// an empty string.\ndeclare const nextConfigOutput: AppRouteRouteModuleOptions['nextConfigOutput']\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\n// INJECT:nextConfigOutput\n\nconst routeModule = new AppRouteRouteModule({\n  definition: {\n    kind: RouteKind.APP_ROUTE,\n    page: 'VAR_DEFINITION_PAGE',\n    pathname: 'VAR_DEFINITION_PATHNAME',\n    filename: 'VAR_DEFINITION_FILENAME',\n    bundlePath: 'VAR_DEFINITION_BUNDLE_PATH',\n  },\n  resolvedPagePath: 'VAR_RESOLVED_PAGE_PATH',\n  nextConfigOutput,\n  userland,\n})\n\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule\n\nfunction patchFetch() {\n  return _patchFetch({\n    workAsyncStorage,\n    workUnitAsyncStorage,\n  })\n}\n\nexport {\n  routeModule,\n  workAsyncStorage,\n  workUnitAsyncStorage,\n  serverHooks,\n  patchFetch,\n}\n"],"names":["AppRouteRouteModule","RouteKind","patchFetch","_patchFetch","userland","routeModule","definition","kind","APP_ROUTE","page","pathname","filename","bundlePath","resolvedPagePath","nextConfigOutput","workAsyncStorage","workUnitAsyncStorage","serverHooks"],"mappings":"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","ignoreList":[1]}