{"version":3,"sources":["turbopack:///[project]/node_modules/next/src/server/route-modules/app-page/vendored/rsc/react-server-dom-turbopack-server-edge.ts","turbopack:///[project]/app/api/v2/domains/[id]/dns-records/route.ts","turbopack:///[project]/node_modules/next/dist/src/build/templates/app-route.ts"],"sourcesContent":["module.exports = require('../../module.compiled').vendored[\n  'react-rsc'\n].ReactServerDOMTurbopackServerEdge\n","import { NextRequest, NextResponse } from 'next/server'\nimport { validateRequest } from '../../../helper/main'\nimport { db } from '@/lib/db'\nimport { emailDomains, domainDnsRecords } from '@/lib/db/schema'\nimport { eq, and } from 'drizzle-orm'\n\n/**\n * GET /api/v2/domains/{id}/dns-records\n * Gets DNS records for a specific domain\n * Supports both session-based auth and API key auth\n * Has tests? ‚è≥\n * Has logging? ‚úÖ\n * Has types? ‚úÖ\n */\n\n// GET /api/v2/domains/{id}/dns-records types\nexport interface DnsRecord {\n    id: string\n    domainId: string\n    recordType: string\n    name: string\n    value: string\n    priority?: number | null\n    isRequired: boolean\n    isVerified: boolean\n    lastChecked: Date | null\n    createdAt: Date\n    updatedAt: Date\n}\n\nexport interface GetDomainDnsRecordsResponse {\n    domainId: string\n    domain: string\n    records: DnsRecord[]\n}\n\nexport async function GET(\n    request: NextRequest,\n    { params }: { params: Promise<{ id: string }> }\n) {\n    const { id } = await params\n    console.log('üîç GET /api/v2/domains/{id}/dns-records - Starting request for domain:', id)\n    \n    try {\n        console.log('üîê Validating request authentication')\n        const { userId, error } = await validateRequest(request)\n        if (!userId) {\n            console.log('‚ùå Authentication failed:', error)\n            return NextResponse.json(\n                { error: error },\n                { status: 401 }\n            )\n        }\n        console.log('‚úÖ Authentication successful for userId:', userId)\n\n        // Get domain with user verification\n        console.log('üîç Verifying domain ownership')\n        const domainResult = await db\n            .select({\n                id: emailDomains.id,\n                domain: emailDomains.domain,\n                userId: emailDomains.userId\n            })\n            .from(emailDomains)\n            .where(and(\n                eq(emailDomains.id, id),\n                eq(emailDomains.userId, userId)\n            ))\n            .limit(1)\n\n        if (!domainResult[0]) {\n            console.log('‚ùå Domain not found for user:', userId, 'domain:', id)\n            return NextResponse.json(\n                { error: 'Domain not found' },\n                { status: 404 }\n            )\n        }\n\n        const domain = domainResult[0]\n        console.log('‚úÖ Found domain:', domain.domain)\n\n        // Get DNS records\n        console.log('üîç Fetching DNS records')\n        const dnsRecordsResult = await db\n            .select()\n            .from(domainDnsRecords)\n            .where(eq(domainDnsRecords.domainId, id))\n            .orderBy(domainDnsRecords.recordType)\n\n        console.log('üìä Found', dnsRecordsResult.length, 'DNS records')\n\n        const response: GetDomainDnsRecordsResponse = {\n            domainId: domain.id,\n            domain: domain.domain,\n            records: dnsRecordsResult.map(record => ({\n                id: record.id,\n                domainId: record.domainId,\n                recordType: record.recordType,\n                name: record.name,\n                value: record.value,\n                priority: null, // Not in schema\n                isRequired: record.isRequired || false,\n                isVerified: record.isVerified || false,\n                lastChecked: record.lastChecked,\n                createdAt: record.createdAt || new Date(),\n                updatedAt: record.createdAt || new Date() // Use createdAt as updatedAt since it's not in schema\n            }))\n        }\n\n        console.log('‚úÖ Successfully retrieved DNS records')\n        return NextResponse.json(response)\n\n    } catch (error) {\n        console.error('‚ùå GET /api/v2/domains/{id}/dns-records - Error:', error)\n        return NextResponse.json(\n            { \n                error: 'Failed to fetch DNS records',\n                details: error instanceof Error ? error.message : 'Unknown error'\n            },\n            { status: 500 }\n        )\n    }\n} ","import {\n  AppRouteRouteModule,\n  type AppRouteRouteModuleOptions,\n} from '../../server/route-modules/app-route/module.compiled'\nimport { RouteKind } from '../../server/route-kind'\nimport { patchFetch as _patchFetch } from '../../server/lib/patch-fetch'\n\nimport * as userland from 'VAR_USERLAND'\n\n// These are injected by the loader afterwards. This is injected as a variable\n// instead of a replacement because this could also be `undefined` instead of\n// an empty string.\ndeclare const nextConfigOutput: AppRouteRouteModuleOptions['nextConfigOutput']\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\n// INJECT:nextConfigOutput\n\nconst routeModule = new AppRouteRouteModule({\n  definition: {\n    kind: RouteKind.APP_ROUTE,\n    page: 'VAR_DEFINITION_PAGE',\n    pathname: 'VAR_DEFINITION_PATHNAME',\n    filename: 'VAR_DEFINITION_FILENAME',\n    bundlePath: 'VAR_DEFINITION_BUNDLE_PATH',\n  },\n  resolvedPagePath: 'VAR_RESOLVED_PAGE_PATH',\n  nextConfigOutput,\n  userland,\n})\n\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule\n\nfunction patchFetch() {\n  return _patchFetch({\n    workAsyncStorage,\n    workUnitAsyncStorage,\n  })\n}\n\nexport {\n  routeModule,\n  workAsyncStorage,\n  workUnitAsyncStorage,\n  serverHooks,\n  patchFetch,\n}\n"],"names":["module","exports","require","vendored","ReactServerDOMTurbopackServerEdge","AppRouteRouteModule","RouteKind","patchFetch","_patchFetch","userland","routeModule","definition","kind","APP_ROUTE","page","pathname","filename","bundlePath","resolvedPagePath","nextConfigOutput","workAsyncStorage","workUnitAsyncStorage","serverHooks"],"mappings":"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","ignoreList":[0,2]}