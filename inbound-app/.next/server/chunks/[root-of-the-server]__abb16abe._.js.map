{"version":3,"sources":["turbopack:///[project]/lib/webhooks/webhook-formats.ts","turbopack:///[project]/app/api/v1/endpoints/[id]/test/route.ts","turbopack:///[project]/node_modules/next/dist/src/build/templates/app-route.ts"],"sourcesContent":["import type { WebhookFormat } from '@/lib/db/schema'\n\n// Base email data structure that all formats will use\nexport interface BaseEmailData {\n  messageId: string\n  from: string\n  to: string[]\n  subject: string\n  textBody?: string\n  htmlBody?: string\n  attachments?: Array<{\n    filename?: string\n    contentType?: string\n    size?: number\n  }>\n  headers?: Record<string, any>\n  timestamp: string\n  recipient: string\n}\n\n// Inbound webhook format (current format)\nexport interface InboundWebhookPayload {\n  event: string\n  timestamp: string\n  messageId: string\n  source: string\n  destination: string[]\n  subject: string\n  body: {\n    text?: string\n    html?: string\n  }\n  attachments: Array<{\n    filename?: string\n    contentType?: string\n    size?: number\n    contentId?: string\n    contentDisposition?: string\n  }>\n  headers: Record<string, any>\n  endpoint?: {\n    id: string\n    name: string\n  }\n  test?: boolean\n}\n\n// Discord webhook format\n// Based on Discord webhook documentation: https://discord.com/developers/docs/resources/webhook\nexport interface DiscordWebhookPayload {\n  content?: string\n  username?: string\n  avatar_url?: string\n  tts?: boolean\n  embeds?: Array<{\n    title?: string\n    description?: string\n    url?: string\n    timestamp?: string\n    color?: number\n    footer?: {\n      text: string\n      icon_url?: string\n    }\n    image?: {\n      url: string\n    }\n    thumbnail?: {\n      url: string\n    }\n    author?: {\n      name: string\n      url?: string\n      icon_url?: string\n    }\n    fields?: Array<{\n      name: string\n      value: string\n      inline?: boolean\n    }>\n  }>\n  allowed_mentions?: {\n    parse?: string[]\n    roles?: string[]\n    users?: string[]\n    replied_user?: boolean\n  }\n}\n\n// Slack webhook format (for future implementation)\nexport interface SlackWebhookPayload {\n  text?: string\n  username?: string\n  icon_url?: string\n  icon_emoji?: string\n  channel?: string\n  attachments?: Array<{\n    fallback?: string\n    color?: string\n    pretext?: string\n    author_name?: string\n    author_link?: string\n    author_icon?: string\n    title?: string\n    title_link?: string\n    text?: string\n    fields?: Array<{\n      title: string\n      value: string\n      short?: boolean\n    }>\n    image_url?: string\n    thumb_url?: string\n    footer?: string\n    footer_icon?: string\n    ts?: number\n  }>\n}\n\n// Webhook format configuration\nexport interface WebhookFormatConfig {\n  name: string\n  description: string\n  testPayload: (data: BaseEmailData) => any\n  realPayload: (data: BaseEmailData) => any\n}\n\n// Format implementations\nexport const WEBHOOK_FORMAT_CONFIGS: Record<WebhookFormat, WebhookFormatConfig> = {\n  inbound: {\n    name: 'Inbound Webhook',\n    description: 'Standard Inbound email webhook format with full email data',\n    testPayload: (data: BaseEmailData): InboundWebhookPayload => ({\n      event: 'webhook_test',\n      timestamp: data.timestamp,\n      messageId: data.messageId,\n      source: data.from,\n      destination: data.to,\n      subject: data.subject,\n      body: {\n        text: data.textBody || 'This is a test email from the Inbound Email service to verify webhook functionality.',\n        html: data.htmlBody || '<p>This is a test email from the <strong>Inbound Email service</strong> to verify webhook functionality.</p>'\n      },\n      attachments: data.attachments || [],\n      headers: data.headers || {},\n      test: true\n    }),\n    realPayload: (data: BaseEmailData): InboundWebhookPayload => ({\n      event: 'email_received',\n      timestamp: data.timestamp,\n      messageId: data.messageId,\n      source: data.from,\n      destination: data.to,\n      subject: data.subject,\n      body: {\n        text: data.textBody,\n        html: data.htmlBody\n      },\n      attachments: data.attachments || [],\n      headers: data.headers || {}\n    })\n  },\n  \n  discord: {\n    name: 'Discord Webhook',\n    description: 'Discord-compatible webhook format with rich embeds',\n    testPayload: (data: BaseEmailData): DiscordWebhookPayload => ({\n      content: `📧 **Test Email Received**`,\n      embeds: [{\n        title: data.subject || 'Test Email - Inbound Email Service',\n        description: data.textBody || 'This is a test email from the Inbound Email service to verify webhook functionality.',\n        color: 0x00ff00, // Green color for test\n        timestamp: data.timestamp,\n        footer: {\n          text: 'Inbound Email Service - Test',\n          icon_url: 'https://inbound.new/favicon.ico'\n        },\n        fields: [\n          {\n            name: 'From',\n            value: data.from || 'test@example.com',\n            inline: true\n          },\n          {\n            name: 'To',\n            value: data.to.join(', ') || data.recipient,\n            inline: true\n          },\n          {\n            name: 'Message ID',\n            value: `\\`${data.messageId}\\``,\n            inline: false\n          }\n        ]\n      }]\n    }),\n    realPayload: (data: BaseEmailData): DiscordWebhookPayload => ({\n      content: `📧 **New Email Received**`,\n      embeds: [{\n        title: data.subject || 'No Subject',\n        description: data.textBody ? (data.textBody.length > 2000 ? data.textBody.substring(0, 2000) + '...' : data.textBody) : 'No content',\n        color: 0x0099ff, // Blue color for real emails\n        timestamp: data.timestamp,\n        footer: {\n          text: 'Inbound Email Service',\n          icon_url: 'https://inbound.new/favicon.ico'\n        },\n        fields: [\n          {\n            name: 'From',\n            value: data.from,\n            inline: true\n          },\n          {\n            name: 'To',\n            value: data.to.join(', '),\n            inline: true\n          },\n          ...(data.attachments && data.attachments.length > 0 ? [{\n            name: 'Attachments',\n            value: data.attachments.map(att => att.filename || 'Unknown').join(', '),\n            inline: false\n          }] : []),\n          {\n            name: 'Message ID',\n            value: `\\`${data.messageId}\\``,\n            inline: false\n          }\n        ]\n      }]\n    })\n  },\n  \n  slack: {\n    name: 'Slack Webhook',\n    description: 'Slack-compatible webhook format with attachments',\n    testPayload: (data: BaseEmailData): SlackWebhookPayload => ({\n      text: `📧 *Test Email Received*`,\n      username: 'Inbound Email',\n      icon_url: 'https://inbound.new/favicon.ico',\n      attachments: [{\n        fallback: `Test email: ${data.subject}`,\n        color: 'good',\n        title: data.subject || 'Test Email - Inbound Email Service',\n        text: data.textBody || 'This is a test email from the Inbound Email service to verify webhook functionality.',\n        fields: [\n          {\n            title: 'From',\n            value: data.from || 'test@example.com',\n            short: true\n          },\n          {\n            title: 'To',\n            value: data.to.join(', ') || data.recipient,\n            short: true\n          },\n          {\n            title: 'Message ID',\n            value: data.messageId,\n            short: false\n          }\n        ],\n        footer: 'Inbound Email Service - Test',\n        ts: Math.floor(new Date(data.timestamp).getTime() / 1000)\n      }]\n    }),\n    realPayload: (data: BaseEmailData): SlackWebhookPayload => ({\n      text: `📧 *New Email Received*`,\n      username: 'Inbound Email',\n      icon_url: 'https://inbound.new/favicon.ico',\n      attachments: [{\n        fallback: `New email: ${data.subject}`,\n        color: '#0099ff',\n        title: data.subject || 'No Subject',\n        text: data.textBody ? (data.textBody.length > 1000 ? data.textBody.substring(0, 1000) + '...' : data.textBody) : 'No content',\n        fields: [\n          {\n            title: 'From',\n            value: data.from,\n            short: true\n          },\n          {\n            title: 'To',\n            value: data.to.join(', '),\n            short: true\n          },\n          ...(data.attachments && data.attachments.length > 0 ? [{\n            title: 'Attachments',\n            value: data.attachments.map(att => att.filename || 'Unknown').join(', '),\n            short: false\n          }] : []),\n          {\n            title: 'Message ID',\n            value: data.messageId,\n            short: false\n          }\n        ],\n        footer: 'Inbound Email Service',\n        ts: Math.floor(new Date(data.timestamp).getTime() / 1000)\n      }]\n    })\n  }\n}\n\n// Helper function to get webhook format config\nexport function getWebhookFormatConfig(format: WebhookFormat): WebhookFormatConfig {\n  return WEBHOOK_FORMAT_CONFIGS[format]\n}\n\n// Helper function to generate test payload for any format\nexport function generateTestPayload(format: WebhookFormat, baseData?: Partial<BaseEmailData>): any {\n  const config = getWebhookFormatConfig(format)\n  const defaultData: BaseEmailData = {\n    messageId: `test-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n    from: 'test@example.com',\n    to: ['test@yourdomain.com'],\n    subject: 'Test Email - Inbound Email Service',\n    textBody: 'This is a test email from the Inbound Email service to verify webhook functionality.',\n    htmlBody: '<p>This is a test email from the <strong>Inbound Email service</strong> to verify webhook functionality.</p>',\n    attachments: [],\n    headers: {\n      'From': 'test@example.com',\n      'To': 'test@yourdomain.com',\n      'Subject': 'Test Email - Inbound Email Service',\n      'Date': new Date().toISOString()\n    },\n    timestamp: new Date().toISOString(),\n    recipient: 'test@yourdomain.com'\n  }\n  \n  const mergedData = { ...defaultData, ...baseData }\n  return config.testPayload(mergedData)\n}\n\n// Helper function to generate real payload for any format\nexport function generateRealPayload(format: WebhookFormat, emailData: BaseEmailData): any {\n  const config = getWebhookFormatConfig(format)\n  return config.realPayload(emailData)\n} ","import { NextRequest, NextResponse } from 'next/server'\nimport { auth } from '@/lib/auth/auth'\nimport { headers } from 'next/headers'\nimport { db } from '@/lib/db'\nimport { endpoints } from '@/lib/db/schema'\nimport { eq, and } from 'drizzle-orm'\nimport { generateTestPayload } from '@/lib/webhooks/webhook-formats'\nimport type { WebhookFormat } from '@/lib/db/schema'\n\nexport async function POST(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { id } = await params\n    console.log(`🧪 POST /api/v1/endpoints/${id}/test - Testing endpoint`)\n    \n    const session = await auth.api.getSession({ headers: await headers() })\n    if (!session?.user?.id) {\n      console.warn(`❌ POST /api/v1/endpoints/${id}/test - Unauthorized request`)\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })\n    }\n\n    // Check if endpoint exists and belongs to user\n    const endpoint = await db\n      .select()\n      .from(endpoints)\n      .where(and(\n        eq(endpoints.id, id),\n        eq(endpoints.userId, session.user.id)\n      ))\n      .limit(1)\n\n    if (!endpoint[0]) {\n      return NextResponse.json(\n        { error: 'Endpoint not found or access denied' },\n        { status: 404 }\n      )\n    }\n\n    if (!endpoint[0].isActive) {\n      return NextResponse.json(\n        { \n          success: false,\n          message: 'Endpoint is disabled',\n          responseTime: 0\n        },\n        { status: 400 }\n      )\n    }\n\n    const config = JSON.parse(endpoint[0].config)\n    const startTime = Date.now()\n\n    let testResult: any = {\n      success: false,\n      message: 'Test not implemented for this endpoint type',\n      responseTime: 0\n    }\n\n    switch (endpoint[0].type) {\n      case 'webhook':\n        // Test webhook by sending a test payload\n        try {\n          console.log(`🔗 Testing webhook: ${config.url}`)\n          \n          // Get webhook format from endpoint (default to 'inbound' for backward compatibility)\n          const webhookFormat = (endpoint[0].webhookFormat as WebhookFormat) || 'inbound'\n          console.log(`📋 Using webhook format: ${webhookFormat}`)\n          \n          // Generate test payload based on format\n          const testPayload = generateTestPayload(webhookFormat, {\n            messageId: `test-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n            from: 'test@example.com',\n            to: ['test@yourdomain.com'],\n            subject: 'Test Email - Inbound Email Service',\n            recipient: 'test@yourdomain.com'\n          })\n          \n          // Add endpoint info for inbound format\n          if (webhookFormat === 'inbound' && typeof testPayload === 'object') {\n            testPayload.endpoint = {\n              id: endpoint[0].id,\n              name: endpoint[0].name\n            }\n          }\n\n          // Parse custom headers safely\n          let customHeaders = {}\n          if (config.headers) {\n            try {\n              customHeaders = typeof config.headers === 'string' ? JSON.parse(config.headers) : config.headers\n            } catch (headerError) {\n              console.warn(`⚠️ Invalid custom headers for endpoint ${id}:`, headerError)\n              customHeaders = {}\n            }\n          }\n\n          const requestHeaders = {\n            'Content-Type': 'application/json',\n            'User-Agent': 'InboundEmail-Test/1.0',\n            'X-Test-Request': 'true',\n            'X-Endpoint-ID': endpoint[0].id,\n            ...customHeaders\n          }\n\n          console.log(`📤 Test payload:`, JSON.stringify(testPayload, null, 2))\n          console.log(`📋 Request headers:`, JSON.stringify(requestHeaders, null, 2))\n\n          const response = await fetch(config.url, {\n            method: 'POST',\n            headers: requestHeaders,\n            body: JSON.stringify(testPayload),\n            signal: AbortSignal.timeout((config.timeout || 30) * 1000)\n          })\n\n          const responseTime = Date.now() - startTime\n          let responseBody = ''\n          \n          try {\n            responseBody = await response.text()\n          } catch {\n            responseBody = 'Unable to read response body'\n          }\n\n          testResult = {\n            success: response.ok,\n            message: response.ok \n              ? `Webhook responded successfully (${response.status})` \n              : `Webhook returned error (${response.status})`,\n            responseTime,\n            statusCode: response.status,\n            responseBody: responseBody.substring(0, 500) // Limit response body size\n          }\n\n          console.log(`${response.ok ? '✅' : '❌'} Webhook test ${response.ok ? 'passed' : 'failed'}: ${response.status} in ${responseTime}ms`)\n          console.log(`📄 Response body:`, responseBody)\n\n        } catch (error) {\n          const responseTime = Date.now() - startTime\n          let errorMessage = 'Unknown error'\n          \n          if (error instanceof Error) {\n            if (error.name === 'AbortError') {\n              errorMessage = `Request timeout after ${config.timeout || 30}s`\n            } else {\n              errorMessage = error.message\n            }\n          }\n\n          testResult = {\n            success: false,\n            message: `Webhook test failed: ${errorMessage}`,\n            responseTime,\n            error: errorMessage\n          }\n\n          console.error(`❌ Webhook test failed:`, errorMessage)\n        }\n        break\n\n      case 'email':\n        // For email endpoints, validate the configuration\n        try {\n          const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/\n          const isValidEmail = emailRegex.test(config.forwardTo)\n          \n          // Check if fromAddress is valid if provided\n          let fromAddressValid = true\n          if (config.fromAddress) {\n            fromAddressValid = emailRegex.test(config.fromAddress)\n          }\n\n          testResult = {\n            success: isValidEmail && fromAddressValid,\n            message: isValidEmail && fromAddressValid\n              ? `Email configuration is valid (forwards to: ${config.forwardTo})`\n              : !isValidEmail \n                ? `Invalid forward-to email address: ${config.forwardTo}`\n                : `Invalid from address: ${config.fromAddress}`,\n            responseTime: Date.now() - startTime,\n            config: {\n              forwardTo: config.forwardTo,\n              fromAddress: config.fromAddress || 'auto-detected',\n              includeAttachments: config.includeAttachments ?? true,\n              subjectPrefix: config.subjectPrefix || 'none'\n            }\n          }\n\n          console.log(`${testResult.success ? '✅' : '❌'} Email endpoint test ${testResult.success ? 'passed' : 'failed'}`)\n\n        } catch (error) {\n          testResult = {\n            success: false,\n            message: `Email configuration test failed: ${error instanceof Error ? error.message : 'Unknown error'}`,\n            responseTime: Date.now() - startTime\n          }\n        }\n        break\n\n      case 'email_group':\n        // For email group endpoints, validate all email addresses\n        try {\n          const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/\n          const emails = config.emails || []\n          const validEmails = emails.filter((email: string) => emailRegex.test(email))\n          const invalidEmails = emails.filter((email: string) => !emailRegex.test(email))\n          \n          // Check if fromAddress is valid if provided\n          let fromAddressValid = true\n          if (config.fromAddress) {\n            fromAddressValid = emailRegex.test(config.fromAddress)\n          }\n\n          const allValid = invalidEmails.length === 0 && emails.length > 0 && fromAddressValid\n\n          testResult = {\n            success: allValid,\n            message: allValid\n              ? `Email group configuration is valid (${validEmails.length} recipients)`\n              : invalidEmails.length > 0\n                ? `Invalid email addresses: ${invalidEmails.join(', ')}`\n                : emails.length === 0\n                  ? 'Email group must have at least one email address'\n                  : `Invalid from address: ${config.fromAddress}`,\n            responseTime: Date.now() - startTime,\n            config: {\n              totalEmails: emails.length,\n              validEmails: validEmails.length,\n              invalidEmails: invalidEmails.length,\n              fromAddress: config.fromAddress || 'auto-detected',\n              includeAttachments: config.includeAttachments ?? true,\n              subjectPrefix: config.subjectPrefix || 'none'\n            }\n          }\n\n          console.log(`${testResult.success ? '✅' : '❌'} Email group test ${testResult.success ? 'passed' : 'failed'}`)\n\n        } catch (error) {\n          testResult = {\n            success: false,\n            message: `Email group configuration test failed: ${error instanceof Error ? error.message : 'Unknown error'}`,\n            responseTime: Date.now() - startTime\n          }\n        }\n        break\n\n      default:\n        testResult = {\n          success: false,\n          message: `Unknown endpoint type: ${endpoint[0].type}`,\n          responseTime: Date.now() - startTime\n        }\n    }\n\n    console.log(`${testResult.success ? '✅' : '❌'} Test ${testResult.success ? 'passed' : 'failed'} for endpoint ${id} (${endpoint[0].type})`)\n\n    return NextResponse.json(testResult)\n\n  } catch (error) {\n    console.error(`❌ POST /api/v1/endpoints/test - Error:`, error)\n    return NextResponse.json(\n      {\n        success: false,\n        error: 'Failed to test endpoint',\n        details: error instanceof Error ? error.message : 'Unknown error',\n        responseTime: 0\n      },\n      { status: 500 }\n    )\n  }\n} ","import {\n  AppRouteRouteModule,\n  type AppRouteRouteModuleOptions,\n} from '../../server/route-modules/app-route/module.compiled'\nimport { RouteKind } from '../../server/route-kind'\nimport { patchFetch as _patchFetch } from '../../server/lib/patch-fetch'\n\nimport * as userland from 'VAR_USERLAND'\n\n// These are injected by the loader afterwards. This is injected as a variable\n// instead of a replacement because this could also be `undefined` instead of\n// an empty string.\ndeclare const nextConfigOutput: AppRouteRouteModuleOptions['nextConfigOutput']\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\n// INJECT:nextConfigOutput\n\nconst routeModule = new AppRouteRouteModule({\n  definition: {\n    kind: RouteKind.APP_ROUTE,\n    page: 'VAR_DEFINITION_PAGE',\n    pathname: 'VAR_DEFINITION_PATHNAME',\n    filename: 'VAR_DEFINITION_FILENAME',\n    bundlePath: 'VAR_DEFINITION_BUNDLE_PATH',\n  },\n  resolvedPagePath: 'VAR_RESOLVED_PAGE_PATH',\n  nextConfigOutput,\n  userland,\n})\n\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule\n\nfunction patchFetch() {\n  return _patchFetch({\n    workAsyncStorage,\n    workUnitAsyncStorage,\n  })\n}\n\nexport {\n  routeModule,\n  workAsyncStorage,\n  workUnitAsyncStorage,\n  serverHooks,\n  patchFetch,\n}\n"],"names":["AppRouteRouteModule","RouteKind","patchFetch","_patchFetch","userland","routeModule","definition","kind","APP_ROUTE","page","pathname","filename","bundlePath","resolvedPagePath","nextConfigOutput","workAsyncStorage","workUnitAsyncStorage","serverHooks"],"mappings":"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","ignoreList":[2]}