{"version":3,"sources":["turbopack:///[project]/app/api/domain/verifications/route.ts","turbopack:///[project]/node_modules/next/dist/src/build/templates/app-route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server'\nimport { auth } from '@/lib/auth/auth'\nimport { headers } from 'next/headers'\nimport { checkDomainCanReceiveEmails, verifyDnsRecords } from '@/lib/domains-and-dns/dns'\nimport { initiateDomainVerification, deleteDomainFromSES } from '@/lib/domains-and-dns/domain-verification'\nimport { getDomainWithRecords, updateDomainStatus, createDomainVerification, deleteDomainFromDatabase } from '@/lib/db/domains'\nimport { SESClient, GetIdentityVerificationAttributesCommand } from '@aws-sdk/client-ses'\nimport { AWSSESReceiptRuleManager } from '@/lib/aws-ses/aws-ses-rules'\nimport { Autumn as autumn } from 'autumn-js'\nimport { db } from '@/lib/db'\nimport { emailDomains } from '@/lib/db/schema'\nimport { eq, count, and, sql } from 'drizzle-orm'\n\n// AWS SES Client setup\nconst awsRegion = process.env.AWS_REGION || 'us-east-2'\nconst awsAccessKeyId = process.env.AWS_ACCESS_KEY_ID\nconst awsSecretAccessKey = process.env.AWS_SECRET_ACCESS_KEY\n\nlet sesClient: SESClient | null = null\n\nif (awsAccessKeyId && awsSecretAccessKey) {\n  sesClient = new SESClient({\n    region: awsRegion,\n    credentials: {\n      accessKeyId: awsAccessKeyId,\n      secretAccessKey: awsSecretAccessKey,\n    }\n  })\n}\n\ninterface VerificationRequest {\n  action: 'canDomainBeUsed' | 'addDomain' | 'checkVerification' | 'deleteDomain' | 'verifyDomain' | 'getDomain'\n  domain: string\n  domainId?: string\n  refreshProvider?: boolean\n}\n\ninterface CanDomainBeUsedResponse {\n  success: boolean\n  domain: string\n  canBeUsed: boolean\n  canReceiveEmails: boolean\n  hasMxRecords: boolean\n  hasConflictingRecords: boolean\n  conflictingRecords?: Array<{\n    type: string\n    name: string\n    value: string\n  }>\n  provider?: {\n    name: string\n    confidence: 'high' | 'medium' | 'low'\n  }\n  error?: string\n  timestamp: Date\n}\n\ninterface AddDomainResponse {\n  success: boolean\n  domain: string\n  domainId: string\n  verificationToken: string\n  status: 'pending' | 'verified' | 'failed'\n  sesStatus?: string\n  dnsRecords: Array<{\n    type: string\n    name: string\n    value: string\n    isVerified: boolean\n  }>\n  canProceed: boolean\n  error?: string\n  timestamp: Date\n}\n\ninterface CheckVerificationResponse {\n  success: boolean\n  domain: string\n  domainId: string\n  status: 'pending' | 'verified' | 'failed'\n  sesStatus: string\n  sesVerified: boolean\n  dnsVerified: boolean\n  allVerified: boolean\n  dnsRecords: Array<{\n    type: string\n    name: string\n    value: string\n    isVerified: boolean\n    actualValues?: string[]\n    error?: string\n  }>\n  canProceed: boolean\n  error?: string\n  timestamp: Date\n}\n\ninterface DeleteDomainResponse {\n  success: boolean\n  domain: string\n  domainId: string\n  message: string\n  error?: string\n  timestamp: Date\n}\n\ninterface GetDomainResponse {\n  success: boolean\n  domain: {\n    id: string\n    domain: string\n    status: string\n    verificationToken: string\n    canReceiveEmails: boolean\n    hasMxRecords: boolean\n    domainProvider?: string\n    providerConfidence?: number\n    lastDnsCheck?: Date\n    lastSesCheck?: Date\n    createdAt: Date\n    updatedAt: Date\n    canProceed: boolean\n  }\n  dnsRecords: Array<{\n    type: string\n    name: string\n    value: string\n    isVerified: boolean\n    isRequired: boolean\n    lastChecked?: Date\n  }>\n  emailAddresses: Array<{\n    id: string\n    address: string\n    webhookId?: string\n    webhookName?: string\n    isActive: boolean\n    isReceiptRuleConfigured: boolean\n    receiptRuleName?: string\n    createdAt: Date\n    updatedAt: Date\n    emailsLast24h: number\n  }>\n  stats: {\n    totalEmailAddresses: number\n    activeEmailAddresses: number\n    configuredEmailAddresses: number\n    totalEmailsLast24h: number\n  }\n  error?: string\n  timestamp: Date\n}\n\nexport async function POST(request: NextRequest) {\n  const startTime = Date.now()\n  let requestData: VerificationRequest | null = null\n\n  try {\n    console.log('üîç Domain Verification API - Starting request processing')\n\n    // Get user session\n    const session = await auth.api.getSession({\n      headers: await headers()\n    })\n\n    if (!session?.user?.id) {\n      console.log('‚ùå Domain Verification API - Unauthorized access attempt')\n      return NextResponse.json(\n        { success: false, error: 'Unauthorized' },\n        { status: 401 }\n      )\n    }\n\n    // Parse request data\n    try {\n      requestData = await request.json()\n      console.log('üì• Domain Verification API - Raw request data:', JSON.stringify(requestData, null, 2))\n    } catch (parseError) {\n      console.log('‚ùå Domain Verification API - Invalid JSON in request body')\n      return NextResponse.json(\n        { success: false, error: 'Invalid JSON in request body' },\n        { status: 400 }\n      )\n    }\n\n    if (!requestData) {\n      console.log('‚ö†Ô∏è Domain Verification API - No request data provided')\n      return NextResponse.json(\n        { success: false, error: 'Request data is required' },\n        { status: 400 }\n      )\n    }\n\n    const { action, domain, domainId, refreshProvider } = requestData\n\n\n    console.log(`üåê Domain Verification API - Processing action: ${action} for domain: ${domain} by user: ${session.user.email} and domainId: ${domainId}`)\n\n    // Validate required fields\n    if (!action || !domain) {\n      console.log('‚ö†Ô∏è Domain Verification API - Missing required fields (action or domain)')\n      return NextResponse.json(\n        { success: false, error: 'Action and domain are required' },\n        { status: 400 }\n      )\n    }\n\n    // Validate domain format (skip validation for getDomain action when domainId is provided)\n    const domainRegex = /^[a-zA-Z0-9]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(\\.[a-zA-Z0-9]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/\n    if (action !== 'getDomain' && (!domainRegex.test(domain) || domain.length > 253)) {\n      console.log(`‚ö†Ô∏è Domain Verification API - Invalid domain format: ${domain}`)\n      return NextResponse.json(\n        { success: false, error: 'Invalid domain format' },\n        { status: 400 }\n      )\n    }\n    \n    // For getDomain action, we can skip domain format validation since we use domainId for lookup\n    if (action === 'getDomain' && domainId && (!domainRegex.test(domain) || domain.length > 253)) {\n      console.log(`‚ÑπÔ∏è Domain Verification API - Skipping domain format validation for getDomain action with domainId: ${domainId}`)\n    }\n\n    // Handle different actions\n    switch (action) {\n      case 'verifyDomain':\n        return await handleVerifyDomain(domain, startTime)\n\n      case 'canDomainBeUsed':\n        return await handleCanDomainBeUsed(domain, session.user.id, startTime)\n\n      case 'addDomain':\n        return await handleAddDomain(domain, session.user.id, startTime)\n\n      case 'checkVerification':\n        if (!domainId || domainId.trim() === '') {\n          console.log('‚ö†Ô∏è Domain Verification API - Missing domainId for checkVerification action. domainId:', domainId)\n          return NextResponse.json(\n            { success: false, error: 'domainId is required for checkVerification action' },\n            { status: 400 }\n          )\n        }\n        return await handleCheckVerification(domain, domainId, session.user.id, startTime)\n\n      case 'getDomain':\n        if (!domainId || domainId.trim() === '') {\n          console.log('‚ö†Ô∏è Domain Verification API - Missing domainId for getDomain action. domainId:', domainId)\n          return NextResponse.json(\n            { success: false, error: 'domainId is required for getDomain action' },\n            { status: 400 }\n          )\n        }\n        return await handleGetDomain(domain, domainId, session.user.id, refreshProvider || false, startTime)\n\n      case 'deleteDomain':\n        if (!domainId) {\n          console.log('‚ö†Ô∏è Domain Verification API - Missing domainId for deleteDomain action')\n          return NextResponse.json(\n            { success: false, error: 'domainId is required for deleteDomain action' },\n            { status: 400 }\n          )\n        }\n        return await handleDeleteDomain(domain, domainId, session.user.id, startTime)\n\n      default:\n        console.log(`‚ö†Ô∏è Domain Verification API - Invalid action: ${action}`)\n        return NextResponse.json(\n          { success: false, error: `Invalid action: ${action}. Must be one of: canDomainBeUsed, addDomain, checkVerification, getDomain, deleteDomain` },\n          { status: 400 }\n        )\n    }\n\n  } catch (error) {\n    const duration = Date.now() - startTime\n    const domain = requestData?.domain || 'unknown'\n    const action = requestData?.action || 'unknown'\n\n    console.error(`üí• Domain Verification API - Error processing ${action} for domain ${domain} after ${duration}ms:`, error)\n    console.error(`   Error details:`, {\n      message: error instanceof Error ? error.message : 'Unknown error',\n      stack: error instanceof Error ? error.stack : undefined,\n      domain,\n      action,\n      timestamp: new Date().toISOString()\n    })\n\n    return NextResponse.json(\n      {\n        success: false,\n        error: 'Internal server error occurred during domain verification',\n        domain,\n        timestamp: new Date()\n      },\n      { status: 500 }\n    )\n  }\n}\n\nasync function handleCanDomainBeUsed(\n  domain: string,\n  userId: string,\n  startTime: number\n): Promise<NextResponse<CanDomainBeUsedResponse>> {\n  try {\n    console.log(`üîç Can Domain Be Used - Checking domain: ${domain}`)\n\n    // Check DNS records using server-side DNS utilities\n    const dnsResult = await checkDomainCanReceiveEmails(domain)\n\n    console.log(`üìä Can Domain Be Used - DNS check results for ${domain}:`, {\n      canReceiveEmails: dnsResult.canReceiveEmails,\n      hasMxRecords: dnsResult.hasMxRecords,\n      provider: dnsResult.provider?.name,\n      error: dnsResult.error\n    })\n\n    // Check for conflicting records (MX or CNAME on the same name)\n    let hasConflictingRecords = false\n    let conflictingRecords: Array<{ type: string; name: string; value: string }> = []\n\n    // If domain has MX records, those are potential conflicts\n    if (dnsResult.hasMxRecords && dnsResult.mxRecords) {\n      hasConflictingRecords = true\n      conflictingRecords = dnsResult.mxRecords.map(mx => ({\n        type: 'MX',\n        name: domain,\n        value: `${mx.priority} ${mx.exchange}`\n      }))\n    }\n\n    // TODO: Add CNAME record checking if needed\n    // This would require additional DNS resolution logic\n\n    const canBeUsed = dnsResult.canReceiveEmails && !hasConflictingRecords\n\n    const duration = Date.now() - startTime\n    console.log(`üèÅ Can Domain Be Used - Completed for ${domain} in ${duration}ms - Result: ${canBeUsed ? 'CAN BE USED' : 'CANNOT BE USED'}`)\n\n    const response: CanDomainBeUsedResponse = {\n      success: true,\n      domain,\n      canBeUsed,\n      canReceiveEmails: dnsResult.canReceiveEmails,\n      hasMxRecords: dnsResult.hasMxRecords,\n      hasConflictingRecords,\n      conflictingRecords: conflictingRecords.length > 0 ? conflictingRecords : undefined,\n      provider: dnsResult.provider,\n      error: dnsResult.error,\n      timestamp: new Date()\n    }\n\n    return NextResponse.json(response)\n\n  } catch (error) {\n    const duration = Date.now() - startTime\n    console.error(`üí• Can Domain Be Used - Error for domain ${domain} after ${duration}ms:`, error)\n\n    const response: CanDomainBeUsedResponse = {\n      success: false,\n      domain,\n      canBeUsed: false,\n      canReceiveEmails: false,\n      hasMxRecords: false,\n      hasConflictingRecords: false,\n      error: error instanceof Error ? error.message : 'Failed to check domain availability',\n      timestamp: new Date()\n    }\n\n    return NextResponse.json(response, { status: 500 })\n  }\n}\n\nasync function handleAddDomain(\n  domain: string,\n  userId: string,\n  startTime: number\n): Promise<NextResponse<AddDomainResponse>> {\n  try {\n    console.log(`üöÄ Add Domain - Starting domain addition for domain: ${domain}`)\n\n    // Check if domain exists in database\n    const existingDomain = await getDomainWithRecords(domain, userId)\n    if (existingDomain) {\n      console.log(`‚ùå Add Domain - Domain already exists in database: ${domain}`)\n      const response: AddDomainResponse = {\n        success: false,\n        domain,\n        domainId: existingDomain.id,\n        verificationToken: existingDomain.verificationToken || '',\n        status: existingDomain.status as 'pending' | 'verified' | 'failed',\n        dnsRecords: existingDomain.dnsRecords.map(r => ({\n          type: r.recordType,\n          name: r.name,\n          value: r.value,\n          isVerified: r.isVerified ?? false\n        })),\n        canProceed: true,\n        error: 'Domain already exists',\n        timestamp: new Date()\n      }\n      return NextResponse.json(response, { status: 400 })\n    }\n\n    // Check Autumn domain limits before proceeding\n    console.log(`üîç Add Domain - Checking Autumn domain limits for user: ${userId}`)\n    const { data: domainCheck, error: domainCheckError } = await autumn.check({\n      customer_id: userId,\n      feature_id: \"domains\",\n    })\n\n    console.log(await autumn.check({customer_id: userId, feature_id: \"domains\"}))\n\n    if (domainCheckError) {\n      console.error('Add Domain - Autumn domain check error:', domainCheckError)\n      const response: AddDomainResponse = {\n        success: false,\n        domain,\n        domainId: '',\n        verificationToken: '',\n        status: 'failed',\n        dnsRecords: [],\n        canProceed: false,\n        error: 'Failed to check domain limits',\n        timestamp: new Date()\n      }\n      return NextResponse.json(response, { status: 500 })\n    }\n\n    console.log('domainCheck', domainCheck)\n\n    if (!domainCheck?.allowed) {\n      console.log(`‚ùå Add Domain - Domain limit reached for user: ${userId}`)\n      const response: AddDomainResponse = {\n        success: false,\n        domain,\n        domainId: '',\n        verificationToken: '',\n        status: 'failed',\n        dnsRecords: [],\n        canProceed: false,\n        error: 'Domain limit reached. Please upgrade your plan to add more domains.',\n        timestamp: new Date()\n      }\n      return NextResponse.json(response, { status: 403 })\n    }\n\n    console.log(`‚úÖ Add Domain - Domain limits check passed for user: ${userId}`, {\n      allowed: domainCheck.allowed,\n      balance: domainCheck.balance,\n      unlimited: domainCheck.unlimited\n    })\n\n    // Step 1: Check DNS records first\n    console.log(`üîç Add Domain - Checking DNS records for ${domain}`)\n    const dnsResult = await checkDomainCanReceiveEmails(domain)\n\n    // Step 2: Create domain record in database with pending status\n    console.log(`üíæ Add Domain - Creating domain record in database`)\n    const domainRecord = await createDomainVerification(\n      domain,\n      userId,\n      {\n        canReceiveEmails: dnsResult.canReceiveEmails,\n        hasMxRecords: dnsResult.hasMxRecords,\n        provider: dnsResult.provider\n      }\n    )\n\n    // Step 3: Use the shared verification function to initiate SES verification\n    const verificationResult = await initiateDomainVerification(domain, userId)\n\n    // Step 4: Track domain usage with Autumn (only if not unlimited)\n    if (!domainCheck.unlimited) {\n      console.log(`üìä Add Domain - Tracking domain usage with Autumn for user: ${userId}`)\n      const { error: trackError } = await autumn.track({\n        customer_id: userId,\n        feature_id: \"domains\",\n        value: 1,\n      })\n\n      if (trackError) {\n        console.error('Add Domain - Failed to track domain usage:', trackError)\n        // Don't fail the domain creation if tracking fails, just log it\n        console.warn(`‚ö†Ô∏è Add Domain - Domain created but usage tracking failed for user: ${userId}`)\n      } else {\n        console.log(`‚úÖ Add Domain - Successfully tracked domain usage for user: ${userId}`)\n      }\n    } else {\n      console.log(`‚ôæÔ∏è Add Domain - User has unlimited domains, no tracking needed for user: ${userId}`)\n    }\n\n    // Map old status values to new simplified enum\n    let mappedStatus: 'pending' | 'verified' | 'failed' = 'pending'\n    if (verificationResult.status === 'verified') {\n      mappedStatus = 'verified'\n    } else if (verificationResult.status === 'failed') {\n      mappedStatus = 'failed'\n    } else {\n      mappedStatus = 'pending'\n    }\n\n    const duration = Date.now() - startTime\n    console.log(`üèÅ Add Domain - Completed for ${domain} in ${duration}ms - Status: ${mappedStatus}`)\n\n    const response: AddDomainResponse = {\n      success: true,\n      domain: verificationResult.domain,\n      domainId: verificationResult.domainId,\n      verificationToken: verificationResult.verificationToken,\n      status: mappedStatus,\n      sesStatus: verificationResult.sesStatus,\n      dnsRecords: verificationResult.dnsRecords,\n      canProceed: verificationResult.canProceed,\n      error: verificationResult.error,\n      timestamp: new Date()\n    }\n\n    return NextResponse.json(response)\n\n  } catch (error) {\n    const duration = Date.now() - startTime\n    console.error(`üí• Add Domain - Error for domain ${domain} after ${duration}ms:`, error)\n\n    const response: AddDomainResponse = {\n      success: false,\n      domain,\n      domainId: '',\n      verificationToken: '',\n      status: 'failed',\n      dnsRecords: [],\n      canProceed: false,\n      error: error instanceof Error ? error.message : 'Failed to add domain',\n      timestamp: new Date()\n    }\n\n    return NextResponse.json(response, { status: 500 })\n  }\n}\n\nasync function handleCheckVerification(\n  domain: string,\n  domainId: string,\n  userId: string,\n  startTime: number\n): Promise<NextResponse<CheckVerificationResponse>> {\n  try {\n    console.log(`‚úÖ Check Verification - Checking verification status for domain: ${domain}`)\n\n    // Get domain record from database\n    const domainRecord = await getDomainWithRecords(domain, userId)\n    if (!domainRecord) {\n      console.log(`‚ùå Check Verification - Domain not found: ${domain}`)\n      const response: CheckVerificationResponse = {\n        success: false,\n        domain,\n        domainId,\n        status: 'failed',\n        sesStatus: 'NotFound',\n        sesVerified: false,\n        dnsVerified: false,\n        allVerified: false,\n        dnsRecords: [],\n        canProceed: false,\n        error: 'Domain not found',\n        timestamp: new Date()\n      }\n      return NextResponse.json(response, { status: 404 })\n    }\n\n    console.log(`üìã Check Verification - Found ${domainRecord.dnsRecords.length} DNS records to verify`)\n\n    // Step 1: Check SES verification status\n    let sesVerified = false\n    let sesStatus = 'Pending'\n\n    if (sesClient) {\n      try {\n        console.log(`üîç Check Verification - Checking SES status for ${domain}`)\n        const getAttributesCommand = new GetIdentityVerificationAttributesCommand({\n          Identities: [domain]\n        })\n\n        const attributesResponse = await sesClient.send(getAttributesCommand)\n        const attributes = attributesResponse.VerificationAttributes?.[domain]\n\n        if (attributes) {\n          sesStatus = attributes.VerificationStatus || 'Pending'\n          sesVerified = sesStatus === 'Success'\n          console.log(`üìä Check Verification - SES status for ${domain}: ${sesStatus}`)\n        } else {\n          console.log(`‚ö†Ô∏è Check Verification - No SES verification attributes found for ${domain}`)\n        }\n      } catch (sesError) {\n        console.error(`‚ùå Check Verification - SES check failed for ${domain}:`, sesError)\n        sesStatus = 'Error'\n      }\n    } else {\n      console.log(`‚ö†Ô∏è Check Verification - SES client not available`)\n      sesStatus = 'NotConfigured'\n    }\n\n    // Step 2: Check DNS records verification\n    const recordsToCheck = domainRecord.dnsRecords.map(r => ({\n      type: r.recordType,\n      name: r.name,\n      value: r.value\n    }))\n\n    console.log(`üîé Check Verification - Verifying ${recordsToCheck.length} DNS records`)\n    const dnsChecks = await verifyDnsRecords(recordsToCheck)\n\n    // Log DNS verification results\n    console.log(`üìä Check Verification - DNS verification results:`)\n    dnsChecks.forEach((check, index) => {\n      const status = check.isVerified ? '‚úÖ' : '‚ùå'\n      console.log(`   ${index + 1}. ${status} ${check.type} ${check.name} - ${check.isVerified ? 'VERIFIED' : 'FAILED'}`)\n      if (!check.isVerified && check.error) {\n        console.log(`      Error: ${check.error}`)\n      }\n    })\n\n    const dnsVerified = dnsChecks.every(check => check.isVerified)\n    const allVerified = sesVerified && dnsVerified\n\n    console.log(`üìà Check Verification - Verification summary for ${domain}:`, {\n      sesVerified,\n      dnsVerified,\n      allVerified\n    })\n\n    // Step 3: Update domain status if needed\n    let newStatus: 'pending' | 'verified' | 'failed' = domainRecord.status as 'pending' | 'verified' | 'failed'\n    if (allVerified && sesVerified) {\n      newStatus = 'verified'\n    } else if (!dnsVerified) {\n      newStatus = 'pending'\n    }\n\n    if (newStatus !== domainRecord.status) {\n      console.log(`üìù Check Verification - Updating domain status from ${domainRecord.status} to ${newStatus}`)\n      await updateDomainStatus(domainRecord.id, newStatus)\n    }\n\n    const duration = Date.now() - startTime\n    console.log(`üèÅ Check Verification - Completed for ${domain} in ${duration}ms - All verified: ${allVerified}`)\n\n    const response: CheckVerificationResponse = {\n      success: true,\n      domain,\n      domainId,\n      status: newStatus,\n      sesStatus,\n      sesVerified,\n      dnsVerified,\n      allVerified,\n      dnsRecords: dnsChecks.map(check => ({\n        type: check.type,\n        name: check.name,\n        value: check.expectedValue,\n        isVerified: check.isVerified,\n        actualValues: check.actualValues,\n        error: check.error\n      })),\n      canProceed: allVerified,\n      timestamp: new Date()\n    }\n\n    return NextResponse.json(response)\n\n  } catch (error) {\n    const duration = Date.now() - startTime\n    console.error(`üí• Check Verification - Error for domain ${domain} after ${duration}ms:`, error)\n\n    const response: CheckVerificationResponse = {\n      success: false,\n      domain,\n      domainId,\n      status: 'failed',\n      sesStatus: 'Error',\n      sesVerified: false,\n      dnsVerified: false,\n      allVerified: false,\n      dnsRecords: [],\n      canProceed: false,\n      error: error instanceof Error ? error.message : 'Failed to check verification status',\n      timestamp: new Date()\n    }\n\n    return NextResponse.json(response, { status: 500 })\n  }\n}\n\nasync function handleVerifyDomain(\n  domain: string,\n  startTime: number\n): Promise<NextResponse<CheckVerificationResponse>> {\n  try {\n    console.log(`‚úÖ Verify Domain - Checking verification status for domain: ${domain}`)\n\n    // Step 1: Check SES verification status\n    let sesVerified = false\n    let sesStatus = 'Pending'\n\n    if (sesClient) {\n      try {\n        console.log(`üîç Verify Domain - Checking SES status for ${domain}`)\n        const getAttributesCommand = new GetIdentityVerificationAttributesCommand({\n          Identities: [domain]\n        })\n\n        console.log('üì¶ getAttributesCommand', getAttributesCommand)\n\n        const attributesResponse = await sesClient.send(getAttributesCommand)\n        const attributes = attributesResponse.VerificationAttributes?.[domain]\n\n        if (attributes) {\n          sesStatus = attributes.VerificationStatus || 'Pending'\n          sesVerified = sesStatus === 'Success'\n          console.log(`üìä Check Verification - SES status for ${domain}: ${sesStatus}`)\n        } else {\n          console.log(`‚ö†Ô∏è Check Verification - No SES verification attributes found for ${domain}`)\n        }\n      } catch (sesError) {\n        console.error(`‚ùå Check Verification - SES check failed for ${domain}:`, sesError)\n        sesStatus = 'Error'\n      }\n    } else {\n      console.log(`‚ö†Ô∏è Check Verification - SES client not available`)\n      sesStatus = 'NotConfigured'\n    }\n\n    // Step 2: Check DNS records verification\n\n    const recordsToCheck = [\n      {\n        type: 'TXT',\n        name: '_amazonses.domain.com',\n        value: '1234567890'\n      }\n    ]\n    const dnsChecks = await verifyDnsRecords(recordsToCheck)\n\n    // Log DNS verification results\n    console.log(`üìä Check Verification - DNS verification results:`)\n    dnsChecks.forEach((check, index) => {\n      const status = check.isVerified ? '‚úÖ' : '‚ùå'\n      console.log(`   ${index + 1}. ${status} ${check.type} ${check.name} - ${check.isVerified ? 'VERIFIED' : 'FAILED'}`)\n      if (!check.isVerified && check.error) {\n        console.log(`      Error: ${check.error}`)\n      }\n    })\n\n    const dnsVerified = dnsChecks.every(check => check.isVerified)\n    const allVerified = sesVerified && dnsVerified\n\n    console.log(`üìà Check Verification - Verification summary for ${domain}:`, {\n      sesVerified,\n      dnsVerified,\n      allVerified\n    })\n\n    const duration = Date.now() - startTime\n    console.log(`üèÅ Check Verification - Completed for ${domain} in ${duration}ms - All verified: ${allVerified}`)\n\n    const response: CheckVerificationResponse = {\n      success: true,\n      domain,\n      domainId: '123',\n      status: 'verified',\n      sesStatus,\n      sesVerified,\n      dnsVerified,\n      allVerified,\n      dnsRecords: dnsChecks.map(check => ({\n        type: check.type,\n        name: check.name,\n        value: check.expectedValue,\n        isVerified: check.isVerified,\n        actualValues: check.actualValues,\n        error: check.error\n      })),\n      canProceed: allVerified,\n      timestamp: new Date()\n    }\n\n    return NextResponse.json(response)\n\n  } catch (error) {\n    const duration = Date.now() - startTime\n    console.error(`üí• Check Verification - Error for domain ${domain} after ${duration}ms:`, error)\n\n    const response: CheckVerificationResponse = {\n      success: false,\n      domain,\n      domainId: '123',\n      status: 'failed',\n      sesStatus: 'Error',\n      sesVerified: false,\n      dnsVerified: false,\n      allVerified: false,\n      dnsRecords: [],\n      canProceed: false,\n      error: error instanceof Error ? error.message : 'Failed to check verification status',\n      timestamp: new Date()\n    }\n\n    return NextResponse.json(response, { status: 500 })\n  }\n}\n\nasync function handleDeleteDomain(\n  domain: string,\n  domainId: string,\n  userId: string,\n  startTime: number\n): Promise<NextResponse<DeleteDomainResponse>> {\n  try {\n    console.log(`üóëÔ∏è Delete Domain - Starting domain deletion for domain: ${domain}, domainId: ${domainId}`)\n\n    // Verify domain ownership first\n    const domainRecord = await getDomainWithRecords(domain, userId)\n    if (!domainRecord || domainRecord.id !== domainId) {\n      console.log(`‚ùå Delete Domain - Domain not found or access denied: ${domain}`)\n      const response: DeleteDomainResponse = {\n        success: false,\n        domain,\n        domainId,\n        message: '',\n        error: 'Domain not found or access denied',\n        timestamp: new Date()\n      }\n      return NextResponse.json(response, { status: 404 })\n    }\n\n    console.log(`‚úÖ Delete Domain - Domain ownership verified for: ${domain}`)\n\n    // Step 1: Remove SES receipt rules first (if domain is verified)\n    if (domainRecord.status === 'verified') {\n      try {\n        console.log(`üîß Delete Domain - Removing SES receipt rules for: ${domain}`)\n        const sesRuleManager = new AWSSESReceiptRuleManager()\n        const ruleRemoved = await sesRuleManager.removeEmailReceiving(domain)\n\n        if (ruleRemoved) {\n          console.log(`‚úÖ Delete Domain - SES receipt rules removed for: ${domain}`)\n        } else {\n          console.log(`‚ö†Ô∏è Delete Domain - Failed to remove SES receipt rules for: ${domain}`)\n        }\n      } catch (error) {\n        console.error('Delete Domain - Error removing SES receipt rules:', error)\n        // Continue with deletion even if receipt rule removal fails\n      }\n    }\n\n    // Step 2: Delete domain identity from SES\n    console.log(`üóëÔ∏è Delete Domain - Deleting domain identity from SES: ${domain}`)\n    const sesDeleteResult = await deleteDomainFromSES(domain)\n\n    if (!sesDeleteResult.success) {\n      console.error(`‚ùå Delete Domain - Failed to delete domain from SES: ${sesDeleteResult.error}`)\n      const response: DeleteDomainResponse = {\n        success: false,\n        domain,\n        domainId,\n        message: '',\n        error: `Failed to delete domain from AWS SES: ${sesDeleteResult.error}`,\n        timestamp: new Date()\n      }\n      return NextResponse.json(response, { status: 500 })\n    }\n\n    console.log(`‚úÖ Delete Domain - Domain deleted from SES: ${domain}`)\n\n    // Step 3: Delete domain and related records from database\n    console.log(`üóëÔ∏è Delete Domain - Deleting domain from database: ${domain}`)\n    const dbDeleteResult = await deleteDomainFromDatabase(domainId, userId)\n\n    if (!dbDeleteResult.success) {\n      console.error(`‚ùå Delete Domain - Failed to delete domain from database: ${dbDeleteResult.error}`)\n      const response: DeleteDomainResponse = {\n        success: false,\n        domain,\n        domainId,\n        message: '',\n        error: `Failed to delete domain from database: ${dbDeleteResult.error}`,\n        timestamp: new Date()\n      }\n      return NextResponse.json(response, { status: 500 })\n    }\n\n    console.log(`‚úÖ Delete Domain - Domain deleted from database: ${domain}`)\n\n    // Step 4: Track domain deletion with Autumn to free up domain spot\n    console.log(`üìä Delete Domain - Tracking domain deletion with Autumn for user: ${userId}`)\n    const { error: trackError } = await autumn.track({\n      customer_id: userId,\n      feature_id: \"domains\",\n      value: -1,\n    })\n\n    if (trackError) {\n      console.error('Delete Domain - Failed to track domain deletion:', trackError)\n      // Don't fail the deletion if tracking fails, just log it\n      console.warn(`‚ö†Ô∏è Delete Domain - Domain deleted but usage tracking failed for user: ${userId}`)\n    } else {\n      console.log(`‚úÖ Delete Domain - Successfully tracked domain deletion for user: ${userId}`)\n    }\n\n    const duration = Date.now() - startTime\n    console.log(`üèÅ Delete Domain - Completed deletion for ${domain} in ${duration}ms`)\n\n    const response: DeleteDomainResponse = {\n      success: true,\n      domain,\n      domainId,\n      message: 'Domain deleted successfully',\n      timestamp: new Date()\n    }\n\n    return NextResponse.json(response)\n\n  } catch (error) {\n    const duration = Date.now() - startTime\n    console.error(`üí• Delete Domain - Error for domain ${domain} after ${duration}ms:`, error)\n\n    const response: DeleteDomainResponse = {\n      success: false,\n      domain,\n      domainId,\n      message: '',\n      error: error instanceof Error ? error.message : 'Failed to delete domain',\n      timestamp: new Date()\n    }\n\n    return NextResponse.json(response, { status: 500 })\n  }\n}\n\nasync function handleGetDomain(\n  domain: string,\n  domainId: string,\n  userId: string,\n  refreshProvider: boolean,\n  startTime: number\n): Promise<NextResponse<GetDomainResponse>> {\n  try {\n    console.log(`üìã Get Domain - Fetching domain details for: ${domain}, domainId: ${domainId}`)\n\n    // Get domain record\n    const domainRecord = await db\n      .select()\n      .from(emailDomains)\n      .where(and(eq(emailDomains.id, domainId), eq(emailDomains.userId, userId)))\n      .limit(1)\n\n    if (!domainRecord[0]) {\n      console.log(`‚ùå Get Domain - Domain not found: ${domain}`)\n      const response: GetDomainResponse = {\n        success: false,\n        domain: {\n          id: '',\n          domain: '',\n          status: '',\n          verificationToken: '',\n          canReceiveEmails: false,\n          hasMxRecords: false,\n          createdAt: new Date(),\n          updatedAt: new Date(),\n          canProceed: false\n        },\n        dnsRecords: [],\n        emailAddresses: [],\n        stats: {\n          totalEmailAddresses: 0,\n          activeEmailAddresses: 0,\n          configuredEmailAddresses: 0,\n          totalEmailsLast24h: 0\n        },\n        error: 'Domain not found',\n        timestamp: new Date()\n      }\n      return NextResponse.json(response, { status: 404 })\n    }\n\n    let domainData = domainRecord[0]\n\n    // Refresh domain provider if requested\n    if (refreshProvider) {\n      try {\n        console.log(`üîç Get Domain - Refreshing domain provider for: ${domainData.domain}`)\n        \n        // Import detectDomainProvider function\n        const { detectDomainProvider } = await import('@/lib/domains-and-dns/dns')\n        const providerInfo = await detectDomainProvider(domainData.domain)\n        \n        if (providerInfo) {\n          console.log(`‚úÖ Get Domain - Provider detected: ${providerInfo.name} (${providerInfo.confidence} confidence)`)\n          \n          // Update domain record with new provider information\n          const [updatedDomain] = await db\n            .update(emailDomains)\n            .set({\n              domainProvider: providerInfo.name,\n              providerConfidence: providerInfo.confidence,\n              lastDnsCheck: new Date(),\n              updatedAt: new Date()\n            })\n            .where(eq(emailDomains.id, domainId))\n            .returning()\n          \n          if (updatedDomain) {\n            domainData = updatedDomain\n            console.log(`üíæ Get Domain - Updated domain provider: ${providerInfo.name}`)\n          }\n        } else {\n          console.log(`‚ö†Ô∏è Get Domain - No provider detected for domain: ${domainData.domain}`)\n        }\n      } catch (error) {\n        console.error('Get Domain - Error refreshing domain provider:', error)\n        // Continue with existing domain data if provider refresh fails\n      }\n    }\n\n    // Perform comprehensive SES verification check if refreshProvider=true\n    let updatedDomain = domainData\n    if (refreshProvider && sesClient) {\n      try {\n        console.log(`üîç Get Domain - Performing comprehensive SES verification check for domain: ${domainData.domain}`)\n        \n        // Get current verification status from AWS SES\n        const getAttributesCommand = new GetIdentityVerificationAttributesCommand({\n          Identities: [domainData.domain]\n        })\n\n        const attributesResponse = await sesClient.send(getAttributesCommand)\n        const attributes = attributesResponse.VerificationAttributes?.[domainData.domain]\n\n        if (attributes) {\n          const sesStatus = attributes.VerificationStatus || 'Pending'\n          console.log(`üìä Get Domain - AWS SES verification status for ${domainData.domain}: ${sesStatus}`)\n          \n          // Import DOMAIN_STATUS\n          const { DOMAIN_STATUS } = await import('@/lib/db/schema')\n          \n          // Determine new domain status based on SES response\n          let newStatus = domainData.status\n          if (sesStatus === 'Success') {\n            newStatus = DOMAIN_STATUS.VERIFIED\n          } else if (sesStatus === 'Failed') {\n            newStatus = DOMAIN_STATUS.FAILED\n          }\n          \n          // Update domain record if status changed\n          if (newStatus !== domainData.status) {\n            console.log(`üìù Get Domain - Updating domain status from ${domainData.status} to ${newStatus}, SES status: ${sesStatus}`)\n            \n            const [updated] = await db\n              .update(emailDomains)\n              .set({\n                status: newStatus,\n                lastSesCheck: new Date(),\n                updatedAt: new Date()\n              })\n              .where(eq(emailDomains.id, domainId))\n              .returning()\n            \n            if (updated) {\n              updatedDomain = updated\n              console.log(`‚úÖ Get Domain - Updated domain status successfully`)\n            }\n          } else {\n            console.log(`‚ÑπÔ∏è Get Domain - Domain status unchanged, updating last check time`)\n            \n            // Still update the last check time\n            const [updated] = await db\n              .update(emailDomains)\n              .set({\n                lastSesCheck: new Date(),\n                updatedAt: new Date()\n              })\n              .where(eq(emailDomains.id, domainId))\n              .returning()\n              \n            if (updated) {\n              updatedDomain = updated\n            }\n          }\n        } else {\n          console.log(`‚ö†Ô∏è Get Domain - No verification attributes found for domain: ${domainData.domain}`)\n        }\n      } catch (error) {\n        console.error('Get Domain - Error performing comprehensive SES verification check:', error)\n        // Continue with existing domain data if SES check fails\n      }\n    } else if (refreshProvider && !sesClient) {\n      console.log(`‚ö†Ô∏è Get Domain - SES client not available for comprehensive verification check`)\n    } else {\n      // Auto-check SES verification if domain is in verified status\n      const { DOMAIN_STATUS } = await import('@/lib/db/schema')\n      if (domainData.status === DOMAIN_STATUS.VERIFIED) {\n        try {\n          console.log(`Get Domain - Auto-checking SES verification for domain: ${domainData.domain}`)\n          const verificationResult = await initiateDomainVerification(domainData.domain, userId)\n          \n          // If status changed, get the updated domain record\n          if (verificationResult.status === DOMAIN_STATUS.VERIFIED) {\n            const updatedDomainRecord = await db\n              .select()\n              .from(emailDomains)\n              .where(and(eq(emailDomains.id, domainId), eq(emailDomains.userId, userId)))\n              .limit(1)\n            \n            if (updatedDomainRecord[0]) {\n              updatedDomain = updatedDomainRecord[0]\n              console.log(`Get Domain - Domain status updated from ${domainData.status} to ${updatedDomain.status}`)\n            }\n          }\n        } catch (error) {\n          console.error('Get Domain - Error auto-checking SES verification:', error)\n          // Continue with original domain data if verification check fails\n        }\n      }\n    }\n\n    // Get DNS records\n    const { domainDnsRecords } = await import('@/lib/db/schema')\n    const dnsRecords = await db\n      .select()\n      .from(domainDnsRecords)\n      .where(eq(domainDnsRecords.domainId, domainId))\n\n    // Calculate 24 hours ago\n    const twentyFourHoursAgo = new Date(Date.now() - 24 * 60 * 60 * 1000)\n\n    // Get email addresses with their statistics and webhook information\n    const { emailAddresses, webhooks, sesEvents } = await import('@/lib/db/schema')\n    const emailAddressesWithStats = await db\n      .select({\n        id: emailAddresses.id,\n        address: emailAddresses.address,\n        webhookId: emailAddresses.webhookId,\n        webhookName: webhooks.name,\n        isActive: emailAddresses.isActive,\n        isReceiptRuleConfigured: emailAddresses.isReceiptRuleConfigured,\n        receiptRuleName: emailAddresses.receiptRuleName,\n        createdAt: emailAddresses.createdAt,\n        updatedAt: emailAddresses.updatedAt,\n        emailsLast24h: sql<number>`COALESCE(${sql`(\n          SELECT COUNT(*)::int \n          FROM ${sesEvents} \n          WHERE EXISTS (\n            SELECT 1 \n            FROM jsonb_array_elements_text(${sesEvents.destination}::jsonb) AS dest_email\n            WHERE dest_email = ${emailAddresses.address}\n          )\n          AND ${sesEvents.timestamp} >= ${twentyFourHoursAgo}\n        )`}, 0)`\n      })\n      .from(emailAddresses)\n      .leftJoin(webhooks, eq(emailAddresses.webhookId, webhooks.id))\n      .where(eq(emailAddresses.domainId, domainId))\n      .orderBy(emailAddresses.createdAt)\n\n    // Transform DNS records for frontend\n    const transformedDnsRecords = dnsRecords.map(record => ({\n      type: record.recordType,\n      name: record.name,\n      value: record.value,\n      isVerified: record.isVerified ?? false,\n      isRequired: record.isRequired ?? false,\n      lastChecked: record.lastChecked ?? undefined\n    }))\n\n    // Calculate verification status\n    const { DOMAIN_STATUS } = await import('@/lib/db/schema')\n    const allRequiredDnsVerified = dnsRecords\n      .filter(record => record.isRequired)\n      .every(record => record.isVerified)\n\n    const canProceed = updatedDomain.status === DOMAIN_STATUS.VERIFIED || \n      (updatedDomain.status === DOMAIN_STATUS.VERIFIED && allRequiredDnsVerified)\n\n    const duration = Date.now() - startTime\n    console.log(`üèÅ Get Domain - Completed for ${domain} in ${duration}ms`)\n\n    const response: GetDomainResponse = {\n      success: true,\n      domain: {\n        id: updatedDomain.id,\n        domain: updatedDomain.domain,\n        status: updatedDomain.status,\n        verificationToken: updatedDomain.verificationToken || '',\n        canReceiveEmails: updatedDomain.canReceiveEmails ?? false,\n        hasMxRecords: updatedDomain.hasMxRecords ?? false,\n        domainProvider: updatedDomain.domainProvider || undefined,\n        providerConfidence: typeof updatedDomain.providerConfidence === 'string' ? undefined : updatedDomain.providerConfidence || undefined,\n        lastDnsCheck: updatedDomain.lastDnsCheck || undefined,\n        lastSesCheck: updatedDomain.lastSesCheck || undefined,\n        createdAt: updatedDomain.createdAt || new Date(),\n        updatedAt: updatedDomain.updatedAt || new Date(),\n        canProceed\n      },\n      dnsRecords: transformedDnsRecords,\n      emailAddresses: emailAddressesWithStats.map(email => ({\n        id: email.id,\n        address: email.address,\n        webhookId: email.webhookId || undefined,\n        webhookName: email.webhookName || undefined,\n        isActive: email.isActive ?? false,\n        isReceiptRuleConfigured: email.isReceiptRuleConfigured ?? false,\n        receiptRuleName: email.receiptRuleName || undefined,\n        createdAt: email.createdAt || new Date(),\n        updatedAt: email.updatedAt || new Date(),\n        emailsLast24h: email.emailsLast24h || 0\n      })),\n      stats: {\n        totalEmailAddresses: emailAddressesWithStats.length,\n        activeEmailAddresses: emailAddressesWithStats.filter(email => email.isActive).length,\n        configuredEmailAddresses: emailAddressesWithStats.filter(email => email.isReceiptRuleConfigured).length,\n        totalEmailsLast24h: emailAddressesWithStats.reduce((sum, email) => sum + email.emailsLast24h, 0)\n      },\n      timestamp: new Date()\n    }\n\n    return NextResponse.json(response)\n\n  } catch (error) {\n    const duration = Date.now() - startTime\n    console.error(`üí• Get Domain - Error for domain ${domain} after ${duration}ms:`, error)\n\n    const response: GetDomainResponse = {\n      success: false,\n      domain: {\n        id: '',\n        domain: '',\n        status: '',\n        verificationToken: '',\n        canReceiveEmails: false,\n        hasMxRecords: false,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n        canProceed: false\n      },\n      dnsRecords: [],\n      emailAddresses: [],\n      stats: {\n        totalEmailAddresses: 0,\n        activeEmailAddresses: 0,\n        configuredEmailAddresses: 0,\n        totalEmailsLast24h: 0\n      },\n      error: error instanceof Error ? error.message : 'Failed to fetch domain details',\n      timestamp: new Date()\n    }\n\n    return NextResponse.json(response, { status: 500 })\n  }\n}","import {\n  AppRouteRouteModule,\n  type AppRouteRouteModuleOptions,\n} from '../../server/route-modules/app-route/module.compiled'\nimport { RouteKind } from '../../server/route-kind'\nimport { patchFetch as _patchFetch } from '../../server/lib/patch-fetch'\n\nimport * as userland from 'VAR_USERLAND'\n\n// These are injected by the loader afterwards. This is injected as a variable\n// instead of a replacement because this could also be `undefined` instead of\n// an empty string.\ndeclare const nextConfigOutput: AppRouteRouteModuleOptions['nextConfigOutput']\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\n// INJECT:nextConfigOutput\n\nconst routeModule = new AppRouteRouteModule({\n  definition: {\n    kind: RouteKind.APP_ROUTE,\n    page: 'VAR_DEFINITION_PAGE',\n    pathname: 'VAR_DEFINITION_PATHNAME',\n    filename: 'VAR_DEFINITION_FILENAME',\n    bundlePath: 'VAR_DEFINITION_BUNDLE_PATH',\n  },\n  resolvedPagePath: 'VAR_RESOLVED_PAGE_PATH',\n  nextConfigOutput,\n  userland,\n})\n\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule\n\nfunction patchFetch() {\n  return _patchFetch({\n    workAsyncStorage,\n    workUnitAsyncStorage,\n  })\n}\n\nexport {\n  routeModule,\n  workAsyncStorage,\n  workUnitAsyncStorage,\n  serverHooks,\n  patchFetch,\n}\n"],"names":["AppRouteRouteModule","RouteKind","patchFetch","_patchFetch","userland","routeModule","definition","kind","APP_ROUTE","page","pathname","filename","bundlePath","resolvedPagePath","nextConfigOutput","workAsyncStorage","workUnitAsyncStorage","serverHooks"],"mappings":"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","ignoreList":[1]}