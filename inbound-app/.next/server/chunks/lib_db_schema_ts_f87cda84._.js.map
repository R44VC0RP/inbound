{"version":3,"sources":["turbopack:///[project]/lib/db/schema.ts"],"sourcesContent":["import { pgTable, varchar, text, timestamp, boolean, integer } from 'drizzle-orm/pg-core';\nimport { user, session, account, verification, apikey } from './auth-schema';\n\n// Additional app-specific tables\nexport const subscriptions = pgTable('subscriptions', {\n  id: varchar('id', { length: 255 }).primaryKey(),\n  plan: varchar('plan', { length: 255 }).notNull(),\n  referenceId: varchar('reference_id', { length: 255 }).notNull(),\n  stripeCustomerId: varchar('stripe_customer_id', { length: 255 }),\n  stripeSubscriptionId: varchar('stripe_subscription_id', { length: 255 }),\n  status: varchar('status', { length: 255 }).notNull(),\n  periodStart: timestamp('period_start'),\n  periodEnd: timestamp('period_end'),\n  cancelAtPeriodEnd: boolean('cancel_at_period_end').default(false),\n  seats: integer('seats'),\n  trialStart: timestamp('trial_start'),\n  trialEnd: timestamp('trial_end'),\n  createdAt: timestamp('created_at').defaultNow(),\n  updatedAt: timestamp('updated_at').defaultNow(),\n});\n\nexport const userAccounts = pgTable('user_accounts', {\n  id: varchar('id', { length: 255 }).primaryKey(),\n  userId: varchar('user_id', { length: 255 }).notNull(),\n  stripeRestrictedKey: text('stripe_restricted_key'), // Account-level Stripe key for VIP BYOK\n  createdAt: timestamp('created_at').defaultNow(),\n  updatedAt: timestamp('updated_at').defaultNow(),\n});\n\n// User onboarding tracking table\nexport const userOnboarding = pgTable('user_onboarding', {\n  id: varchar('id', { length: 255 }).primaryKey(),\n  userId: varchar('user_id', { length: 255 }).notNull().unique(),\n  isCompleted: boolean('is_completed').default(false).notNull(),\n  defaultEndpointCreated: boolean('default_endpoint_created').default(false).notNull(),\n  completedAt: timestamp('completed_at'),\n  createdAt: timestamp('created_at').defaultNow(),\n  updatedAt: timestamp('updated_at').defaultNow(),\n});\n\n// You can add more app-specific tables here\nexport const emailDomains = pgTable('email_domains', {\n  id: varchar('id', { length: 255 }).primaryKey(),\n  domain: varchar('domain', { length: 255 }).notNull().unique(),\n  status: varchar('status', { length: 50 }).notNull(), // 'pending', 'verified', 'failed'\n  verificationToken: varchar('verification_token', { length: 255 }),\n  canReceiveEmails: boolean('can_receive_emails').default(false),\n  hasMxRecords: boolean('has_mx_records').default(false),\n  domainProvider: varchar('domain_provider', { length: 100 }),\n  providerConfidence: varchar('provider_confidence', { length: 20 }), // 'high', 'medium', 'low'\n  lastDnsCheck: timestamp('last_dns_check'),\n  lastSesCheck: timestamp('last_ses_check'),\n  // Catch-all configuration\n  isCatchAllEnabled: boolean('is_catch_all_enabled').default(false),\n  catchAllWebhookId: varchar('catch_all_webhook_id', { length: 255 }), // Link to webhooks table for catch-all emails (legacy)\n  catchAllEndpointId: varchar('catch_all_endpoint_id', { length: 255 }), // Link to endpoints table for catch-all emails (new unified system)\n  catchAllReceiptRuleName: varchar('catch_all_receipt_rule_name', { length: 255 }),\n  createdAt: timestamp('created_at').defaultNow(),\n  updatedAt: timestamp('updated_at').defaultNow(),\n  userId: varchar('user_id', { length: 255 }).notNull(),\n});\n\nexport const emailAddresses = pgTable('email_addresses', {\n  id: varchar('id', { length: 255 }).primaryKey(),\n  address: varchar('address', { length: 255 }).notNull().unique(),\n  domainId: varchar('domain_id', { length: 255 }).notNull(),\n  webhookId: varchar('webhook_id', { length: 255 }), // Link to webhooks table (kept for backward compatibility)\n  endpointId: varchar('endpoint_id', { length: 255 }), // Link to endpoints table (new unified system)\n  isActive: boolean('is_active').default(true),\n  isReceiptRuleConfigured: boolean('is_receipt_rule_configured').default(false),\n  receiptRuleName: varchar('receipt_rule_name', { length: 255 }),\n  // VIP fields\n  isVipEnabled: boolean('is_vip_enabled').default(false),\n  vipConfigId: varchar('vip_config_id', { length: 255 }), // Link to vipConfigs table\n  createdAt: timestamp('created_at').defaultNow(),\n  updatedAt: timestamp('updated_at').defaultNow(),\n  userId: varchar('user_id', { length: 255 }).notNull(),\n});\n\n// Webhooks table - stores webhook configurations\nexport const webhooks = pgTable('webhooks', {\n  id: varchar('id', { length: 255 }).primaryKey(),\n  name: varchar('name', { length: 255 }).notNull(), // User-friendly name\n  url: text('url').notNull(), // Webhook URL\n  secret: varchar('secret', { length: 255 }), // For webhook verification\n  isActive: boolean('is_active').default(true),\n  description: text('description'), // Optional description\n  headers: text('headers'), // JSON string for custom headers\n  timeout: integer('timeout').default(30), // Timeout in seconds\n  retryAttempts: integer('retry_attempts').default(3),\n  lastUsed: timestamp('last_used'),\n  totalDeliveries: integer('total_deliveries').default(0),\n  successfulDeliveries: integer('successful_deliveries').default(0),\n  failedDeliveries: integer('failed_deliveries').default(0),\n  createdAt: timestamp('created_at').defaultNow(),\n  updatedAt: timestamp('updated_at').defaultNow(),\n  userId: varchar('user_id', { length: 255 }).notNull(),\n});\n\n// SES Events table - stores raw SES event data\nexport const sesEvents = pgTable('ses_events', {\n  id: varchar('id', { length: 255 }).primaryKey(),\n  eventSource: varchar('event_source', { length: 100 }).notNull(),\n  eventVersion: varchar('event_version', { length: 50 }).notNull(),\n  messageId: varchar('message_id', { length: 255 }).notNull(),\n  source: varchar('source', { length: 255 }).notNull(),\n  destination: text('destination').notNull(), // JSON array of recipients\n  subject: text('subject'),\n  timestamp: timestamp('timestamp').notNull(),\n  receiptTimestamp: timestamp('receipt_timestamp').notNull(),\n  processingTimeMillis: integer('processing_time_millis'),\n  recipients: text('recipients').notNull(), // JSON array\n  spamVerdict: varchar('spam_verdict', { length: 50 }),\n  virusVerdict: varchar('virus_verdict', { length: 50 }),\n  spfVerdict: varchar('spf_verdict', { length: 50 }),\n  dkimVerdict: varchar('dkim_verdict', { length: 50 }),\n  dmarcVerdict: varchar('dmarc_verdict', { length: 50 }),\n  actionType: varchar('action_type', { length: 50 }),\n  s3BucketName: varchar('s3_bucket_name', { length: 255 }),\n  s3ObjectKey: varchar('s3_object_key', { length: 500 }),\n  emailContent: text('email_content'), // Full email content from S3\n  s3ContentFetched: boolean('s3_content_fetched').default(false),\n  s3ContentSize: integer('s3_content_size'),\n  s3Error: text('s3_error'),\n  commonHeaders: text('common_headers'), // JSON object\n  rawSesEvent: text('raw_ses_event').notNull(), // Complete SES event JSON\n  lambdaContext: text('lambda_context'), // Lambda execution context\n  webhookPayload: text('webhook_payload'), // Complete webhook payload\n  createdAt: timestamp('created_at').defaultNow(),\n  updatedAt: timestamp('updated_at').defaultNow(),\n});\n\nexport const receivedEmails = pgTable('received_emails', { // deprecating.... use structuredEmails instead\n  id: varchar('id', { length: 255 }).primaryKey(),\n  sesEventId: varchar('ses_event_id', { length: 255 }).notNull(), // Reference to sesEvents table\n  messageId: varchar('message_id', { length: 255 }).notNull(),\n  \n  // Basic email fields\n  from: varchar('from', { length: 255 }).notNull(),\n  to: text('to').notNull(), // JSON string for multiple recipients\n  recipient: varchar('recipient', { length: 255 }).notNull(), // Specific recipient for this record\n  subject: text('subject'),\n  \n  // Parsed email data from parseEmail function\n  fromParsed: text('from_parsed'), // JSON: { text: string, addresses: Array<{name: string|null, address: string|null}> }\n  toParsed: text('to_parsed'), // JSON: same structure as fromParsed\n  ccParsed: text('cc_parsed'), // JSON: same structure as fromParsed\n  bccParsed: text('bcc_parsed'), // JSON: same structure as fromParsed\n  replyToParsed: text('reply_to_parsed'), // JSON: same structure as fromParsed\n  \n  // Email content\n  textBody: text('text_body'), // Plain text body\n  htmlBody: text('html_body'), // HTML body\n  rawEmailContent: text('raw_email_content'), // Full raw email content\n  \n  // Email metadata\n  inReplyTo: varchar('in_reply_to', { length: 255 }), // Message ID this is replying to\n  references: text('references'), // JSON array of referenced message IDs\n  priority: varchar('priority', { length: 50 }), // Email priority\n  \n  // Attachments and headers\n  attachments: text('attachments'), // JSON array of attachment metadata\n  headers: text('headers'), // JSON object of all email headers\n  \n  // Timestamps\n  emailDate: timestamp('email_date'), // Date from email headers\n  receivedAt: timestamp('received_at').notNull(),\n  processedAt: timestamp('processed_at'),\n  \n  // Status and tracking\n  status: varchar('status', { length: 50 }).notNull(), // 'received', 'processing', 'forwarded', 'failed'\n  isRead: boolean('is_read').default(false), // Track read/unread status\n  readAt: timestamp('read_at'), // When the email was marked as read\n  \n  // Legacy metadata field for backward compatibility\n  metadata: text('metadata'), // JSON string\n  \n  userId: varchar('user_id', { length: 255 }).notNull(),\n  createdAt: timestamp('created_at').defaultNow(),\n  updatedAt: timestamp('updated_at').defaultNow(),\n});\n\n// Parsed Emails table - stores structured parsed email data with individual columns\nexport const parsedEmails = pgTable('parsed_emails', { // deprecating.... use structuredEmails insteadc\n  id: varchar('id', { length: 255 }).primaryKey(),\n  emailId: varchar('email_id', { length: 255 }).notNull(), // Reference to receivedEmails table\n  messageId: varchar('message_id', { length: 255 }), // Parsed message ID from email headers\n  \n  // Email addresses - storing as text for the full address info, and separate columns for quick queries\n  fromText: text('from_text'), // Full \"Name <email@domain.com>\" format\n  fromAddress: varchar('from_address', { length: 255 }), // Just the email address for indexing\n  fromName: varchar('from_name', { length: 255 }), // Just the display name\n  \n  toText: text('to_text'), // Full to addresses text\n  toAddresses: text('to_addresses'), // JSON array of {name, address} objects\n  \n  ccText: text('cc_text'), // Full CC addresses text  \n  ccAddresses: text('cc_addresses'), // JSON array of {name, address} objects\n  \n  bccText: text('bcc_text'), // Full BCC addresses text\n  bccAddresses: text('bcc_addresses'), // JSON array of {name, address} objects\n  \n  replyToText: text('reply_to_text'), // Full reply-to text\n  replyToAddresses: text('reply_to_addresses'), // JSON array of {name, address} objects\n  \n  // Email content\n  subject: text('subject'), // Parsed subject\n  textBody: text('text_body'), // Plain text body\n  htmlBody: text('html_body'), // HTML body\n  \n  // Email threading and references\n  inReplyTo: varchar('in_reply_to', { length: 255 }), // Message ID this is replying to\n  references: text('references'), // JSON array of referenced message IDs\n  \n  // Email metadata\n  priority: varchar('priority', { length: 50 }), // Email priority (high, normal, low)\n  emailDate: timestamp('email_date'), // Date from email headers\n  \n  // Attachments and headers\n  attachments: text('attachments'), // JSON array of attachment metadata\n  attachmentCount: integer('attachment_count').default(0), // Quick count for queries\n  hasAttachments: boolean('has_attachments').default(false), // Quick boolean for queries\n  \n  headers: text('headers'), // JSON object of all email headers\n  \n  // Content flags for quick queries\n  hasTextBody: boolean('has_text_body').default(false),\n  hasHtmlBody: boolean('has_html_body').default(false),\n  \n  // Parsing metadata\n  parseSuccess: boolean('parse_success').default(true), // Whether parsing was successful\n  parseError: text('parse_error'), // Any parsing errors encountered\n  \n  // Timestamps\n  createdAt: timestamp('created_at').defaultNow(),\n  updatedAt: timestamp('updated_at').defaultNow(),\n});\n\nexport const structuredEmails = pgTable('structured_emails', {\n  id: varchar('id', { length: 255 }).primaryKey(),\n  emailId: varchar('email_id', { length: 255 }).notNull(), // Reference to receivedEmails table\n  sesEventId: varchar('ses_event_id', { length: 255 }).notNull(), // Reference to sesEvents table\n  \n  // Core email fields matching ParsedEmailData\n  messageId: varchar('message_id', { length: 255 }), // string | undefined\n  date: timestamp('date'), // Date | undefined  \n  subject: text('subject'), // string | undefined\n  \n  // Address fields - stored as JSON matching ParsedEmailAddress structure\n  fromData: text('from_data'), // ParsedEmailAddress | null - JSON: { text: string, addresses: Array<{name: string|null, address: string|null}> }\n  toData: text('to_data'), // ParsedEmailAddress | null\n  ccData: text('cc_data'), // ParsedEmailAddress | null\n  bccData: text('bcc_data'), // ParsedEmailAddress | null\n  replyToData: text('reply_to_data'), // ParsedEmailAddress | null\n  \n  // Threading fields\n  inReplyTo: varchar('in_reply_to', { length: 255 }), // string | undefined\n  references: text('references'), // string[] | undefined - stored as JSON array\n  \n  // Content fields\n  textBody: text('text_body'), // string | undefined\n  htmlBody: text('html_body'), // string | undefined\n  rawContent: text('raw_content'), // string | undefined (raw field from ParsedEmailData)\n  \n  // Attachments - stored as JSON array matching ParsedEmailData structure\n  attachments: text('attachments'), // Array<{filename: string | undefined, contentType: string | undefined, size: number | undefined, contentId: string | undefined, contentDisposition: string | undefined}>\n  \n  // Headers - stored as JSON object matching enhanced headers structure\n  headers: text('headers'), // Record<string, any> with specific typed properties\n  \n  // Priority field\n  priority: varchar('priority', { length: 50 }), // string | false | undefined\n  \n  // Processing metadata\n  parseSuccess: boolean('parse_success').default(true),\n  parseError: text('parse_error'),\n  isRead: boolean('is_read').default(false),\n  readAt: timestamp('read_at'), // When the email was marked as read\n  isArchived: boolean('is_archived').default(false),\n  archivedAt: timestamp('archived_at'), // When the email was archived\n  \n  // User and timestamps\n  userId: varchar('user_id', { length: 255 }).notNull(),\n  createdAt: timestamp('created_at').defaultNow(),\n  updatedAt: timestamp('updated_at').defaultNow(),\n});\n\nexport const webhookDeliveries = pgTable('webhook_deliveries', {\n  id: varchar('id', { length: 255 }).primaryKey(),\n  emailId: varchar('email_id', { length: 255 }),\n  webhookId: varchar('webhook_id', { length: 255 }).notNull(), // Reference to webhooks table\n  endpoint: varchar('endpoint', { length: 500 }).notNull(), // Keep for backward compatibility\n  payload: text('payload'), // JSON payload sent\n  status: varchar('status', { length: 50 }).notNull(), // 'pending', 'success', 'failed'\n  attempts: integer('attempts').default(0),\n  lastAttemptAt: timestamp('last_attempt_at'),\n  responseCode: integer('response_code'),\n  responseBody: text('response_body'),\n  error: text('error'),\n  deliveryTime: integer('delivery_time'), // Time in milliseconds\n  createdAt: timestamp('created_at').defaultNow(),\n  updatedAt: timestamp('updated_at').defaultNow(),\n});\n\nexport const domainDnsRecords = pgTable('domain_dns_records', {\n  id: varchar('id', { length: 255 }).primaryKey(),\n  domainId: varchar('domain_id', { length: 255 }).notNull(),\n  recordType: varchar('record_type', { length: 10 }).notNull(), // 'TXT', 'MX', etc.\n  name: varchar('name', { length: 255 }).notNull(),\n  value: text('value').notNull(),\n  isRequired: boolean('is_required').default(true),\n  isVerified: boolean('is_verified').default(false),\n  lastChecked: timestamp('last_checked'),\n  createdAt: timestamp('created_at').defaultNow(),\n});\n\n// Endpoints table - unified system for webhooks, email forwards, and email groups\nexport const endpoints = pgTable('endpoints', {\n  id: varchar('id', { length: 255 }).primaryKey(),\n  name: varchar('name', { length: 255 }).notNull(), // User-friendly name\n  type: varchar('type', { length: 50 }).notNull(), // 'webhook', 'email', 'email_group'\n  webhookFormat: varchar('webhook_format', { length: 50 }).default('inbound'), // 'inbound', 'discord', 'slack', etc.\n  config: text('config').notNull(), // JSON configuration based on type\n  isActive: boolean('is_active').default(true),\n  description: text('description'), // Optional description\n  userId: varchar('user_id', { length: 255 }).notNull(),\n  createdAt: timestamp('created_at').defaultNow(),\n  updatedAt: timestamp('updated_at').defaultNow(),\n});\n\n// Email Groups table - stores individual email addresses for email group endpoints\nexport const emailGroups = pgTable('email_groups', {\n  id: varchar('id', { length: 255 }).primaryKey(),\n  endpointId: varchar('endpoint_id', { length: 255 }).notNull(), // Reference to endpoints table\n  emailAddress: varchar('email_address', { length: 255 }).notNull(),\n  createdAt: timestamp('created_at').defaultNow(),\n});\n\n// Endpoint Deliveries table - tracks deliveries for all endpoint types (extends webhook deliveries)\nexport const endpointDeliveries = pgTable('endpoint_deliveries', {\n  id: varchar('id', { length: 255 }).primaryKey(),\n  emailId: varchar('email_id', { length: 255 }), // Reference to structured_emails table\n  endpointId: varchar('endpoint_id', { length: 255 }).notNull(), // Reference to endpoints table\n  deliveryType: varchar('delivery_type', { length: 50 }).notNull(), // 'webhook', 'email_forward'\n  status: varchar('status', { length: 50 }).notNull(), // 'pending', 'success', 'failed'\n  attempts: integer('attempts').default(0),\n  lastAttemptAt: timestamp('last_attempt_at'),\n  responseData: text('response_data'), // JSON response/error data\n  createdAt: timestamp('created_at').defaultNow(),\n  updatedAt: timestamp('updated_at').defaultNow(),\n});\n\n// Blocked Emails table - stores email addresses that should be blocked from processing\nexport const blockedEmails = pgTable('blocked_emails', {\n  id: varchar('id', { length: 255 }).primaryKey(),\n  emailAddress: varchar('email_address', { length: 255 }).notNull().unique(),\n  domainId: varchar('domain_id', { length: 255 }).notNull(), // Reference to emailDomains table\n  reason: text('reason'), // Optional reason for blocking\n  blockedBy: varchar('blocked_by', { length: 255 }).notNull(), // User who blocked this email\n  createdAt: timestamp('created_at').defaultNow(),\n  updatedAt: timestamp('updated_at').defaultNow(),\n});\n\n// Sent Emails table - stores emails sent through the API\nexport const sentEmails = pgTable('sent_emails', {\n  id: varchar('id', { length: 255 }).primaryKey(),\n  \n  // Sender and recipient information\n  from: varchar('from', { length: 500 }).notNull(), // Full \"Name <email@domain.com>\" format\n  fromAddress: varchar('from_address', { length: 255 }).notNull(), // Just the email address for validation\n  fromDomain: varchar('from_domain', { length: 255 }).notNull(), // Domain part for validation\n  to: text('to').notNull(), // JSON array of email addresses\n  cc: text('cc'), // JSON array of email addresses\n  bcc: text('bcc'), // JSON array of email addresses\n  replyTo: text('reply_to'), // JSON array of email addresses\n  \n  // Email content\n  subject: text('subject').notNull(),\n  textBody: text('text_body'),\n  htmlBody: text('html_body'),\n  \n  // Headers and metadata\n  headers: text('headers'), // JSON object of custom headers\n  attachments: text('attachments'), // JSON array of attachment metadata\n  \n  // Delivery status\n  status: varchar('status', { length: 50 }).notNull().default('pending'), // 'pending', 'sent', 'failed'\n  messageId: varchar('message_id', { length: 255 }), // Provider message ID after sending\n  provider: varchar('provider', { length: 50 }).default('ses'), // Email provider used\n  providerResponse: text('provider_response'), // Full response from provider\n  sentAt: timestamp('sent_at'), // When the email was actually sent\n  failureReason: text('failure_reason'), // If failed, why\n  \n  // Idempotency\n  idempotencyKey: varchar('idempotency_key', { length: 256 }), // For preventing duplicates\n  \n  // User and timestamps\n  userId: varchar('user_id', { length: 255 }).notNull(),\n  createdAt: timestamp('created_at').defaultNow(),\n  updatedAt: timestamp('updated_at').defaultNow(),\n});\n\n// Export types for Better Auth tables (using the imported tables)\nexport { user, session, account, verification, apikey };\n\nexport type User = typeof user.$inferSelect;\nexport type NewUser = typeof user.$inferInsert;\nexport type Session = typeof session.$inferSelect;\nexport type NewSession = typeof session.$inferInsert;\nexport type Account = typeof account.$inferSelect;\nexport type NewAccount = typeof account.$inferInsert;\nexport type Verification = typeof verification.$inferSelect;\nexport type NewVerification = typeof verification.$inferInsert;\nexport type ApiKey = typeof apikey.$inferSelect;\nexport type NewApiKey = typeof apikey.$inferInsert;\n\n// Export types for app-specific tables\nexport type Subscription = typeof subscriptions.$inferSelect;\nexport type NewSubscription = typeof subscriptions.$inferInsert;\nexport type UserOnboarding = typeof userOnboarding.$inferSelect;\nexport type NewUserOnboarding = typeof userOnboarding.$inferInsert;\nexport type EmailDomain = typeof emailDomains.$inferSelect;\nexport type NewEmailDomain = typeof emailDomains.$inferInsert;\nexport type EmailAddress = typeof emailAddresses.$inferSelect;\nexport type NewEmailAddress = typeof emailAddresses.$inferInsert;\nexport type Webhook = typeof webhooks.$inferSelect;\nexport type NewWebhook = typeof webhooks.$inferInsert;\nexport type SesEvent = typeof sesEvents.$inferSelect;\nexport type NewSesEvent = typeof sesEvents.$inferInsert;\nexport type ReceivedEmail = typeof receivedEmails.$inferSelect;\nexport type NewReceivedEmail = typeof receivedEmails.$inferInsert;\nexport type ParsedEmail = typeof parsedEmails.$inferSelect;\nexport type NewParsedEmail = typeof parsedEmails.$inferInsert;\nexport type StructuredEmail = typeof structuredEmails.$inferSelect;\nexport type NewStructuredEmail = typeof structuredEmails.$inferInsert;\nexport type WebhookDelivery = typeof webhookDeliveries.$inferSelect;\nexport type NewWebhookDelivery = typeof webhookDeliveries.$inferInsert;\nexport type DomainDnsRecord = typeof domainDnsRecords.$inferSelect;\nexport type NewDomainDnsRecord = typeof domainDnsRecords.$inferInsert;\nexport type Endpoint = typeof endpoints.$inferSelect;\nexport type NewEndpoint = typeof endpoints.$inferInsert;\nexport type EmailGroup = typeof emailGroups.$inferSelect;\nexport type NewEmailGroup = typeof emailGroups.$inferInsert;\nexport type EndpointDelivery = typeof endpointDeliveries.$inferSelect;\nexport type NewEndpointDelivery = typeof endpointDeliveries.$inferInsert;\nexport type BlockedEmail = typeof blockedEmails.$inferSelect;\nexport type NewBlockedEmail = typeof blockedEmails.$inferInsert;\nexport type SentEmail = typeof sentEmails.$inferSelect;\nexport type NewSentEmail = typeof sentEmails.$inferInsert;\n\n// Domain status enums\nexport const DOMAIN_STATUS = {\n  PENDING: 'pending',\n  VERIFIED: 'verified',\n  FAILED: 'failed'\n} as const;\n\nexport const SES_VERIFICATION_STATUS = {\n  PENDING: 'Pending',\n  SUCCESS: 'Success', \n  FAILED: 'Failed'\n} as const;\n\nexport const PROVIDER_CONFIDENCE = {\n  HIGH: 'high',\n  MEDIUM: 'medium',\n  LOW: 'low'\n} as const;\n\nexport const EMAIL_STATUS = {\n  RECEIVED: 'received',\n  PROCESSING: 'processing',\n  FORWARDED: 'forwarded',\n  FAILED: 'failed',\n  BLOCKED: 'blocked'\n} as const;\n\nexport const WEBHOOK_STATUS = {\n  PENDING: 'pending',\n  SUCCESS: 'success',\n  FAILED: 'failed'\n} as const;\n\nexport const ENDPOINT_TYPES = {\n  WEBHOOK: 'webhook',\n  EMAIL: 'email',\n  EMAIL_GROUP: 'email_group'\n} as const;\n\nexport const WEBHOOK_FORMATS = {\n  INBOUND: 'inbound',\n  DISCORD: 'discord',\n  SLACK: 'slack'\n} as const;\n\nexport const DELIVERY_TYPES = {\n  WEBHOOK: 'webhook',\n  EMAIL: 'email',\n  EMAILGROUP: 'emailgroup'\n} as const;\n\n// VIP Configurations table\nexport const vipConfigs = pgTable('vip_configs', {\n  id: varchar('id', { length: 255 }).primaryKey(),\n  emailAddressId: varchar('email_address_id', { length: 255 }).notNull().unique(), // Link to emailAddresses\n  userId: varchar('user_id', { length: 255 }).notNull(),\n  priceInCents: integer('price_in_cents').notNull().default(100), // Default $1.00\n  allowAfterPayment: boolean('allow_after_payment').default(false), // false = single email, true = allow all future\n  customMessage: text('custom_message'), // Custom message in payment email\n  paymentLinkExpirationHours: integer('payment_link_expiration_hours').default(24),\n  isActive: boolean('is_active').default(true),\n  createdAt: timestamp('created_at').defaultNow(),\n  updatedAt: timestamp('updated_at').defaultNow(),\n});\n\n// VIP Payment Sessions table - tracks payment links and their status\nexport const vipPaymentSessions = pgTable('vip_payment_sessions', {\n  id: varchar('id', { length: 255 }).primaryKey(),\n  vipConfigId: varchar('vip_config_id', { length: 255 }).notNull(),\n  senderEmail: varchar('sender_email', { length: 255 }).notNull(),\n  originalEmailId: varchar('original_email_id', { length: 255 }).notNull(), // Reference to structuredEmails\n  stripePaymentLinkId: varchar('stripe_payment_link_id', { length: 255 }),\n  stripePaymentLinkUrl: text('stripe_payment_link_url'),\n  stripeSessionId: varchar('stripe_session_id', { length: 255 }),\n  status: varchar('status', { length: 50 }).notNull().default('pending'), // pending, paid, expired, cancelled\n  paidAt: timestamp('paid_at'),\n  expiresAt: timestamp('expires_at'),\n  createdAt: timestamp('created_at').defaultNow(),\n  updatedAt: timestamp('updated_at').defaultNow(),\n});\n\n// VIP Allowed Senders - tracks who can send without payment\nexport const vipAllowedSenders = pgTable('vip_allowed_senders', {\n  id: varchar('id', { length: 255 }).primaryKey(),\n  vipConfigId: varchar('vip_config_id', { length: 255 }).notNull(),\n  senderEmail: varchar('sender_email', { length: 255 }).notNull(),\n  allowedAt: timestamp('allowed_at').defaultNow(),\n  allowedUntil: timestamp('allowed_until'), // Optional expiration\n  paymentSessionId: varchar('payment_session_id', { length: 255 }), // Reference to the payment that allowed them\n  createdAt: timestamp('created_at').defaultNow(),\n});\n\n// VIP Email Attempts - tracks all emails that hit VIP protection\nexport const vipEmailAttempts = pgTable('vip_email_attempts', {\n  id: varchar('id', { length: 255 }).primaryKey(),\n  vipConfigId: varchar('vip_config_id', { length: 255 }).notNull(),\n  senderEmail: varchar('sender_email', { length: 255 }).notNull(),\n  recipientEmail: varchar('recipient_email', { length: 255 }).notNull(),\n  originalEmailId: varchar('original_email_id', { length: 255 }).notNull(), // Reference to structuredEmails\n  emailSubject: text('email_subject'),\n  status: varchar('status', { length: 50 }).notNull().default('payment_required'), // payment_required, allowed, blocked\n  paymentSessionId: varchar('payment_session_id', { length: 255 }), // Reference to payment session if payment required\n  allowedReason: varchar('allowed_reason', { length: 100 }), // 'previous_payment', 'whitelisted', etc.\n  createdAt: timestamp('created_at').defaultNow(),\n  updatedAt: timestamp('updated_at').defaultNow(),\n});\n\n// Create index for faster lookups\n// Note: These would be created in migration files\n// CREATE INDEX idx_vip_allowed_sender ON vip_allowed_senders(vip_config_id, sender_email);\n// CREATE INDEX idx_vip_payment_session_status ON vip_payment_sessions(status);\n\n// VIP Status enum\nexport const VIP_PAYMENT_STATUS = {\n  PENDING: 'pending',\n  PAID: 'paid',\n  EXPIRED: 'expired',\n  CANCELLED: 'cancelled'\n} as const;\n\nexport const DELIVERY_STATUS = {\n  PENDING: 'pending',\n  SUCCESS: 'success',\n  FAILED: 'failed'\n} as const;\n\nexport const SENT_EMAIL_STATUS = {\n  PENDING: 'pending',\n  SENT: 'sent',\n  FAILED: 'failed'\n} as const;\n\n// Type definitions\nexport type DomainStatus = typeof DOMAIN_STATUS[keyof typeof DOMAIN_STATUS];\nexport type SesVerificationStatus = typeof SES_VERIFICATION_STATUS[keyof typeof SES_VERIFICATION_STATUS];\nexport type ProviderConfidence = typeof PROVIDER_CONFIDENCE[keyof typeof PROVIDER_CONFIDENCE];\nexport type EmailStatus = typeof EMAIL_STATUS[keyof typeof EMAIL_STATUS];\nexport type WebhookStatus = typeof WEBHOOK_STATUS[keyof typeof WEBHOOK_STATUS];\nexport type EndpointType = typeof ENDPOINT_TYPES[keyof typeof ENDPOINT_TYPES];\nexport type WebhookFormat = typeof WEBHOOK_FORMATS[keyof typeof WEBHOOK_FORMATS];\nexport type DeliveryType = typeof DELIVERY_TYPES[keyof typeof DELIVERY_TYPES];\nexport type DeliveryStatus = typeof DELIVERY_STATUS[keyof typeof DELIVERY_STATUS];\nexport type SentEmailStatus = typeof SENT_EMAIL_STATUS[keyof typeof SENT_EMAIL_STATUS];\nexport type VipPaymentStatus = typeof VIP_PAYMENT_STATUS[keyof typeof VIP_PAYMENT_STATUS];\n"],"names":[],"mappings":"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"}