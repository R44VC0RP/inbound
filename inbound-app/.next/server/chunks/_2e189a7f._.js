module.exports={177630:e=>{"use strict";var{g:i,__dirname:a}=e;{e.s({GET:()=>g,POST:()=>v});var t=e.i(125427),o=e.i(494642),s=e.i(557440);e.i(468686);var n=e.i(55379),r=e.i(176825),l=e.i(460009),d=e.i(91890),c=e.i(719797),m=e.i(906273),u=e.i(236286),f=e.i(459351),h=e.i(877465),p=e.i(562454);let i=process.env.AWS_REGION||"us-east-2",a=process.env.AWS_ACCESS_KEY_ID,A=process.env.AWS_SECRET_ACCESS_KEY,D=null;async function g(e){console.log("🌐 GET /api/v2/domains - Starting request");try{console.log("🔐 Validating request authentication");let{userId:i,error:a}=await (0,o.validateRequest)(e);if(!i)return console.log("❌ Authentication failed:",a),t.NextResponse.json({error:a},{status:401});console.log("✅ Authentication successful for userId:",i);let{searchParams:m}=new URL(e.url),u=Math.min(parseInt(m.get("limit")||"50"),100),f=parseInt(m.get("offset")||"0"),h=m.get("status"),g=m.get("canReceive"),v="true"===m.get("check");if(console.log("📊 Query parameters:",{limit:u,offset:f,status:h,canReceive:g,check:v}),u<1||u>100)return console.log("⚠️ Invalid limit parameter:",u),t.NextResponse.json({error:"Limit must be between 1 and 100"},{status:400});if(f<0)return console.log("⚠️ Invalid offset parameter:",f),t.NextResponse.json({error:"Offset must be non-negative"},{status:400});let A=[(0,r.eq)(n.emailDomains.userId,i)];if(h&&["pending","verified","failed"].includes(h)&&(A.push((0,r.eq)(n.emailDomains.status,h)),console.log("🔍 Filtering by status:",h)),null!==g){let e="true"===g;A.push((0,r.eq)(n.emailDomains.canReceiveEmails,e)),console.log("🔍 Filtering by canReceive:",e)}let w=A.length>1?(0,r.and)(...A):A[0];console.log("🔍 Querying domains from database");let R=s.db.select({id:n.emailDomains.id,domain:n.emailDomains.domain,status:n.emailDomains.status,canReceiveEmails:n.emailDomains.canReceiveEmails,hasMxRecords:n.emailDomains.hasMxRecords,domainProvider:n.emailDomains.domainProvider,providerConfidence:n.emailDomains.providerConfidence,lastDnsCheck:n.emailDomains.lastDnsCheck,lastSesCheck:n.emailDomains.lastSesCheck,isCatchAllEnabled:n.emailDomains.isCatchAllEnabled,catchAllEndpointId:n.emailDomains.catchAllEndpointId,createdAt:n.emailDomains.createdAt,updatedAt:n.emailDomains.updatedAt,userId:n.emailDomains.userId}).from(n.emailDomains).where(w),E=await R.orderBy((0,l.desc)(n.emailDomains.createdAt)).limit(u).offset(f),y=await s.db.select({count:(0,d.count)()}).from(n.emailDomains).where(w),C=y[0]?.count||0;console.log("📊 Found",E.length,"domains out of",C,"total");let S=await Promise.all(E.map(async e=>{let i=await s.db.select({count:(0,d.count)()}).from(n.emailAddresses).where((0,r.eq)(n.emailAddresses.domainId,e.id)),a=i[0]?.count||0,t=await s.db.select({count:(0,d.count)()}).from(n.emailAddresses).where((0,r.and)((0,r.eq)(n.emailAddresses.domainId,e.id),(0,r.eq)(n.emailAddresses.isActive,!0))),o=t[0]?.count||0,l=null;if(e.catchAllEndpointId){let i=await s.db.select({id:n.endpoints.id,name:n.endpoints.name,type:n.endpoints.type,isActive:n.endpoints.isActive}).from(n.endpoints).where((0,r.eq)(n.endpoints.id,e.catchAllEndpointId)).limit(1);l=i[0]?{id:i[0].id,name:i[0].name,type:i[0].type,isActive:i[0].isActive||!1}:null}let m={...e,canReceiveEmails:e.canReceiveEmails||!1,hasMxRecords:e.hasMxRecords||!1,isCatchAllEnabled:e.isCatchAllEnabled||!1,createdAt:e.createdAt||new Date,updatedAt:e.updatedAt||new Date,stats:{totalEmailAddresses:a,activeEmailAddresses:o,hasCatchAll:!!e.catchAllEndpointId},catchAllEndpoint:l};if(v){console.log(`🔍 Performing verification check for domain: ${e.domain}`);try{let i=await s.db.select().from(n.domainDnsRecords).where((0,r.eq)(n.domainDnsRecords.domainId,e.id)),a=[];if(i.length>0){console.log(`🔍 Verifying ${i.length} DNS records`);let e=await (0,c.verifyDnsRecords)(i.map(e=>({type:e.recordType,name:e.name,value:e.value})));a=e.map((e,i)=>({type:e.type,name:e.name,value:e.expectedValue,isVerified:e.isVerified,error:e.error})),await Promise.all(i.map(async(i,a)=>{let t=e[a];await s.db.update(n.domainDnsRecords).set({isVerified:t.isVerified,lastChecked:new Date}).where((0,r.eq)(n.domainDnsRecords.id,i.id))}))}let t="Unknown";if(D)try{console.log(`🔍 Checking SES verification status`);let i=new p.GetIdentityVerificationAttributesCommand({Identities:[e.domain]}),a=await D.send(i),o=a.VerificationAttributes?.[e.domain];t=o?.VerificationStatus||"NotFound","Success"===t&&"verified"!==e.status?(await s.db.update(n.emailDomains).set({status:"verified",lastSesCheck:new Date,updatedAt:new Date}).where((0,r.eq)(n.emailDomains.id,e.id)),m.status="verified"):"Failed"===t&&"failed"!==e.status?(await s.db.update(n.emailDomains).set({status:"failed",lastSesCheck:new Date,updatedAt:new Date}).where((0,r.eq)(n.emailDomains.id,e.id)),m.status="failed"):await s.db.update(n.emailDomains).set({lastSesCheck:new Date}).where((0,r.eq)(n.emailDomains.id,e.id))}catch(e){console.error(`❌ SES verification check failed:`,e),t="Error"}let o=a.length>0&&a.every(e=>e.isVerified),l=o&&"Success"===t;m.verificationCheck={dnsRecords:a,sesStatus:t,isFullyVerified:l,lastChecked:new Date},console.log(`✅ Verification check complete for ${e.domain}:`,{dnsVerified:o,sesStatus:t,isFullyVerified:l})}catch(i){console.error(`❌ Verification check failed for ${e.domain}:`,i),m.verificationCheck={dnsRecords:[],sesStatus:"Error",isFullyVerified:!1,lastChecked:new Date}}}return m})),k=S.filter(e=>"verified"===e.status).length,I=S.filter(e=>e.stats.hasCatchAll).length,b={verified:S.filter(e=>"verified"===e.status).length,pending:S.filter(e=>"pending"===e.status).length,failed:S.filter(e=>"failed"===e.status).length};return console.log("✅ Successfully retrieved domains with stats:",{retrieved:S.length,verified:k,withCatchAll:I}),t.NextResponse.json({data:S,pagination:{limit:u,offset:f,total:C,hasMore:f+u<C},meta:{totalCount:C,verifiedCount:k,withCatchAllCount:I,statusBreakdown:b}})}catch(e){return console.error("❌ GET /api/v2/domains - Error:",e),t.NextResponse.json({error:"Failed to fetch domains",details:e instanceof Error?e.message:"Unknown error"},{status:500})}}async function v(e){console.log("➕ POST /api/v2/domains - Starting domain creation");try{console.log("🔐 Validating request authentication");let{userId:i,error:a}=await (0,o.validateRequest)(e);if(!i)return console.log("❌ Authentication failed:",a),t.NextResponse.json({error:a},{status:401});console.log("✅ Authentication successful for userId:",i);let l=await e.json();if(console.log("📝 Request data:",{domain:l.domain}),!l.domain)return console.log("❌ Missing required field: domain"),t.NextResponse.json({error:"Domain is required"},{status:400});let d=l.domain.toLowerCase().trim();if(!/^[a-zA-Z0-9]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(\.[a-zA-Z0-9]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.test(d)||d.length>253)return console.log("❌ Invalid domain format:",d),t.NextResponse.json({error:"Invalid domain format"},{status:400});console.log("🔍 Checking if domain already exists on platform");let h=await s.db.select({id:n.emailDomains.id,userId:n.emailDomains.userId,status:n.emailDomains.status,createdAt:n.emailDomains.createdAt}).from(n.emailDomains).where((0,r.eq)(n.emailDomains.domain,d)).limit(1);if(h[0]){if(h[0].userId===i)return console.log("❌ Domain already exists for current user:",d),t.NextResponse.json({error:"You have already added this domain to your account"},{status:409});return console.log("❌ Domain already registered by another user:",d),t.NextResponse.json({error:"This domain is already registered on our platform. If you believe this is an error or you need to transfer ownership, please contact our support team.",code:"DOMAIN_ALREADY_REGISTERED"},{status:409})}console.log("🔍 Checking domain limits with Autumn");let{data:p,error:g}=await f.Autumn.check({customer_id:i,feature_id:"domains"});if(g)return console.error("❌ Autumn domain check error:",g),t.NextResponse.json({error:"Failed to check domain limits"},{status:500});if(!p?.allowed)return console.log("❌ Domain limit reached for user:",i),t.NextResponse.json({error:"Domain limit reached. Please upgrade your plan to add more domains."},{status:403});console.log("✅ Domain limits check passed:",{allowed:p.allowed,balance:p.balance,unlimited:p.unlimited}),console.log("🔍 Checking DNS records for conflicts");let v=await (0,c.checkDomainCanReceiveEmails)(d);if(!v.canReceiveEmails)return console.log("❌ Domain cannot receive emails:",v.error),t.NextResponse.json({error:v.error||"Domain has conflicting DNS records (MX or CNAME). Please remove them before adding this domain."},{status:400});console.log("✅ DNS check passed:",{canReceiveEmails:v.canReceiveEmails,hasMxRecords:v.hasMxRecords,provider:v.provider?.name}),console.log("💾 Creating domain record in database");let A=await (0,m.createDomainVerification)(d,i,{canReceiveEmails:v.canReceiveEmails,hasMxRecords:v.hasMxRecords,provider:v.provider});console.log("🔐 Initiating SES domain verification");let D=await (0,u.initiateDomainVerification)(d,i);if(!p.unlimited){console.log("📊 Tracking domain usage with Autumn");let{error:e}=await f.Autumn.track({customer_id:i,feature_id:"domains",value:1});e&&console.error("⚠️ Failed to track domain usage:",e)}let w={id:A.id,domain:A.domain,status:D.status,canReceiveEmails:A.canReceiveEmails||!1,hasMxRecords:A.hasMxRecords||!1,domainProvider:A.domainProvider,providerConfidence:A.providerConfidence,dnsRecords:D.dnsRecords.map(e=>({type:e.type,name:e.name,value:e.value,isRequired:!0})),createdAt:A.createdAt||new Date,updatedAt:A.updatedAt||new Date};return console.log("✅ Successfully created domain:",A.id),t.NextResponse.json(w,{status:201})}catch(e){return console.error("❌ POST /api/v2/domains - Error:",e),t.NextResponse.json({error:"Failed to create domain",details:e instanceof Error?e.message:"Unknown error"},{status:500})}}a&&A&&(D=new h.SESClient({region:i,credentials:{accessKeyId:a,secretAccessKey:A}}))}},740369:e=>{"use strict";var{g:i,__dirname:a}=e;{e.s({patchFetch:()=>r,routeModule:()=>i,serverHooks:()=>d,workAsyncStorage:()=>a,workUnitAsyncStorage:()=>l});var t=e.i(854885),o=e.i(814689),s=e.i(25402),n=e.i(177630);let i=new t.AppRouteRouteModule({definition:{kind:o.RouteKind.APP_ROUTE,page:"/api/v2/domains/route",pathname:"/api/v2/domains",filename:"route",bundlePath:""},resolvedPagePath:"[project]/app/api/v2/domains/route.ts",nextConfigOutput:"",userland:n}),{workAsyncStorage:a,workUnitAsyncStorage:l,serverHooks:d}=i;function r(){return(0,s.patchFetch)({workAsyncStorage:a,workUnitAsyncStorage:l})}}}};

//# sourceMappingURL=_2e189a7f._.js.map