{"version":3,"sources":["turbopack:///[project]/lib/openapi/spec.ts","turbopack:///[project]/app/api/v1/route.ts","turbopack:///[project]/node_modules/next/dist/src/build/templates/app-route.ts"],"sourcesContent":["import { OpenAPIV3 } from 'openapi-types'\n\nexport async function getOpenAPISpec(): Promise<OpenAPIV3.Document> {\n  const spec: OpenAPIV3.Document = {\n    openapi: '3.0.3',\n    info: {\n      title: 'Inbound API',\n      description: 'Public API for Inbound email management service',\n      version: '1.0.0',\n      contact: {\n        name: 'API Support',\n        email: 'support@inbound.new',\n      },\n      license: {\n        name: 'MIT',\n        url: 'https://opensource.org/licenses/MIT',\n      },\n    },\n    servers: [\n      {\n        url: process.env.NEXT_PUBLIC_API_URL || 'http://localhost:3000',\n        description: 'Production server',\n      },\n      {\n        url: 'http://localhost:3000',\n        description: 'Development server',\n      },\n    ],\n    paths: {\n      '/api/v1/domains': {\n        get: {\n          summary: 'List domains',\n          description: 'Retrieve a list of all domains for the authenticated user',\n          tags: ['Domains'],\n          security: [{ bearerAuth: [] }],\n          parameters: [\n            {\n              name: 'page',\n              in: 'query',\n              description: 'Page number for pagination',\n              required: false,\n              schema: {\n                type: 'integer',\n                minimum: 1,\n                default: 1,\n              },\n            },\n            {\n              name: 'limit',\n              in: 'query',\n              description: 'Number of items per page',\n              required: false,\n              schema: {\n                type: 'integer',\n                minimum: 1,\n                maximum: 100,\n                default: 20,\n              },\n            },\n          ],\n          responses: {\n            '200': {\n              description: 'List of domains',\n              content: {\n                'application/json': {\n                  schema: {\n                    type: 'object',\n                    properties: {\n                      domains: {\n                        type: 'array',\n                        items: { $ref: '#/components/schemas/Domain' },\n                      },\n                      pagination: { $ref: '#/components/schemas/Pagination' },\n                    },\n                  },\n                },\n              },\n            },\n            '401': { $ref: '#/components/responses/Unauthorized' },\n            '500': { $ref: '#/components/responses/InternalServerError' },\n          },\n        },\n        post: {\n          summary: 'Create domain',\n          description: 'Add a new domain for email receiving',\n          tags: ['Domains'],\n          security: [{ bearerAuth: [] }],\n          requestBody: {\n            required: true,\n            content: {\n              'application/json': {\n                schema: {\n                  type: 'object',\n                  required: ['domain'],\n                  properties: {\n                    domain: {\n                      type: 'string',\n                      format: 'hostname',\n                      example: 'example.com',\n                    },\n                  },\n                },\n              },\n            },\n          },\n          responses: {\n            '201': {\n              description: 'Domain created successfully',\n              content: {\n                'application/json': {\n                  schema: { $ref: '#/components/schemas/Domain' },\n                },\n              },\n            },\n            '400': { $ref: '#/components/responses/BadRequest' },\n            '401': { $ref: '#/components/responses/Unauthorized' },\n            '409': {\n              description: 'Domain already exists',\n              content: {\n                'application/json': {\n                  schema: { $ref: '#/components/schemas/Error' },\n                },\n              },\n            },\n            '500': { $ref: '#/components/responses/InternalServerError' },\n          },\n        },\n      },\n      '/api/v1/domains/{domainId}': {\n        get: {\n          summary: 'Get domain details',\n          description: 'Retrieve detailed information about a specific domain',\n          tags: ['Domains'],\n          security: [{ bearerAuth: [] }],\n          parameters: [\n            {\n              name: 'domainId',\n              in: 'path',\n              required: true,\n              description: 'Domain ID',\n              schema: {\n                type: 'string',\n                format: 'uuid',\n              },\n            },\n          ],\n          responses: {\n            '200': {\n              description: 'Domain details',\n              content: {\n                'application/json': {\n                  schema: { $ref: '#/components/schemas/DomainDetails' },\n                },\n              },\n            },\n            '401': { $ref: '#/components/responses/Unauthorized' },\n            '404': { $ref: '#/components/responses/NotFound' },\n            '500': { $ref: '#/components/responses/InternalServerError' },\n          },\n        },\n        delete: {\n          summary: 'Delete domain',\n          description: 'Remove a domain and all associated email addresses',\n          tags: ['Domains'],\n          security: [{ bearerAuth: [] }],\n          parameters: [\n            {\n              name: 'domainId',\n              in: 'path',\n              required: true,\n              description: 'Domain ID',\n              schema: {\n                type: 'string',\n                format: 'uuid',\n              },\n            },\n          ],\n          responses: {\n            '204': {\n              description: 'Domain deleted successfully',\n            },\n            '401': { $ref: '#/components/responses/Unauthorized' },\n            '404': { $ref: '#/components/responses/NotFound' },\n            '500': { $ref: '#/components/responses/InternalServerError' },\n          },\n        },\n      },\n      '/api/v1/emails': {\n        get: {\n          summary: 'List emails',\n          description: 'Retrieve a list of received emails',\n          tags: ['Emails'],\n          security: [{ bearerAuth: [] }],\n          parameters: [\n            {\n              name: 'page',\n              in: 'query',\n              description: 'Page number for pagination',\n              required: false,\n              schema: {\n                type: 'integer',\n                minimum: 1,\n                default: 1,\n              },\n            },\n            {\n              name: 'limit',\n              in: 'query',\n              description: 'Number of items per page',\n              required: false,\n              schema: {\n                type: 'integer',\n                minimum: 1,\n                maximum: 100,\n                default: 20,\n              },\n            },\n            {\n              name: 'domain',\n              in: 'query',\n              description: 'Filter by domain',\n              required: false,\n              schema: {\n                type: 'string',\n              },\n            },\n          ],\n          responses: {\n            '200': {\n              description: 'List of emails',\n              content: {\n                'application/json': {\n                  schema: {\n                    type: 'object',\n                    properties: {\n                      emails: {\n                        type: 'array',\n                        items: { $ref: '#/components/schemas/Email' },\n                      },\n                      pagination: { $ref: '#/components/schemas/Pagination' },\n                    },\n                  },\n                },\n              },\n            },\n            '401': { $ref: '#/components/responses/Unauthorized' },\n            '500': { $ref: '#/components/responses/InternalServerError' },\n          },\n        },\n      },\n      '/api/v1/emails/{emailId}': {\n        get: {\n          summary: 'Get email details',\n          description: 'Retrieve detailed information about a specific email',\n          tags: ['Emails'],\n          security: [{ bearerAuth: [] }],\n          parameters: [\n            {\n              name: 'emailId',\n              in: 'path',\n              required: true,\n              description: 'Email ID',\n              schema: {\n                type: 'string',\n                format: 'uuid',\n              },\n            },\n          ],\n          responses: {\n            '200': {\n              description: 'Email details',\n              content: {\n                'application/json': {\n                  schema: { $ref: '#/components/schemas/EmailDetails' },\n                },\n              },\n            },\n            '401': { $ref: '#/components/responses/Unauthorized' },\n            '404': { $ref: '#/components/responses/NotFound' },\n            '500': { $ref: '#/components/responses/InternalServerError' },\n          },\n        },\n      },\n      '/api/v1/webhooks': {\n        get: {\n          summary: 'List webhooks',\n          description: 'Retrieve a list of configured webhooks',\n          tags: ['Webhooks'],\n          security: [{ bearerAuth: [] }],\n          responses: {\n            '200': {\n              description: 'List of webhooks',\n              content: {\n                'application/json': {\n                  schema: {\n                    type: 'object',\n                    properties: {\n                      webhooks: {\n                        type: 'array',\n                        items: { $ref: '#/components/schemas/Webhook' },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n            '401': { $ref: '#/components/responses/Unauthorized' },\n            '500': { $ref: '#/components/responses/InternalServerError' },\n          },\n        },\n        post: {\n          summary: 'Create webhook',\n          description: 'Create a new webhook endpoint',\n          tags: ['Webhooks'],\n          security: [{ bearerAuth: [] }],\n          requestBody: {\n            required: true,\n            content: {\n              'application/json': {\n                schema: {\n                  type: 'object',\n                  required: ['name', 'url'],\n                  properties: {\n                    name: {\n                      type: 'string',\n                      example: 'My Webhook',\n                    },\n                    url: {\n                      type: 'string',\n                      format: 'uri',\n                      example: 'https://api.example.com/webhook',\n                    },\n                    description: {\n                      type: 'string',\n                      example: 'Webhook for processing emails',\n                    },\n                    timeout: {\n                      type: 'integer',\n                      minimum: 1,\n                      maximum: 300,\n                      default: 30,\n                    },\n                    retryAttempts: {\n                      type: 'integer',\n                      minimum: 0,\n                      maximum: 10,\n                      default: 3,\n                    },\n                  },\n                },\n              },\n            },\n          },\n          responses: {\n            '201': {\n              description: 'Webhook created successfully',\n              content: {\n                'application/json': {\n                  schema: { $ref: '#/components/schemas/Webhook' },\n                },\n              },\n            },\n            '400': { $ref: '#/components/responses/BadRequest' },\n            '401': { $ref: '#/components/responses/Unauthorized' },\n            '500': { $ref: '#/components/responses/InternalServerError' },\n          },\n        },\n      },\n    },\n    components: {\n      securitySchemes: {\n        bearerAuth: {\n          type: 'http',\n          scheme: 'bearer',\n          bearerFormat: 'JWT',\n          description: 'JWT token obtained from authentication endpoint',\n        },\n      },\n      schemas: {\n        Domain: {\n          type: 'object',\n          properties: {\n            id: {\n              type: 'string',\n              format: 'uuid',\n              example: '123e4567-e89b-12d3-a456-426614174000',\n            },\n            domain: {\n              type: 'string',\n              format: 'hostname',\n              example: 'example.com',\n            },\n            status: {\n              type: 'string',\n              enum: ['pending', 'verified', 'failed'],\n              example: 'verified',\n            },\n            canReceiveEmails: {\n              type: 'boolean',\n              example: true,\n            },\n            createdAt: {\n              type: 'string',\n              format: 'date-time',\n              example: '2024-01-15T10:30:00Z',\n            },\n            updatedAt: {\n              type: 'string',\n              format: 'date-time',\n              example: '2024-01-15T10:30:00Z',\n            },\n          },\n          required: ['id', 'domain', 'status', 'canReceiveEmails', 'createdAt', 'updatedAt'],\n        },\n        DomainDetails: {\n          allOf: [\n            { $ref: '#/components/schemas/Domain' },\n            {\n              type: 'object',\n              properties: {\n                dnsRecords: {\n                  type: 'array',\n                  items: { $ref: '#/components/schemas/DnsRecord' },\n                },\n                emailAddresses: {\n                  type: 'array',\n                  items: { $ref: '#/components/schemas/EmailAddress' },\n                },\n                stats: { $ref: '#/components/schemas/DomainStats' },\n              },\n            },\n          ],\n        },\n        DnsRecord: {\n          type: 'object',\n          properties: {\n            type: {\n              type: 'string',\n              enum: ['TXT', 'MX'],\n              example: 'TXT',\n            },\n            name: {\n              type: 'string',\n              example: '_amazonses.example.com',\n            },\n            value: {\n              type: 'string',\n              example: 'verification-token-here',\n            },\n            isVerified: {\n              type: 'boolean',\n              example: true,\n            },\n            isRequired: {\n              type: 'boolean',\n              example: true,\n            },\n          },\n          required: ['type', 'name', 'value', 'isVerified', 'isRequired'],\n        },\n        EmailAddress: {\n          type: 'object',\n          properties: {\n            id: {\n              type: 'string',\n              format: 'uuid',\n              example: '123e4567-e89b-12d3-a456-426614174000',\n            },\n            address: {\n              type: 'string',\n              format: 'email',\n              example: 'user@example.com',\n            },\n            isActive: {\n              type: 'boolean',\n              example: true,\n            },\n            webhookId: {\n              type: 'string',\n              format: 'uuid',\n              nullable: true,\n              example: '123e4567-e89b-12d3-a456-426614174000',\n            },\n            createdAt: {\n              type: 'string',\n              format: 'date-time',\n              example: '2024-01-15T10:30:00Z',\n            },\n          },\n          required: ['id', 'address', 'isActive', 'createdAt'],\n        },\n        DomainStats: {\n          type: 'object',\n          properties: {\n            totalEmailAddresses: {\n              type: 'integer',\n              example: 5,\n            },\n            activeEmailAddresses: {\n              type: 'integer',\n              example: 3,\n            },\n            totalEmailsLast24h: {\n              type: 'integer',\n              example: 42,\n            },\n          },\n          required: ['totalEmailAddresses', 'activeEmailAddresses', 'totalEmailsLast24h'],\n        },\n        Email: {\n          type: 'object',\n          properties: {\n            id: {\n              type: 'string',\n              format: 'uuid',\n              example: '123e4567-e89b-12d3-a456-426614174000',\n            },\n            from: {\n              type: 'string',\n              format: 'email',\n              example: 'sender@example.com',\n            },\n            to: {\n              type: 'string',\n              format: 'email',\n              example: 'recipient@yourdomain.com',\n            },\n            subject: {\n              type: 'string',\n              example: 'Hello World',\n            },\n            receivedAt: {\n              type: 'string',\n              format: 'date-time',\n              example: '2024-01-15T10:30:00Z',\n            },\n            size: {\n              type: 'integer',\n              description: 'Email size in bytes',\n              example: 1024,\n            },\n          },\n          required: ['id', 'from', 'to', 'subject', 'receivedAt', 'size'],\n        },\n        EmailDetails: {\n          allOf: [\n            { $ref: '#/components/schemas/Email' },\n            {\n              type: 'object',\n              properties: {\n                htmlBody: {\n                  type: 'string',\n                  nullable: true,\n                  example: '<p>Hello World</p>',\n                },\n                textBody: {\n                  type: 'string',\n                  nullable: true,\n                  example: 'Hello World',\n                },\n                headers: {\n                  type: 'object',\n                  additionalProperties: {\n                    type: 'string',\n                  },\n                  example: {\n                    'Content-Type': 'text/html; charset=utf-8',\n                    'Message-ID': '<message-id@example.com>',\n                  },\n                },\n                attachments: {\n                  type: 'array',\n                  items: { $ref: '#/components/schemas/Attachment' },\n                },\n              },\n            },\n          ],\n        },\n        Attachment: {\n          type: 'object',\n          properties: {\n            id: {\n              type: 'string',\n              format: 'uuid',\n              example: '123e4567-e89b-12d3-a456-426614174000',\n            },\n            filename: {\n              type: 'string',\n              example: 'document.pdf',\n            },\n            contentType: {\n              type: 'string',\n              example: 'application/pdf',\n            },\n            size: {\n              type: 'integer',\n              description: 'Attachment size in bytes',\n              example: 2048,\n            },\n            downloadUrl: {\n              type: 'string',\n              format: 'uri',\n              example: 'https://api.example.com/attachments/123e4567-e89b-12d3-a456-426614174000',\n            },\n          },\n          required: ['id', 'filename', 'contentType', 'size', 'downloadUrl'],\n        },\n        Webhook: {\n          type: 'object',\n          properties: {\n            id: {\n              type: 'string',\n              format: 'uuid',\n              example: '123e4567-e89b-12d3-a456-426614174000',\n            },\n            name: {\n              type: 'string',\n              example: 'My Webhook',\n            },\n            url: {\n              type: 'string',\n              format: 'uri',\n              example: 'https://api.example.com/webhook',\n            },\n            description: {\n              type: 'string',\n              nullable: true,\n              example: 'Webhook for processing emails',\n            },\n            isActive: {\n              type: 'boolean',\n              example: true,\n            },\n            timeout: {\n              type: 'integer',\n              example: 30,\n            },\n            retryAttempts: {\n              type: 'integer',\n              example: 3,\n            },\n            createdAt: {\n              type: 'string',\n              format: 'date-time',\n              example: '2024-01-15T10:30:00Z',\n            },\n            updatedAt: {\n              type: 'string',\n              format: 'date-time',\n              example: '2024-01-15T10:30:00Z',\n            },\n          },\n          required: ['id', 'name', 'url', 'isActive', 'timeout', 'retryAttempts', 'createdAt', 'updatedAt'],\n        },\n        Pagination: {\n          type: 'object',\n          properties: {\n            page: {\n              type: 'integer',\n              minimum: 1,\n              example: 1,\n            },\n            limit: {\n              type: 'integer',\n              minimum: 1,\n              example: 20,\n            },\n            total: {\n              type: 'integer',\n              minimum: 0,\n              example: 100,\n            },\n            totalPages: {\n              type: 'integer',\n              minimum: 0,\n              example: 5,\n            },\n          },\n          required: ['page', 'limit', 'total', 'totalPages'],\n        },\n        Error: {\n          type: 'object',\n          properties: {\n            error: {\n              type: 'string',\n              example: 'Bad Request',\n            },\n            message: {\n              type: 'string',\n              example: 'The request could not be understood by the server',\n            },\n            code: {\n              type: 'string',\n              example: 'INVALID_REQUEST',\n            },\n            details: {\n              type: 'object',\n              additionalProperties: true,\n              nullable: true,\n            },\n          },\n          required: ['error', 'message'],\n        },\n      },\n      responses: {\n        BadRequest: {\n          description: 'Bad Request',\n          content: {\n            'application/json': {\n              schema: { $ref: '#/components/schemas/Error' },\n            },\n          },\n        },\n        Unauthorized: {\n          description: 'Unauthorized',\n          content: {\n            'application/json': {\n              schema: { $ref: '#/components/schemas/Error' },\n            },\n          },\n        },\n        NotFound: {\n          description: 'Not Found',\n          content: {\n            'application/json': {\n              schema: { $ref: '#/components/schemas/Error' },\n            },\n          },\n        },\n        InternalServerError: {\n          description: 'Internal Server Error',\n          content: {\n            'application/json': {\n              schema: { $ref: '#/components/schemas/Error' },\n            },\n          },\n        },\n      },\n    },\n    tags: [\n      {\n        name: 'Domains',\n        description: 'Domain management operations',\n      },\n      {\n        name: 'Emails',\n        description: 'Email retrieval and management operations',\n      },\n      {\n        name: 'Webhooks',\n        description: 'Webhook configuration and management operations',\n      },\n    ],\n  }\n\n  return spec\n} ","import { NextRequest, NextResponse } from 'next/server'\nimport { getOpenAPISpec } from '@/lib/openapi/spec'\n\nexport async function GET(request: NextRequest) {\n  try {\n    const spec = await getOpenAPISpec()\n    \n    return NextResponse.json(spec, {\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n        'Access-Control-Allow-Methods': 'GET, OPTIONS',\n        'Access-Control-Allow-Headers': 'Content-Type, Authorization',\n      },\n    })\n  } catch (error) {\n    console.error('Error generating OpenAPI spec:', error)\n    return NextResponse.json(\n      { error: 'Failed to generate API specification' },\n      { status: 500 }\n    )\n  }\n}\n\nexport async function OPTIONS(request: NextRequest) {\n  return new NextResponse(null, {\n    status: 200,\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'GET, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type, Authorization',\n    },\n  })\n} ","import {\n  AppRouteRouteModule,\n  type AppRouteRouteModuleOptions,\n} from '../../server/route-modules/app-route/module.compiled'\nimport { RouteKind } from '../../server/route-kind'\nimport { patchFetch as _patchFetch } from '../../server/lib/patch-fetch'\n\nimport * as userland from 'VAR_USERLAND'\n\n// These are injected by the loader afterwards. This is injected as a variable\n// instead of a replacement because this could also be `undefined` instead of\n// an empty string.\ndeclare const nextConfigOutput: AppRouteRouteModuleOptions['nextConfigOutput']\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\n// INJECT:nextConfigOutput\n\nconst routeModule = new AppRouteRouteModule({\n  definition: {\n    kind: RouteKind.APP_ROUTE,\n    page: 'VAR_DEFINITION_PAGE',\n    pathname: 'VAR_DEFINITION_PATHNAME',\n    filename: 'VAR_DEFINITION_FILENAME',\n    bundlePath: 'VAR_DEFINITION_BUNDLE_PATH',\n  },\n  resolvedPagePath: 'VAR_RESOLVED_PAGE_PATH',\n  nextConfigOutput,\n  userland,\n})\n\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule\n\nfunction patchFetch() {\n  return _patchFetch({\n    workAsyncStorage,\n    workUnitAsyncStorage,\n  })\n}\n\nexport {\n  routeModule,\n  workAsyncStorage,\n  workUnitAsyncStorage,\n  serverHooks,\n  patchFetch,\n}\n"],"names":["AppRouteRouteModule","RouteKind","patchFetch","_patchFetch","userland","routeModule","definition","kind","APP_ROUTE","page","pathname","filename","bundlePath","resolvedPagePath","nextConfigOutput","workAsyncStorage","workUnitAsyncStorage","serverHooks"],"mappings":"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aAAc,CACZ,MAAO,CACL,CAAE,KAAM,4BAA6B,EACrC,CACE,KAAM,SACN,WAAY,CACV,SAAU,CACR,KAAM,SACN,UAAU,EACV,QAAS,oBACX,EACA,SAAU,CACR,KAAM,SACN,UAAU,EACV,QAAS,aACX,EACA,QAAS,CACP,KAAM,SACN,qBAAsB,CACpB,KAAM,QACR,EACA,QAAS,CACP,eAAgB,2BAChB,aAAc,0BAChB,CACF,EACA,YAAa,CACX,KAAM,QACN,MAAO,CAAE,KAAM,iCAAkC,CACnD,CACF,CACF,EACD,AACH,EACA,WAAY,CACV,KAAM,SACN,WAAY,CACV,GAAI,CACF,KAAM,SACN,OAAQ,OACR,QAAS,sCACX,EACA,SAAU,CACR,KAAM,SACN,QAAS,cACX,EACA,YAAa,CACX,KAAM,SACN,QAAS,iBACX,EACA,KAAM,CACJ,KAAM,UACN,YAAa,2BACb,QAAS,IACX,EACA,YAAa,CACX,KAAM,SACN,OAAQ,MACR,QAAS,0EACX,CACF,EACA,SAAU,CAAC,KAAM,WAAY,cAAe,OAAQ,cAAc,AACpE,EACA,QAAS,CACP,KAAM,SACN,WAAY,CACV,GAAI,CACF,KAAM,SACN,OAAQ,OACR,QAAS,sCACX,EACA,KAAM,CACJ,KAAM,SACN,QAAS,YACX,EACA,IAAK,CACH,KAAM,SACN,OAAQ,MACR,QAAS,iCACX,EACA,YAAa,CACX,KAAM,SACN,UAAU,EACV,QAAS,+BACX,EACA,SAAU,CACR,KAAM,UACN,SAAS,CACX,EACA,QAAS,CACP,KAAM,UACN,QAAS,EACX,EACA,cAAe,CACb,KAAM,UACN,QAAS,CACX,EACA,UAAW,CACT,KAAM,SACN,OAAQ,YACR,QAAS,sBACX,EACA,UAAW,CACT,KAAM,SACN,OAAQ,YACR,QAAS,sBACX,CACF,EACA,SAAU,CAAC,KAAM,OAAQ,MAAO,WAAY,UAAW,gBAAiB,YAAa,YACvF,AADmG,EAEnG,WAAY,CACV,KAAM,SACN,WAAY,CACV,KAAM,CACJ,KAAM,UACN,QAAS,EACT,QAAS,CACX,EACA,MAAO,CACL,KAAM,UACN,QAAS,EACT,QAAS,EACX,EACA,MAAO,CACL,KAAM,UACN,QAAS,EACT,QAAS,GACX,EACA,WAAY,CACV,KAAM,UACN,QAAS,EACT,QAAS,CACX,CACF,EACA,SAAU,CAAC,OAAQ,QAAS,QAAS,aAAa,AACpD,EACA,MAAO,CACL,KAAM,SACN,WAAY,CACV,MAAO,CACL,KAAM,SACN,QAAS,aACX,EACA,QAAS,CACP,KAAM,SACN,QAAS,mDACX,EACA,KAAM,CACJ,KAAM,SACN,QAAS,iBACX,EACA,QAAS,CACP,KAAM,SACN,sBAAsB,EACtB,UAAU,CACZ,CACF,EACA,SAAU,CAAC,QAAS,UAAU,AAChC,CACF,EACA,UAAW,CACT,WAAY,CACV,YAAa,cACb,QAAS,CACP,mBAAoB,CAClB,OAAQ,CAAE,KAAM,4BAA6B,CAC/C,CACF,CACF,EACA,aAAc,CACZ,YAAa,eACb,QAAS,CACP,mBAAoB,CAClB,OAAQ,CAAE,KAAM,4BAA6B,CAC/C,CACF,CACF,EACA,SAAU,CACR,YAAa,YACb,QAAS,CACP,mBAAoB,CAClB,OAAQ,CAAE,KAAM,4BAA6B,CAC/C,CACF,CACF,EACA,oBAAqB,CACnB,YAAa,wBACb,QAAS,CACP,mBAAoB,CAClB,OAAQ,CAAE,KAAM,4BAA6B,CAC/C,CACF,CACF,CACF,CACF,EACA,KAAM,CACJ,CACE,KAAM,UACN,YAAa,8BACf,EACA,CACE,KAAM,SACN,YAAa,2CACf,EACA,CACE,KAAM,WACN,YAAa,iDACf,EACD,AACH,CAGF,4GCpvBA,IAAA,EAAA,EAAA,CAAA,CAAA,QACA,EAAA,EAAA,CAAA,CAAA,QAEO,eAAe,EAAI,CAAoB,EAC5C,GAAI,CACF,IAAM,EAAO,MAAM,CAAA,EAAA,EAAA,cAAA,AAAa,IAEhC,OAAO,EAAA,UAFY,EAEA,CAAC,IAAI,CAAC,EAAM,CAC7B,QAAS,CACP,OAFG,QAEa,mBAChB,8BAA+B,IAC/B,+BAAgC,eAChC,+BAAgC,6BAClC,CACF,EACF,CAAE,MAAO,EAAO,CAEd,OADA,QAAQ,KAAK,CAAC,iCAAkC,GACzC,EAAA,YAAY,CAAC,IAAI,CACtB,CAAE,MAAO,YADJ,0BAC2C,EAChD,CAAE,OAAQ,GAAI,EAElB,CACF,CAEO,eAAe,EAAQ,CAAoB,EAChD,OAAO,IAAI,EAAA,YAAY,CAAC,KAAM,CAC5B,OAAQ,IACR,OAFS,CAEA,CACP,8BAA+B,IAC/B,+BAAgC,eAChC,+BAAgC,6BAClC,CACF,EACF,iKCjCA,IAAA,EAGO,EAAA,CAFLA,AAEK,CAAA,QACP,EAA0B,EAAyB,CAA1CC,AAA0C,CAAA,EAAA,EAH9B,GAEwC,CAC3C,AAClB,EAA0C,EAAA,AAFnC,CAEEC,AAAiC,CAAA,EADhB,EAC8C,GAExE,EAAwC,EAAA,CAAA,CAAA,AAFjBC,EAEXC,MAWZ,GAbkC,CAa5BC,EAAc,EAXM,EAWN,CAbsB,CAalBL,WAXgB,QAWhBA,CAAoB,CAC1CM,WAAY,CACVC,KAAMN,EAAAA,SAAAA,CAAUO,SAAS,CACzBC,KAAM,gBACNC,SAAU,UACVC,SAAU,QACVC,WAAY,EACd,EACAC,iBAAkB,gCAClBC,iBAXF,CAA0B,WAYxBV,CACF,GAKM,kBAAEW,CAAgB,sBAAEC,CAAoB,aAAEC,CAAW,CAAE,CAAGZ,EAEhE,SAASH,IACP,MAAA,CAAA,EAAA,EAAOC,UAAAA,EAAY,kBACjBY,uBACAC,CACF,EACF","ignoreList":[2]}