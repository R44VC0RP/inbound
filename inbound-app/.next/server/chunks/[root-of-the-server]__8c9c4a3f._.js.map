{"version":3,"sources":["turbopack:///[project]/lib/db/domains.ts","turbopack:///[project]/app/api/inbound/configure-email/route.ts","turbopack:///[project]/node_modules/next/dist/src/build/templates/app-route.ts"],"sourcesContent":["import { db } from './index'\nimport { emailDomains, domainDnsRecords, emailAddresses, type EmailDomain, type NewEmailDomain, type DomainDnsRecord, type NewDomainDnsRecord, type EmailAddress, type NewEmailAddress } from './schema'\nimport { eq, and } from 'drizzle-orm'\nimport { nanoid } from 'nanoid'\n\nexport interface DomainWithRecords extends EmailDomain {\n  dnsRecords: DomainDnsRecord[]\n  emailAddresses?: EmailAddress[]\n}\n\n/**\n * Create a new domain verification record\n */\nexport async function createDomainVerification(\n  domain: string,\n  userId: string,\n  dnsCheckResult: {\n    canReceiveEmails: boolean\n    hasMxRecords: boolean\n    provider?: {\n      name: string\n      confidence: 'high' | 'medium' | 'low'\n    }\n  }\n): Promise<EmailDomain> {\n  const domainRecord: NewEmailDomain = {\n    id: `indm_${nanoid()}`,\n    domain,\n    userId,\n    status: 'pending',\n    canReceiveEmails: dnsCheckResult.canReceiveEmails,\n    hasMxRecords: dnsCheckResult.hasMxRecords,\n    domainProvider: dnsCheckResult.provider?.name,\n    providerConfidence: dnsCheckResult.provider?.confidence,\n    lastDnsCheck: new Date(),\n    updatedAt: new Date(),\n  }\n\n  const [created] = await db.insert(emailDomains).values(domainRecord).returning()\n  return created\n}\n\n/**\n * Update domain with SES verification information\n */\nexport async function updateDomainSesVerification(\n  domainId: string,\n  verificationToken: string,\n  sesStatus: string,\n  dnsRecords: Array<{ type: string; name: string; value: string }>\n): Promise<EmailDomain> {\n  // Update the domain record\n  const [updated] = await db\n    .update(emailDomains)\n    .set({\n      verificationToken,\n      status: sesStatus === 'Success' ? 'verified' : 'pending',\n      lastSesCheck: new Date(),\n      updatedAt: new Date(),\n    })\n    .where(eq(emailDomains.id, domainId))\n    .returning()\n\n  // Insert or update DNS records\n  for (const record of dnsRecords) {\n    const dnsRecord: NewDomainDnsRecord = {\n      id: `dns_${nanoid()}`,\n      domainId,\n      recordType: record.type,\n      name: record.name,\n      value: record.value,\n      isRequired: true,\n      isVerified: false,\n    }\n\n    await db.insert(domainDnsRecords).values(dnsRecord).onConflictDoNothing()\n  }\n\n  return updated\n}\n\n/**\n * Get domain with DNS records by domain name and user ID\n */\nexport async function getDomainWithRecords(domain: string, userId: string): Promise<DomainWithRecords | null> {\n  const domainRecord = await db\n    .select()\n    .from(emailDomains)\n    .where(and(eq(emailDomains.domain, domain), eq(emailDomains.userId, userId)))\n    .limit(1)\n\n  if (!domainRecord[0]) return null\n\n  const dnsRecords = await db\n    .select()\n    .from(domainDnsRecords)\n    .where(eq(domainDnsRecords.domainId, domainRecord[0].id))\n\n  return {\n    ...domainRecord[0],\n    dnsRecords,\n  }\n}\n\n/**\n * Update DNS record verification status\n */\nexport async function updateDnsRecordVerification(\n  domainId: string,\n  recordType: string,\n  name: string,\n  isVerified: boolean\n): Promise<void> {\n  await db\n    .update(domainDnsRecords)\n    .set({\n      isVerified,\n      lastChecked: new Date(),\n    })\n    .where(\n      and(\n        eq(domainDnsRecords.domainId, domainId),\n        eq(domainDnsRecords.recordType, recordType),\n        eq(domainDnsRecords.name, name)\n      )\n    )\n}\n\n/**\n * Check if all required DNS records are verified\n */\nexport async function areAllDnsRecordsVerified(domainId: string): Promise<boolean> {\n  const records = await db\n    .select()\n    .from(domainDnsRecords)\n    .where(and(eq(domainDnsRecords.domainId, domainId), eq(domainDnsRecords.isRequired, true)))\n\n  return records.length > 0 && records.every(record => record.isVerified)\n}\n\n/**\n * Update domain status based on verification progress\n */\nexport async function updateDomainStatus(domainId: string, status: string): Promise<EmailDomain> {\n  const [updated] = await db\n    .update(emailDomains)\n    .set({\n      status,\n      updatedAt: new Date(),\n    })\n    .where(eq(emailDomains.id, domainId))\n    .returning()\n\n  return updated\n}\n\n/**\n * Create a new email address for a domain\n */\nexport async function createEmailAddress(\n  address: string,\n  domainId: string,\n  userId: string\n): Promise<EmailAddress> {\n  const emailRecord: NewEmailAddress = {\n    id: `email_${nanoid()}`,\n    address,\n    domainId,\n    userId,\n    isActive: true,\n    isReceiptRuleConfigured: false,\n    updatedAt: new Date(),\n  }\n\n  const [created] = await db.insert(emailAddresses).values(emailRecord).returning()\n  return created\n}\n\n/**\n * Get email addresses for a domain\n */\nexport async function getEmailAddressesForDomain(domainId: string): Promise<EmailAddress[]> {\n  return db\n    .select()\n    .from(emailAddresses)\n    .where(eq(emailAddresses.domainId, domainId))\n}\n\n/**\n * Update email address receipt rule status\n */\nexport async function updateEmailAddressReceiptRule(\n  emailId: string,\n  isConfigured: boolean,\n  ruleName?: string\n): Promise<EmailAddress> {\n  const [updated] = await db\n    .update(emailAddresses)\n    .set({\n      isReceiptRuleConfigured: isConfigured,\n      receiptRuleName: ruleName,\n      updatedAt: new Date(),\n    })\n    .where(eq(emailAddresses.id, emailId))\n    .returning()\n\n  return updated\n}\n\n/**\n * Get domain with DNS records and email addresses\n */\nexport async function getDomainWithRecordsAndEmails(domain: string, userId: string): Promise<DomainWithRecords | null> {\n  const domainRecord = await db\n    .select()\n    .from(emailDomains)\n    .where(and(eq(emailDomains.domain, domain), eq(emailDomains.userId, userId)))\n    .limit(1)\n\n  if (!domainRecord[0]) return null\n\n  const dnsRecords = await db\n    .select()\n    .from(domainDnsRecords)\n    .where(eq(domainDnsRecords.domainId, domainRecord[0].id))\n\n  const emailAddressList = await db\n    .select()\n    .from(emailAddresses)\n    .where(eq(emailAddresses.domainId, domainRecord[0].id))\n\n  return {\n    ...domainRecord[0],\n    dnsRecords,\n    emailAddresses: emailAddressList,\n  }\n}\n\n/**\n * Delete a domain and all its related records from the database\n */\nexport async function deleteDomainFromDatabase(domainId: string, userId: string): Promise<{ success: boolean; error?: string }> {\n  try {\n    // Verify the domain belongs to the user\n    const domainRecord = await db\n      .select()\n      .from(emailDomains)\n      .where(and(eq(emailDomains.id, domainId), eq(emailDomains.userId, userId)))\n      .limit(1)\n\n    if (!domainRecord[0]) {\n      return {\n        success: false,\n        error: 'Domain not found or access denied'\n      }\n    }\n\n    console.log(`üóëÔ∏è Deleting domain from database: ${domainRecord[0].domain}`)\n\n    // Delete all email addresses for this domain\n    await db\n      .delete(emailAddresses)\n      .where(eq(emailAddresses.domainId, domainId))\n\n    // Delete all DNS records for this domain\n    await db\n      .delete(domainDnsRecords)\n      .where(eq(domainDnsRecords.domainId, domainId))\n\n    // Delete the domain record\n    await db\n      .delete(emailDomains)\n      .where(eq(emailDomains.id, domainId))\n\n    console.log(`‚úÖ Successfully deleted domain from database: ${domainRecord[0].domain}`)\n\n    return { success: true }\n\n  } catch (error) {\n    console.error('Database domain deletion error:', error)\n    return {\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to delete domain from database'\n    }\n  }\n}\n\n/**\n * Enable catch-all for a domain\n */\nexport async function enableDomainCatchAll(\n  domainId: string,\n  webhookId: string,\n  receiptRuleName: string\n): Promise<EmailDomain> {\n  const [updated] = await db\n    .update(emailDomains)\n    .set({\n      isCatchAllEnabled: true,\n      catchAllWebhookId: webhookId,\n      catchAllReceiptRuleName: receiptRuleName,\n      updatedAt: new Date(),\n    })\n    .where(eq(emailDomains.id, domainId))\n    .returning()\n\n  if (!updated) {\n    throw new Error('Domain not found')\n  }\n\n  return updated\n}\n\n/**\n * Disable catch-all for a domain\n */\nexport async function disableDomainCatchAll(domainId: string): Promise<EmailDomain> {\n  const [updated] = await db\n    .update(emailDomains)\n    .set({\n      isCatchAllEnabled: false,\n      catchAllWebhookId: null,\n      catchAllReceiptRuleName: null,\n      updatedAt: new Date(),\n    })\n    .where(eq(emailDomains.id, domainId))\n    .returning()\n\n  if (!updated) {\n    throw new Error('Domain not found')\n  }\n\n  return updated\n}\n\n/**\n * Get domain with catch-all configuration\n */\nexport async function getDomainWithCatchAll(domain: string, userId: string): Promise<EmailDomain | null> {\n  const [domainRecord] = await db\n    .select()\n    .from(emailDomains)\n    .where(and(eq(emailDomains.domain, domain), eq(emailDomains.userId, userId)))\n    .limit(1)\n\n  return domainRecord || null\n}\n\n/**\n * Check if domain has catch-all enabled\n */\nexport async function isDomainCatchAllEnabled(domainId: string): Promise<boolean> {\n  const [domain] = await db\n    .select({ isCatchAllEnabled: emailDomains.isCatchAllEnabled })\n    .from(emailDomains)\n    .where(eq(emailDomains.id, domainId))\n    .limit(1)\n\n  return domain?.isCatchAllEnabled || false\n}\n\n/**\n * Get domain owner information by domain name\n * Returns the user details for the domain owner to send notifications\n */\nexport async function getDomainOwnerByDomain(domain: string): Promise<{ userId: string; userEmail: string; userName: string | null } | null> {\n  try {\n    // Import user table from auth schema\n    const { user } = await import('./auth-schema')\n    \n    const result = await db\n      .select({\n        userId: emailDomains.userId,\n        userEmail: user.email,\n        userName: user.name,\n      })\n      .from(emailDomains)\n      .innerJoin(user, eq(emailDomains.userId, user.id))\n      .where(eq(emailDomains.domain, domain))\n      .limit(1)\n\n    if (!result[0]) {\n      console.log(`‚ùå getDomainOwnerByDomain - No owner found for domain: ${domain}`)\n      return null\n    }\n\n    console.log(`‚úÖ getDomainOwnerByDomain - Found owner for domain ${domain}: ${result[0].userEmail}`)\n    return result[0]\n  } catch (error) {\n    console.error('‚ùå getDomainOwnerByDomain - Error looking up domain owner:', error)\n    return null\n  }\n}\n\n/**\n * Update domain status to verified\n */\nexport async function markDomainAsVerified(domain: string): Promise<EmailDomain | null> {\n  try {\n    const [updated] = await db\n      .update(emailDomains)\n      .set({\n        status: 'verified',\n        lastSesCheck: new Date(),\n        updatedAt: new Date(),\n      })\n      .where(eq(emailDomains.domain, domain))\n      .returning()\n\n    if (updated) {\n      console.log(`‚úÖ markDomainAsVerified - Domain ${domain} marked as verified`)\n    }\n\n    return updated || null\n  } catch (error) {\n    console.error('‚ùå markDomainAsVerified - Error updating domain status:', error)\n    return null\n  }\n} ","import { NextRequest, NextResponse } from 'next/server'\nimport { getDomainWithRecordsAndEmails, createEmailAddress, updateEmailAddressReceiptRule } from '@/lib/db/domains'\nimport { AWSSESReceiptRuleManager } from '@/lib/aws-ses/aws-ses-rules'\nimport { auth } from '@/lib/auth/auth'\nimport { headers } from 'next/headers'\n\nexport async function POST(request: NextRequest) {\n  try {\n    // Get user session\n    const session = await auth.api.getSession({\n      headers: await headers()\n    })\n\n    if (!session?.user?.id) {\n      return NextResponse.json(\n        { error: 'Unauthorized' },\n        { status: 401 }\n      )\n    }\n\n    const { domain, emailAddresses: emailAddressList } = await request.json()\n\n    if (!domain || !emailAddressList || !Array.isArray(emailAddressList)) {\n      return NextResponse.json(\n        { error: 'Domain and email addresses are required' },\n        { status: 400 }\n      )\n    }\n\n    // Get domain record with existing email addresses from database\n    const domainRecord = await getDomainWithRecordsAndEmails(domain, session.user.id)\n    if (!domainRecord) {\n      return NextResponse.json(\n        { error: 'Domain not found. Please verify domain first.' },\n        { status: 404 }\n      )\n    }\n\n    // Check if domain is verified\n    if (domainRecord.status !== 'ses_verified') {\n      return NextResponse.json(\n        { error: 'Domain must be fully verified before configuring email addresses' },\n        { status: 400 }\n      )\n    }\n\n    // Get existing email addresses\n    const existingEmailAddresses = domainRecord.emailAddresses || []\n    const existingEmailMap = new Map(\n      existingEmailAddresses.map(email => [email.address.toLowerCase(), email])\n    )\n\n    // Validate email addresses\n    const validEmails = []\n    const invalidEmails = []\n    const newEmailsToCreate = []\n    \n    for (const email of emailAddressList) {\n      if (AWSSESReceiptRuleManager.isValidEmailAddress(email)) {\n        const emailDomain = AWSSESReceiptRuleManager.extractDomain(email)\n        if (emailDomain === domain) {\n          validEmails.push(email)\n          // Check if this is a new email address\n          if (!existingEmailMap.has(email.toLowerCase())) {\n            newEmailsToCreate.push(email)\n          }\n        } else {\n          invalidEmails.push(`${email} (domain mismatch)`)\n        }\n      } else {\n        invalidEmails.push(`${email} (invalid format)`)\n      }\n    }\n\n    if (invalidEmails.length > 0) {\n      return NextResponse.json(\n        { \n          error: 'Invalid email addresses found',\n          invalidEmails \n        },\n        { status: 400 }\n      )\n    }\n\n    // Get AWS configuration\n    const awsRegion = process.env.AWS_REGION || 'us-east-2'\n    const lambdaFunctionName = process.env.LAMBDA_FUNCTION_NAME || 'email-processor'\n    const s3BucketName = process.env.S3_BUCKET_NAME\n    const awsAccountId = process.env.AWS_ACCOUNT_ID\n\n    if (!s3BucketName || !awsAccountId) {\n      return NextResponse.json(\n        { error: 'AWS configuration incomplete. Missing S3_BUCKET_NAME or AWS_ACCOUNT_ID' },\n        { status: 500 }\n      )\n    }\n\n    // Create SES receipt rule manager\n    const ruleManager = new AWSSESReceiptRuleManager(awsRegion)\n    const lambdaArn = AWSSESReceiptRuleManager.getLambdaFunctionArn(\n      lambdaFunctionName,\n      awsAccountId,\n      awsRegion\n    )\n\n    // Configure SES receipt rules with ALL valid emails (new ones will be merged with existing)\n    const receiptResult = await ruleManager.configureEmailReceiving({\n      domain,\n      emailAddresses: validEmails,\n      lambdaFunctionArn: lambdaArn,\n      s3BucketName\n    })\n\n    if (receiptResult.status === 'failed') {\n      console.error(`Failed to configure SES receipt rules for ${domain}:`, receiptResult.error)\n      return NextResponse.json(\n        { \n          error: 'Failed to configure SES receipt rules',\n          details: receiptResult.error,\n          domain,\n          emailAddresses: validEmails,\n          isRetryable: true\n        },\n        { status: 500 }\n      )\n    }\n\n    // Create only new email address records in database\n    const allConfiguredEmails = []\n    \n    // Add existing emails to the response\n    for (const existingEmail of existingEmailAddresses) {\n      // Update receipt rule status if needed\n      if (!existingEmail.isReceiptRuleConfigured || existingEmail.receiptRuleName !== receiptResult.ruleName) {\n        await updateEmailAddressReceiptRule(\n          existingEmail.id,\n          true,\n          receiptResult.ruleName\n        )\n      }\n      \n      allConfiguredEmails.push({\n        id: existingEmail.id,\n        address: existingEmail.address,\n        isConfigured: true,\n        ruleName: receiptResult.ruleName,\n        isNew: false\n      })\n    }\n    \n    // Create new email addresses\n    for (const email of newEmailsToCreate) {\n      try {\n        const emailRecord = await createEmailAddress(email, domainRecord.id, session.user.id)\n        \n        // Update receipt rule status\n        await updateEmailAddressReceiptRule(\n          emailRecord.id,\n          true,\n          receiptResult.ruleName\n        )\n        \n        allConfiguredEmails.push({\n          id: emailRecord.id,\n          address: email,\n          isConfigured: true,\n          ruleName: receiptResult.ruleName,\n          isNew: true\n        })\n      } catch (error) {\n        console.error(`Failed to create email record for ${email}:`, error)\n        // Continue with other emails\n      }\n    }\n\n    return NextResponse.json({\n      domain,\n      emailAddresses: allConfiguredEmails,\n      receiptRule: {\n        name: receiptResult.ruleName,\n        status: receiptResult.status\n      },\n      lambdaFunction: lambdaFunctionName,\n      s3Bucket: s3BucketName,\n      message: `Successfully configured ${allConfiguredEmails.length} email addresses for ${domain} (${newEmailsToCreate.length} new, ${existingEmailAddresses.length} existing)`,\n      timestamp: new Date()\n    })\n  } catch (error) {\n    console.error('Email configuration error:', error)\n    return NextResponse.json(\n      { error: 'Failed to configure email addresses' },\n      { status: 500 }\n    )\n  }\n} ","import {\n  AppRouteRouteModule,\n  type AppRouteRouteModuleOptions,\n} from '../../server/route-modules/app-route/module.compiled'\nimport { RouteKind } from '../../server/route-kind'\nimport { patchFetch as _patchFetch } from '../../server/lib/patch-fetch'\n\nimport * as userland from 'VAR_USERLAND'\n\n// These are injected by the loader afterwards. This is injected as a variable\n// instead of a replacement because this could also be `undefined` instead of\n// an empty string.\ndeclare const nextConfigOutput: AppRouteRouteModuleOptions['nextConfigOutput']\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\n// INJECT:nextConfigOutput\n\nconst routeModule = new AppRouteRouteModule({\n  definition: {\n    kind: RouteKind.APP_ROUTE,\n    page: 'VAR_DEFINITION_PAGE',\n    pathname: 'VAR_DEFINITION_PATHNAME',\n    filename: 'VAR_DEFINITION_FILENAME',\n    bundlePath: 'VAR_DEFINITION_BUNDLE_PATH',\n  },\n  resolvedPagePath: 'VAR_RESOLVED_PAGE_PATH',\n  nextConfigOutput,\n  userland,\n})\n\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule\n\nfunction patchFetch() {\n  return _patchFetch({\n    workAsyncStorage,\n    workUnitAsyncStorage,\n  })\n}\n\nexport {\n  routeModule,\n  workAsyncStorage,\n  workUnitAsyncStorage,\n  serverHooks,\n  patchFetch,\n}\n"],"names":["AppRouteRouteModule","RouteKind","patchFetch","_patchFetch","userland","routeModule","definition","kind","APP_ROUTE","page","pathname","filename","bundlePath","resolvedPagePath","nextConfigOutput","workAsyncStorage","workUnitAsyncStorage","serverHooks"],"mappings":"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","ignoreList":[2]}