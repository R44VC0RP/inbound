{"version":3,"sources":["turbopack:///[project]/app/api/v1/lib/auth.ts","turbopack:///[project]/app/api/v1.1/email-addresses/route.ts","turbopack:///[project]/node_modules/next/dist/src/build/templates/app-route.ts"],"sourcesContent":["import { NextRequest } from 'next/server'\nimport { auth } from '@/lib/auth/auth'\n\nexport interface ApiKeyValidationResult {\n  valid: boolean\n  user?: {\n    id: string\n    email: string\n    name: string | null\n  }\n  error?: string\n}\n\n/**\n * Validates an API key from the Authorization header\n * Expected format: \"Bearer <api_key>\" or just \"<api_key>\"\n */\nexport async function validateApiKey(request: NextRequest): Promise<ApiKeyValidationResult> {\n  try {\n    // Get the Authorization header\n    const authHeader = request.headers.get('Authorization')\n    \n    if (!authHeader) {\n      return {\n        valid: false,\n        error: 'Missing Authorization header'\n      }\n    }\n\n    // Extract the API key (support both \"Bearer <key>\" and just \"<key>\")\n    let apiKey: string\n    if (authHeader.startsWith('Bearer ')) {\n      apiKey = authHeader.substring(7)\n    } else {\n      apiKey = authHeader\n    }\n\n    console.log(\"API KEY: \" + apiKey)\n\n    if (!apiKey) {\n      return {\n        valid: false,\n        error: 'Invalid Authorization header format'\n      }\n    }\n\n    // Verify the API key using Better Auth\n    const { valid, error, key } = await auth.api.verifyApiKey({\n      body: {\n        key: apiKey\n      }\n    })\n\n    console.log(\"VALID: \" + valid)\n    console.log(\"ERROR: \" + error)\n    console.log(\"KEY: \" + key?.userId)\n\n    if (!valid || error || !key) {\n      return {\n        valid: false,\n        error: error?.message || 'Invalid API key'\n      }\n    }\n\n    // Check if the API key is enabled\n    if (!key.enabled) {\n      return {\n        valid: false,\n        error: 'API key is disabled'\n      }\n    }\n\n    // Check if the API key has expired\n    if (key.expiresAt && new Date(key.expiresAt) < new Date()) {\n      return {\n        valid: false,\n        error: 'API key has expired'\n      }\n    }\n\n    // Use the userId from the API key directly\n    return {\n      valid: true,\n      user: {\n        id: key.userId,\n        email: key.userId, // We don't have email from API key, use userId as fallback\n        name: null // We don't have name from API key\n      }\n    }\n  } catch (error) {\n    console.error('API key validation error:', error)\n    return {\n      valid: false,\n      error: 'Internal server error during API key validation'\n    }\n  }\n}\n\n/**\n * Middleware function to validate API key and return standardized error responses\n */\nexport function createApiKeyMiddleware() {\n  return async (request: NextRequest) => {\n    const validation = await validateApiKey(request)\n    \n    if (!validation.valid) {\n      return {\n        error: validation.error,\n        status: 401\n      }\n    }\n\n    return {\n      user: validation.user!\n    }\n  }\n} ","import { NextRequest, NextResponse } from 'next/server'\nimport { validateApiKey } from '@/app/api/v1/lib/auth'\nimport { db } from '@/lib/db'\nimport { emailAddresses, emailDomains, endpoints, webhooks } from '@/lib/db/schema'\nimport { eq, and, desc, count } from 'drizzle-orm'\nimport { nanoid } from 'nanoid'\nimport { AWSSESReceiptRuleManager } from '@/lib/aws-ses/aws-ses-rules'\n\nexport async function GET(request: NextRequest) {\n  try {\n    console.log('üìã GET /api/v1.1/email-addresses - Fetching user email addresses')\n    \n    const validation = await validateApiKey(request)\n    if ('error' in validation) {\n      return NextResponse.json({ error: validation.error }, { status: 401 })\n    }\n\n    const userId = validation.user?.id\n    if (!userId) {\n      return NextResponse.json({ error: 'User not found' }, { status: 401 })\n    }\n\n    const { searchParams } = new URL(request.url)\n    const domainId = searchParams.get('domainId')\n    const active = searchParams.get('active')\n    const limit = Math.min(parseInt(searchParams.get('limit') || '50'), 100)\n    const offset = parseInt(searchParams.get('offset') || '0')\n\n    // Build where conditions\n    const conditions = [eq(emailAddresses.userId, userId)]\n\n    if (domainId) {\n      conditions.push(eq(emailAddresses.domainId, domainId))\n    }\n\n    if (active !== null) {\n      const isActive = active === 'true'\n      conditions.push(eq(emailAddresses.isActive, isActive))\n    }\n\n    const whereConditions = conditions.length > 1 ? and(...conditions) : conditions[0]\n\n    // Build query with joins to get domain and endpoint information\n    const query = db\n      .select({\n        // Email address fields\n        id: emailAddresses.id,\n        address: emailAddresses.address,\n        domainId: emailAddresses.domainId,\n        webhookId: emailAddresses.webhookId,\n        endpointId: emailAddresses.endpointId,\n        isActive: emailAddresses.isActive,\n        isReceiptRuleConfigured: emailAddresses.isReceiptRuleConfigured,\n        receiptRuleName: emailAddresses.receiptRuleName,\n        createdAt: emailAddresses.createdAt,\n        updatedAt: emailAddresses.updatedAt,\n        \n        // Domain information\n        domainName: emailDomains.domain,\n        domainStatus: emailDomains.status,\n        \n        // Endpoint information (if exists)\n        endpointName: endpoints.name,\n        endpointType: endpoints.type,\n        endpointIsActive: endpoints.isActive,\n        \n        // Webhook information (legacy, if exists)\n        webhookName: webhooks.name,\n        webhookUrl: webhooks.url,\n        webhookIsActive: webhooks.isActive\n      })\n      .from(emailAddresses)\n      .leftJoin(emailDomains, eq(emailAddresses.domainId, emailDomains.id))\n      .leftJoin(endpoints, eq(emailAddresses.endpointId, endpoints.id))\n      .leftJoin(webhooks, eq(emailAddresses.webhookId, webhooks.id))\n      .where(whereConditions)\n\n    const results = await query\n      .orderBy(desc(emailAddresses.createdAt))\n      .limit(limit)\n      .offset(offset)\n\n    // Get total count for pagination (using same filters as main query)\n    const totalCountResult = await db\n      .select({ count: count() })\n      .from(emailAddresses)\n      .where(whereConditions)\n    \n    const totalCount = totalCountResult[0]?.count || 0\n\n    // Transform results to enhanced format\n    const enhancedEmailAddresses = results.map((result: any) => ({\n      id: result.id,\n      address: result.address,\n      isActive: result.isActive,\n      isReceiptRuleConfigured: result.isReceiptRuleConfigured,\n      receiptRuleName: result.receiptRuleName,\n      createdAt: result.createdAt,\n      updatedAt: result.updatedAt,\n      \n      domain: {\n        id: result.domainId,\n        name: result.domainName,\n        status: result.domainStatus\n      },\n      \n      routing: result.endpointId ? {\n        type: 'endpoint',\n        id: result.endpointId,\n        name: result.endpointName,\n        endpointType: result.endpointType,\n        isActive: result.endpointIsActive\n      } : result.webhookId ? {\n        type: 'webhook',\n        id: result.webhookId,\n        name: result.webhookName,\n        url: result.webhookUrl,\n        isActive: result.webhookIsActive\n      } : {\n        type: 'none',\n        id: null,\n        name: null,\n        isActive: false\n      }\n    }))\n\n    console.log(`‚úÖ GET /api/v1.1/email-addresses - Retrieved ${results.length} email addresses for user ${userId}`)\n\n    return NextResponse.json({\n      success: true,\n      data: enhancedEmailAddresses,\n      pagination: {\n        limit,\n        offset,\n        total: totalCount,\n        hasMore: offset + limit < totalCount\n      },\n      meta: {\n        totalCount,\n        activeCount: enhancedEmailAddresses.filter((e: any) => e.isActive).length,\n        routingBreakdown: {\n          endpoint: enhancedEmailAddresses.filter((e: any) => e.routing.type === 'endpoint').length,\n          webhook: enhancedEmailAddresses.filter((e: any) => e.routing.type === 'webhook').length,\n          none: enhancedEmailAddresses.filter((e: any) => e.routing.type === 'none').length\n        }\n      }\n    })\n\n  } catch (error) {\n    console.error('‚ùå GET /api/v1.1/email-addresses - Error:', error)\n    return NextResponse.json(\n      { \n        success: false,\n        error: 'Failed to fetch email addresses',\n        details: error instanceof Error ? error.message : 'Unknown error'\n      },\n      { status: 500 }\n    )\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    console.log('üìù POST /api/v1.1/email-addresses - Creating new email address')\n    \n    const validation = await validateApiKey(request)\n    if ('error' in validation) {\n      return NextResponse.json({ error: validation.error }, { status: 401 })\n    }\n\n    const userId = validation.user?.id\n    if (!userId) {\n      return NextResponse.json({ error: 'User not found' }, { status: 401 })\n    }\n\n    const data = await request.json()\n    \n    // Validate required fields\n    if (!data.address || !data.domainId) {\n      return NextResponse.json(\n        { \n          success: false,\n          error: 'Missing required fields',\n          required: ['address', 'domainId']\n        },\n        { status: 400 }\n      )\n    }\n\n    // Validate email format\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/\n    if (!emailRegex.test(data.address)) {\n      return NextResponse.json(\n        { \n          success: false,\n          error: 'Invalid email address format'\n        },\n        { status: 400 }\n      )\n    }\n\n    // Check if domain exists and belongs to user\n    const domainResult = await db\n      .select()\n      .from(emailDomains)\n      .where(and(\n        eq(emailDomains.id, data.domainId),\n        eq(emailDomains.userId, userId)\n      ))\n      .limit(1)\n\n    if (!domainResult[0]) {\n      return NextResponse.json({\n        success: false,\n        error: 'Domain not found or access denied'\n      }, { status: 404 })\n    }\n\n    // Check if email already exists\n    const existingEmail = await db\n      .select()\n      .from(emailAddresses)\n      .where(eq(emailAddresses.address, data.address))\n      .limit(1)\n\n    if (existingEmail[0]) {\n      return NextResponse.json({\n        success: false,\n        error: 'Email address already exists'\n      }, { status: 409 })\n    }\n\n    // Validate endpoint/webhook if provided\n    let endpointId = null\n    let webhookId = null\n    \n    if (data.endpointId) {\n      const endpointResult = await db\n        .select()\n        .from(endpoints)\n        .where(and(\n          eq(endpoints.id, data.endpointId),\n          eq(endpoints.userId, userId)\n        ))\n        .limit(1)\n\n      if (!endpointResult[0]) {\n        return NextResponse.json({\n          success: false,\n          error: 'Endpoint not found or access denied'\n        }, { status: 404 })\n      }\n      endpointId = data.endpointId\n    } else if (data.webhookId) {\n      const webhookResult = await db\n        .select()\n        .from(webhooks)\n        .where(and(\n          eq(webhooks.id, data.webhookId),\n          eq(webhooks.userId, userId)\n        ))\n        .limit(1)\n\n      if (!webhookResult[0]) {\n        return NextResponse.json({\n          success: false,\n          error: 'Webhook not found or access denied'\n        }, { status: 404 })\n      }\n      webhookId = data.webhookId\n    }\n\n    // Create the email address\n    const newEmailAddress = {\n      id: nanoid(),\n      address: data.address,\n      domainId: data.domainId,\n      endpointId,\n      webhookId,\n      isActive: data.isActive !== undefined ? data.isActive : true,\n      isReceiptRuleConfigured: false,\n      receiptRuleName: null,\n      userId,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    }\n\n    const [createdEmailAddress] = await db.insert(emailAddresses).values(newEmailAddress).returning()\n\n    // Configure AWS SES receipt rule for the new email\n    let isReceiptRuleConfigured = false\n    let receiptRuleName = null\n    let awsConfigurationWarning = null\n\n    try {\n      const sesManager = new AWSSESReceiptRuleManager()\n      \n      // Get AWS configuration\n      const awsRegion = process.env.AWS_REGION || 'us-east-2'\n      const lambdaFunctionName = process.env.LAMBDA_FUNCTION_NAME || 'email-processor'\n      const s3BucketName = process.env.S3_BUCKET_NAME\n      const awsAccountId = process.env.AWS_ACCOUNT_ID\n\n      if (!s3BucketName || !awsAccountId) {\n        awsConfigurationWarning = 'AWS configuration incomplete. Missing S3_BUCKET_NAME or AWS_ACCOUNT_ID'\n        console.warn(`‚ö†Ô∏è POST /api/v1.1/email-addresses - ${awsConfigurationWarning}`)\n      } else {\n        console.log(`üîß POST /api/v1.1/email-addresses - Configuring AWS SES receipt rules for ${data.address}`)\n\n        const lambdaArn = AWSSESReceiptRuleManager.getLambdaFunctionArn(\n          lambdaFunctionName,\n          awsAccountId,\n          awsRegion\n        )\n\n        const receiptResult = await sesManager.configureEmailReceiving({\n          domain: domainResult[0].domain,\n          emailAddresses: [data.address],\n          lambdaFunctionArn: lambdaArn,\n          s3BucketName\n        })\n        \n        if (receiptResult.status === 'created' || receiptResult.status === 'updated') {\n          // Update email record with receipt rule information\n          await db\n            .update(emailAddresses)\n            .set({\n              isReceiptRuleConfigured: true,\n              receiptRuleName: receiptResult.ruleName,\n              updatedAt: new Date(),\n            })\n            .where(eq(emailAddresses.id, createdEmailAddress.id))\n\n          isReceiptRuleConfigured = true\n          receiptRuleName = receiptResult.ruleName\n          console.log(`‚úÖ POST /api/v1.1/email-addresses - AWS SES configured successfully for ${data.address}`)\n        } else {\n          awsConfigurationWarning = `SES configuration failed: ${receiptResult.error}`\n          console.warn(`‚ö†Ô∏è POST /api/v1.1/email-addresses - ${awsConfigurationWarning}`)\n        }\n      }\n    } catch (error) {\n      awsConfigurationWarning = `SES configuration error: ${error instanceof Error ? error.message : 'Unknown error'}`\n      console.error(`‚ùå POST /api/v1.1/email-addresses - AWS SES configuration failed:`, error)\n    }\n\n    // Get enhanced response with domain and routing information\n    const enhancedResponse = {\n      ...createdEmailAddress,\n      isReceiptRuleConfigured,\n      receiptRuleName,\n      domain: {\n        id: domainResult[0].id,\n        name: domainResult[0].domain,\n        status: domainResult[0].status\n      },\n      routing: endpointId ? {\n        type: 'endpoint',\n        id: endpointId,\n        name: null, // Would need another query to get name\n        endpointType: null,\n        isActive: true\n      } : webhookId ? {\n        type: 'webhook',\n        id: webhookId,\n        name: null, // Would need another query to get name\n        url: null,\n        isActive: true\n      } : {\n        type: 'none',\n        id: null,\n        name: null,\n        isActive: false\n      },\n      ...(awsConfigurationWarning && { warning: awsConfigurationWarning })\n    }\n\n    console.log(`‚úÖ POST /api/v1.1/email-addresses - Successfully created email address ${createdEmailAddress.id}`)\n\n    return NextResponse.json({\n      success: true,\n      data: enhancedResponse,\n      message: isReceiptRuleConfigured \n        ? 'Email address created and AWS SES configured successfully'\n        : 'Email address created successfully (AWS SES configuration pending)'\n    }, { status: 201 })\n\n  } catch (error) {\n    console.error('‚ùå POST /api/v1.1/email-addresses - Error:', error)\n    return NextResponse.json(\n      { \n        success: false,\n        error: 'Failed to create email address',\n        details: error instanceof Error ? error.message : 'Unknown error'\n      },\n      { status: 500 }\n    )\n  }\n}","import {\n  AppRouteRouteModule,\n  type AppRouteRouteModuleOptions,\n} from '../../server/route-modules/app-route/module.compiled'\nimport { RouteKind } from '../../server/route-kind'\nimport { patchFetch as _patchFetch } from '../../server/lib/patch-fetch'\n\nimport * as userland from 'VAR_USERLAND'\n\n// These are injected by the loader afterwards. This is injected as a variable\n// instead of a replacement because this could also be `undefined` instead of\n// an empty string.\ndeclare const nextConfigOutput: AppRouteRouteModuleOptions['nextConfigOutput']\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\n// INJECT:nextConfigOutput\n\nconst routeModule = new AppRouteRouteModule({\n  definition: {\n    kind: RouteKind.APP_ROUTE,\n    page: 'VAR_DEFINITION_PAGE',\n    pathname: 'VAR_DEFINITION_PATHNAME',\n    filename: 'VAR_DEFINITION_FILENAME',\n    bundlePath: 'VAR_DEFINITION_BUNDLE_PATH',\n  },\n  resolvedPagePath: 'VAR_RESOLVED_PAGE_PATH',\n  nextConfigOutput,\n  userland,\n})\n\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule\n\nfunction patchFetch() {\n  return _patchFetch({\n    workAsyncStorage,\n    workUnitAsyncStorage,\n  })\n}\n\nexport {\n  routeModule,\n  workAsyncStorage,\n  workUnitAsyncStorage,\n  serverHooks,\n  patchFetch,\n}\n"],"names":["AppRouteRouteModule","RouteKind","patchFetch","_patchFetch","userland","routeModule","definition","kind","APP_ROUTE","page","pathname","filename","bundlePath","resolvedPagePath","nextConfigOutput","workAsyncStorage","workUnitAsyncStorage","serverHooks"],"mappings":"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","ignoreList":[2]}