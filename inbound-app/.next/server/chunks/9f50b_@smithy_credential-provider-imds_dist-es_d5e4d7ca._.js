module.exports={502377:e=>{"use strict";var{g:t,__dirname:r}=e;e.s({httpRequest:()=>o}),e.i(749573);var a=e.i(219665),i=e.i(963018),n=e.i(62445);function o(e){return new Promise((t,r)=>{let o=(0,n.request)({method:"GET",...e,hostname:e.hostname?.replace(/^\[(.+)\]$/,"$1")});o.on("error",e=>{r(Object.assign(new a.ProviderError("Unable to connect to instance metadata service"),e)),o.destroy()}),o.on("timeout",()=>{r(new a.ProviderError("TimeoutError from instance metadata service")),o.destroy()}),o.on("response",e=>{let{statusCode:n=400}=e;(n<200||300<=n)&&(r(Object.assign(new a.ProviderError("Error response received from instance metadata service"),{statusCode:n})),o.destroy());let s=[];e.on("data",e=>{s.push(e)}),e.on("end",()=>{t(i.Buffer.concat(s)),o.destroy()})}),o.end()})}},145979:e=>{"use strict";var{g:t,__dirname:r}=e;{e.s({fromImdsCredentials:()=>r,isImdsCredentials:()=>t});let t=e=>!!e&&"object"==typeof e&&"string"==typeof e.AccessKeyId&&"string"==typeof e.SecretAccessKey&&"string"==typeof e.Token&&"string"==typeof e.Expiration,r=e=>({accessKeyId:e.AccessKeyId,secretAccessKey:e.SecretAccessKey,sessionToken:e.Token,expiration:new Date(e.Expiration),...e.AccountId&&{accountId:e.AccountId}})}},822298:e=>{"use strict";var{g:t,__dirname:r}=e;{e.s({DEFAULT_MAX_RETRIES:()=>r,DEFAULT_TIMEOUT:()=>t,providerConfigFromInit:()=>a});let t=1e3,r=0,a=({maxRetries:e=r,timeout:a=t})=>({maxRetries:e,timeout:a})}},111734:e=>{"use strict";var{g:t,__dirname:r}=e;{e.s({retry:()=>t});let t=(e,t)=>{let r=e();for(let a=0;a<t;a++)r=r.catch(e);return r}}},117631:e=>{"use strict";var{g:t,__dirname:r}=e;{e.s({ENV_CMDS_AUTH_TOKEN:()=>c,ENV_CMDS_FULL_URI:()=>t,ENV_CMDS_RELATIVE_URI:()=>r,fromContainerMetadata:()=>l}),e.i(749573);var a=e.i(818270),i=e.i(771485),n=e.i(502377),o=e.i(145979),s=e.i(822298),d=e.i(111734);let t="AWS_CONTAINER_CREDENTIALS_FULL_URI",r="AWS_CONTAINER_CREDENTIALS_RELATIVE_URI",c="AWS_CONTAINER_AUTHORIZATION_TOKEN",l=(e={})=>{let{timeout:t,maxRetries:r}=(0,s.providerConfigFromInit)(e);return()=>(0,d.retry)(async()=>{let r=await p({logger:e.logger}),i=JSON.parse(await E(t,r));if(!(0,o.isImdsCredentials)(i))throw new a.CredentialsProviderError("Invalid response received from instance metadata service.",{logger:e.logger});return(0,o.fromImdsCredentials)(i)},r)},E=async(e,t)=>(process.env[c]&&(t.headers={...t.headers,Authorization:process.env[c]}),(await (0,n.httpRequest)({...t,timeout:e})).toString()),_={localhost:!0,"127.0.0.1":!0},I={"http:":!0,"https:":!0},p=async({logger:e})=>{if(process.env[r])return{hostname:"169.254.170.2",path:process.env[r]};if(process.env[t]){let r=(0,i.parse)(process.env[t]);if(!r.hostname||!(r.hostname in _))throw new a.CredentialsProviderError(`${r.hostname} is not a valid container metadata service hostname`,{tryNextLink:!1,logger:e});if(!r.protocol||!(r.protocol in I))throw new a.CredentialsProviderError(`${r.protocol} is not a valid container metadata service protocol`,{tryNextLink:!1,logger:e});return{...r,port:r.port?parseInt(r.port,10):void 0}}throw new a.CredentialsProviderError(`The container metadata credential provider cannot be used unless the ${r} or ${t} environment variable is set`,{tryNextLink:!1,logger:e})}}},649827:e=>{"use strict";var{g:t,__dirname:r}=e;{e.s({InstanceMetadataV1FallbackError:()=>t}),e.i(749573);var a=e.i(818270);class t extends a.CredentialsProviderError{constructor(e,r=!0){super(e,r),this.tryNextLink=r,this.name="InstanceMetadataV1FallbackError",Object.setPrototypeOf(this,t.prototype)}}}},250563:e=>{"use strict";var t,{g:r,__dirname:a}=e;e.s({Endpoint:()=>t}),function(e){e.IPv4="http://169.254.169.254",e.IPv6="http://[fd00:ec2::254]"}(t||(t={}))},944112:e=>{"use strict";var{g:t,__dirname:r}=e;{e.s({CONFIG_ENDPOINT_NAME:()=>r,ENDPOINT_CONFIG_OPTIONS:()=>a,ENV_ENDPOINT_NAME:()=>t});let t="AWS_EC2_METADATA_SERVICE_ENDPOINT",r="ec2_metadata_service_endpoint",a={environmentVariableSelector:e=>e[t],configFileSelector:e=>e[r],default:void 0}}},812107:e=>{"use strict";var t,{g:r,__dirname:a}=e;e.s({EndpointMode:()=>t}),function(e){e.IPv4="IPv4",e.IPv6="IPv6"}(t||(t={}))},738813:e=>{"use strict";var{g:t,__dirname:r}=e;{e.s({CONFIG_ENDPOINT_MODE_NAME:()=>r,ENDPOINT_MODE_CONFIG_OPTIONS:()=>i,ENV_ENDPOINT_MODE_NAME:()=>t});var a=e.i(812107);let t="AWS_EC2_METADATA_SERVICE_ENDPOINT_MODE",r="ec2_metadata_service_endpoint_mode",i={environmentVariableSelector:e=>e[t],configFileSelector:e=>e[r],default:a.EndpointMode.IPv4}}},772406:e=>{"use strict";var{g:t,__dirname:r}=e;{e.s({getInstanceMetadataEndpoint:()=>t}),e.i(56410);var a=e.i(775904),i=e.i(692846),n=e.i(250563),o=e.i(944112),s=e.i(812107),d=e.i(738813);let t=async()=>(0,i.parseUrl)(await r()||await c()),r=async()=>(0,a.loadConfig)(o.ENDPOINT_CONFIG_OPTIONS)(),c=async()=>{let e=await (0,a.loadConfig)(d.ENDPOINT_MODE_CONFIG_OPTIONS)();switch(e){case s.EndpointMode.IPv4:return n.Endpoint.IPv4;case s.EndpointMode.IPv6:return n.Endpoint.IPv6;default:throw Error(`Unsupported endpoint mode: ${e}. Select from ${Object.values(s.EndpointMode)}`)}}}},7335:e=>{"use strict";var{g:t,__dirname:r}=e;{e.s({getExtendedInstanceMetadataCredentials:()=>t});let t=(e,t)=>{let r=300+Math.floor(300*Math.random()),a=new Date(Date.now()+1e3*r);t.warn(`Attempting credential expiration extension due to a credential service availability issue. A refresh of these credentials will be attempted after ${new Date(a)}.
For more information, please visit: https://docs.aws.amazon.com/sdkref/latest/guide/feature-static-credentials.html`);let i=e.originalExpiration??e.expiration;return{...e,...i?{originalExpiration:i}:{},expiration:a}}}},68523:e=>{"use strict";var{g:t,__dirname:r}=e;{e.s({staticStabilityProvider:()=>t});var a=e.i(7335);let t=(e,t={})=>{let r,i=t?.logger||console;return async()=>{let t;try{(t=await e()).expiration&&t.expiration.getTime()<Date.now()&&(t=(0,a.getExtendedInstanceMetadataCredentials)(t,i))}catch(e){if(r)i.warn("Credential renew failed: ",e),t=(0,a.getExtendedInstanceMetadataCredentials)(r,i);else throw e}return r=t,t}}}},330974:e=>{"use strict";var{g:t,__dirname:r}=e;{e.s({fromInstanceMetadata:()=>p}),e.i(56410);var a=e.i(775904);e.i(749573);var i=e.i(818270),n=e.i(649827),o=e.i(502377),s=e.i(145979),d=e.i(822298),c=e.i(111734),l=e.i(772406),E=e.i(68523);let t="/latest/meta-data/iam/security-credentials/",r="AWS_EC2_METADATA_V1_DISABLED",_="ec2_metadata_v1_disabled",I="x-aws-ec2-metadata-token",p=(e={})=>(0,E.staticStabilityProvider)(v(e),{logger:e.logger}),v=(e={})=>{let t=!1,{logger:o,profile:s}=e,{timeout:E,maxRetries:p}=(0,d.providerConfigFromInit)(e),v=async(o,d)=>{if(t||d.headers?.[I]==null){let t=!1,o=!1,d=await (0,a.loadConfig)({environmentVariableSelector:t=>{let a=t[r];if(o=!!a&&"false"!==a,void 0===a)throw new i.CredentialsProviderError(`${r} not set in env, checking config file next.`,{logger:e.logger});return o},configFileSelector:e=>{let r=e[_];return t=!!r&&"false"!==r},default:!1},{profile:s})();if(e.ec2MetadataV1Disabled||d){let a=[];throw e.ec2MetadataV1Disabled&&a.push("credential provider initialization (runtime option ec2MetadataV1Disabled)"),t&&a.push(`config file profile (${_})`),o&&a.push(`process environment variable (${r})`),new n.InstanceMetadataV1FallbackError(`AWS EC2 Metadata v1 fallback has been blocked by AWS SDK configuration in the following: [${a.join(", ")}].`)}}let l=(await (0,c.retry)(async()=>{let e;try{e=await g(d)}catch(e){throw 401===e.statusCode&&(t=!1),e}return e},o)).trim();return(0,c.retry)(async()=>{let r;try{r=await f(l,d,e)}catch(e){throw 401===e.statusCode&&(t=!1),e}return r},o)};return async()=>{let e=await (0,l.getInstanceMetadataEndpoint)();if(t)return o?.debug("AWS SDK Instance Metadata","using v1 fallback (no token fetch)"),v(p,{...e,timeout:E});{let r;try{r=(await u({...e,timeout:E})).toString()}catch(r){if(r?.statusCode===400)throw Object.assign(r,{message:"EC2 Metadata token request returned error"});return("TimeoutError"===r.message||[403,404,405].includes(r.statusCode))&&(t=!0),o?.debug("AWS SDK Instance Metadata","using v1 fallback (initial)"),v(p,{...e,timeout:E})}return v(p,{...e,headers:{[I]:r},timeout:E})}}},u=async e=>(0,o.httpRequest)({...e,path:"/latest/api/token",method:"PUT",headers:{"x-aws-ec2-metadata-token-ttl-seconds":"21600"}}),g=async e=>(await (0,o.httpRequest)({...e,path:t})).toString(),f=async(e,r,a)=>{let n=JSON.parse((await (0,o.httpRequest)({...r,path:t+e})).toString());if(!(0,s.isImdsCredentials)(n))throw new i.CredentialsProviderError("Invalid response received from instance metadata service.",{logger:a.logger});return(0,s.fromImdsCredentials)(n)}}},907005:e=>{"use strict";var{g:t,__dirname:r}=e;e.s({})},547566:e=>{"use strict";var{g:t,__dirname:r}=e;e.s({}),e.i(117631),e.i(330974),e.i(822298),e.i(907005),e.i(502377),e.i(772406),e.i(250563)},960346:e=>{"use strict";var{g:t,__dirname:r}=e;e.s({}),e.i(117631),e.i(330974),e.i(822298),e.i(907005),e.i(502377),e.i(772406),e.i(250563),e.i(547566)},655828:e=>{"use strict";var{g:t,__dirname:r}=e;e.s({DEFAULT_MAX_RETRIES:()=>n.DEFAULT_MAX_RETRIES,DEFAULT_TIMEOUT:()=>n.DEFAULT_TIMEOUT,ENV_CMDS_AUTH_TOKEN:()=>a.ENV_CMDS_AUTH_TOKEN,ENV_CMDS_FULL_URI:()=>a.ENV_CMDS_FULL_URI,ENV_CMDS_RELATIVE_URI:()=>a.ENV_CMDS_RELATIVE_URI,Endpoint:()=>d.Endpoint,fromContainerMetadata:()=>a.fromContainerMetadata,fromInstanceMetadata:()=>i.fromInstanceMetadata,getInstanceMetadataEndpoint:()=>s.getInstanceMetadataEndpoint,httpRequest:()=>o.httpRequest,providerConfigFromInit:()=>n.providerConfigFromInit});var a=e.i(117631),i=e.i(330974),n=e.i(822298);e.i(907005);var o=e.i(502377),s=e.i(772406),d=e.i(250563);e.i(547566)},653223:e=>{"use strict";var{g:t,__dirname:r}=e;e.s({DEFAULT_MAX_RETRIES:()=>a.DEFAULT_MAX_RETRIES,DEFAULT_TIMEOUT:()=>a.DEFAULT_TIMEOUT,ENV_CMDS_AUTH_TOKEN:()=>a.ENV_CMDS_AUTH_TOKEN,ENV_CMDS_FULL_URI:()=>a.ENV_CMDS_FULL_URI,ENV_CMDS_RELATIVE_URI:()=>a.ENV_CMDS_RELATIVE_URI,Endpoint:()=>a.Endpoint,fromContainerMetadata:()=>a.fromContainerMetadata,fromInstanceMetadata:()=>a.fromInstanceMetadata,getInstanceMetadataEndpoint:()=>a.getInstanceMetadataEndpoint,httpRequest:()=>a.httpRequest,providerConfigFromInit:()=>a.providerConfigFromInit}),e.i(960346);var a=e.i(655828)}};

//# sourceMappingURL=9f50b_%40smithy_credential-provider-imds_dist-es_d5e4d7ca._.js.map