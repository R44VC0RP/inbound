{"version":3,"sources":["turbopack:///[project]/app/api/v2/domains/route.ts","turbopack:///[project]/node_modules/next/dist/src/build/templates/app-route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server'\nimport { validateRequest } from '../helper/main'\nimport { db } from '@/lib/db'\nimport { emailDomains, emailAddresses, endpoints, domainDnsRecords } from '@/lib/db/schema'\nimport { eq, and, desc, count } from 'drizzle-orm'\nimport { AWSSESReceiptRuleManager } from '@/lib/aws-ses/aws-ses-rules'\nimport { checkDomainCanReceiveEmails } from '@/lib/domains-and-dns/dns'\nimport { createDomainVerification } from '@/lib/db/domains'\nimport { initiateDomainVerification } from '@/lib/domains-and-dns/domain-verification'\nimport { Autumn as autumn } from 'autumn-js'\nimport { verifyDnsRecords } from '@/lib/domains-and-dns/dns'\nimport { SESClient, GetIdentityVerificationAttributesCommand } from '@aws-sdk/client-ses'\n\n// AWS SES Client setup\nconst awsRegion = process.env.AWS_REGION || 'us-east-2'\nconst awsAccessKeyId = process.env.AWS_ACCESS_KEY_ID\nconst awsSecretAccessKey = process.env.AWS_SECRET_ACCESS_KEY\n\nlet sesClient: SESClient | null = null\n\nif (awsAccessKeyId && awsSecretAccessKey) {\n  sesClient = new SESClient({\n    region: awsRegion,\n    credentials: {\n      accessKeyId: awsAccessKeyId,\n      secretAccessKey: awsSecretAccessKey,\n    }\n  })\n}\n\n/**\n * GET /api/v2/domains\n * Gets all domains for the user with filtering and pagination\n * Supports both session-based auth and API key auth\n * Has tests? ‚è≥\n * Has logging? ‚úÖ\n * Has types? ‚úÖ\n */\n\n// GET /api/v2/domains types\nexport interface GetDomainsRequest {\n    limit?: number\n    offset?: number\n    status?: 'pending' | 'verified' | 'failed'\n    canReceive?: 'true' | 'false'\n    check?: 'true' | 'false'\n}\n\nexport interface DomainWithStats {\n    id: string\n    domain: string\n    status: string\n    canReceiveEmails: boolean\n    hasMxRecords: boolean\n    domainProvider: string | null\n    providerConfidence: string | null\n    lastDnsCheck: Date | null\n    lastSesCheck: Date | null\n    isCatchAllEnabled: boolean\n    catchAllEndpointId: string | null\n    createdAt: Date\n    updatedAt: Date\n    userId: string\n    stats: {\n        totalEmailAddresses: number\n        activeEmailAddresses: number\n        hasCatchAll: boolean\n    }\n    catchAllEndpoint?: {\n        id: string\n        name: string\n        type: string\n        isActive: boolean\n    } | null\n    // Additional fields when check=true\n    verificationCheck?: {\n        dnsRecords?: Array<{\n            type: string\n            name: string\n            value: string\n            isVerified: boolean\n            error?: string\n        }>\n        sesStatus?: string\n        isFullyVerified?: boolean\n        lastChecked?: Date\n    }\n}\n\nexport interface GetDomainsResponse {\n    data: DomainWithStats[]\n    pagination: {\n        limit: number\n        offset: number\n        total: number\n        hasMore: boolean\n    }\n    meta: {\n        totalCount: number\n        verifiedCount: number\n        withCatchAllCount: number\n        statusBreakdown: {\n            verified: number\n            pending: number\n            failed: number\n        }\n    }\n}\n\nexport async function GET(request: NextRequest) {\n    console.log('üåê GET /api/v2/domains - Starting request')\n    \n    try {\n        console.log('üîê Validating request authentication')\n        const { userId, error } = await validateRequest(request)\n        if (!userId) {\n            console.log('‚ùå Authentication failed:', error)\n            return NextResponse.json(\n                { error: error },\n                { status: 401 }\n            )\n        }\n        console.log('‚úÖ Authentication successful for userId:', userId)\n\n        const { searchParams } = new URL(request.url)\n\n        // Extract query parameters\n        const limit = Math.min(parseInt(searchParams.get('limit') || '50'), 100)\n        const offset = parseInt(searchParams.get('offset') || '0')\n        const status = searchParams.get('status') as 'pending' | 'verified' | 'failed'\n        const canReceive = searchParams.get('canReceive')\n        const check = searchParams.get('check') === 'true'\n\n        console.log('üìä Query parameters:', {\n            limit,\n            offset,\n            status,\n            canReceive,\n            check\n        })\n\n        // Validate parameters\n        if (limit < 1 || limit > 100) {\n            console.log('‚ö†Ô∏è Invalid limit parameter:', limit)\n            return NextResponse.json(\n                { error: 'Limit must be between 1 and 100' },\n                { status: 400 }\n            )\n        }\n\n        if (offset < 0) {\n            console.log('‚ö†Ô∏è Invalid offset parameter:', offset)\n            return NextResponse.json(\n                { error: 'Offset must be non-negative' },\n                { status: 400 }\n            )\n        }\n\n        // Build where conditions\n        const conditions = [eq(emailDomains.userId, userId)]\n\n        if (status && ['pending', 'verified', 'failed'].includes(status)) {\n            conditions.push(eq(emailDomains.status, status))\n            console.log('üîç Filtering by status:', status)\n        }\n\n        if (canReceive !== null) {\n            const canReceiveEmails = canReceive === 'true'\n            conditions.push(eq(emailDomains.canReceiveEmails, canReceiveEmails))\n            console.log('üîç Filtering by canReceive:', canReceiveEmails)\n        }\n\n        const whereConditions = conditions.length > 1 ? and(...conditions) : conditions[0]\n\n        // Get domains\n        console.log('üîç Querying domains from database')\n        const domainsQuery = db\n            .select({\n                id: emailDomains.id,\n                domain: emailDomains.domain,\n                status: emailDomains.status,\n                canReceiveEmails: emailDomains.canReceiveEmails,\n                hasMxRecords: emailDomains.hasMxRecords,\n                domainProvider: emailDomains.domainProvider,\n                providerConfidence: emailDomains.providerConfidence,\n                lastDnsCheck: emailDomains.lastDnsCheck,\n                lastSesCheck: emailDomains.lastSesCheck,\n                isCatchAllEnabled: emailDomains.isCatchAllEnabled,\n                catchAllEndpointId: emailDomains.catchAllEndpointId,\n                createdAt: emailDomains.createdAt,\n                updatedAt: emailDomains.updatedAt,\n                userId: emailDomains.userId\n            })\n            .from(emailDomains)\n            .where(whereConditions)\n\n        const domains = await domainsQuery\n            .orderBy(desc(emailDomains.createdAt))\n            .limit(limit)\n            .offset(offset)\n\n        // Get total count for pagination\n        const totalCountResult = await db\n            .select({ count: count() })\n            .from(emailDomains)\n            .where(whereConditions)\n        \n        const totalCount = totalCountResult[0]?.count || 0\n\n        console.log('üìä Found', domains.length, 'domains out of', totalCount, 'total')\n\n        // Enhance domains with additional data\n        const enhancedDomains = await Promise.all(\n            domains.map(async (domain) => {\n                // Get email address count\n                const emailCountResult = await db\n                    .select({ count: count() })\n                    .from(emailAddresses)\n                    .where(eq(emailAddresses.domainId, domain.id))\n                \n                const emailCount = emailCountResult[0]?.count || 0\n\n                // Get active email address count\n                const activeEmailCountResult = await db\n                    .select({ count: count() })\n                    .from(emailAddresses)\n                    .where(and(\n                        eq(emailAddresses.domainId, domain.id),\n                        eq(emailAddresses.isActive, true)\n                    ))\n                \n                const activeEmailCount = activeEmailCountResult[0]?.count || 0\n\n                // Get catch-all endpoint info if configured\n                let catchAllEndpoint = null\n                if (domain.catchAllEndpointId) {\n                    const endpointResult = await db\n                        .select({\n                            id: endpoints.id,\n                            name: endpoints.name,\n                            type: endpoints.type,\n                            isActive: endpoints.isActive\n                        })\n                        .from(endpoints)\n                        .where(eq(endpoints.id, domain.catchAllEndpointId))\n                        .limit(1)\n                    \n                    catchAllEndpoint = endpointResult[0] ? {\n                        id: endpointResult[0].id,\n                        name: endpointResult[0].name,\n                        type: endpointResult[0].type,\n                        isActive: endpointResult[0].isActive || false\n                    } : null\n                }\n\n                const enhancedDomain: DomainWithStats = {\n                    ...domain,\n                    canReceiveEmails: domain.canReceiveEmails || false,\n                    hasMxRecords: domain.hasMxRecords || false,\n                    isCatchAllEnabled: domain.isCatchAllEnabled || false,\n                    createdAt: domain.createdAt || new Date(),\n                    updatedAt: domain.updatedAt || new Date(),\n                    stats: {\n                        totalEmailAddresses: emailCount,\n                        activeEmailAddresses: activeEmailCount,\n                        hasCatchAll: !!domain.catchAllEndpointId\n                    },\n                    catchAllEndpoint\n                }\n\n                // If check=true, perform DNS and SES verification checks\n                if (check) {\n                    console.log(`üîç Performing verification check for domain: ${domain.domain}`)\n                    \n                    try {\n                        // Get DNS records from database\n                        const dnsRecords = await db\n                            .select()\n                            .from(domainDnsRecords)\n                            .where(eq(domainDnsRecords.domainId, domain.id))\n\n                        let verificationResults: Array<{\n                            type: string\n                            name: string\n                            value: string\n                            isVerified: boolean\n                            error?: string\n                        }> = []\n\n                        if (dnsRecords.length > 0) {\n                            // Verify DNS records\n                            console.log(`üîç Verifying ${dnsRecords.length} DNS records`)\n                            const results = await verifyDnsRecords(\n                                dnsRecords.map(record => ({\n                                    type: record.recordType,\n                                    name: record.name,\n                                    value: record.value\n                                }))\n                            )\n\n                            verificationResults = results.map((result, index) => ({\n                                type: result.type,\n                                name: result.name,\n                                value: result.expectedValue,\n                                isVerified: result.isVerified,\n                                error: result.error\n                            }))\n\n                            // Update DNS record verification status in database\n                            await Promise.all(\n                                dnsRecords.map(async (record, index) => {\n                                    const verificationResult = results[index]\n                                    await db\n                                        .update(domainDnsRecords)\n                                        .set({\n                                            isVerified: verificationResult.isVerified,\n                                            lastChecked: new Date()\n                                        })\n                                        .where(eq(domainDnsRecords.id, record.id))\n                                })\n                            )\n                        }\n\n                        // Check SES verification status\n                        let sesStatus = 'Unknown'\n                        if (sesClient) {\n                            try {\n                                console.log(`üîç Checking SES verification status`)\n                                const getAttributesCommand = new GetIdentityVerificationAttributesCommand({\n                                    Identities: [domain.domain]\n                                })\n                                const attributesResponse = await sesClient.send(getAttributesCommand)\n                                const attributes = attributesResponse.VerificationAttributes?.[domain.domain]\n                                sesStatus = attributes?.VerificationStatus || 'NotFound'\n                                \n                                // Update domain status based on SES verification\n                                if (sesStatus === 'Success' && domain.status !== 'verified') {\n                                    await db\n                                        .update(emailDomains)\n                                        .set({\n                                            status: 'verified',\n                                            lastSesCheck: new Date(),\n                                            updatedAt: new Date()\n                                        })\n                                        .where(eq(emailDomains.id, domain.id))\n                                    enhancedDomain.status = 'verified'\n                                } else if (sesStatus === 'Failed' && domain.status !== 'failed') {\n                                    await db\n                                        .update(emailDomains)\n                                        .set({\n                                            status: 'failed',\n                                            lastSesCheck: new Date(),\n                                            updatedAt: new Date()\n                                        })\n                                        .where(eq(emailDomains.id, domain.id))\n                                    enhancedDomain.status = 'failed'\n                                } else {\n                                    // Just update last check time\n                                    await db\n                                        .update(emailDomains)\n                                        .set({\n                                            lastSesCheck: new Date()\n                                        })\n                                        .where(eq(emailDomains.id, domain.id))\n                                }\n                            } catch (sesError) {\n                                console.error(`‚ùå SES verification check failed:`, sesError)\n                                sesStatus = 'Error'\n                            }\n                        }\n\n                        const allDnsVerified = verificationResults.length > 0 && \n                            verificationResults.every(r => r.isVerified)\n                        const isFullyVerified = allDnsVerified && sesStatus === 'Success'\n\n                        enhancedDomain.verificationCheck = {\n                            dnsRecords: verificationResults,\n                            sesStatus,\n                            isFullyVerified,\n                            lastChecked: new Date()\n                        }\n\n                        console.log(`‚úÖ Verification check complete for ${domain.domain}:`, {\n                            dnsVerified: allDnsVerified,\n                            sesStatus,\n                            isFullyVerified\n                        })\n\n                    } catch (checkError) {\n                        console.error(`‚ùå Verification check failed for ${domain.domain}:`, checkError)\n                        enhancedDomain.verificationCheck = {\n                            dnsRecords: [],\n                            sesStatus: 'Error',\n                            isFullyVerified: false,\n                            lastChecked: new Date()\n                        }\n                    }\n                }\n\n                return enhancedDomain\n            })\n        )\n\n        // Calculate meta statistics\n        const verifiedCount = enhancedDomains.filter(d => d.status === 'verified').length\n        const withCatchAllCount = enhancedDomains.filter(d => d.stats.hasCatchAll).length\n        const statusBreakdown = {\n            verified: enhancedDomains.filter(d => d.status === 'verified').length,\n            pending: enhancedDomains.filter(d => d.status === 'pending').length,\n            failed: enhancedDomains.filter(d => d.status === 'failed').length\n        }\n\n        console.log('‚úÖ Successfully retrieved domains with stats:', {\n            retrieved: enhancedDomains.length,\n            verified: verifiedCount,\n            withCatchAll: withCatchAllCount\n        })\n\n        return NextResponse.json({\n            data: enhancedDomains,\n            pagination: {\n                limit,\n                offset,\n                total: totalCount,\n                hasMore: offset + limit < totalCount\n            },\n            meta: {\n                totalCount,\n                verifiedCount,\n                withCatchAllCount,\n                statusBreakdown\n            }\n        })\n\n    } catch (error) {\n        console.error('‚ùå GET /api/v2/domains - Error:', error)\n        return NextResponse.json(\n            { \n                error: 'Failed to fetch domains',\n                details: error instanceof Error ? error.message : 'Unknown error'\n            },\n            { status: 500 }\n        )\n    }\n}\n\n/**\n * POST /api/v2/domains\n * Creates a new domain for email receiving\n * Supports both session-based auth and API key auth\n * Has tests? ‚è≥\n * Has logging? ‚úÖ\n * Has types? ‚úÖ\n */\n\n// POST /api/v2/domains types\nexport interface PostDomainsRequest {\n    domain: string\n}\n\nexport interface PostDomainsResponse {\n    id: string\n    domain: string\n    status: 'pending' | 'verified' | 'failed'\n    canReceiveEmails: boolean\n    hasMxRecords: boolean\n    domainProvider: string | null\n    providerConfidence: string | null\n    dnsRecords: Array<{\n        type: string\n        name: string\n        value: string\n        isRequired: boolean\n    }>\n    createdAt: Date\n    updatedAt: Date\n}\n\nexport async function POST(request: NextRequest) {\n    console.log('‚ûï POST /api/v2/domains - Starting domain creation')\n    \n    try {\n        console.log('üîê Validating request authentication')\n        const { userId, error } = await validateRequest(request)\n        if (!userId) {\n            console.log('‚ùå Authentication failed:', error)\n            return NextResponse.json(\n                { error: error },\n                { status: 401 }\n            )\n        }\n        console.log('‚úÖ Authentication successful for userId:', userId)\n\n        // Parse request body\n        const data: PostDomainsRequest = await request.json()\n        console.log('üìù Request data:', { domain: data.domain })\n\n        // Validate required fields\n        if (!data.domain) {\n            console.log('‚ùå Missing required field: domain')\n            return NextResponse.json(\n                { error: 'Domain is required' },\n                { status: 400 }\n            )\n        }\n\n        // Normalize domain (lowercase, trim)\n        const domain = data.domain.toLowerCase().trim()\n\n        // Validate domain format\n        const domainRegex = /^[a-zA-Z0-9]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(\\.[a-zA-Z0-9]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/\n        if (!domainRegex.test(domain) || domain.length > 253) {\n            console.log('‚ùå Invalid domain format:', domain)\n            return NextResponse.json(\n                { error: 'Invalid domain format' },\n                { status: 400 }\n            )\n        }\n\n        // Check if domain already exists on the platform (for any user)\n        console.log('üîç Checking if domain already exists on platform')\n        const existingDomainAnyUser = await db\n            .select({\n                id: emailDomains.id,\n                userId: emailDomains.userId,\n                status: emailDomains.status,\n                createdAt: emailDomains.createdAt\n            })\n            .from(emailDomains)\n            .where(eq(emailDomains.domain, domain))\n            .limit(1)\n\n        if (existingDomainAnyUser[0]) {\n            const isOwnDomain = existingDomainAnyUser[0].userId === userId\n            \n            if (isOwnDomain) {\n                console.log('‚ùå Domain already exists for current user:', domain)\n                return NextResponse.json(\n                    { error: 'You have already added this domain to your account' },\n                    { status: 409 }\n                )\n            } else {\n                console.log('‚ùå Domain already registered by another user:', domain)\n                return NextResponse.json(\n                    { \n                        error: 'This domain is already registered on our platform. If you believe this is an error or you need to transfer ownership, please contact our support team.',\n                        code: 'DOMAIN_ALREADY_REGISTERED'\n                    },\n                    { status: 409 }\n                )\n            }\n        }\n\n        // Check Autumn domain limits\n        console.log('üîç Checking domain limits with Autumn')\n        const { data: domainCheck, error: domainCheckError } = await autumn.check({\n            customer_id: userId,\n            feature_id: \"domains\",\n        })\n\n        if (domainCheckError) {\n            console.error('‚ùå Autumn domain check error:', domainCheckError)\n            return NextResponse.json(\n                { error: 'Failed to check domain limits' },\n                { status: 500 }\n            )\n        }\n\n        if (!domainCheck?.allowed) {\n            console.log('‚ùå Domain limit reached for user:', userId)\n            return NextResponse.json(\n                { error: 'Domain limit reached. Please upgrade your plan to add more domains.' },\n                { status: 403 }\n            )\n        }\n\n        console.log('‚úÖ Domain limits check passed:', {\n            allowed: domainCheck.allowed,\n            balance: domainCheck.balance,\n            unlimited: domainCheck.unlimited\n        })\n\n        // Check DNS for conflicts (MX/CNAME records)\n        console.log('üîç Checking DNS records for conflicts')\n        const dnsResult = await checkDomainCanReceiveEmails(domain)\n        \n        if (!dnsResult.canReceiveEmails) {\n            console.log('‚ùå Domain cannot receive emails:', dnsResult.error)\n            return NextResponse.json(\n                { \n                    error: dnsResult.error || 'Domain has conflicting DNS records (MX or CNAME). Please remove them before adding this domain.' \n                },\n                { status: 400 }\n            )\n        }\n\n        console.log('‚úÖ DNS check passed:', {\n            canReceiveEmails: dnsResult.canReceiveEmails,\n            hasMxRecords: dnsResult.hasMxRecords,\n            provider: dnsResult.provider?.name\n        })\n\n        // Create domain record in database\n        console.log('üíæ Creating domain record in database')\n        const domainRecord = await createDomainVerification(\n            domain,\n            userId,\n            {\n                canReceiveEmails: dnsResult.canReceiveEmails,\n                hasMxRecords: dnsResult.hasMxRecords,\n                provider: dnsResult.provider\n            }\n        )\n\n        // Initiate SES verification\n        console.log('üîê Initiating SES domain verification')\n        const verificationResult = await initiateDomainVerification(domain, userId)\n\n        // Track domain usage with Autumn (only if not unlimited)\n        if (!domainCheck.unlimited) {\n            console.log('üìä Tracking domain usage with Autumn')\n            const { error: trackError } = await autumn.track({\n                customer_id: userId,\n                feature_id: \"domains\",\n                value: 1,\n            })\n\n            if (trackError) {\n                console.error('‚ö†Ô∏è Failed to track domain usage:', trackError)\n                // Don't fail the request, just log the warning\n            }\n        }\n\n        // Format response\n        const response: PostDomainsResponse = {\n            id: domainRecord.id,\n            domain: domainRecord.domain,\n            status: verificationResult.status,\n            canReceiveEmails: domainRecord.canReceiveEmails || false,\n            hasMxRecords: domainRecord.hasMxRecords || false,\n            domainProvider: domainRecord.domainProvider,\n            providerConfidence: domainRecord.providerConfidence,\n            dnsRecords: verificationResult.dnsRecords.map(record => ({\n                type: record.type,\n                name: record.name,\n                value: record.value,\n                isRequired: true\n            })),\n            createdAt: domainRecord.createdAt || new Date(),\n            updatedAt: domainRecord.updatedAt || new Date()\n        }\n\n        console.log('‚úÖ Successfully created domain:', domainRecord.id)\n        return NextResponse.json(response, { status: 201 })\n\n    } catch (error) {\n        console.error('‚ùå POST /api/v2/domains - Error:', error)\n        return NextResponse.json(\n            { \n                error: 'Failed to create domain',\n                details: error instanceof Error ? error.message : 'Unknown error'\n            },\n            { status: 500 }\n        )\n    }\n}","import {\n  AppRouteRouteModule,\n  type AppRouteRouteModuleOptions,\n} from '../../server/route-modules/app-route/module.compiled'\nimport { RouteKind } from '../../server/route-kind'\nimport { patchFetch as _patchFetch } from '../../server/lib/patch-fetch'\n\nimport * as userland from 'VAR_USERLAND'\n\n// These are injected by the loader afterwards. This is injected as a variable\n// instead of a replacement because this could also be `undefined` instead of\n// an empty string.\ndeclare const nextConfigOutput: AppRouteRouteModuleOptions['nextConfigOutput']\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\n// INJECT:nextConfigOutput\n\nconst routeModule = new AppRouteRouteModule({\n  definition: {\n    kind: RouteKind.APP_ROUTE,\n    page: 'VAR_DEFINITION_PAGE',\n    pathname: 'VAR_DEFINITION_PATHNAME',\n    filename: 'VAR_DEFINITION_FILENAME',\n    bundlePath: 'VAR_DEFINITION_BUNDLE_PATH',\n  },\n  resolvedPagePath: 'VAR_RESOLVED_PAGE_PATH',\n  nextConfigOutput,\n  userland,\n})\n\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule\n\nfunction patchFetch() {\n  return _patchFetch({\n    workAsyncStorage,\n    workUnitAsyncStorage,\n  })\n}\n\nexport {\n  routeModule,\n  workAsyncStorage,\n  workUnitAsyncStorage,\n  serverHooks,\n  patchFetch,\n}\n"],"names":["AppRouteRouteModule","RouteKind","patchFetch","_patchFetch","userland","routeModule","definition","kind","APP_ROUTE","page","pathname","filename","bundlePath","resolvedPagePath","nextConfigOutput","workAsyncStorage","workUnitAsyncStorage","serverHooks"],"mappings":"4FAAA,IAAA,EAAA,EAAA,CAAA,CAAA,QACA,EAAA,EAAA,CAAA,CAAA,QACA,EAAA,EAAA,CAAA,CAAA,QACA,EAAA,CAAA,CAAA,QAAA,IAAA,EAAA,EAAA,CAAA,CAAA,OACA,EAAA,EAAA,CAAA,CAAA,QAAA,EAAA,EAAA,CAAA,CAAA,QAAA,EAAA,EAAA,CAAA,CAAA,OAEA,EAAA,EAAA,CAAA,CAAA,QACA,EAAA,EAAA,CAAA,CAAA,QACA,EAAA,EAAA,CAAA,CAAA,QACA,EAAA,EAAA,CAAA,CAAA,QAEA,EAAA,EAAA,CAAA,CAAA,QAAA,EAAA,EAAA,CAAA,CAAA,QAGA,IAAM,EAAY,QAAQ,GAAG,CAAC,UAAU,EAAI,YACtC,EAAiB,QAAQ,GAAG,CAAC,iBAAiB,CAC9C,EAAqB,QAAQ,GAAG,CAAC,qBAAqB,CAExD,EAA8B,KA2F3B,eAAe,EAAI,CAAoB,EAC1C,QAAQ,GAAG,CAAC,6CAEZ,GAAI,CACA,QAAQ,GAAG,CAAC,wCACZ,GAAM,CAAE,QAAM,CAAE,OAAK,CAAE,CAAG,MAAM,CAAA,EAAA,EAAA,eAAA,AAAc,EAAE,GAChD,GAAI,CAAC,EAED,MAFS,CACT,IAF4B,IAEpB,GAAG,CAAC,2BAA4B,GACjC,EAAA,YAAY,CAAC,IAAI,CACpB,CAAE,MAAO,CAAM,EACf,CAAE,OAAQ,CAFP,EAEW,GAGtB,QAAQ,GAAG,CAAC,0CAA2C,GAEvD,GAAM,cAAE,CAAY,CAAE,CAAG,IAAI,IAAI,EAAQ,GAAG,EAGtC,EAAQ,KAAK,GAAG,CAAC,SAAS,EAAa,GAAG,CAAC,UAAY,MAAO,KAC9D,EAAS,SAAS,EAAa,GAAG,CAAC,WAAa,KAChD,EAAS,EAAa,GAAG,CAAC,UAC1B,EAAa,EAAa,GAAG,CAAC,cAC9B,EAAsC,SAA9B,EAAa,GAAG,CAAC,SAW/B,GATA,QAAQ,GAAG,CAAC,uBAAwB,OAChC,SACA,SACA,aACA,EACA,OACJ,GAGI,EAAQ,GAAK,EAAQ,IAErB,CAF0B,MAC1B,QAAQ,GAAG,CAAC,8BAA+B,GACpC,EAAA,YAAY,CAAC,IAAI,CACpB,CAAE,MAAO,YADN,qBACwC,EAC3C,CAAE,OAAQ,GAAI,GAItB,GAAI,EAAS,EAET,CAFY,MACZ,QAAQ,GAAG,CAAC,+BAAgC,GACrC,EAAA,YAAY,CAAC,IAAI,CACpB,CAAE,MAAO,YADN,iBACoC,EACvC,CAAE,OAAQ,GAAI,GAKtB,IAAM,EAAa,CAAC,CAAA,EAAA,EAAA,EAAA,AAAC,EAAE,EAAA,YAAY,CAAC,MAAM,CAAE,GAAQ,CAOpD,GALI,GAAU,CAFM,AAEL,KAFQ,KAEG,WAAY,SAAS,CAAC,QAAQ,CAAC,KACrD,EAAW,EADmD,EAC/C,CAAC,CAAA,EAAA,EAAA,EAAA,AAAC,EAAE,EAAA,YAAY,CAAC,MAAM,CAAE,IACxC,OADgB,CACR,GAAG,CAAC,AADO,0BACoB,IAGxB,OAAf,EAAqB,CACrB,IAAM,EAAkC,SAAf,EACzB,EAAW,IAAI,CAAC,CAAA,EAAA,EAAA,EAAA,AAAC,EAAE,EAAA,YAAY,CAAC,gBAAgB,CAAE,CAAlC,GAChB,EADmB,MACX,GAAG,CAAC,8BAA+B,EAC/C,CAEA,IAAM,EAAkB,EAAW,MAAM,CAAG,EAAI,CAAA,EAAA,EAAA,GAAA,AAAE,KAAK,GAAc,CAAU,CAAC,EAAE,CAGlF,QAAQ,GAAG,CAAC,SAHoC,4BAIhD,IAAM,EAAe,EAAA,EAAE,CAClB,MAAM,CAAC,CACJ,GAAI,EAAA,YAAY,CAAC,EAAE,CACnB,KAHa,EAGL,EAAA,WADJ,CACgB,CAAC,MAAM,CAC3B,OAAQ,EAAA,OADA,KACY,CAAC,MAAM,CAC3B,gBADQ,CACU,EAAA,YAAY,CAAC,gBAAgB,CAC/C,MADkB,OACJ,EAAA,YAAY,CAAC,YAAY,CACvC,UADc,KACE,EAAA,YAAY,CAAC,cAAc,CAC3C,QADgB,WACI,EAAA,YAAY,CAAC,kBAAkB,CACnD,IADoB,SACN,EAAA,YAAY,CAAC,YAAY,CACvC,UADc,GACA,EAAA,YAAY,CAAC,YAAY,CACvC,UADc,QACK,EAAA,YAAY,CAAC,iBAAiB,CACjD,KADmB,cACC,EAAA,YAAY,CAAC,kBAAkB,CACnD,IADoB,MACT,EAAA,YAAY,CAAC,SAAS,CACjC,UAAW,EAAA,CADA,WACY,CAAC,SAAS,CACjC,OAAQ,EAAA,IADG,QACS,CAAC,MAAM,AAC/B,GACC,IAAI,CAAC,EAAA,OAFM,KAEM,EACjB,KAAK,CAAC,GAEL,EAAU,MAAM,EACjB,GAJK,IAIE,CAAC,CAAA,EAAA,EAAA,IAAA,AAAG,EAAE,EAAA,YAAY,CAAC,SAAS,GACnC,IADQ,CACH,CAAC,GACN,EAFa,IAEP,CAAC,GAGN,EAAmB,MAAM,EAAA,EAAE,CAC5B,MAAM,CAAC,CAAE,MAAO,CAAA,EAAA,EAAA,KAAI,AAAJ,GAAQ,GACxB,IAAI,AAFsB,CAErB,EAAA,YAAY,EACjB,IAFgB,CAEX,CAAC,GAEL,EAAa,CAAgB,CAAC,EAAE,EAAE,KAH9B,EAGuC,EAEjD,QAAQ,GAAG,CAAC,WAAY,EAAQ,MAAM,CAAE,iBAAkB,EAAY,SAGtE,IAAM,EAAkB,MAAM,QAAQ,GAAG,CACrC,EAAQ,GAAG,CAAC,MAAO,IAEf,IAAM,EAAmB,MAAM,EAAA,EAAE,CAC5B,MAAM,CAAC,CAAE,MAAO,GAAA,EAAA,KAAA,AAAI,GAAI,GACxB,IAAI,AAFsB,CAErB,EAAA,cAAc,EACnB,EAFgB,GAEX,CAAC,CAAA,EAAA,EAAA,EAAA,AAAC,EAAE,EAAA,GADJ,WACkB,CAAC,QAAQ,CAAE,EAAO,EAAE,GAArC,AAEL,EAAa,CAAgB,CAAC,CAFtB,CAEwB,EAAE,OAAS,EAG3C,EAAyB,MAAM,EAAA,EAAE,CAClC,MAAM,CAAC,CAAE,MAAO,CAAA,EAAA,EAAA,KAAA,AAAI,GAAI,GACxB,IAAI,AAF4B,CAE3B,EAAA,cAAc,EACnB,EAFgB,GAEX,CAAC,CAAA,EAAA,EAAA,GAAA,AAAE,EACL,CAAA,EAAA,CAFE,CAEF,EAAA,AAAC,EAAE,EAAA,cAAc,CAAC,MADf,EACuB,CAAE,EAAO,EAAE,EACrC,CADA,AACA,EAAA,EAAA,CADG,CACH,AAAC,EAAE,EAAA,cAAc,CAAC,QAAQ,EAAE,KAG9B,CAHE,CAGiB,CAAsB,CAAC,EAAE,AAHvC,EAGyC,OAAS,EAGzD,EAAmB,KACvB,GAAI,EAAO,kBAAkB,CAAE,CAC3B,IAAM,EAAiB,MAAM,EAAA,EAAE,CAC1B,MAAM,CAAC,CACJ,GAAI,EAAA,SAAS,CAAC,EAAE,CAChB,KAAM,EAAA,CAHe,QAGN,CAAC,IAAI,CACpB,CAFI,IAEE,EAAA,SAAS,CAAC,IAAI,AADd,CAEN,SAAU,EAAA,SAAS,CADb,AACc,QAAQ,AAChC,GACC,IAAI,CAAC,EAAA,QAFQ,CAEC,EACd,KAAK,CAAC,CAAA,EAAA,EAAA,EAAA,AAAC,EAAE,EAAA,QADJ,CACa,CAAC,EAAE,CAAE,EAAO,gBAAxB,EAA0C,GAChD,AADS,KACJ,CAAC,GAEX,EAAmB,CAAc,CAAC,EAAE,CAAG,CACnC,GAAI,CAAc,CAAC,EAAE,CAAC,EAAE,CACxB,KAAM,CAAc,CAAC,EAAE,CAAC,IAAI,CAC5B,KAAM,CAAc,CAAC,EAAE,CAAC,IAAI,CAC5B,SAAU,CAAc,CAAC,EAAE,CAAC,QAAQ,GAAI,CAC5C,EAAI,IACR,CAEA,IAAM,EAAkC,CACpC,GAAG,CAAM,CACT,iBAAkB,EAAO,gBAAgB,GAAI,EAC7C,aAAc,EAAO,YAAY,GAAI,EACrC,kBAAmB,EAAO,iBAAiB,GAAI,EAC/C,UAAW,EAAO,SAAS,EAAI,IAAI,KACnC,UAAW,EAAO,SAAS,EAAI,IAAI,KACnC,MAAO,CACH,oBAAqB,EACrB,qBAAsB,EACtB,YAAa,CAAC,CAAC,EAAO,kBAAkB,AAC5C,mBACA,CACJ,EAGA,GAAI,EAAO,CACP,QAAQ,GAAG,CAAC,CAAC,6CAA6C,EAAE,EAAO,MAAM,CAAA,CAAE,EAE3E,GAAI,CAEA,IAAM,EAAa,MAAM,EAAA,EAAE,CACtB,MAAM,GACN,IAAI,CAAC,EAAA,gBAAgB,EACrB,AAHoB,KAGf,CAAC,CAAA,EAAA,EAAA,EAAA,AAAC,EAAE,EAAA,CADJ,eACoB,CAAC,QAAQ,CAAE,EAAO,EAAE,CAAvC,EAEP,EAMC,CARS,CAQP,CAEP,GAAI,EAAW,MAAM,CAAG,EAAG,CAEvB,QAAQ,GAAG,CAAC,CAAC,aAAa,EAAE,EAAW,MAAM,CAAC,YAAY,CAAC,EAC3D,IAAM,EAAU,MAAM,CAAA,EAAA,EAAA,gBAAA,AAAe,EACjC,EAAW,GAAG,CAAC,IAAW,CACtB,IADqB,CACf,EAAO,CAFC,SAES,CACvB,KAAM,EAAO,IAAI,CACjB,MAAO,EAAO,KAAK,CACvB,CAAC,GAGL,EAAsB,EAAQ,GAAG,CAAC,CAAC,EAAQ,KAAW,CAClD,EADiD,GAC3C,EAAO,IAAI,CACjB,KAAM,EAAO,IAAI,CACjB,MAAO,EAAO,aAAa,CAC3B,WAAY,EAAO,UAAU,CAC7B,MAAO,EAAO,KAAK,CACvB,CAAC,EAGD,MAAM,QAAQ,GAAG,CACb,EAAW,GAAG,CAAC,MAAO,EAAQ,KAC1B,IAAM,EAAqB,CAAO,CAAC,EAAM,AACzC,OAAM,EAAA,EAAE,CACH,MAAM,CAAC,EAAA,gBAAgB,EACvB,GAAG,CAAC,CACD,EAHF,SAGc,EAAmB,AAF3B,UAEqC,CACzC,YAAa,IAAI,IACrB,GACC,KAAK,CAAC,CAAA,EAAA,EAAA,EAAA,AAAC,EAAE,EAAA,gBAAgB,CAAC,EAAE,CAAE,EAAO,EAAE,EAChD,GAER,CAGA,CANuB,GAMnB,EAAY,AANU,UAO1B,GAAI,EACA,GAAI,CACA,KAFO,GAEC,GAAG,CAAC,CAAC,mCAAmC,CAAC,EACjD,IAAM,EAAuB,IAAI,EAAA,qCAAA,GAAwC,CAAC,CACtE,WAAY,CAAC,EAAO,MAAM,CAAC,AAC/B,GACM,EAAqB,MAAM,EAAU,IAAI,CAAC,GAC1C,EAAa,EAAmB,sBAAsB,EAAE,CAAC,EAAO,MAAM,CAAC,CAC7E,EAAY,GAAY,oBAAsB,WAG5B,YAAd,GAA6C,YAAY,CAA9B,EAAO,MAAM,EACxC,MAAM,EAAA,EAAE,CACH,MAAM,CAAC,EAAA,YAAY,EACnB,GAAG,CAAC,CACD,MAHF,CAGU,UAFJ,CAGJ,aAAc,IAAI,KAClB,UAAW,IAAI,IACnB,GACC,KAAK,CAAC,CAAA,EAAA,EAAA,EAAA,AAAC,EAAE,EAAA,YAAY,CAAC,EAAE,CAAE,EAAO,EAAE,GACxC,EAAe,MADJ,AACU,CAAG,IADV,QAEO,WAAd,GAA4C,UAAU,CAA5B,EAAO,MAAM,EAC9C,MAAM,EAAA,EAAE,CACH,MAAM,CAAC,EAAA,YAAY,EACnB,GAAG,CAAC,CACD,MAHF,CAGU,SACR,CAHI,YAGU,IAAI,KAClB,UAAW,IAAI,IACnB,GACC,KAAK,CAAC,CAAA,EAAA,EAAA,EAAA,AAAC,EAAE,EAAA,YAAY,CAAC,EAAE,CAAE,EAAO,EAAE,GACxC,EAAe,MADJ,AACU,CAAG,IADV,MAId,MAAM,EAAA,EAAE,CACH,MAAM,CAAC,EAAA,YAAY,EACnB,GAAG,CAAC,CACD,MAHF,OAGgB,IAFV,AAEc,IACtB,GACC,KAAK,CAAC,CAAA,EAAA,EAAA,EAAA,AAAC,EAAE,EAAA,YAAY,CAAC,EAAE,CAAE,EAAO,EAAE,EAEhD,CAAE,MAAO,EAFU,AAEA,CACf,IAHkB,IAGV,KAAK,CAAC,CAAC,gCAAgC,CAAC,CAAE,GAClD,EAAY,OAChB,CAGJ,IAAM,EAAiB,EAAoB,MAAM,CAAG,GAChD,EAAoB,KAAK,CAAC,GAAK,EAAE,UAAU,EACzC,EAAkB,GAAgC,YAAd,CAE1C,GAAe,iBAAiB,CAAG,CAC/B,WAAY,YACZ,kBACA,EACA,YAAa,IAAI,IACrB,EAEA,QAAQ,GAAG,CAAC,CAAC,kCAAkC,EAAE,EAAO,MAAM,CAAC,CAAC,CAAC,CAAE,CAC/D,YAAa,YACb,kBACA,CACJ,EAEJ,CAAE,MAAO,EAAY,CACjB,QAAQ,KAAK,CAAC,CAAC,gCAAgC,EAAE,EAAO,MAAM,CAAC,CAAC,CAAC,CAAE,GACnE,EAAe,iBAAiB,CAAG,CAC/B,WAAY,EAAE,CACd,UAAW,QACX,iBAAiB,EACjB,YAAa,IAAI,IACrB,CACJ,CACJ,CAEA,OAAO,CACX,IAIE,EAAgB,EAAgB,MAAM,CAAC,GAAkB,aAAb,EAAE,MAAM,EAAiB,MAAM,CAC3E,EAAoB,EAAgB,MAAM,CAAC,GAAK,EAAE,KAAK,CAAC,WAAW,EAAE,MAAM,CAC3E,EAAkB,CACpB,SAAU,EAAgB,MAAM,CAAC,GAAkB,aAAb,EAAE,MAAM,EAAiB,MAAM,CACrE,QAAS,EAAgB,MAAM,CAAC,GAAkB,YAAb,EAAE,MAAM,EAAgB,MAAM,CACnE,OAAQ,EAAgB,MAAM,CAAC,GAAkB,WAAb,EAAE,MAAM,EAAe,MAAM,AACrE,EAQA,OANA,QAAQ,GAAG,CAAC,+CAAgD,CACxD,UAAW,EAAgB,MAAM,CACjC,SAAU,EACV,aAAc,CAClB,GAEO,EAAA,YAAY,CAAC,IAAI,CAAC,CACrB,KAAM,EACN,WAAY,AAFT,OAGC,SACA,EACA,MAAO,EACP,QAAS,EAAS,EAAQ,CAC9B,EACA,KAAM,YACF,gBACA,oBACA,kBACA,CACJ,CACJ,EAEJ,CAAE,MAAO,EAAO,CAEZ,OADA,QAAQ,KAAK,CAAC,iCAAkC,GACzC,EAAA,YAAY,CAAC,IAAI,CACpB,CACI,MAAO,YAFR,cAGC,QAAS,aAAiB,MAAQ,EAAM,OAAO,CAAG,eACtD,EACA,CAAE,OAAQ,GAAI,EAEtB,CACJ,CAkCO,eAAe,EAAK,CAAoB,EAC3C,QAAQ,GAAG,CAAC,qDAEZ,GAAI,CACA,QAAQ,GAAG,CAAC,wCACZ,GAAM,QAAE,CAAM,CAAE,OAAK,CAAE,CAAG,MAAM,CAAA,EAAA,EAAA,eAAA,AAAc,EAAE,GAChD,GAAI,CAAC,EAED,MAFS,CACT,IAF4B,IAEpB,GAAG,CAAC,2BAA4B,GACjC,EAAA,YAAY,CAAC,IAAI,CACpB,CAAE,MAAO,CAAM,EACf,CAAE,OAAQ,CAFP,EAEW,GAGtB,QAAQ,GAAG,CAAC,0CAA2C,GAGvD,IAAM,EAA2B,MAAM,EAAQ,IAAI,GAInD,GAHA,QAAQ,GAAG,CAAC,mBAAoB,CAAE,OAAQ,EAAK,MAAM,AAAC,GAGlD,CAAC,EAAK,MAAM,CAEZ,CAFc,MACd,QAAQ,GAAG,CAAC,oCACL,EAAA,YAAY,CAAC,IAAI,CACpB,CAAE,MAAO,YADN,QAC2B,EAC9B,CAAE,OAAQ,GAAI,GAKtB,IAAM,EAAS,EAAK,MAAM,CAAC,WAAW,GAAG,IAAI,GAI7C,GAAI,CAAC,AADe,gGACH,IAAI,CAAC,IAAW,EAAO,MAAM,CAAG,IAE7C,CAFkD,MAClD,QAAQ,GAAG,CAAC,2BAA4B,GACjC,EAAA,YAAY,CAAC,IAAI,CACpB,CAAE,MAAO,YADN,WAC8B,EACjC,CAAE,OAAQ,GAAI,GAKtB,QAAQ,GAAG,CAAC,oDACZ,IAAM,EAAwB,MAAM,EAAA,EAAE,CACjC,MAAM,CAAC,CACJ,GAAI,EAAA,YAAY,CAAC,EAAE,CACnB,KAH4B,EAGpB,EAAA,WADJ,CACgB,CAAC,MAAM,CAC3B,OAAQ,EAAA,OADA,KACY,CAAC,MAAM,CAC3B,UAAW,EAAA,IADH,QACe,CAAC,SAAS,AACrC,GACC,IAAI,CAAC,EAAA,IAFS,QAEG,EACjB,KAAK,CAAC,GAAA,EAAA,EAAC,AAAD,EAAG,EAAA,KADJ,OACgB,CAAC,MAAM,CAAE,IAC9B,KAAK,CAAC,CADA,EAGX,GAHc,AAGV,CAAqB,CAAC,EAAE,CAAE,CAG1B,GAFoB,CAAqB,AAErC,CAFsC,EAAE,CAAC,MAAM,GAAK,AAEvC,EAEb,OADA,QAAQ,GAAG,CAAC,4CAA6C,GAClD,EAAA,YAAY,CAAC,IAAI,CACpB,CAAE,MAAO,YADN,wCAC2D,EAC9D,CAAE,OAAQ,GAAI,GAIlB,OADA,QAAQ,GAAG,CAAC,+CAAgD,GACrD,EAAA,YAAY,CAAC,IAAI,CACpB,CACI,MAAO,YAFR,6IAGC,KAAM,2BACV,EACA,CAAE,OAAQ,GAAI,EAG1B,CAGA,QAAQ,GAAG,CAAC,yCACZ,GAAM,CAAE,KAAM,CAAW,CAAE,MAAO,CAAgB,CAAE,CAAG,MAAM,EAAA,MAAM,CAAC,KAAK,CAAC,CACtE,YAAa,EACb,SAFyD,EAE7C,SAChB,GAEA,GAAI,EAEA,OADA,QAAQ,CADU,IACL,CAAC,+BAAgC,GACvC,EAAA,YAAY,CAAC,IAAI,CACpB,CAAE,MAAO,YADN,mBACsC,EACzC,CAAE,OAAQ,GAAI,GAItB,GAAI,CAAC,GAAa,QAEd,CAFuB,MACvB,QAAQ,GAAG,CAAC,mCAAoC,GACzC,EAAA,YAAY,CAAC,IAAI,CACpB,CAAE,MAAO,YADN,yDAC4E,EAC/E,CAAE,OAAQ,GAAI,GAItB,QAAQ,GAAG,CAAC,gCAAiC,CACzC,QAAS,EAAY,OAAO,CAC5B,QAAS,EAAY,OAAO,CAC5B,UAAW,EAAY,SAAS,AACpC,GAGA,QAAQ,GAAG,CAAC,yCACZ,IAAM,EAAY,MAAM,CAAA,EAAA,EAAA,2BAAA,AAA0B,EAAE,GAEpD,GAAI,CAAC,CAFmB,CAET,gBAAgB,CAE3B,CAF6B,MAC7B,QAAQ,GAAG,CAAC,kCAAmC,EAAU,KAAK,EACvD,EAAA,YAAY,CAAC,IAAI,CACpB,CACI,MAAO,EAAU,KAAK,EAAI,GAF3B,8FAGH,EACA,CAAE,OAAQ,GAAI,GAItB,QAAQ,GAAG,CAAC,sBAAuB,CAC/B,iBAAkB,EAAU,gBAAgB,CAC5C,aAAc,EAAU,YAAY,CACpC,SAAU,EAAU,QAAQ,EAAE,IAClC,GAGA,QAAQ,GAAG,CAAC,yCACZ,IAAM,EAAe,MAAM,CAAA,EAAA,EAAA,wBAAA,AAAuB,EAC9C,EACA,EACA,CACI,MAJmB,WAID,EAAU,gBAAgB,CAC5C,aAAc,EAAU,YAAY,CACpC,SAAU,EAAU,QAAQ,AAChC,GAIJ,QAAQ,GAAG,CAAC,yCACZ,IAAM,EAAqB,MAAM,CAAA,EAAA,EAAA,0BAAA,AAAyB,EAAE,EAAQ,GAGpE,GAAI,CAH6B,AAG5B,EAAY,SAAS,CAAE,CACxB,QAAQ,GAAG,CAAC,wCACZ,GAAM,CAAE,MAAO,CAAU,CAAE,CAAG,MAAM,EAAA,MAAM,CAAC,KAAK,CAAC,CAC7C,YAAa,EACb,SAFgC,EAEpB,UACZ,MAAO,CACX,GAEI,GACA,QAAQ,CADI,IACC,CAAC,mCAAoC,EAG1D,CAGA,IAAM,EAAgC,CAClC,GAAI,EAAa,EAAE,CACnB,OAAQ,EAAa,MAAM,CAC3B,OAAQ,EAAmB,MAAM,CACjC,iBAAkB,EAAa,gBAAgB,GAAI,EACnD,aAAc,EAAa,YAAY,GAAI,EAC3C,eAAgB,EAAa,cAAc,CAC3C,mBAAoB,EAAa,kBAAkB,CACnD,WAAY,EAAmB,UAAU,CAAC,GAAG,CAAC,IAAW,CACrD,IADoD,CAC9C,EAAO,IAAI,CACjB,KAAM,EAAO,IAAI,CACjB,MAAO,EAAO,KAAK,CACnB,YAAY,EAChB,CAAC,EACD,UAAW,EAAa,SAAS,EAAI,IAAI,KACzC,UAAW,EAAa,SAAS,EAAI,IAAI,IAC7C,EAGA,OADA,QAAQ,GAAG,CAAC,iCAAkC,EAAa,EAAE,EACtD,EAAA,YAAY,CAAC,IAAI,CAAC,EAAU,CAAE,OAAQ,GAAI,EAErD,CAAE,GAFS,GAEF,EAAO,CAEZ,OADA,QAAQ,KAAK,CAAC,kCAAmC,GAC1C,EAAA,YAAY,CAAC,IAAI,CACpB,CACI,MAAO,YAFR,cAGC,QAAS,aAAiB,MAAQ,EAAM,OAAO,CAAG,eACtD,EACA,CAAE,OAAQ,GAAI,EAEtB,CACJ,CAroBI,GAAkB,IACpB,EAAY,IAAI,EAAA,QADwB,CACf,CAAC,CACxB,OAAQ,EACR,YAAa,CACX,IAHY,QAGC,EACb,gBAAiB,CACnB,CACF,EAAA,kKC3BF,IAAA,EAGO,EAAA,CAFLA,AAEK,CAAA,QACP,EAA0B,EAAyB,CAA1CC,AAA0C,CAAA,EAAA,EAH9B,GAEwC,CAC3C,AAClB,EAA0C,EAFnC,AAEmC,CAAjCC,AAAiC,CAAA,EADhB,EAC8C,GAExE,EAAwC,EAAA,CAAA,CAFjBC,AAEiB,EAA5BC,MAWZ,GAbkC,CAa5BC,EAAc,EAXM,EAWN,CAbsB,CAalBL,WAXgB,QAWhBA,CAAoB,CAC1CM,WAAY,CACVC,KAAMN,EAAAA,SAAAA,CAAUO,SAAS,CACzBC,KAAM,wBACNC,SAAU,kBACVC,SAAU,QACVC,WAAY,EACd,EACAC,iBAAkB,wCAClBC,iBAXF,CAA0B,WAYxBV,CACF,GAKM,kBAAEW,CAAgB,sBAAEC,CAAoB,aAAEC,CAAW,CAAE,CAAGZ,EAEhE,SAASH,IACP,MAAA,CAAA,EAAA,EAAOC,UAAAA,EAAY,kBACjBY,uBACAC,CACF,EACF","ignoreList":[1]}