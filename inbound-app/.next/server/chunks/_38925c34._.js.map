{"version":3,"sources":["turbopack:///[project]/node_modules/@inboundemail/sdk/src/utils.ts","turbopack:///[project]/node_modules/@inboundemail/sdk/src/client.ts","turbopack:///[project]/node_modules/@inboundemail/sdk/src/webhook-types.ts","turbopack:///[project]/node_modules/@inboundemail/sdk/src/index.ts","turbopack:///[project]/node_modules/@react-email/heading/dist/index.mjs","turbopack:///[project]/node_modules/@react-email/hr/dist/index.mjs","turbopack:///[project]/emails/vip-payment-request.tsx","turbopack:///[project]/emails/vip-payment-request-preview.tsx","turbopack:///[project]/app/api/products/inboundvip/route.ts","turbopack:///[project]/node_modules/next/dist/src/build/templates/app-route.ts"],"sourcesContent":["/**\n * Utility functions for the Inbound Email SDK\n */\n\n/**\n * Check if a string is a valid email address\n */\nexport function isValidEmail(email: string): boolean {\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/\n  return emailRegex.test(email)\n}\n\n/**\n * Build query string from parameters\n */\nexport function buildQueryString(params: Record<string, any>): string {\n  const searchParams = new URLSearchParams()\n  \n  Object.entries(params).forEach(([key, value]) => {\n    if (value !== undefined && value !== null) {\n      searchParams.append(key, String(value))\n    }\n  })\n  \n  const queryString = searchParams.toString()\n  return queryString ? `?${queryString}` : ''\n} ","/**\n * Main client class for the Inbound Email SDK\n */\n\nimport type { \n  InboundEmailConfig,\n  // Mail API\n  GetMailRequest, GetMailResponse, PostMailRequest, PostMailResponse, GetMailByIdResponse,\n  // Endpoints API  \n  GetEndpointsRequest, GetEndpointsResponse, PostEndpointsRequest, PostEndpointsResponse,\n  GetEndpointByIdResponse, PutEndpointByIdRequest, PutEndpointByIdResponse, DeleteEndpointByIdResponse,\n  // Domains API\n  GetDomainsRequest, GetDomainsResponse, PostDomainsRequest, PostDomainsResponse,\n  GetDomainByIdResponse, PutDomainByIdRequest, PutDomainByIdResponse,\n  // Email Addresses API\n  GetEmailAddressesRequest, GetEmailAddressesResponse, PostEmailAddressesRequest, PostEmailAddressesResponse,\n  GetEmailAddressByIdResponse, PutEmailAddressByIdRequest, PutEmailAddressByIdResponse, DeleteEmailAddressByIdResponse,\n  // Emails API (sending)\n  PostEmailsRequest, PostEmailsResponse, GetEmailByIdResponse,\n  // Reply API\n  PostEmailReplyRequest, PostEmailReplyResponse\n} from './types'\nimport type { InboundWebhookEmail } from './webhook-types'\nimport { buildQueryString } from './utils'\nimport { getSenderInfo } from './webhook-types'\n\n// Extended config interface for default reply settings\nexport interface InboundEmailConfigExtended extends InboundEmailConfig {\n  defaultReplyFrom?: string\n}\n\nexport class InboundEmailClient {\n  private readonly apiKey: string\n  private readonly baseUrl: string\n  private readonly defaultReplyFrom?: string\n\n  constructor(config: InboundEmailConfigExtended | string) {\n    if (typeof config === 'string') {\n      this.apiKey = config\n      this.baseUrl = 'https://inbound.new/api/v2'\n      this.defaultReplyFrom = undefined\n    } else {\n      this.apiKey = config.apiKey\n      this.baseUrl = config.baseUrl || 'https://inbound.new/api/v2'\n      this.defaultReplyFrom = config.defaultReplyFrom\n    }\n    \n    if (!this.apiKey) {\n      throw new Error('API key is required')\n    }\n  }\n\n  /**\n   * Make an authenticated request to the API\n   */\n  private async request<T>(\n    endpoint: string,\n    options: RequestInit = {}\n  ): Promise<T> {\n    const url = `${this.baseUrl}${endpoint}`\n    \n    const headers = {\n      'Authorization': `Bearer ${this.apiKey}`,\n      'Content-Type': 'application/json',\n      ...options.headers,\n    }\n\n    const response = await fetch(url, {\n      ...options,\n      headers,\n    })\n\n    if (!response.ok) {\n      const errorData = await response.json().catch(() => ({}))\n      throw new Error(errorData.error || `HTTP ${response.status}: ${response.statusText}`)\n    }\n\n    return response.json()\n  }\n\n  /**\n   * Mail API - for managing received emails\n   */\n  mail = {\n    /**\n     * List all emails in the mailbox\n     */\n    list: async (params?: GetMailRequest): Promise<GetMailResponse> => {\n      const queryString = params ? buildQueryString(params) : ''\n      return this.request<GetMailResponse>(`/mail${queryString}`)\n    },\n\n    /**\n     * Get a specific email by ID\n     */\n    get: async (id: string): Promise<GetMailByIdResponse> => {\n      return this.request<GetMailByIdResponse>(`/mail/${id}`)\n    },\n\n    /**\n     * Reply to an email\n     */\n    reply: async (params: PostMailRequest): Promise<PostMailResponse> => {\n      return this.request<PostMailResponse>('/mail', {\n        method: 'POST',\n        body: JSON.stringify(params),\n      })\n    },\n  }\n\n  /**\n   * Endpoints API - for managing webhook and email endpoints\n   */\n  endpoints = {\n    /**\n     * List all endpoints\n     */\n    list: async (params?: GetEndpointsRequest): Promise<GetEndpointsResponse> => {\n      const queryString = params ? buildQueryString(params) : ''\n      return this.request<GetEndpointsResponse>(`/endpoints${queryString}`)\n    },\n\n    /**\n     * Create a new endpoint\n     */\n    create: async (params: PostEndpointsRequest): Promise<PostEndpointsResponse> => {\n      return this.request<PostEndpointsResponse>('/endpoints', {\n        method: 'POST',\n        body: JSON.stringify(params),\n      })\n    },\n\n    /**\n     * Get a specific endpoint by ID\n     */\n    get: async (id: string): Promise<GetEndpointByIdResponse> => {\n      return this.request<GetEndpointByIdResponse>(`/endpoints/${id}`)\n    },\n\n    /**\n     * Update an endpoint\n     */\n    update: async (id: string, params: PutEndpointByIdRequest): Promise<PutEndpointByIdResponse> => {\n      return this.request<PutEndpointByIdResponse>(`/endpoints/${id}`, {\n        method: 'PUT',\n        body: JSON.stringify(params),\n      })\n    },\n\n    /**\n     * Delete an endpoint\n     */\n    delete: async (id: string): Promise<DeleteEndpointByIdResponse> => {\n      return this.request<DeleteEndpointByIdResponse>(`/endpoints/${id}`, {\n        method: 'DELETE',\n      })\n    },\n  }\n\n  /**\n   * Domains API - for managing email domains\n   */\n  domains = {\n    /**\n     * List all domains\n     */\n    list: async (params?: GetDomainsRequest): Promise<GetDomainsResponse> => {\n      const queryString = params ? buildQueryString(params) : ''\n      return this.request<GetDomainsResponse>(`/domains${queryString}`)\n    },\n\n    /**\n     * Create a new domain\n     */\n    create: async (params: PostDomainsRequest): Promise<PostDomainsResponse> => {\n      return this.request<PostDomainsResponse>('/domains', {\n        method: 'POST',\n        body: JSON.stringify(params),\n      })\n    },\n\n    /**\n     * Get a specific domain by ID\n     */\n    get: async (id: string): Promise<GetDomainByIdResponse> => {\n      return this.request<GetDomainByIdResponse>(`/domains/${id}`)\n    },\n\n    /**\n     * Update domain settings (catch-all configuration)\n     */\n    update: async (id: string, params: PutDomainByIdRequest): Promise<PutDomainByIdResponse> => {\n      return this.request<PutDomainByIdResponse>(`/domains/${id}`, {\n        method: 'PUT',\n        body: JSON.stringify(params),\n      })\n    },\n  }\n\n  /**\n   * Email Addresses API - for managing individual email addresses\n   */\n  emailAddresses = {\n    /**\n     * List all email addresses\n     */\n    list: async (params?: GetEmailAddressesRequest): Promise<GetEmailAddressesResponse> => {\n      const queryString = params ? buildQueryString(params) : ''\n      return this.request<GetEmailAddressesResponse>(`/email-addresses${queryString}`)\n    },\n\n    /**\n     * Create a new email address\n     */\n    create: async (params: PostEmailAddressesRequest): Promise<PostEmailAddressesResponse> => {\n      return this.request<PostEmailAddressesResponse>('/email-addresses', {\n        method: 'POST',\n        body: JSON.stringify(params),\n      })\n    },\n\n    /**\n     * Get a specific email address by ID\n     */\n    get: async (id: string): Promise<GetEmailAddressByIdResponse> => {\n      return this.request<GetEmailAddressByIdResponse>(`/email-addresses/${id}`)\n    },\n\n    /**\n     * Update an email address\n     */\n    update: async (id: string, params: PutEmailAddressByIdRequest): Promise<PutEmailAddressByIdResponse> => {\n      return this.request<PutEmailAddressByIdResponse>(`/email-addresses/${id}`, {\n        method: 'PUT',\n        body: JSON.stringify(params),\n      })\n    },\n\n    /**\n     * Delete an email address\n     */\n    delete: async (id: string): Promise<DeleteEmailAddressByIdResponse> => {\n      return this.request<DeleteEmailAddressByIdResponse>(`/email-addresses/${id}`, {\n        method: 'DELETE',\n      })\n    },\n  }\n\n  /**\n   * Emails API - for sending emails (Resend-compatible)\n   */\n  emails = {\n    /**\n     * Send an email\n     */\n    send: async (params: PostEmailsRequest): Promise<PostEmailsResponse> => {\n      return this.request<PostEmailsResponse>('/emails', {\n        method: 'POST',\n        body: JSON.stringify(params),\n      })\n    },\n\n    /**\n     * Get a sent email by ID\n     */\n    get: async (id: string): Promise<GetEmailByIdResponse> => {\n      return this.request<GetEmailByIdResponse>(`/emails/${id}`)\n    },\n\n    /**\n     * Reply to an email by ID\n     */\n    reply: async (id: string, params: PostEmailReplyRequest): Promise<PostEmailReplyResponse> => {\n      return this.request<PostEmailReplyResponse>(`/emails/${id}/reply`, {\n        method: 'POST',\n        body: JSON.stringify(params),\n      })\n    },\n  }\n\n  /**\n   * Legacy send method for backwards compatibility (similar to Resend)\n   */\n  send = async (params: PostEmailsRequest): Promise<PostEmailsResponse> => {\n    return this.emails.send(params)\n  }\n\n  /**\n   * Streamlined reply method for webhook handlers\n   * Works directly with webhook email objects for better DX\n   * \n   * Usage:\n   * - inbound.reply(email, \"Thanks for your message!\")\n   * - inbound.reply(email, { from: \"support@domain.com\", text: \"Thanks!\" })\n   * - inbound.reply(\"email-id\", { from: \"support@domain.com\", text: \"Thanks!\" })\n   */\n  reply = async (\n    emailOrId: InboundWebhookEmail | string,\n    replyContent: string | {\n      from?: string\n      text?: string\n      html?: string\n      subject?: string\n      to?: string | string[]\n      cc?: string | string[]\n      bcc?: string | string[]\n      headers?: Record<string, string>\n      attachments?: Array<{\n        content: string\n        filename: string\n        path?: string\n        content_type?: string\n      }>\n      include_original?: boolean\n    }\n  ): Promise<PostEmailReplyResponse> => {\n    // Determine email ID\n    const emailId = typeof emailOrId === 'string' ? emailOrId : emailOrId.id\n\n    // Handle simple string reply\n    if (typeof replyContent === 'string') {\n      // Need a from address - check if we have a default configured\n      if (!this.defaultReplyFrom) {\n        throw new Error(\n          'To use simple string replies like inbound.reply(email, \"thanks\"), you need to configure a defaultReplyFrom address:\\n\\n' +\n          'const inbound = new Inbound({\\n' +\n          '  apiKey: \"your-key\",\\n' +\n          '  defaultReplyFrom: \"support@yourdomain.com\"\\n' +\n          '})\\n\\n' +\n          'Or use the full syntax: inbound.reply(email, { from: \"support@yourdomain.com\", text: \"thanks\" })'\n        )\n      }\n\n      // Create reply with default from address\n      return this.emails.reply(emailId, {\n        from: this.defaultReplyFrom,\n        text: replyContent,\n      })\n    }\n\n    // Handle full reply object\n    const replyParams = { ...replyContent }\n    \n    // If no from address provided, use default if available\n    if (!replyParams.from && this.defaultReplyFrom) {\n      replyParams.from = this.defaultReplyFrom\n    }\n\n    // Validate that we have a from address\n    if (!replyParams.from) {\n      throw new Error(\n        'Reply requires a \"from\" address. Either:\\n' +\n        '1. Configure defaultReplyFrom: new Inbound({ apiKey: \"key\", defaultReplyFrom: \"support@domain.com\" })\\n' +\n        '2. Or provide it in the reply: inbound.reply(email, { from: \"support@domain.com\", text: \"thanks\" })'\n      )\n    }\n\n    return this.emails.reply(emailId, replyParams as PostEmailReplyRequest)\n  }\n\n  // Convenience aliases for better developer experience\n  endpoint = this.endpoints\n  domain = this.domains\n  emailAddress = this.emailAddresses\n  email = this.emails\n} ","/**\n * TypeScript types for Inbound Email webhook payloads\n * Use these types to add type safety to your webhook handlers\n */\n\n// Base email address structure\nexport interface InboundEmailAddress {\n  text: string\n  addresses: Array<{\n    name: string | null\n    address: string | null\n  }>\n}\n\n// Email attachment structure\nexport interface InboundEmailAttachment {\n  filename: string | undefined\n  contentType: string | undefined\n  size: number | undefined\n  contentId: string | undefined\n  contentDisposition: string | undefined\n}\n\n// Email headers structure with common headers typed\nexport interface InboundEmailHeaders extends Record<string, any> {\n  'return-path'?: {\n    value?: Array<{ address: string; name: string }> | string\n    html?: string\n    text?: string\n    params?: Record<string, string>\n  }\n  'received'?: string\n  'received-spf'?: string\n  'authentication-results'?: string\n  'x-ses-receipt'?: string\n  'x-ses-dkim-signature'?: string\n  'dkim-signature'?: Array<{\n    value: string\n    params: Record<string, string>\n  }> | {\n    value?: Array<{ address: string; name: string }> | string\n    html?: string\n    text?: string\n    params?: Record<string, string>\n  }\n  'list'?: {\n    unsubscribe?: { url: string }\n    'unsubscribe-post'?: { name: string }\n  }\n  'x-entity-ref-id'?: string\n  'from'?: {\n    value?: Array<{ address: string; name: string }> | string\n    html?: string\n    text?: string\n    params?: Record<string, string>\n  }\n  'to'?: {\n    value?: Array<{ address: string; name: string }> | string\n    html?: string\n    text?: string\n    params?: Record<string, string>\n  }\n  'subject'?: string\n  'message-id'?: string\n  'date'?: string\n  'mime-version'?: string\n  'content-type'?: {\n    value: string\n    params: Record<string, string>\n  }\n  'feedback-id'?: string\n  'x-ses-outgoing'?: string\n}\n\n// Complete parsed email data structure\nexport interface InboundParsedEmailData {\n  messageId: string | undefined\n  date: Date | undefined\n  subject: string | undefined\n  from: InboundEmailAddress | null\n  to: InboundEmailAddress | null\n  cc: InboundEmailAddress | null\n  bcc: InboundEmailAddress | null\n  replyTo: InboundEmailAddress | null\n  inReplyTo: string | undefined\n  references: string[] | undefined\n  textBody: string | undefined\n  htmlBody: string | undefined\n  raw?: string\n  attachments: InboundEmailAttachment[]\n  headers: InboundEmailHeaders\n  priority: string | false | undefined\n}\n\n// Email data structure in webhook\nexport interface InboundWebhookEmail {\n  id: string\n  messageId: string | null\n  from: InboundEmailAddress | null\n  to: InboundEmailAddress | null\n  recipient: string\n  subject: string | null\n  receivedAt: Date | string\n  \n  // Full parsed email data structure\n  parsedData: InboundParsedEmailData\n  \n  // Cleaned content for backward compatibility\n  cleanedContent: {\n    html: string | null\n    text: string | null\n    hasHtml: boolean\n    hasText: boolean\n    attachments: InboundEmailAttachment[]\n    headers: InboundEmailHeaders\n  }\n}\n\n// Endpoint information in webhook\nexport interface InboundWebhookEndpoint {\n  id: string\n  name: string\n  type: 'webhook' | 'email' | 'email_group'\n}\n\n// Main webhook payload structure\nexport interface InboundWebhookPayload {\n  event: 'email.received'\n  timestamp: string\n  email: InboundWebhookEmail\n  endpoint: InboundWebhookEndpoint\n}\n\n// Webhook headers that Inbound sends with each webhook request\nexport interface InboundWebhookHeaders {\n  'content-type': 'application/json'\n  'user-agent': 'InboundEmail-Webhook/1.0'\n  'x-webhook-event': 'email.received'\n  'x-endpoint-id': string\n  'x-webhook-timestamp': string\n  'x-email-id': string\n  'x-message-id': string\n  [key: string]: string // Allow for custom headers configured in endpoint\n}\n\n// Complete webhook request structure for server frameworks\nexport interface InboundWebhookRequest {\n  method: 'POST'\n  headers: InboundWebhookHeaders\n  body: InboundWebhookPayload\n}\n\n// Type guard to check if a request is an Inbound webhook\nexport function isInboundWebhook(payload: any): payload is InboundWebhookPayload {\n  return (\n    payload &&\n    typeof payload === 'object' &&\n    payload.event === 'email.received' &&\n    typeof payload.timestamp === 'string' &&\n    payload.email &&\n    typeof payload.email === 'object' &&\n    typeof payload.email.id === 'string' &&\n    payload.endpoint &&\n    typeof payload.endpoint === 'object' &&\n    typeof payload.endpoint.id === 'string'\n  )\n}\n\n// Utility type for extracting just the email content\nexport type InboundEmailContent = Pick<InboundWebhookEmail, 'subject' | 'parsedData' | 'cleanedContent'>\n\n// Utility type for extracting just attachment information\nexport type InboundAttachmentInfo = InboundEmailAttachment & {\n  hasContent: boolean\n  isImage: boolean\n  isDocument: boolean\n}\n\n// Helper function to get attachment info with additional metadata\nexport function getAttachmentInfo(attachment: InboundEmailAttachment): InboundAttachmentInfo {\n  const contentType = attachment.contentType?.toLowerCase() || ''\n  \n  return {\n    ...attachment,\n    hasContent: !!attachment.size && attachment.size > 0,\n    isImage: contentType.startsWith('image/'),\n    isDocument: contentType.includes('pdf') || \n                contentType.includes('document') || \n                contentType.includes('text/') ||\n                contentType.includes('application/msword') ||\n                contentType.includes('application/vnd.openxmlformats')\n  }\n}\n\n// Helper function to extract plain text from email\nexport function getEmailText(email: InboundWebhookEmail): string {\n  return email.cleanedContent.text || \n         email.parsedData.textBody || \n         (email.cleanedContent.html ? email.cleanedContent.html.replace(/<[^>]*>/g, '') : '') ||\n         ''\n}\n\n// Helper function to extract HTML from email\nexport function getEmailHtml(email: InboundWebhookEmail): string {\n  return email.cleanedContent.html || \n         email.parsedData.htmlBody || \n         (email.cleanedContent.text ? email.cleanedContent.text.replace(/\\n/g, '<br>') : '') ||\n         ''\n}\n\n// Helper function to get sender information\nexport function getSenderInfo(email: InboundWebhookEmail): { name: string | null; address: string | null } {\n  const from = email.from || email.parsedData.from\n  if (!from || !from.addresses || from.addresses.length === 0) {\n    return { name: null, address: null }\n  }\n  \n  const firstAddress = from.addresses[0]\n  return {\n    name: firstAddress.name,\n    address: firstAddress.address\n  }\n}\n\n// Helper function to get all recipient addresses\nexport function getRecipientAddresses(email: InboundWebhookEmail): string[] {\n  const to = email.to || email.parsedData.to\n  if (!to || !to.addresses) {\n    return [email.recipient] // Fallback to the main recipient\n  }\n  \n  return to.addresses\n    .map(addr => addr.address)\n    .filter((addr): addr is string => addr !== null)\n}","/**\n * @inboundemail/sdk\n * Official SDK for Inbound Email API\n * Version 2.0.0\n */\n\n// Main SDK client\nexport { InboundEmailClient } from './client'\nexport { InboundEmailClient as Inbound } from './client'\nexport type { InboundEmailConfigExtended } from './client'\n\n// Type definitions\nexport * from './types'\n\n// Webhook types for incoming requests\nexport * from './webhook-types'\n\n// Utilities\nexport * from './utils'\n\n// Version\nexport const VERSION = '2.0.0'\n\n// Default export for convenience\nexport { InboundEmailClient as default } from './client' ","var __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nvar __objRest = (source, exclude) => {\n  var target = {};\n  for (var prop in source)\n    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)\n      target[prop] = source[prop];\n  if (source != null && __getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(source)) {\n      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))\n        target[prop] = source[prop];\n    }\n  return target;\n};\n\n// src/heading.tsx\nimport * as React from \"react\";\n\n// src/utils/spaces.ts\nvar withMargin = (props) => {\n  const nonEmptyStyles = [\n    withSpace(props.m, [\"margin\"]),\n    withSpace(props.mx, [\"marginLeft\", \"marginRight\"]),\n    withSpace(props.my, [\"marginTop\", \"marginBottom\"]),\n    withSpace(props.mt, [\"marginTop\"]),\n    withSpace(props.mr, [\"marginRight\"]),\n    withSpace(props.mb, [\"marginBottom\"]),\n    withSpace(props.ml, [\"marginLeft\"])\n  ].filter((s) => Object.keys(s).length);\n  const mergedStyles = nonEmptyStyles.reduce((acc, style) => {\n    return __spreadValues(__spreadValues({}, acc), style);\n  }, {});\n  return mergedStyles;\n};\nvar withSpace = (value, properties) => {\n  return properties.reduce((styles, property) => {\n    if (!isNaN(parseFloat(value))) {\n      return __spreadProps(__spreadValues({}, styles), { [property]: `${value}px` });\n    }\n    return styles;\n  }, {});\n};\n\n// src/heading.tsx\nimport { jsx } from \"react/jsx-runtime\";\nvar Heading = React.forwardRef(\n  (_a, ref) => {\n    var _b = _a, { as: Tag = \"h1\", children, style, m, mx, my, mt, mr, mb, ml } = _b, props = __objRest(_b, [\"as\", \"children\", \"style\", \"m\", \"mx\", \"my\", \"mt\", \"mr\", \"mb\", \"ml\"]);\n    return /* @__PURE__ */ jsx(\n      Tag,\n      __spreadProps(__spreadValues({}, props), {\n        ref,\n        style: __spreadValues(__spreadValues({}, withMargin({ m, mx, my, mt, mr, mb, ml })), style),\n        children\n      })\n    );\n  }\n);\nHeading.displayName = \"Heading\";\nexport {\n  Heading\n};\n","var __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nvar __objRest = (source, exclude) => {\n  var target = {};\n  for (var prop in source)\n    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)\n      target[prop] = source[prop];\n  if (source != null && __getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(source)) {\n      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))\n        target[prop] = source[prop];\n    }\n  return target;\n};\n\n// src/hr.tsx\nimport * as React from \"react\";\nimport { jsx } from \"react/jsx-runtime\";\nvar Hr = React.forwardRef(\n  (_a, ref) => {\n    var _b = _a, { style } = _b, props = __objRest(_b, [\"style\"]);\n    return /* @__PURE__ */ jsx(\n      \"hr\",\n      __spreadProps(__spreadValues({}, props), {\n        ref,\n        style: __spreadValues({\n          width: \"100%\",\n          border: \"none\",\n          borderTop: \"1px solid #eaeaea\"\n        }, style)\n      })\n    );\n  }\n);\nHr.displayName = \"Hr\";\nexport {\n  Hr\n};\n","import {\n  Body,\n  Button,\n  Container,\n  Head,\n  Heading,\n  Hr,\n  Html,\n  Img,\n  Link,\n  Preview,\n  Section,\n  Text,\n} from '@react-email/components'\nimport * as React from 'react'\n\ninterface VipPaymentRequestEmailProps {\n  senderName: string\n  senderEmail: string\n  recipientName: string\n  recipientEmail: string\n  emailSubject: string\n  priceInCents: number\n  customMessage?: string\n  paymentUrl: string\n  allowAfterPayment: boolean\n  expirationHours: number\n}\n\nexport const VipPaymentRequestEmail = ({\n  senderName,\n  senderEmail,\n  recipientName,\n  recipientEmail,\n  emailSubject,\n  priceInCents,\n  customMessage,\n  paymentUrl,\n  allowAfterPayment,\n  expirationHours,\n}: VipPaymentRequestEmailProps) => {\n  const price = (priceInCents / 100).toFixed(2)\n\n  return (\n    <Html>\n      <Head />\n      <Preview>Payment required to deliver your email to {recipientEmail}</Preview>\n      <Body style={main}>\n        <Container style={container}>\n          <Img\n            src={`${process.env.NEXT_PUBLIC_APP_URL}/logo.png`}\n            width=\"120\"\n            height=\"36\"\n            alt=\"Inbound\"\n            style={logo}\n          />\n          <Heading style={heading}>Payment Required</Heading>\n          <Text style={paragraph}>\n            Hi {senderName},\n          </Text>\n          <Text style={paragraph}>\n            You're trying to reach <strong>{recipientName}</strong> at{' '}\n            <Link href={`mailto:${recipientEmail}`} style={link}>\n              {recipientEmail}\n            </Link>\n            , but they require a payment of <strong>${price}</strong> to receive emails from new senders.\n          </Text>\n          \n          {customMessage && (\n            <Section style={messageBox}>\n              <Text style={messageText}>{customMessage}</Text>\n            </Section>\n          )}\n\n          <Section style={subjectSection}>\n            <Text style={subjectLabel}>Your email subject:</Text>\n            <Text style={subjectText}>{emailSubject}</Text>\n          </Section>\n\n          <Section style={buttonContainer}>\n            <Button style={button} href={paymentUrl}>\n              Pay ${price} to Deliver Email\n            </Button>\n          </Section>\n\n          <Text style={footerText}>\n            {allowAfterPayment\n              ? 'After payment, all your future emails to this address will be delivered automatically.'\n              : 'This payment covers delivery of your current email only.'}\n          </Text>\n          \n          <Text style={footerText}>\n            This payment link expires in {expirationHours} hours.\n          </Text>\n\n          <Hr style={hr} />\n          \n          <Text style={footer}>\n            Powered by{' '}\n            <Link href=\"https://inbound.new\" style={link}>\n              Inbound\n            </Link>\n            {' '}• VIP Email Protection\n          </Text>\n        </Container>\n      </Body>\n    </Html>\n  )\n}\n\nVipPaymentRequestEmail.PreviewProps = {\n  senderName: 'John Doe',\n  senderEmail: 'john@example.com',\n  recipientName: 'Jane Smith',\n  recipientEmail: 'jane@company.com',\n  emailSubject: 'Proposal for Q4 Marketing Campaign',\n  priceInCents: 500,\n  customMessage: 'I value my time and use VIP protection to ensure only serious inquiries reach my inbox.',\n  paymentUrl: 'https://checkout.stripe.com/example',\n  allowAfterPayment: true,\n  expirationHours: 24,\n} as VipPaymentRequestEmailProps\n\nexport default VipPaymentRequestEmail\n\nconst main = {\n  backgroundColor: '#f6f9fc',\n  fontFamily:\n    '-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,\"Helvetica Neue\",Ubuntu,sans-serif',\n}\n\nconst container = {\n  backgroundColor: '#ffffff',\n  margin: '0 auto',\n  padding: '20px 0 48px',\n  marginBottom: '64px',\n}\n\nconst logo = {\n  margin: '0 auto',\n  marginBottom: '32px',\n}\n\nconst heading = {\n  fontSize: '32px',\n  lineHeight: '1.3',\n  fontWeight: '700',\n  color: '#484848',\n  textAlign: 'center' as const,\n  margin: '30px 0',\n}\n\nconst paragraph = {\n  fontSize: '16px',\n  lineHeight: '26px',\n  color: '#484848',\n  margin: '16px 0',\n}\n\nconst link = {\n  color: '#6C47FF',\n  textDecoration: 'none',\n}\n\nconst messageBox = {\n  backgroundColor: '#f4f4f5',\n  borderRadius: '8px',\n  padding: '16px',\n  margin: '24px 0',\n}\n\nconst messageText = {\n  fontSize: '14px',\n  lineHeight: '24px',\n  color: '#666666',\n  fontStyle: 'italic' as const,\n  margin: 0,\n}\n\nconst subjectSection = {\n  margin: '24px 0',\n}\n\nconst subjectLabel = {\n  fontSize: '14px',\n  color: '#666666',\n  margin: '0 0 4px 0',\n}\n\nconst subjectText = {\n  fontSize: '16px',\n  color: '#484848',\n  fontWeight: '600',\n  margin: 0,\n}\n\nconst buttonContainer = {\n  textAlign: 'center' as const,\n  margin: '32px 0',\n}\n\nconst button = {\n  backgroundColor: '#6C47FF',\n  borderRadius: '6px',\n  color: '#fff',\n  fontSize: '16px',\n  fontWeight: '600',\n  textDecoration: 'none',\n  textAlign: 'center' as const,\n  display: 'inline-block',\n  padding: '12px 24px',\n}\n\nconst footerText = {\n  fontSize: '14px',\n  lineHeight: '24px',\n  color: '#666666',\n  textAlign: 'center' as const,\n  margin: '8px 0',\n}\n\nconst hr = {\n  borderColor: '#e6ebf1',\n  margin: '32px 0',\n}\n\nconst footer = {\n  color: '#8898aa',\n  fontSize: '12px',\n  lineHeight: '16px',\n  textAlign: 'center' as const,\n} ","import VipPaymentRequestEmail from './vip-payment-request'\nimport { renderAsync } from '@react-email/render'\n\nexport default function VipPaymentRequestPreview() {\n  return (\n    <VipPaymentRequestEmail\n      senderName=\"John Doe\"\n      senderEmail=\"john@example.com\"\n      recipientName=\"Jane Smith\"\n      recipientEmail=\"jane@company.com\"\n      emailSubject=\"Proposal for Q4 Marketing Campaign\"\n      priceInCents={500}\n      customMessage=\"I value my time and use VIP protection to ensure only serious inquiries reach my inbox.\"\n      paymentUrl=\"https://checkout.stripe.com/example\"\n      allowAfterPayment={true}\n      expirationHours={24}\n    />\n  )\n}\n\n// Export a function to generate the HTML\nexport async function generateVipPaymentRequestEmail(props: {\n  senderName: string\n  senderEmail: string\n  recipientName: string\n  recipientEmail: string\n  emailSubject: string\n  priceInCents: number\n  customMessage?: string\n  paymentUrl: string\n  allowAfterPayment: boolean\n  expirationHours: number\n}) {\n  return await renderAsync(<VipPaymentRequestEmail {...props} />)\n} ","import { NextRequest, NextResponse } from 'next/server'\nimport { Inbound, isInboundWebhook } from '@inboundemail/sdk'\nimport type { InboundWebhookPayload } from '@inboundemail/sdk'\nimport { db } from '@/lib/db'\nimport { emailAddresses, vipConfigs, vipAllowedSenders, vipPaymentSessions, vipEmailAttempts, userAccounts, structuredEmails, apikey } from '@/lib/db/schema'\nimport { eq, and } from 'drizzle-orm'\nimport { nanoid } from 'nanoid'\nimport Stripe from 'stripe'\nimport { generateVipPaymentRequestEmail } from '@/emails/vip-payment-request-preview'\n\n// Default Stripe instance for Inbound\nconst defaultStripe = new Stripe(process.env.STRIPE_SECRET_KEY!)\n\n/**\n * Get user's API key for Inbound SDK operations\n */\nasync function getUserApiKey(userId: string): Promise<string | null> {\n  try {\n    const userApiKey = await db\n      .select({ key: apikey.key })\n      .from(apikey)\n      .where(\n        and(\n          eq(apikey.userId, userId),\n          eq(apikey.enabled, true)\n        )\n      )\n      .limit(1)\n\n    return userApiKey[0]?.key || null\n  } catch (error) {\n    console.error('Error retrieving user API key:', error)\n    return null\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const payload: InboundWebhookPayload = await request.json()\n    \n    // Validate webhook payload\n    if (!isInboundWebhook(payload)) {\n      return NextResponse.json(\n        { error: 'Invalid webhook payload' },\n        { status: 400 }\n      )\n    }\n    \n    const { email } = payload\n    \n    // Extract recipient email address\n    const recipientEmail = email.to?.addresses?.[0]?.address\n    if (!recipientEmail) {\n      console.error('No recipient email found')\n      return NextResponse.json({ success: true })\n    }\n\n    // Check if this email address has VIP enabled\n    const emailAddressRecord = await db\n      .select()\n      .from(emailAddresses)\n      .where(eq(emailAddresses.address, recipientEmail))\n      .limit(1)\n\n    if (!emailAddressRecord[0]?.isVipEnabled || !emailAddressRecord[0]?.vipConfigId) {\n      // Not a VIP email, process normally\n      console.log('Email is not VIP-enabled, processing normally')\n      return NextResponse.json({ success: true })\n    }\n\n    // Get VIP config\n    const vipConfig = await db\n      .select()\n      .from(vipConfigs)\n      .where(eq(vipConfigs.id, emailAddressRecord[0].vipConfigId))\n      .limit(1)\n\n    if (!vipConfig[0] || !vipConfig[0].isActive) {\n      console.log('VIP config not found or inactive')\n      return NextResponse.json({ success: true })\n    }\n\n    // Extract sender email\n    const senderEmail = email.from?.addresses?.[0]?.address\n    if (!senderEmail) {\n      console.error('No sender email found')\n      return NextResponse.json({ success: true })\n    }\n\n    // Check if sender is already allowed\n    const allowedSender = await db\n      .select()\n      .from(vipAllowedSenders)\n      .where(\n        and(\n          eq(vipAllowedSenders.vipConfigId, vipConfig[0].id),\n          eq(vipAllowedSenders.senderEmail, senderEmail)\n        )\n      )\n      .limit(1)\n\n    if (allowedSender[0]) {\n      // Check if still valid (not expired)\n      if (!allowedSender[0].allowedUntil || new Date(allowedSender[0].allowedUntil) > new Date()) {\n        console.log('Sender is allowed, delivering email')\n        \n        // Log the allowed attempt\n        await db.insert(vipEmailAttempts).values({\n          id: nanoid(),\n          vipConfigId: vipConfig[0].id,\n          senderEmail,\n          recipientEmail,\n          originalEmailId: email.id,\n          emailSubject: email.subject,\n          status: 'allowed',\n          allowedReason: 'previous_payment',\n          createdAt: new Date(),\n          updatedAt: new Date(),\n        })\n        \n        return NextResponse.json({ success: true })\n      }\n    }\n\n    // Get user's API key for Inbound SDK\n    const userApiKey = await getUserApiKey(vipConfig[0].userId)\n    if (!userApiKey) {\n      console.error('No API key found for user:', vipConfig[0].userId)\n      return NextResponse.json(\n        { error: 'User API key not found' },\n        { status: 500 }\n      )\n    }\n\n    // Create user-specific Inbound client\n    const inbound = new Inbound({\n      apiKey: userApiKey,\n      defaultReplyFrom: 'payments@inbound.new'\n    })\n\n    // Get user's account-level Stripe key\n    const userAccount = await db\n      .select()\n      .from(userAccounts)\n      .where(eq(userAccounts.userId, vipConfig[0].userId))\n      .limit(1)\n\n    // Determine which Stripe instance to use\n    const stripe = userAccount[0]?.stripeRestrictedKey \n      ? new Stripe(userAccount[0].stripeRestrictedKey)\n      : defaultStripe\n\n    // Sender not allowed, create payment session\n    const sessionId = nanoid()\n    const expiresAt = new Date()\n    expiresAt.setHours(expiresAt.getHours() + (vipConfig[0].paymentLinkExpirationHours || 24))\n\n    // Create Stripe checkout session\n    const checkoutSession = await stripe.checkout.sessions.create({\n      payment_method_types: ['card'],\n      line_items: [{\n        price_data: {\n          currency: 'usd',\n          product_data: {\n            name: `Email delivery to ${recipientEmail}`,\n            description: vipConfig[0].customMessage || \n              `Pay to deliver your email to ${recipientEmail}. ${\n                vipConfig[0].allowAfterPayment \n                  ? 'After payment, all your future emails will be delivered automatically.' \n                  : 'This payment covers delivery of your current email only.'\n              }`\n          },\n          unit_amount: vipConfig[0].priceInCents,\n        },\n        quantity: 1,\n      }],\n      mode: 'payment',\n      metadata: {\n        sessionId,\n        vipConfigId: vipConfig[0].id,\n        senderEmail,\n        recipientEmail,\n        emailId: email.id,\n      },\n      success_url: `${process.env.NEXT_PUBLIC_APP_URL}/api/products/inboundvip/success?session_id=${sessionId}`,\n      cancel_url: `${process.env.NEXT_PUBLIC_APP_URL}/api/products/inboundvip/cancelled`,\n      expires_at: Math.floor(expiresAt.getTime() / 1000), // Convert to Unix timestamp\n    })\n\n    // Store payment session\n    await db.insert(vipPaymentSessions).values({\n      id: sessionId,\n      vipConfigId: vipConfig[0].id,\n      senderEmail,\n      originalEmailId: email.id,\n      stripePaymentLinkId: checkoutSession.id,\n      stripePaymentLinkUrl: checkoutSession.url,\n      stripeSessionId: checkoutSession.id,\n      status: 'pending',\n      expiresAt,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    })\n\n    // Log the payment required attempt\n    await db.insert(vipEmailAttempts).values({\n      id: nanoid(),\n      vipConfigId: vipConfig[0].id,\n      senderEmail,\n      recipientEmail,\n      originalEmailId: email.id,\n      emailSubject: email.subject,\n      status: 'payment_required',\n      paymentSessionId: sessionId,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    })\n\n    // Send payment request email\n    const recipientName = email.to?.addresses?.[0]?.name || recipientEmail.split('@')[0]\n    const senderName = email.from?.addresses?.[0]?.name || senderEmail\n    \n    const emailHtml = await generateVipPaymentRequestEmail({\n      senderName,\n      senderEmail,\n      recipientName,\n      recipientEmail,\n      emailSubject: email.subject || 'No subject',\n      priceInCents: vipConfig[0].priceInCents,\n      customMessage: vipConfig[0].customMessage || undefined,\n      paymentUrl: checkoutSession.url!,\n      allowAfterPayment: vipConfig[0].allowAfterPayment || false,\n      expirationHours: vipConfig[0].paymentLinkExpirationHours || 24,\n    })\n    \n    await inbound.reply(email, {\n      from: 'payments@inbound.new',\n      subject: `Payment Required: ${email.subject}`,\n      html: emailHtml,\n      text: `Payment Required to Deliver Your Email\n\nHi ${senderName},\n\nYou're trying to reach ${recipientName} at ${recipientEmail}, but they require a payment of $${(vipConfig[0].priceInCents / 100).toFixed(2)} to receive emails from new senders.\n\n${vipConfig[0].customMessage || ''}\n\nYour email subject: ${email.subject}\n\nPay here: ${checkoutSession.url}\n\n${vipConfig[0].allowAfterPayment \n  ? 'After payment, all your future emails to this address will be delivered automatically.' \n  : 'This payment covers delivery of your current email only.'}\n\nThis payment link expires in ${vipConfig[0].paymentLinkExpirationHours} hours.`\n    })\n\n    console.log(`VIP payment request sent to ${senderEmail} for ${recipientEmail}`)\n    \n    return NextResponse.json({ success: true })\n  } catch (error) {\n    console.error('Webhook error:', error)\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    )\n  }\n}","import {\n  AppRouteRouteModule,\n  type AppRouteRouteModuleOptions,\n} from '../../server/route-modules/app-route/module.compiled'\nimport { RouteKind } from '../../server/route-kind'\nimport { patchFetch as _patchFetch } from '../../server/lib/patch-fetch'\n\nimport * as userland from 'VAR_USERLAND'\n\n// These are injected by the loader afterwards. This is injected as a variable\n// instead of a replacement because this could also be `undefined` instead of\n// an empty string.\ndeclare const nextConfigOutput: AppRouteRouteModuleOptions['nextConfigOutput']\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\n// INJECT:nextConfigOutput\n\nconst routeModule = new AppRouteRouteModule({\n  definition: {\n    kind: RouteKind.APP_ROUTE,\n    page: 'VAR_DEFINITION_PAGE',\n    pathname: 'VAR_DEFINITION_PATHNAME',\n    filename: 'VAR_DEFINITION_FILENAME',\n    bundlePath: 'VAR_DEFINITION_BUNDLE_PATH',\n  },\n  resolvedPagePath: 'VAR_RESOLVED_PAGE_PATH',\n  nextConfigOutput,\n  userland,\n})\n\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule\n\nfunction patchFetch() {\n  return _patchFetch({\n    workAsyncStorage,\n    workUnitAsyncStorage,\n  })\n}\n\nexport {\n  routeModule,\n  workAsyncStorage,\n  workUnitAsyncStorage,\n  serverHooks,\n  patchFetch,\n}\n"],"names":["isValidEmail","email","buildQueryString","params","searchParams","key","value","queryString","InboundEmailClient","config","id","emailOrId","replyContent","emailId","replyParams","endpoint","options","url","headers","response","errorData","isInboundWebhook","payload","getAttachmentInfo","attachment","contentType","getEmailText","getEmailHtml","getSenderInfo","from","firstAddress","getRecipientAddresses","to","addr","VERSION","AppRouteRouteModule","RouteKind","patchFetch","_patchFetch","userland","routeModule","definition","kind","APP_ROUTE","page","pathname","filename","bundlePath","resolvedPagePath","nextConfigOutput","workAsyncStorage","workUnitAsyncStorage","serverHooks"],"mappings":"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","ignoreList":[0,1,2,3,4,5,9]}