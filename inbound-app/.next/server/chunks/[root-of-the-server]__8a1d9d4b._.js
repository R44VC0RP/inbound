module.exports={929549:function(e){var{g:o,__dirname:r,m:i,e:n}=e;i.exports=e.x("next/dist/compiled/next-server/app-page-turbo.runtime.prod.js",()=>require("next/dist/compiled/next-server/app-page-turbo.runtime.prod.js"))},983943:function(e){var{g:o,__dirname:r,m:i,e:n}=e;i.exports=e.x("next/dist/server/app-render/work-unit-async-storage.external.js",()=>require("next/dist/server/app-render/work-unit-async-storage.external.js"))},86103:function(e){var{g:o,__dirname:r,m:i,e:n}=e;i.exports=e.x("next/dist/server/app-render/work-async-storage.external.js",()=>require("next/dist/server/app-render/work-async-storage.external.js"))},945935:function(e){var{g:o,__dirname:r,m:i,e:n}=e;i.exports=e.x("next/dist/server/app-render/after-task-async-storage.external.js",()=>require("next/dist/server/app-render/after-task-async-storage.external.js"))},348629:function(e){var{g:o,__dirname:r,m:i,e:n}=e;i.exports=e.x("@opentelemetry/api",()=>require("@opentelemetry/api"))},76569:function(e){var{g:o,__dirname:r,m:i,e:n}=e;i.exports=e.x("node:events",()=>require("node:events"))},804713:function(e){var{g:o,__dirname:r,m:i,e:n}=e;i.exports=e.x("util",()=>require("util"))},87485:function(e){var{g:o,__dirname:r,m:i,e:n}=e;i.exports=e.x("child_process",()=>require("child_process"))},420467:function(e){var{g:o,__dirname:r,m:i,e:n}=e;i.exports=e.x("events",()=>require("events"))},936121:function(e){var{g:o,__dirname:r,m:i,e:n}=e;i.exports=e.x("node:util",()=>require("node:util"))},681635:function(e){var{g:o,__dirname:r,m:i,e:n}=e;i.exports=e.x("node:http",()=>require("node:http"))},866098:function(e){var{g:o,__dirname:r,m:i,e:n}=e;i.exports=e.x("node:https",()=>require("node:https"))},580767:function(e){var{g:o,__dirname:r,m:i,e:n}=e;i.exports=e.x("node:buffer",()=>require("node:buffer"))},329295:function(e){var{g:o,__dirname:r,m:i,e:n}=e;i.exports=e.x("crypto",()=>require("crypto"))},62445:function(e){var{g:o,__dirname:r,m:i,e:n}=e;i.exports=e.x("http",()=>require("http"))},348388:function(e){var{g:o,__dirname:r,m:i,e:n}=e;i.exports=e.x("https",()=>require("https"))},591032:function(e){var{g:o,__dirname:r,m:i,e:n}=e;i.exports=e.x("node:crypto",()=>require("node:crypto"))},909834:e=>{"use strict";var{g:o,__dirname:r}=e;e.s({DELIVERY_STATUS:()=>n.DELIVERY_STATUS,DELIVERY_TYPES:()=>n.DELIVERY_TYPES,DOMAIN_STATUS:()=>n.DOMAIN_STATUS,EMAIL_STATUS:()=>n.EMAIL_STATUS,ENDPOINT_TYPES:()=>n.ENDPOINT_TYPES,PROVIDER_CONFIDENCE:()=>n.PROVIDER_CONFIDENCE,SENT_EMAIL_STATUS:()=>n.SENT_EMAIL_STATUS,SES_VERIFICATION_STATUS:()=>n.SES_VERIFICATION_STATUS,VIP_PAYMENT_STATUS:()=>n.VIP_PAYMENT_STATUS,WEBHOOK_FORMATS:()=>n.WEBHOOK_FORMATS,WEBHOOK_STATUS:()=>n.WEBHOOK_STATUS,account:()=>i.account,apikey:()=>i.apikey,blockedEmails:()=>n.blockedEmails,domainDnsRecords:()=>n.domainDnsRecords,emailAddresses:()=>n.emailAddresses,emailDomains:()=>n.emailDomains,emailGroups:()=>n.emailGroups,endpointDeliveries:()=>n.endpointDeliveries,endpoints:()=>n.endpoints,parsedEmails:()=>n.parsedEmails,receivedEmails:()=>n.receivedEmails,sentEmails:()=>n.sentEmails,sesEvents:()=>n.sesEvents,session:()=>i.session,structuredEmails:()=>n.structuredEmails,subscriptions:()=>n.subscriptions,user:()=>i.user,userAccounts:()=>n.userAccounts,userOnboarding:()=>n.userOnboarding,verification:()=>i.verification,vipAllowedSenders:()=>n.vipAllowedSenders,vipConfigs:()=>n.vipConfigs,vipEmailAttempts:()=>n.vipEmailAttempts,vipPaymentSessions:()=>n.vipPaymentSessions,webhookDeliveries:()=>n.webhookDeliveries,webhooks:()=>n.webhooks});var i=e.i(594120),n=e.i(55379)},436754:e=>{"use strict";var{g:o,__dirname:r}=e;e.s({DELIVERY_STATUS:()=>i.DELIVERY_STATUS,DELIVERY_TYPES:()=>i.DELIVERY_TYPES,DOMAIN_STATUS:()=>i.DOMAIN_STATUS,EMAIL_STATUS:()=>i.EMAIL_STATUS,ENDPOINT_TYPES:()=>i.ENDPOINT_TYPES,PROVIDER_CONFIDENCE:()=>i.PROVIDER_CONFIDENCE,SENT_EMAIL_STATUS:()=>i.SENT_EMAIL_STATUS,SES_VERIFICATION_STATUS:()=>i.SES_VERIFICATION_STATUS,VIP_PAYMENT_STATUS:()=>i.VIP_PAYMENT_STATUS,WEBHOOK_FORMATS:()=>i.WEBHOOK_FORMATS,WEBHOOK_STATUS:()=>i.WEBHOOK_STATUS,account:()=>i.account,apikey:()=>i.apikey,blockedEmails:()=>i.blockedEmails,domainDnsRecords:()=>i.domainDnsRecords,emailAddresses:()=>i.emailAddresses,emailDomains:()=>i.emailDomains,emailGroups:()=>i.emailGroups,endpointDeliveries:()=>i.endpointDeliveries,endpoints:()=>i.endpoints,parsedEmails:()=>i.parsedEmails,receivedEmails:()=>i.receivedEmails,sentEmails:()=>i.sentEmails,sesEvents:()=>i.sesEvents,session:()=>i.session,structuredEmails:()=>i.structuredEmails,subscriptions:()=>i.subscriptions,user:()=>i.user,userAccounts:()=>i.userAccounts,userOnboarding:()=>i.userOnboarding,verification:()=>i.verification,vipAllowedSenders:()=>i.vipAllowedSenders,vipConfigs:()=>i.vipConfigs,vipEmailAttempts:()=>i.vipEmailAttempts,vipPaymentSessions:()=>i.vipPaymentSessions,webhookDeliveries:()=>i.webhookDeliveries,webhooks:()=>i.webhooks}),e.i(468686);var i=e.i(909834)},906273:e=>{"use strict";var{g:o,__dirname:r}=e;e.s({areAllDnsRecordsVerified:()=>u,createDomainVerification:()=>t,createEmailAddress:()=>f,deleteDomainFromDatabase:()=>v,disableDomainCatchAll:()=>E,enableDomainCatchAll:()=>h,getDomainOwnerByDomain:()=>w,getDomainWithCatchAll:()=>T,getDomainWithRecords:()=>c,getDomainWithRecordsAndEmails:()=>D,getEmailAddressesForDomain:()=>p,isDomainCatchAllEnabled:()=>S,markDomainAsVerified:()=>A,updateDnsRecordVerification:()=>d,updateDomainSesVerification:()=>l,updateDomainStatus:()=>m,updateEmailAddressReceiptRule:()=>g});var i=e.i(557440);e.i(468686);var n=e.i(55379),a=e.i(176825),s=e.i(318812);async function t(e,o,r){let a={id:`indm_${(0,s.nanoid)()}`,domain:e,userId:o,status:"pending",canReceiveEmails:r.canReceiveEmails,hasMxRecords:r.hasMxRecords,domainProvider:r.provider?.name,providerConfidence:r.provider?.confidence,lastDnsCheck:new Date,updatedAt:new Date},[t]=await i.db.insert(n.emailDomains).values(a).returning();return t}async function l(e,o,r,t){let[l]=await i.db.update(n.emailDomains).set({verificationToken:o,status:"Success"===r?"verified":"pending",lastSesCheck:new Date,updatedAt:new Date}).where((0,a.eq)(n.emailDomains.id,e)).returning();for(let o of t){let r={id:`dns_${(0,s.nanoid)()}`,domainId:e,recordType:o.type,name:o.name,value:o.value,isRequired:!0,isVerified:!1};await i.db.insert(n.domainDnsRecords).values(r).onConflictDoNothing()}return l}async function c(e,o){let r=await i.db.select().from(n.emailDomains).where((0,a.and)((0,a.eq)(n.emailDomains.domain,e),(0,a.eq)(n.emailDomains.userId,o))).limit(1);if(!r[0])return null;let s=await i.db.select().from(n.domainDnsRecords).where((0,a.eq)(n.domainDnsRecords.domainId,r[0].id));return{...r[0],dnsRecords:s}}async function d(e,o,r,s){await i.db.update(n.domainDnsRecords).set({isVerified:s,lastChecked:new Date}).where((0,a.and)((0,a.eq)(n.domainDnsRecords.domainId,e),(0,a.eq)(n.domainDnsRecords.recordType,o),(0,a.eq)(n.domainDnsRecords.name,r)))}async function u(e){let o=await i.db.select().from(n.domainDnsRecords).where((0,a.and)((0,a.eq)(n.domainDnsRecords.domainId,e),(0,a.eq)(n.domainDnsRecords.isRequired,!0)));return o.length>0&&o.every(e=>e.isVerified)}async function m(e,o){let[r]=await i.db.update(n.emailDomains).set({status:o,updatedAt:new Date}).where((0,a.eq)(n.emailDomains.id,e)).returning();return r}async function f(e,o,r){let a={id:`email_${(0,s.nanoid)()}`,address:e,domainId:o,userId:r,isActive:!0,isReceiptRuleConfigured:!1,updatedAt:new Date},[t]=await i.db.insert(n.emailAddresses).values(a).returning();return t}async function p(e){return i.db.select().from(n.emailAddresses).where((0,a.eq)(n.emailAddresses.domainId,e))}async function g(e,o,r){let[s]=await i.db.update(n.emailAddresses).set({isReceiptRuleConfigured:o,receiptRuleName:r,updatedAt:new Date}).where((0,a.eq)(n.emailAddresses.id,e)).returning();return s}async function D(e,o){let r=await i.db.select().from(n.emailDomains).where((0,a.and)((0,a.eq)(n.emailDomains.domain,e),(0,a.eq)(n.emailDomains.userId,o))).limit(1);if(!r[0])return null;let s=await i.db.select().from(n.domainDnsRecords).where((0,a.eq)(n.domainDnsRecords.domainId,r[0].id)),t=await i.db.select().from(n.emailAddresses).where((0,a.eq)(n.emailAddresses.domainId,r[0].id));return{...r[0],dnsRecords:s,emailAddresses:t}}async function v(e,o){try{let r=await i.db.select().from(n.emailDomains).where((0,a.and)((0,a.eq)(n.emailDomains.id,e),(0,a.eq)(n.emailDomains.userId,o))).limit(1);if(!r[0])return{success:!1,error:"Domain not found or access denied"};return console.log(`üóëÔ∏è Deleting domain from database: ${r[0].domain}`),await i.db.delete(n.emailAddresses).where((0,a.eq)(n.emailAddresses.domainId,e)),await i.db.delete(n.domainDnsRecords).where((0,a.eq)(n.domainDnsRecords.domainId,e)),await i.db.delete(n.emailDomains).where((0,a.eq)(n.emailDomains.id,e)),console.log(`‚úÖ Successfully deleted domain from database: ${r[0].domain}`),{success:!0}}catch(e){return console.error("Database domain deletion error:",e),{success:!1,error:e instanceof Error?e.message:"Failed to delete domain from database"}}}async function h(e,o,r){let[s]=await i.db.update(n.emailDomains).set({isCatchAllEnabled:!0,catchAllWebhookId:o,catchAllReceiptRuleName:r,updatedAt:new Date}).where((0,a.eq)(n.emailDomains.id,e)).returning();if(!s)throw Error("Domain not found");return s}async function E(e){let[o]=await i.db.update(n.emailDomains).set({isCatchAllEnabled:!1,catchAllWebhookId:null,catchAllReceiptRuleName:null,updatedAt:new Date}).where((0,a.eq)(n.emailDomains.id,e)).returning();if(!o)throw Error("Domain not found");return o}async function T(e,o){let[r]=await i.db.select().from(n.emailDomains).where((0,a.and)((0,a.eq)(n.emailDomains.domain,e),(0,a.eq)(n.emailDomains.userId,o))).limit(1);return r||null}async function S(e){let[o]=await i.db.select({isCatchAllEnabled:n.emailDomains.isCatchAllEnabled}).from(n.emailDomains).where((0,a.eq)(n.emailDomains.id,e)).limit(1);return o?.isCatchAllEnabled||!1}async function w(o){try{let{user:r}=await e.r(278680)(e.i),s=await i.db.select({userId:n.emailDomains.userId,userEmail:r.email,userName:r.name}).from(n.emailDomains).innerJoin(r,(0,a.eq)(n.emailDomains.userId,r.id)).where((0,a.eq)(n.emailDomains.domain,o)).limit(1);if(!s[0])return console.log(`‚ùå getDomainOwnerByDomain - No owner found for domain: ${o}`),null;return console.log(`‚úÖ getDomainOwnerByDomain - Found owner for domain ${o}: ${s[0].userEmail}`),s[0]}catch(e){return console.error("‚ùå getDomainOwnerByDomain - Error looking up domain owner:",e),null}}async function A(e){try{let[o]=await i.db.update(n.emailDomains).set({status:"verified",lastSesCheck:new Date,updatedAt:new Date}).where((0,a.eq)(n.emailDomains.domain,e)).returning();return o&&console.log(`‚úÖ markDomainAsVerified - Domain ${e} marked as verified`),o||null}catch(e){return console.error("‚ùå markDomainAsVerified - Error updating domain status:",e),null}}},362474:function(e){var{g:o,__dirname:r,m:i,e:n}=e;i.exports=e.x("dns",()=>require("dns"))},719797:e=>{"use strict";var{g:o,__dirname:r}=e;{e.s({checkDomainCanReceiveEmails:()=>t,checkMultipleDomainsCanReceiveEmails:()=>l,detectDomainProvider:()=>a,getDetailedMxInfo:()=>d,getDetailedProviderInfo:()=>c,verifyDnsRecords:()=>v,verifyMxRecord:()=>m,verifyMxRecordWithFallback:()=>g,verifyTxtRecord:()=>u,verifyTxtRecordWithFallback:()=>D});var i=e.i(362474);let o={cloudflare:{name:"Cloudflare",icon:"cloudflare",patterns:["cloudflare.com","ns.cloudflare.com","cloudflare.net"]},namecheap:{name:"Namecheap",icon:"namecheap",patterns:["registrar-servers.com","namecheap.com","namecheaphosting.com"]},godaddy:{name:"GoDaddy",icon:"godaddy",patterns:["domaincontrol.com","godaddy.com","secureserver.net"]},route53:{name:"AWS Route 53",icon:"aws",patterns:["awsdns","amazonaws.com","awsdns-"]},google:{name:"Google Domains",icon:"google",patterns:["googledomains.com","google.com","googlehosted.com"]},vercel:{name:"Vercel",icon:"vercel",patterns:["vercel-dns.com","vercel.app"]},digitalocean:{name:"DigitalOcean",icon:"digitalocean",patterns:["digitalocean.com","ns1.digitalocean.com","ns2.digitalocean.com","ns3.digitalocean.com"]},netlify:{name:"Netlify",icon:"netlify",patterns:["netlify.com","dns1.p01.nsone.net","dns2.p01.nsone.net"]},dnsimple:{name:"DNSimple",icon:"dnsimple",patterns:["dnsimple.com","ns1.dnsimple.com","ns2.dnsimple.com"]},hover:{name:"Hover",icon:"hover",patterns:["hover.com","ns1.hover.com","ns2.hover.com"]},porkbun:{name:"Porkbun",icon:"porkbun",patterns:["porkbun.com","curitiba.porkbun.com","fortaleza.porkbun.com"]},squarespace:{name:"Squarespace",icon:"squarespace",patterns:["squarespace.com","ext-dns.squarespace.com"]}};function n(e){let o=e.split("."),r=[];for(let e=1;e<o.length;e++)r.push(o.slice(e).join("."));return r}async function a(e){let o=await s(e);if(o&&o.detected)return o;for(let o of n(e))try{let e=await s(o);if(e&&e.detected)return{...e,confidence:"high"===e.confidence?"medium":"low"}}catch(e){continue}return o||{name:"DNS Provider",icon:"globe",detected:!1,confidence:"low"}}async function s(e){try{let r=await i.promises.resolveNs(e);for(let[e,i]of Object.entries(o))for(let e of r)for(let o of i.patterns)if(e.toLowerCase().includes(o.toLowerCase()))return{name:i.name,icon:i.icon,detected:!0,confidence:"high"};if(r.length>0)return{name:"Custom DNS Provider",icon:"globe",detected:!1,confidence:"medium"};return null}catch(e){return null}}async function t(e){var o;let r={domain:e,canReceiveEmails:!1,hasMxRecords:!1,timestamp:new Date};if(o=e,!/^[a-zA-Z0-9]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(\.[a-zA-Z0-9]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.test(o)||!(o.length<=253))return r.error="Invalid domain format",r;try{let o=await a(e);o&&(r.provider=o)}catch(e){}let n=[],s=null;try{n=await i.promises.resolveMx(e),console.log("üèÅ CANDOMAINRECEIVE üèÅ \n MX Records:",n)}catch(e){"ENOTFOUND"!==e.code&&"ENODATA"!==e.code&&(s=e.message)}let t=[],l=null;try{t=await i.promises.resolveCname(e)}catch(e){"ENOTFOUND"!==e.code&&"ENODATA"!==e.code&&(l=e.message)}let c=n.length>0,d=t.length>0;if(c||d)r.hasMxRecords=c,r.mxRecords=n,r.canReceiveEmails=!1,c?r.error=`Domain has ${n.length} MX record(s) - email already configured`:d&&(r.error="Domain has CNAME record(s) - conflicts with MX records");else if(r.hasMxRecords=!1,r.canReceiveEmails=!0,s||l){let e=[s,l].filter(Boolean);r.error=`Domain check: ${e.join(", ")} (safe for email receiving)`}return r}async function l(e){return Promise.all(e.map(e=>t(e)))}async function c(e){let o=[e];try{let r=[];try{r=await i.promises.resolveNs(e)}catch(s){let a=n(e);for(let e of(o.push(...a),a))try{r=await i.promises.resolveNs(e);break}catch(e){continue}}let s=await a(e);return{domain:e,provider:s,nameservers:r,checkedDomains:o}}catch(r){return{domain:e,provider:null,nameservers:[],checkedDomains:o,error:r.message}}}async function d(e){try{let o=await i.promises.resolveMx(e);return{domain:e,mxRecords:o,hasRecords:o.length>0}}catch(o){return{domain:e,mxRecords:[],hasRecords:!1,error:o.message}}}async function u(e,o){let r={type:"TXT",name:e,expectedValue:o,actualValues:[],isVerified:!1};try{console.log(`üîç TXT Verification - Checking TXT records for: ${e}`),console.log(`üéØ TXT Verification - Expected value: ${o}`);let n=await i.promises.resolveTxt(e);console.log(`üìã TXT Verification - Found ${n.length} TXT records:`,n),r.actualValues=n.flat(),console.log(`üìä TXT Verification - Flattened values:`,r.actualValues),r.isVerified=r.actualValues.some(e=>e===o),console.log(`‚úÖ TXT Verification - Is verified: ${r.isVerified}`),!r.isVerified&&r.actualValues.length>0&&console.log(`‚ùå TXT Verification - Expected "${o}" but found:`,r.actualValues)}catch(i){let o=i instanceof Error?i.message:"Unknown DNS error";console.log(`üí• TXT Verification - DNS lookup failed for ${e}:`,o),o.includes("ENODATA")||o.includes("ENOTFOUND")?r.error=`No TXT records found for ${e}. Please add the TXT record to your DNS.`:r.error=o,r.isVerified=!1}return r}async function m(e,o){let r={type:"MX",name:e,expectedValue:o,actualValues:[],isVerified:!1};try{console.log(`üîç MX Verification - Checking MX records for: ${e}`),console.log(`üéØ MX Verification - Expected value: ${o}`);let n=await i.promises.resolveMx(e);console.log(`üìã MX Verification - Found ${n.length} MX records:`,n),r.actualValues=n.map(e=>`${e.priority} ${e.exchange}`),console.log(`üìä MX Verification - Formatted values:`,r.actualValues),r.isVerified=r.actualValues.some(e=>e===o),console.log(`‚úÖ MX Verification - Is verified: ${r.isVerified}`),!r.isVerified&&r.actualValues.length>0&&console.log(`‚ùå MX Verification - Expected "${o}" but found:`,r.actualValues)}catch(i){let o=i instanceof Error?i.message:"Unknown DNS error";console.log(`üí• MX Verification - DNS lookup failed for ${e}:`,o),o.includes("ENODATA")||o.includes("ENOTFOUND")?r.error=`No MX records found for ${e}. Please add the MX record to your DNS.`:r.error=o,r.isVerified=!1}return r}async function f(e){for(let o of[["8.8.8.8","8.8.4.4"],["1.1.1.1","1.0.0.1"],["208.67.222.222","208.67.220.220"]])try{console.log(`üîÑ TXT Alternative - Trying resolver: ${o.join(", ")}`);let r=new i.Resolver;r.setServers(o);let n=await new Promise((o,i)=>{r.resolveTxt(e,(e,r)=>{e?i(e):o(r||[])})});if(n.length>0)return console.log(`‚úÖ TXT Alternative - Found records with ${o[0]}:`,n),n}catch(e){console.log(`‚ùå TXT Alternative - Failed with ${o[0]}:`,e instanceof Error?e.message:"Unknown error");continue}return[]}async function p(e){for(let o of[["8.8.8.8","8.8.4.4"],["1.1.1.1","1.0.0.1"],["208.67.222.222","208.67.220.220"]])try{console.log(`üîÑ MX Alternative - Trying resolver: ${o.join(", ")}`);let r=new i.Resolver;r.setServers(o);let n=await new Promise((o,i)=>{r.resolveMx(e,(e,r)=>{e?i(e):o(r||[])})});if(n.length>0)return console.log(`‚úÖ MX Alternative - Found records with ${o[0]}:`,n),n}catch(e){console.log(`‚ùå MX Alternative - Failed with ${o[0]}:`,e instanceof Error?e.message:"Unknown error");continue}return[]}async function g(e,o){let r={type:"MX",name:e,expectedValue:o,actualValues:[],isVerified:!1};try{console.log(`üîç MX Verification - Checking MX records for: ${e}`),console.log(`üéØ MX Verification - Expected value: ${o}`);let n=[];try{n=await i.promises.resolveMx(e),console.log(`üìã MX Verification - Default DNS found ${n.length} MX records:`,n)}catch(o){console.log(`‚ö†Ô∏è MX Verification - Default DNS failed, trying alternative resolvers...`),n=await p(e)}r.actualValues=n.map(e=>`${e.priority} ${e.exchange}`),console.log(`üìä MX Verification - Formatted values:`,r.actualValues),r.isVerified=r.actualValues.some(e=>e===o),console.log(`‚úÖ MX Verification - Is verified: ${r.isVerified}`),!r.isVerified&&r.actualValues.length>0&&console.log(`‚ùå MX Verification - Expected "${o}" but found:`,r.actualValues),0===r.actualValues.length&&(r.error=`No MX records found for ${e} using multiple DNS resolvers. Please add the MX record to your DNS.`)}catch(i){let o=i instanceof Error?i.message:"Unknown DNS error";console.log(`üí• MX Verification - All DNS lookups failed for ${e}:`,o),r.error=`DNS resolution failed: ${o}`,r.isVerified=!1}return r}async function D(e,o){let r={type:"TXT",name:e,expectedValue:o,actualValues:[],isVerified:!1};try{console.log(`üîç TXT Verification - Checking TXT records for: ${e}`),console.log(`üéØ TXT Verification - Expected value: ${o}`);let n=[];try{n=await i.promises.resolveTxt(e),console.log(`üìã TXT Verification - Default DNS found ${n.length} TXT records:`,n)}catch(o){console.log(`‚ö†Ô∏è TXT Verification - Default DNS failed, trying alternative resolvers...`),n=await f(e)}r.actualValues=n.flat(),console.log(`üìä TXT Verification - Flattened values:`,r.actualValues),r.isVerified=r.actualValues.some(e=>e===o),console.log(`‚úÖ TXT Verification - Is verified: ${r.isVerified}`),!r.isVerified&&r.actualValues.length>0&&console.log(`‚ùå TXT Verification - Expected "${o}" but found:`,r.actualValues),0===r.actualValues.length&&(r.error=`No TXT records found for ${e} using multiple DNS resolvers. Please add the TXT record to your DNS.`)}catch(i){let o=i instanceof Error?i.message:"Unknown DNS error";console.log(`üí• TXT Verification - All DNS lookups failed for ${e}:`,o),r.error=`DNS resolution failed: ${o}`,r.isVerified=!1}return r}async function v(e){return console.log(`üìã Starting verification of ${e.length} DNS records:`),e.forEach((e,o)=>{console.log(`  ${o+1}. ${e.type} record for ${e.name}`)}),Promise.all(e.map(async e=>{switch(e.type.toUpperCase()){case"TXT":return D(e.name,e.value);case"MX":return g(e.name,e.value);default:return{type:e.type,name:e.name,expectedValue:e.value,actualValues:[],isVerified:!1,error:`Unsupported record type: ${e.type}`}}}))}}},807602:function(e){var{g:o,__dirname:r,m:i,e:n}=e},556112:e=>{"use strict";var{g:o,__dirname:r}=e;e.s({POST:()=>l});var i=e.i(125427),n=e.i(906273),a=e.i(719797),s=e.i(402168),t=e.i(998322);async function l(e){let o=Date.now(),r="unknown";try{console.log("üîç DNS Records Check - Starting verification process");let l=await s.auth.api.getSession({headers:await (0,t.headers)()});if(!l?.user?.id)return console.log("‚ùå DNS Records Check - Unauthorized access attempt"),i.NextResponse.json({error:"Unauthorized"},{status:401});let c=await e.json();if(r=c.domain,c.domainId,console.log(`üåê DNS Records Check - Processing domain: ${r} for user: ${l.user.email}`),!r)return console.log("‚ö†Ô∏è DNS Records Check - Missing domain parameter"),i.NextResponse.json({error:"Domain is required"},{status:400});console.log(`üìä DNS Records Check - Fetching domain record from database`);let d=await (0,n.getDomainWithRecords)(r,l.user.id);if(!d)return console.log(`‚ùå DNS Records Check - Domain not found: ${r}`),i.NextResponse.json({error:"Domain not found"},{status:404});console.log(`üìã DNS Records Check - Found ${d.dnsRecords.length} DNS records to verify`);let u=d.dnsRecords.map(e=>({type:e.recordType,name:e.name,value:e.value}));console.log(`üîé DNS Records Check - Starting DNS verification for records:`),u.forEach((e,o)=>{console.log(`   ${o+1}. ${e.type} ${e.name} = ${e.value.substring(0,50)}${e.value.length>50?"...":""}`)});let m=await (0,a.verifyDnsRecords)(u);for(let e of(console.log(`üìä DNS Records Check - Verification results:`),m.forEach((e,o)=>{let r=e.isVerified?"‚úÖ":"‚ùå";console.log(`   ${o+1}. ${r} ${e.type} ${e.name} - ${e.isVerified?"VERIFIED":"FAILED"}`),!e.isVerified&&e.error&&console.log(`      Error: ${e.error}`),e.actualValues&&e.actualValues.length>0&&console.log(`      Found: ${e.actualValues.join(", ")}`)}),console.log(`üíæ DNS Records Check - Updating database with verification results`),m))await (0,n.updateDnsRecordVerification)(d.id,e.type,e.name,e.isVerified);let f=m.every(e=>e.isVerified),p=m.filter(e=>e.isVerified).length;console.log(`üìà DNS Records Check - Verification summary: ${p}/${m.length} records verified`),f&&"ses_verified"!==d.status?(console.log(`üéâ DNS Records Check - All records verified! Updating domain status to 'dns_verified'`),await (0,n.updateDomainStatus)(d.id,"dns_verified")):f?console.log(`‚úÖ DNS Records Check - All records verified (domain already in ses_verified status)`):console.log(`‚è≥ DNS Records Check - Waiting for remaining records to be verified`);let g=Date.now()-o;return console.log(`üèÅ DNS Records Check - Completed successfully for ${r} in ${g}ms`),i.NextResponse.json({domain:r,domainId:d.id,dnsRecords:m.map(e=>({type:e.type,name:e.name,value:e.expectedValue,isVerified:e.isVerified,actualValues:e.actualValues,error:e.error})),allVerified:f,canProceed:f,timestamp:new Date})}catch(n){let e=Date.now()-o;return console.error(`üí• DNS Records Check - Error for domain ${r} after ${e}ms:`,n),console.error("   Error details:",{message:n instanceof Error?n.message:"Unknown error",stack:n instanceof Error?n.stack:void 0,domain:r,timestamp:new Date().toISOString()}),i.NextResponse.json({error:"Failed to check DNS records"},{status:500})}}},184570:e=>{"use strict";var{g:o,__dirname:r}=e;{e.s({patchFetch:()=>t,routeModule:()=>o,serverHooks:()=>c,workAsyncStorage:()=>r,workUnitAsyncStorage:()=>l});var i=e.i(854885),n=e.i(814689),a=e.i(25402),s=e.i(556112);let o=new i.AppRouteRouteModule({definition:{kind:n.RouteKind.APP_ROUTE,page:"/api/inbound/check-dns-records/route",pathname:"/api/inbound/check-dns-records",filename:"route",bundlePath:""},resolvedPagePath:"[project]/app/api/inbound/check-dns-records/route.ts",nextConfigOutput:"",userland:s}),{workAsyncStorage:r,workUnitAsyncStorage:l,serverHooks:c}=o;function t(){return(0,a.patchFetch)({workAsyncStorage:r,workUnitAsyncStorage:l})}}},278680:e=>{var{g:o,__dirname:r}=e;e.v(e=>Promise.resolve().then(()=>e(594120)))},993477:e=>{var{g:o,__dirname:r}=e;e.v(o=>Promise.all(["server/chunks/[root-of-the-server]__cd819a54._.js","server/chunks/node_modules_10ae7a2d._.js"].map(o=>e.l(o))).then(()=>o(611487)))}};

//# sourceMappingURL=%5Broot-of-the-server%5D__8a1d9d4b._.js.map