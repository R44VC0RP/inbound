module.exports={16967:e=>{"use strict";var{g:o,__dirname:i}=e;{e.s({POST:()=>h});var t=e.i(125427),a=e.i(402168),s=e.i(998322),n=e.i(719797),r=e.i(236286),c=e.i(906273),d=e.i(877465),l=e.i(562454),m=e.i(807204),u=e.i(459351),f=e.i(557440);e.i(468686);var D=e.i(55379),g=e.i(176825),p=e.i(367027);let o=process.env.AWS_REGION||"us-east-2",i=process.env.AWS_ACCESS_KEY_ID,A=process.env.AWS_SECRET_ACCESS_KEY,k=null;async function h(e){let o=Date.now(),i=null;try{console.log("🔍 Domain Verification API - Starting request processing");let n=await a.auth.api.getSession({headers:await (0,s.headers)()});if(!n?.user?.id)return console.log("❌ Domain Verification API - Unauthorized access attempt"),t.NextResponse.json({success:!1,error:"Unauthorized"},{status:401});try{i=await e.json(),console.log("📥 Domain Verification API - Raw request data:",JSON.stringify(i,null,2))}catch(e){return console.log("❌ Domain Verification API - Invalid JSON in request body"),t.NextResponse.json({success:!1,error:"Invalid JSON in request body"},{status:400})}if(!i)return console.log("⚠️ Domain Verification API - No request data provided"),t.NextResponse.json({success:!1,error:"Request data is required"},{status:400});let{action:r,domain:c,domainId:d,refreshProvider:l}=i;if(console.log(`🌐 Domain Verification API - Processing action: ${r} for domain: ${c} by user: ${n.user.email} and domainId: ${d}`),!r||!c)return console.log("⚠️ Domain Verification API - Missing required fields (action or domain)"),t.NextResponse.json({success:!1,error:"Action and domain are required"},{status:400});let m=/^[a-zA-Z0-9]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(\.[a-zA-Z0-9]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;if("getDomain"!==r&&(!m.test(c)||c.length>253))return console.log(`⚠️ Domain Verification API - Invalid domain format: ${c}`),t.NextResponse.json({success:!1,error:"Invalid domain format"},{status:400});switch("getDomain"===r&&d&&(!m.test(c)||c.length>253)&&console.log(`ℹ️ Domain Verification API - Skipping domain format validation for getDomain action with domainId: ${d}`),r){case"verifyDomain":return await R(c,o);case"canDomainBeUsed":return await v(c,n.user.id,o);case"addDomain":return await w(c,n.user.id,o);case"checkVerification":if(!d||""===d.trim())return console.log("⚠️ Domain Verification API - Missing domainId for checkVerification action. domainId:",d),t.NextResponse.json({success:!1,error:"domainId is required for checkVerification action"},{status:400});return await $(c,d,n.user.id,o);case"getDomain":if(!d||""===d.trim())return console.log("⚠️ Domain Verification API - Missing domainId for getDomain action. domainId:",d),t.NextResponse.json({success:!1,error:"domainId is required for getDomain action"},{status:400});return await S(c,d,n.user.id,l||!1,o);case"deleteDomain":if(!d)return console.log("⚠️ Domain Verification API - Missing domainId for deleteDomain action"),t.NextResponse.json({success:!1,error:"domainId is required for deleteDomain action"},{status:400});return await E(c,d,n.user.id,o);default:return console.log(`⚠️ Domain Verification API - Invalid action: ${r}`),t.NextResponse.json({success:!1,error:`Invalid action: ${r}. Must be one of: canDomainBeUsed, addDomain, checkVerification, getDomain, deleteDomain`},{status:400})}}catch(n){let e=Date.now()-o,a=i?.domain||"unknown",s=i?.action||"unknown";return console.error(`💥 Domain Verification API - Error processing ${s} for domain ${a} after ${e}ms:`,n),console.error("   Error details:",{message:n instanceof Error?n.message:"Unknown error",stack:n instanceof Error?n.stack:void 0,domain:a,action:s,timestamp:new Date().toISOString()}),t.NextResponse.json({success:!1,error:"Internal server error occurred during domain verification",domain:a,timestamp:new Date},{status:500})}}async function v(e,o,i){try{console.log(`🔍 Can Domain Be Used - Checking domain: ${e}`);let o=await (0,n.checkDomainCanReceiveEmails)(e);console.log(`📊 Can Domain Be Used - DNS check results for ${e}:`,{canReceiveEmails:o.canReceiveEmails,hasMxRecords:o.hasMxRecords,provider:o.provider?.name,error:o.error});let a=!1,s=[];o.hasMxRecords&&o.mxRecords&&(a=!0,s=o.mxRecords.map(o=>({type:"MX",name:e,value:`${o.priority} ${o.exchange}`})));let r=o.canReceiveEmails&&!a,c=Date.now()-i;console.log(`🏁 Can Domain Be Used - Completed for ${e} in ${c}ms - Result: ${r?"CAN BE USED":"CANNOT BE USED"}`);let d={success:!0,domain:e,canBeUsed:r,canReceiveEmails:o.canReceiveEmails,hasMxRecords:o.hasMxRecords,hasConflictingRecords:a,conflictingRecords:s.length>0?s:void 0,provider:o.provider,error:o.error,timestamp:new Date};return t.NextResponse.json(d)}catch(s){let o=Date.now()-i;console.error(`💥 Can Domain Be Used - Error for domain ${e} after ${o}ms:`,s);let a={success:!1,domain:e,canBeUsed:!1,canReceiveEmails:!1,hasMxRecords:!1,hasConflictingRecords:!1,error:s instanceof Error?s.message:"Failed to check domain availability",timestamp:new Date};return t.NextResponse.json(a,{status:500})}}async function w(e,o,i){try{console.log(`🚀 Add Domain - Starting domain addition for domain: ${e}`);let a=await (0,c.getDomainWithRecords)(e,o);if(a){console.log(`❌ Add Domain - Domain already exists in database: ${e}`);let o={success:!1,domain:e,domainId:a.id,verificationToken:a.verificationToken||"",status:a.status,dnsRecords:a.dnsRecords.map(e=>({type:e.recordType,name:e.name,value:e.value,isVerified:e.isVerified??!1})),canProceed:!0,error:"Domain already exists",timestamp:new Date};return t.NextResponse.json(o,{status:400})}console.log(`🔍 Add Domain - Checking Autumn domain limits for user: ${o}`);let{data:s,error:d}=await u.Autumn.check({customer_id:o,feature_id:"domains"});if(console.log(await u.Autumn.check({customer_id:o,feature_id:"domains"})),d){console.error("Add Domain - Autumn domain check error:",d);let o={success:!1,domain:e,domainId:"",verificationToken:"",status:"failed",dnsRecords:[],canProceed:!1,error:"Failed to check domain limits",timestamp:new Date};return t.NextResponse.json(o,{status:500})}if(console.log("domainCheck",s),!s?.allowed){console.log(`❌ Add Domain - Domain limit reached for user: ${o}`);let i={success:!1,domain:e,domainId:"",verificationToken:"",status:"failed",dnsRecords:[],canProceed:!1,error:"Domain limit reached. Please upgrade your plan to add more domains.",timestamp:new Date};return t.NextResponse.json(i,{status:403})}console.log(`✅ Add Domain - Domain limits check passed for user: ${o}`,{allowed:s.allowed,balance:s.balance,unlimited:s.unlimited}),console.log(`🔍 Add Domain - Checking DNS records for ${e}`);let l=await (0,n.checkDomainCanReceiveEmails)(e);console.log(`💾 Add Domain - Creating domain record in database`),await (0,c.createDomainVerification)(e,o,{canReceiveEmails:l.canReceiveEmails,hasMxRecords:l.hasMxRecords,provider:l.provider});let m=await (0,r.initiateDomainVerification)(e,o);if(s.unlimited)console.log(`♾️ Add Domain - User has unlimited domains, no tracking needed for user: ${o}`);else{console.log(`📊 Add Domain - Tracking domain usage with Autumn for user: ${o}`);let{error:e}=await u.Autumn.track({customer_id:o,feature_id:"domains",value:1});e?(console.error("Add Domain - Failed to track domain usage:",e),console.warn(`⚠️ Add Domain - Domain created but usage tracking failed for user: ${o}`)):console.log(`✅ Add Domain - Successfully tracked domain usage for user: ${o}`)}let f="pending";f="verified"===m.status?"verified":"failed"===m.status?"failed":"pending";let D=Date.now()-i;console.log(`🏁 Add Domain - Completed for ${e} in ${D}ms - Status: ${f}`);let g={success:!0,domain:m.domain,domainId:m.domainId,verificationToken:m.verificationToken,status:f,sesStatus:m.sesStatus,dnsRecords:m.dnsRecords,canProceed:m.canProceed,error:m.error,timestamp:new Date};return t.NextResponse.json(g)}catch(s){let o=Date.now()-i;console.error(`💥 Add Domain - Error for domain ${e} after ${o}ms:`,s);let a={success:!1,domain:e,domainId:"",verificationToken:"",status:"failed",dnsRecords:[],canProceed:!1,error:s instanceof Error?s.message:"Failed to add domain",timestamp:new Date};return t.NextResponse.json(a,{status:500})}}async function $(e,o,i,a){try{console.log(`✅ Check Verification - Checking verification status for domain: ${e}`);let s=await (0,c.getDomainWithRecords)(e,i);if(!s){console.log(`❌ Check Verification - Domain not found: ${e}`);let i={success:!1,domain:e,domainId:o,status:"failed",sesStatus:"NotFound",sesVerified:!1,dnsVerified:!1,allVerified:!1,dnsRecords:[],canProceed:!1,error:"Domain not found",timestamp:new Date};return t.NextResponse.json(i,{status:404})}console.log(`📋 Check Verification - Found ${s.dnsRecords.length} DNS records to verify`);let r=!1,d="Pending";if(k)try{console.log(`🔍 Check Verification - Checking SES status for ${e}`);let o=new l.GetIdentityVerificationAttributesCommand({Identities:[e]}),i=await k.send(o),t=i.VerificationAttributes?.[e];t?(d=t.VerificationStatus||"Pending",r="Success"===d,console.log(`📊 Check Verification - SES status for ${e}: ${d}`)):console.log(`⚠️ Check Verification - No SES verification attributes found for ${e}`)}catch(o){console.error(`❌ Check Verification - SES check failed for ${e}:`,o),d="Error"}else console.log(`⚠️ Check Verification - SES client not available`),d="NotConfigured";let m=s.dnsRecords.map(e=>({type:e.recordType,name:e.name,value:e.value}));console.log(`🔎 Check Verification - Verifying ${m.length} DNS records`);let u=await (0,n.verifyDnsRecords)(m);console.log(`📊 Check Verification - DNS verification results:`),u.forEach((e,o)=>{let i=e.isVerified?"✅":"❌";console.log(`   ${o+1}. ${i} ${e.type} ${e.name} - ${e.isVerified?"VERIFIED":"FAILED"}`),!e.isVerified&&e.error&&console.log(`      Error: ${e.error}`)});let f=u.every(e=>e.isVerified),D=r&&f;console.log(`📈 Check Verification - Verification summary for ${e}:`,{sesVerified:r,dnsVerified:f,allVerified:D});let g=s.status;D&&r?g="verified":f||(g="pending"),g!==s.status&&(console.log(`📝 Check Verification - Updating domain status from ${s.status} to ${g}`),await (0,c.updateDomainStatus)(s.id,g));let p=Date.now()-a;console.log(`🏁 Check Verification - Completed for ${e} in ${p}ms - All verified: ${D}`);let h={success:!0,domain:e,domainId:o,status:g,sesStatus:d,sesVerified:r,dnsVerified:f,allVerified:D,dnsRecords:u.map(e=>({type:e.type,name:e.name,value:e.expectedValue,isVerified:e.isVerified,actualValues:e.actualValues,error:e.error})),canProceed:D,timestamp:new Date};return t.NextResponse.json(h)}catch(n){let i=Date.now()-a;console.error(`💥 Check Verification - Error for domain ${e} after ${i}ms:`,n);let s={success:!1,domain:e,domainId:o,status:"failed",sesStatus:"Error",sesVerified:!1,dnsVerified:!1,allVerified:!1,dnsRecords:[],canProceed:!1,error:n instanceof Error?n.message:"Failed to check verification status",timestamp:new Date};return t.NextResponse.json(s,{status:500})}}async function R(e,o){try{console.log(`✅ Verify Domain - Checking verification status for domain: ${e}`);let i=!1,a="Pending";if(k)try{console.log(`🔍 Verify Domain - Checking SES status for ${e}`);let o=new l.GetIdentityVerificationAttributesCommand({Identities:[e]});console.log("📦 getAttributesCommand",o);let t=await k.send(o),s=t.VerificationAttributes?.[e];s?(a=s.VerificationStatus||"Pending",i="Success"===a,console.log(`📊 Check Verification - SES status for ${e}: ${a}`)):console.log(`⚠️ Check Verification - No SES verification attributes found for ${e}`)}catch(o){console.error(`❌ Check Verification - SES check failed for ${e}:`,o),a="Error"}else console.log(`⚠️ Check Verification - SES client not available`),a="NotConfigured";let s=await (0,n.verifyDnsRecords)([{type:"TXT",name:"_amazonses.domain.com",value:"1234567890"}]);console.log(`📊 Check Verification - DNS verification results:`),s.forEach((e,o)=>{let i=e.isVerified?"✅":"❌";console.log(`   ${o+1}. ${i} ${e.type} ${e.name} - ${e.isVerified?"VERIFIED":"FAILED"}`),!e.isVerified&&e.error&&console.log(`      Error: ${e.error}`)});let r=s.every(e=>e.isVerified),c=i&&r;console.log(`📈 Check Verification - Verification summary for ${e}:`,{sesVerified:i,dnsVerified:r,allVerified:c});let d=Date.now()-o;console.log(`🏁 Check Verification - Completed for ${e} in ${d}ms - All verified: ${c}`);let m={success:!0,domain:e,domainId:"123",status:"verified",sesStatus:a,sesVerified:i,dnsVerified:r,allVerified:c,dnsRecords:s.map(e=>({type:e.type,name:e.name,value:e.expectedValue,isVerified:e.isVerified,actualValues:e.actualValues,error:e.error})),canProceed:c,timestamp:new Date};return t.NextResponse.json(m)}catch(s){let i=Date.now()-o;console.error(`💥 Check Verification - Error for domain ${e} after ${i}ms:`,s);let a={success:!1,domain:e,domainId:"123",status:"failed",sesStatus:"Error",sesVerified:!1,dnsVerified:!1,allVerified:!1,dnsRecords:[],canProceed:!1,error:s instanceof Error?s.message:"Failed to check verification status",timestamp:new Date};return t.NextResponse.json(a,{status:500})}}async function E(e,o,i,a){try{console.log(`🗑️ Delete Domain - Starting domain deletion for domain: ${e}, domainId: ${o}`);let s=await (0,c.getDomainWithRecords)(e,i);if(!s||s.id!==o){console.log(`❌ Delete Domain - Domain not found or access denied: ${e}`);let i={success:!1,domain:e,domainId:o,message:"",error:"Domain not found or access denied",timestamp:new Date};return t.NextResponse.json(i,{status:404})}if(console.log(`✅ Delete Domain - Domain ownership verified for: ${e}`),"verified"===s.status)try{console.log(`🔧 Delete Domain - Removing SES receipt rules for: ${e}`);let o=new m.AWSSESReceiptRuleManager;await o.removeEmailReceiving(e)?console.log(`✅ Delete Domain - SES receipt rules removed for: ${e}`):console.log(`⚠️ Delete Domain - Failed to remove SES receipt rules for: ${e}`)}catch(e){console.error("Delete Domain - Error removing SES receipt rules:",e)}console.log(`🗑️ Delete Domain - Deleting domain identity from SES: ${e}`);let n=await (0,r.deleteDomainFromSES)(e);if(!n.success){console.error(`❌ Delete Domain - Failed to delete domain from SES: ${n.error}`);let i={success:!1,domain:e,domainId:o,message:"",error:`Failed to delete domain from AWS SES: ${n.error}`,timestamp:new Date};return t.NextResponse.json(i,{status:500})}console.log(`✅ Delete Domain - Domain deleted from SES: ${e}`),console.log(`🗑️ Delete Domain - Deleting domain from database: ${e}`);let d=await (0,c.deleteDomainFromDatabase)(o,i);if(!d.success){console.error(`❌ Delete Domain - Failed to delete domain from database: ${d.error}`);let i={success:!1,domain:e,domainId:o,message:"",error:`Failed to delete domain from database: ${d.error}`,timestamp:new Date};return t.NextResponse.json(i,{status:500})}console.log(`✅ Delete Domain - Domain deleted from database: ${e}`),console.log(`📊 Delete Domain - Tracking domain deletion with Autumn for user: ${i}`);let{error:l}=await u.Autumn.track({customer_id:i,feature_id:"domains",value:-1});l?(console.error("Delete Domain - Failed to track domain deletion:",l),console.warn(`⚠️ Delete Domain - Domain deleted but usage tracking failed for user: ${i}`)):console.log(`✅ Delete Domain - Successfully tracked domain deletion for user: ${i}`);let f=Date.now()-a;console.log(`🏁 Delete Domain - Completed deletion for ${e} in ${f}ms`);let D={success:!0,domain:e,domainId:o,message:"Domain deleted successfully",timestamp:new Date};return t.NextResponse.json(D)}catch(n){let i=Date.now()-a;console.error(`💥 Delete Domain - Error for domain ${e} after ${i}ms:`,n);let s={success:!1,domain:e,domainId:o,message:"",error:n instanceof Error?n.message:"Failed to delete domain",timestamp:new Date};return t.NextResponse.json(s,{status:500})}}async function S(o,i,a,s,n){try{console.log(`📋 Get Domain - Fetching domain details for: ${o}, domainId: ${i}`);let c=await f.db.select().from(D.emailDomains).where((0,g.and)((0,g.eq)(D.emailDomains.id,i),(0,g.eq)(D.emailDomains.userId,a))).limit(1);if(!c[0]){console.log(`❌ Get Domain - Domain not found: ${o}`);let e={success:!1,domain:{id:"",domain:"",status:"",verificationToken:"",canReceiveEmails:!1,hasMxRecords:!1,createdAt:new Date,updatedAt:new Date,canProceed:!1},dnsRecords:[],emailAddresses:[],stats:{totalEmailAddresses:0,activeEmailAddresses:0,configuredEmailAddresses:0,totalEmailsLast24h:0},error:"Domain not found",timestamp:new Date};return t.NextResponse.json(e,{status:404})}let d=c[0];if(s)try{console.log(`🔍 Get Domain - Refreshing domain provider for: ${d.domain}`);let{detectDomainProvider:o}=await e.r(240479)(e.i),t=await o(d.domain);if(t){console.log(`✅ Get Domain - Provider detected: ${t.name} (${t.confidence} confidence)`);let[e]=await f.db.update(D.emailDomains).set({domainProvider:t.name,providerConfidence:t.confidence,lastDnsCheck:new Date,updatedAt:new Date}).where((0,g.eq)(D.emailDomains.id,i)).returning();e&&(d=e,console.log(`💾 Get Domain - Updated domain provider: ${t.name}`))}else console.log(`⚠️ Get Domain - No provider detected for domain: ${d.domain}`)}catch(e){console.error("Get Domain - Error refreshing domain provider:",e)}let m=d;if(s&&k)try{console.log(`🔍 Get Domain - Performing comprehensive SES verification check for domain: ${d.domain}`);let o=new l.GetIdentityVerificationAttributesCommand({Identities:[d.domain]}),t=await k.send(o),a=t.VerificationAttributes?.[d.domain];if(a){let o=a.VerificationStatus||"Pending";console.log(`📊 Get Domain - AWS SES verification status for ${d.domain}: ${o}`);let{DOMAIN_STATUS:t}=await e.r(491517)(e.i),s=d.status;if("Success"===o?s=t.VERIFIED:"Failed"===o&&(s=t.FAILED),s!==d.status){console.log(`📝 Get Domain - Updating domain status from ${d.status} to ${s}, SES status: ${o}`);let[e]=await f.db.update(D.emailDomains).set({status:s,lastSesCheck:new Date,updatedAt:new Date}).where((0,g.eq)(D.emailDomains.id,i)).returning();e&&(m=e,console.log(`✅ Get Domain - Updated domain status successfully`))}else{console.log(`ℹ️ Get Domain - Domain status unchanged, updating last check time`);let[e]=await f.db.update(D.emailDomains).set({lastSesCheck:new Date,updatedAt:new Date}).where((0,g.eq)(D.emailDomains.id,i)).returning();e&&(m=e)}}else console.log(`⚠️ Get Domain - No verification attributes found for domain: ${d.domain}`)}catch(e){console.error("Get Domain - Error performing comprehensive SES verification check:",e)}else if(s&&!k)console.log(`⚠️ Get Domain - SES client not available for comprehensive verification check`);else{let{DOMAIN_STATUS:o}=await e.r(491517)(e.i);if(d.status===o.VERIFIED)try{if(console.log(`Get Domain - Auto-checking SES verification for domain: ${d.domain}`),(await (0,r.initiateDomainVerification)(d.domain,a)).status===o.VERIFIED){let e=await f.db.select().from(D.emailDomains).where((0,g.and)((0,g.eq)(D.emailDomains.id,i),(0,g.eq)(D.emailDomains.userId,a))).limit(1);e[0]&&(m=e[0],console.log(`Get Domain - Domain status updated from ${d.status} to ${m.status}`))}}catch(e){console.error("Get Domain - Error auto-checking SES verification:",e)}}let{domainDnsRecords:u}=await e.r(491517)(e.i),h=await f.db.select().from(u).where((0,g.eq)(u.domainId,i)),v=new Date(Date.now()-864e5),{emailAddresses:w,webhooks:$,sesEvents:R}=await e.r(491517)(e.i),E=await f.db.select({id:w.id,address:w.address,webhookId:w.webhookId,webhookName:$.name,isActive:w.isActive,isReceiptRuleConfigured:w.isReceiptRuleConfigured,receiptRuleName:w.receiptRuleName,createdAt:w.createdAt,updatedAt:w.updatedAt,emailsLast24h:p.sql`COALESCE(${p.sql`(
          SELECT COUNT(*)::int 
          FROM ${R} 
          WHERE EXISTS (
            SELECT 1 
            FROM jsonb_array_elements_text(${R.destination}::jsonb) AS dest_email
            WHERE dest_email = ${w.address}
          )
          AND ${R.timestamp} >= ${v}
        )`}, 0)`}).from(w).leftJoin($,(0,g.eq)(w.webhookId,$.id)).where((0,g.eq)(w.domainId,i)).orderBy(w.createdAt),S=h.map(e=>({type:e.recordType,name:e.name,value:e.value,isVerified:e.isVerified??!1,isRequired:e.isRequired??!1,lastChecked:e.lastChecked??void 0})),{DOMAIN_STATUS:A}=await e.r(491517)(e.i),V=h.filter(e=>e.isRequired).every(e=>e.isVerified),C=m.status===A.VERIFIED||m.status===A.VERIFIED&&V,I=Date.now()-n;console.log(`🏁 Get Domain - Completed for ${o} in ${I}ms`);let y={success:!0,domain:{id:m.id,domain:m.domain,status:m.status,verificationToken:m.verificationToken||"",canReceiveEmails:m.canReceiveEmails??!1,hasMxRecords:m.hasMxRecords??!1,domainProvider:m.domainProvider||void 0,providerConfidence:"string"==typeof m.providerConfidence?void 0:m.providerConfidence||void 0,lastDnsCheck:m.lastDnsCheck||void 0,lastSesCheck:m.lastSesCheck||void 0,createdAt:m.createdAt||new Date,updatedAt:m.updatedAt||new Date,canProceed:C},dnsRecords:S,emailAddresses:E.map(e=>({id:e.id,address:e.address,webhookId:e.webhookId||void 0,webhookName:e.webhookName||void 0,isActive:e.isActive??!1,isReceiptRuleConfigured:e.isReceiptRuleConfigured??!1,receiptRuleName:e.receiptRuleName||void 0,createdAt:e.createdAt||new Date,updatedAt:e.updatedAt||new Date,emailsLast24h:e.emailsLast24h||0})),stats:{totalEmailAddresses:E.length,activeEmailAddresses:E.filter(e=>e.isActive).length,configuredEmailAddresses:E.filter(e=>e.isReceiptRuleConfigured).length,totalEmailsLast24h:E.reduce((e,o)=>e+o.emailsLast24h,0)},timestamp:new Date};return t.NextResponse.json(y)}catch(a){let e=Date.now()-n;console.error(`💥 Get Domain - Error for domain ${o} after ${e}ms:`,a);let i={success:!1,domain:{id:"",domain:"",status:"",verificationToken:"",canReceiveEmails:!1,hasMxRecords:!1,createdAt:new Date,updatedAt:new Date,canProceed:!1},dnsRecords:[],emailAddresses:[],stats:{totalEmailAddresses:0,activeEmailAddresses:0,configuredEmailAddresses:0,totalEmailsLast24h:0},error:a instanceof Error?a.message:"Failed to fetch domain details",timestamp:new Date};return t.NextResponse.json(i,{status:500})}}i&&A&&(k=new d.SESClient({region:o,credentials:{accessKeyId:i,secretAccessKey:A}}))}},138733:e=>{"use strict";var{g:o,__dirname:i}=e;{e.s({patchFetch:()=>r,routeModule:()=>o,serverHooks:()=>d,workAsyncStorage:()=>i,workUnitAsyncStorage:()=>c});var t=e.i(854885),a=e.i(814689),s=e.i(25402),n=e.i(16967);let o=new t.AppRouteRouteModule({definition:{kind:a.RouteKind.APP_ROUTE,page:"/api/domain/verifications/route",pathname:"/api/domain/verifications",filename:"route",bundlePath:""},resolvedPagePath:"[project]/app/api/domain/verifications/route.ts",nextConfigOutput:"",userland:n}),{workAsyncStorage:i,workUnitAsyncStorage:c,serverHooks:d}=o;function r(){return(0,s.patchFetch)({workAsyncStorage:i,workUnitAsyncStorage:c})}}}};

//# sourceMappingURL=_a0993fe4._.js.map