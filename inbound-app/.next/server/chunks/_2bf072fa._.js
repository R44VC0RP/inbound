module.exports={494903:e=>{"use strict";var{g:s,__dirname:o}=e;e.s({DELETE:()=>c,GET:()=>l,PUT:()=>u});var i=e.i(125427),d=e.i(494642),a=e.i(557440);e.i(468686);var n=e.i(55379),t=e.i(176825),r=e.i(807204);async function l(e,{params:s}){console.log("📧 GET /api/v2/email-addresses/[id] - Starting request");try{let{id:o}=await s;console.log("🔐 Validating request authentication");let{userId:r,error:l}=await (0,d.validateRequest)(e);if(!r)return console.log("❌ Authentication failed:",l),i.NextResponse.json({error:l},{status:401});console.log("✅ Authentication successful for userId:",r),console.log("🔍 Looking up email address:",o);let u=await a.db.select({id:n.emailAddresses.id,address:n.emailAddresses.address,domainId:n.emailAddresses.domainId,webhookId:n.emailAddresses.webhookId,endpointId:n.emailAddresses.endpointId,isActive:n.emailAddresses.isActive,isReceiptRuleConfigured:n.emailAddresses.isReceiptRuleConfigured,receiptRuleName:n.emailAddresses.receiptRuleName,createdAt:n.emailAddresses.createdAt,updatedAt:n.emailAddresses.updatedAt,userId:n.emailAddresses.userId,domainName:n.emailDomains.domain,domainStatus:n.emailDomains.status}).from(n.emailAddresses).innerJoin(n.emailDomains,(0,t.eq)(n.emailAddresses.domainId,n.emailDomains.id)).where((0,t.and)((0,t.eq)(n.emailAddresses.id,o),(0,t.eq)(n.emailAddresses.userId,r))).limit(1);if(!u[0])return console.log("❌ Email address not found:",o),i.NextResponse.json({error:"Email address not found"},{status:404});let c=u[0];console.log("✅ Found email address:",c.address);let m={type:"none",id:null,name:null,isActive:!1};if(c.endpointId){console.log("🔍 Looking up endpoint routing:",c.endpointId);let e=await a.db.select({id:n.endpoints.id,name:n.endpoints.name,type:n.endpoints.type,config:n.endpoints.config,isActive:n.endpoints.isActive}).from(n.endpoints).where((0,t.eq)(n.endpoints.id,c.endpointId)).limit(1);e[0]&&(m={type:"endpoint",id:e[0].id,name:e[0].name,config:JSON.parse(e[0].config),isActive:e[0].isActive||!1})}else if(c.webhookId){console.log("🔍 Looking up webhook routing:",c.webhookId);let e=await a.db.select({id:n.webhooks.id,name:n.webhooks.name,url:n.webhooks.url,isActive:n.webhooks.isActive}).from(n.webhooks).where((0,t.eq)(n.webhooks.id,c.webhookId)).limit(1);e[0]&&(m={type:"webhook",id:e[0].id,name:e[0].name,config:{url:e[0].url},isActive:e[0].isActive||!1})}let p={id:c.id,address:c.address,domainId:c.domainId,webhookId:c.webhookId,endpointId:c.endpointId,isActive:c.isActive||!1,isReceiptRuleConfigured:c.isReceiptRuleConfigured||!1,receiptRuleName:c.receiptRuleName,createdAt:c.createdAt||new Date,updatedAt:c.updatedAt||new Date,userId:c.userId,domain:{id:c.domainId,name:c.domainName,status:c.domainStatus},routing:m};return console.log("✅ GET /api/v2/email-addresses/[id] - Successfully retrieved email address"),i.NextResponse.json(p,{status:200})}catch(e){return console.error("❌ GET /api/v2/email-addresses/[id] - Error:",e),i.NextResponse.json({error:"Internal server error"},{status:500})}}async function u(e,{params:s}){console.log("📝 PUT /api/v2/email-addresses/[id] - Starting request");try{let{id:o}=await s;console.log("🔐 Validating request authentication");let{userId:r,error:l}=await (0,d.validateRequest)(e);if(!r)return console.log("❌ Authentication failed:",l),i.NextResponse.json({error:l},{status:401});console.log("✅ Authentication successful for userId:",r);let u=await e.json();console.log("📋 Request data:",{endpointId:u.endpointId,webhookId:u.webhookId,isActive:u.isActive}),console.log("🔍 Looking up current email address:",o);let c=await a.db.select().from(n.emailAddresses).where((0,t.and)((0,t.eq)(n.emailAddresses.id,o),(0,t.eq)(n.emailAddresses.userId,r))).limit(1);if(!c[0])return console.log("❌ Email address not found:",o),i.NextResponse.json({error:"Email address not found"},{status:404});let m=await a.db.select().from(n.emailDomains).where((0,t.eq)(n.emailDomains.id,c[0].domainId)).limit(1);if(!m[0])return console.log("❌ Domain not found for email address:",c[0].domainId),i.NextResponse.json({error:"Domain not found"},{status:404});let p=u.endpointId,g=u.webhookId,A=null;if(void 0!==p&&void 0!==g&&p&&g)return console.log("❌ Cannot specify both endpoint and webhook"),i.NextResponse.json({error:"Cannot specify both endpoint and webhook"},{status:400});if(p){console.log("🔍 Validating endpoint:",p);let e=await a.db.select().from(n.endpoints).where((0,t.and)((0,t.eq)(n.endpoints.id,p),(0,t.eq)(n.endpoints.userId,r))).limit(1);if(!e[0])return console.log("❌ Endpoint not found or access denied:",p),i.NextResponse.json({error:"Endpoint not found or access denied"},{status:404});A={type:"endpoint",id:e[0].id,name:e[0].name,config:JSON.parse(e[0].config),isActive:e[0].isActive||!1}}else if(g){console.log("🔍 Validating webhook:",g);let e=await a.db.select().from(n.webhooks).where((0,t.and)((0,t.eq)(n.webhooks.id,g),(0,t.eq)(n.webhooks.userId,r))).limit(1);if(!e[0])return console.log("❌ Webhook not found or access denied:",g),i.NextResponse.json({error:"Webhook not found or access denied"},{status:404});A={type:"webhook",id:e[0].id,name:e[0].name,config:{url:e[0].url},isActive:e[0].isActive||!1}}console.log("📝 Updating email address record");let f={updatedAt:new Date};void 0!==u.endpointId&&(f.endpointId=p,f.webhookId=null),void 0!==u.webhookId&&(f.webhookId=g,f.endpointId=null),void 0!==u.isActive&&(f.isActive=u.isActive);let[w]=await a.db.update(n.emailAddresses).set(f).where((0,t.eq)(n.emailAddresses.id,o)).returning();console.log("✅ Email address updated successfully");let h={id:w.id,address:w.address,domainId:w.domainId,webhookId:w.webhookId,endpointId:w.endpointId,isActive:w.isActive||!1,isReceiptRuleConfigured:w.isReceiptRuleConfigured||!1,receiptRuleName:w.receiptRuleName,createdAt:w.createdAt||new Date,updatedAt:w.updatedAt||new Date,userId:w.userId,domain:{id:m[0].id,name:m[0].domain,status:m[0].status},routing:A||{type:"none",id:null,name:null,isActive:!1}};return console.log("✅ PUT /api/v2/email-addresses/[id] - Successfully updated email address"),i.NextResponse.json(h,{status:200})}catch(e){return console.error("❌ PUT /api/v2/email-addresses/[id] - Error:",e),i.NextResponse.json({error:"Internal server error",details:e instanceof Error?e.message:"Unknown error"},{status:500})}}async function c(e,{params:s}){console.log("🗑️ DELETE /api/v2/email-addresses/[id] - Starting request");try{let{id:o}=await s;console.log("🔐 Validating request authentication");let{userId:l,error:u}=await (0,d.validateRequest)(e);if(!l)return console.log("❌ Authentication failed:",u),i.NextResponse.json({error:u},{status:401});console.log("✅ Authentication successful for userId:",l),console.log("🔍 Looking up email address:",o);let c=await a.db.select({id:n.emailAddresses.id,address:n.emailAddresses.address,domainId:n.emailAddresses.domainId,isReceiptRuleConfigured:n.emailAddresses.isReceiptRuleConfigured,receiptRuleName:n.emailAddresses.receiptRuleName,userId:n.emailAddresses.userId,domainName:n.emailDomains.domain}).from(n.emailAddresses).innerJoin(n.emailDomains,(0,t.eq)(n.emailAddresses.domainId,n.emailDomains.id)).where((0,t.and)((0,t.eq)(n.emailAddresses.id,o),(0,t.eq)(n.emailAddresses.userId,l))).limit(1);if(!c[0])return console.log("❌ Email address not found:",o),i.NextResponse.json({error:"Email address not found"},{status:404});let m=c[0];console.log("✅ Found email address:",m.address),console.log("🔍 Getting other email addresses for domain:",m.domainName);let p=(await a.db.select({address:n.emailAddresses.address}).from(n.emailAddresses).where((0,t.and)((0,t.eq)(n.emailAddresses.domainId,m.domainId),(0,t.eq)(n.emailAddresses.userId,l),(0,t.eq)(n.emailAddresses.isActive,!0)))).filter(e=>e.address!==m.address).map(e=>e.address);console.log("📊 Remaining email addresses after deletion:",p.length),console.log("🗑️ Deleting email address record"),await a.db.delete(n.emailAddresses).where((0,t.eq)(n.emailAddresses.id,o)),console.log("✅ Email address deleted from database");let g=!1,A=null;if(m.isReceiptRuleConfigured)try{console.log("🔧 Updating SES receipt rules");let e=new r.AWSSESReceiptRuleManager,s=process.env.AWS_REGION||"us-east-2",o=process.env.LAMBDA_FUNCTION_NAME||"email-processor",i=process.env.S3_BUCKET_NAME,d=process.env.AWS_ACCOUNT_ID;if(i&&d){let a=r.AWSSESReceiptRuleManager.getLambdaFunctionArn(o,d,s);if(p.length>0){console.log("🔄 Updating SES rule with remaining email addresses");let s=await e.configureEmailReceiving({domain:m.domainName,emailAddresses:p,lambdaFunctionArn:a,s3BucketName:i});"created"===s.status||"updated"===s.status?(g=!0,console.log("✅ SES rule updated successfully")):(A=`SES rule update failed: ${s.error}`,console.warn(`⚠️ ${A}`))}else{console.log("🗑️ Deleting SES rule (no remaining email addresses)");try{await e.removeEmailReceiving(m.domainName)?(g=!0,console.log("✅ SES rule deleted successfully")):(A="SES rule deletion failed: Unable to remove receipt rule",console.warn(`⚠️ ${A}`))}catch(e){A=`SES rule deletion failed: ${e instanceof Error?e.message:"Unknown error"}`,console.warn(`⚠️ ${A}`)}}}else A="AWS configuration incomplete. SES rules may need manual cleanup.",console.warn(`⚠️ ${A}`)}catch(e){A=`SES rule update error: ${e instanceof Error?e.message:"Unknown error"}`,console.error("❌ SES rule update failed:",e)}let f={message:"Email address deleted successfully",cleanup:{sesRuleUpdated:g,emailAddress:m.address,domain:m.domainName,...A&&{warning:A}}};return console.log("✅ DELETE /api/v2/email-addresses/[id] - Successfully deleted email address"),i.NextResponse.json(f,{status:200})}catch(e){return console.error("❌ DELETE /api/v2/email-addresses/[id] - Error:",e),i.NextResponse.json({error:"Internal server error",details:e instanceof Error?e.message:"Unknown error"},{status:500})}}},227005:e=>{"use strict";var{g:s,__dirname:o}=e;{e.s({patchFetch:()=>t,routeModule:()=>s,serverHooks:()=>l,workAsyncStorage:()=>o,workUnitAsyncStorage:()=>r});var i=e.i(854885),d=e.i(814689),a=e.i(25402),n=e.i(494903);let s=new i.AppRouteRouteModule({definition:{kind:d.RouteKind.APP_ROUTE,page:"/api/v2/email-addresses/[id]/route",pathname:"/api/v2/email-addresses/[id]",filename:"route",bundlePath:""},resolvedPagePath:"[project]/app/api/v2/email-addresses/[id]/route.ts",nextConfigOutput:"",userland:n}),{workAsyncStorage:o,workUnitAsyncStorage:r,serverHooks:l}=s;function t(){return(0,a.patchFetch)({workAsyncStorage:o,workUnitAsyncStorage:r})}}}};

//# sourceMappingURL=_2bf072fa._.js.map