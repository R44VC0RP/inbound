module.exports={119146:e=>{"use strict";var{g:t,__dirname:o}=e;e.s({DELETE:()=>g,GET:()=>u,PUT:()=>c});var i=e.i(125427),n=e.i(494642),a=e.i(557440);e.i(468686);var s=e.i(55379),r=e.i(176825),l=e.i(460009),d=e.i(91890),p=e.i(318812);async function u(e,{params:t}){let{id:o}=await t;console.log("🔍 GET /api/v2/endpoints/{id} - Starting request for endpoint:",o);try{console.log("🔐 Validating request authentication");let{userId:t,error:p}=await (0,n.validateRequest)(e);if(!t)return console.log("❌ Authentication failed:",p),i.NextResponse.json({error:p},{status:401});console.log("✅ Authentication successful for userId:",t),console.log("🔍 Querying endpoint from database");let u=await a.db.select().from(s.endpoints).where((0,r.and)((0,r.eq)(s.endpoints.id,o),(0,r.eq)(s.endpoints.userId,t))).limit(1);if(!u[0])return console.log("❌ Endpoint not found for user:",t,"endpoint:",o),i.NextResponse.json({error:"Endpoint not found"},{status:404});let c=u[0];console.log("✅ Found endpoint:",c.name,"type:",c.type);let g=null;"email_group"===c.type&&(console.log("📧 Fetching group emails for email_group endpoint"),g=(await a.db.select({emailAddress:s.emailGroups.emailAddress}).from(s.emailGroups).where((0,r.eq)(s.emailGroups.endpointId,c.id)).orderBy(s.emailGroups.createdAt)).map(e=>e.emailAddress),console.log("📧 Found",g.length,"group emails")),console.log("📊 Fetching delivery statistics");let m=await a.db.select({total:(0,d.count)(),status:s.endpointDeliveries.status}).from(s.endpointDeliveries).where((0,r.eq)(s.endpointDeliveries.endpointId,c.id)).groupBy(s.endpointDeliveries.status),f=0,v=0,h=0;for(let e of m)f+=e.total,"success"===e.status&&(v+=e.total),"failed"===e.status&&(h+=e.total);console.log("📊 Delivery stats - Total:",f,"Success:",v,"Failed:",h),console.log("📋 Fetching recent deliveries");let A=await a.db.select({id:s.endpointDeliveries.id,emailId:s.endpointDeliveries.emailId,deliveryType:s.endpointDeliveries.deliveryType,status:s.endpointDeliveries.status,attempts:s.endpointDeliveries.attempts,lastAttemptAt:s.endpointDeliveries.lastAttemptAt,responseData:s.endpointDeliveries.responseData,createdAt:s.endpointDeliveries.createdAt}).from(s.endpointDeliveries).where((0,r.eq)(s.endpointDeliveries.endpointId,c.id)).orderBy((0,l.desc)(s.endpointDeliveries.createdAt)).limit(10);console.log("📋 Found",A.length,"recent deliveries"),console.log("📮 Fetching associated email addresses");let w=await a.db.select({id:s.emailAddresses.id,address:s.emailAddresses.address,isActive:s.emailAddresses.isActive,createdAt:s.emailAddresses.createdAt}).from(s.emailAddresses).where((0,r.eq)(s.emailAddresses.endpointId,c.id)).orderBy(s.emailAddresses.createdAt);console.log("📮 Found",w.length,"associated email addresses"),console.log("🌐 Fetching catch-all domains");let y=await a.db.select({id:s.emailDomains.id,domain:s.emailDomains.domain,status:s.emailDomains.status}).from(s.emailDomains).where((0,r.eq)(s.emailDomains.catchAllEndpointId,c.id));console.log("🌐 Found",y.length,"catch-all domains");let D=await a.db.select({lastDelivery:s.endpointDeliveries.lastAttemptAt}).from(s.endpointDeliveries).where((0,r.eq)(s.endpointDeliveries.endpointId,c.id)).orderBy((0,l.desc)(s.endpointDeliveries.lastAttemptAt)).limit(1),b=D[0]?.lastDelivery||null,E={...c,config:JSON.parse(c.config),groupEmails:g,deliveryStats:{total:f,successful:v,failed:h,lastDelivery:b?new Date(b).toISOString():null},recentDeliveries:A.map(e=>({...e,lastAttemptAt:e.lastAttemptAt?new Date(e.lastAttemptAt).toISOString():null,createdAt:e.createdAt?new Date(e.createdAt).toISOString():null,responseData:e.responseData?JSON.parse(e.responseData):null})),associatedEmails:w.map(e=>({...e,createdAt:e.createdAt?new Date(e.createdAt).toISOString():null})),catchAllDomains:y,createdAt:c.createdAt?new Date(c.createdAt).toISOString():null,updatedAt:c.updatedAt?new Date(c.updatedAt).toISOString():null};return console.log("✅ GET /api/v2/endpoints/{id} - Successfully returning endpoint data"),i.NextResponse.json(E)}catch(e){return console.error("💥 Unexpected error in GET /api/v2/endpoints/{id}:",e),i.NextResponse.json({error:"Internal server error"},{status:500})}}async function c(e,{params:t}){let{id:o}=await t;console.log("✏️ PUT /api/v2/endpoints/{id} - Starting update for endpoint:",o);try{console.log("🔐 Validating request authentication");let{userId:t,error:l}=await (0,n.validateRequest)(e);if(!t)return console.log("❌ Authentication failed:",l),i.NextResponse.json({error:l},{status:401});console.log("✅ Authentication successful for userId:",t);let d=await e.json();console.log("📝 Update data received:",{hasName:!!d.name,hasDescription:!!d.description,hasIsActive:void 0!==d.isActive,hasConfig:!!d.config}),console.log("🔍 Checking if endpoint exists and belongs to user");let u=await a.db.select().from(s.endpoints).where((0,r.and)((0,r.eq)(s.endpoints.id,o),(0,r.eq)(s.endpoints.userId,t))).limit(1);if(!u[0])return console.log("❌ Endpoint not found for user:",t,"endpoint:",o),i.NextResponse.json({error:"Endpoint not found"},{status:404});if(console.log("✅ Found existing endpoint:",u[0].name,"type:",u[0].type),d.config){console.log("🔍 Validating endpoint configuration");let e=function(e,t){try{switch(console.log("🔍 Validating config for type:",e),e){case"webhook":if(!t.url)return console.log("❌ Webhook validation failed: URL is required"),{valid:!1,error:"Webhook URL is required"};if("string"!=typeof t.url)return console.log("❌ Webhook validation failed: URL must be string"),{valid:!1,error:"Webhook URL must be a string"};try{new URL(t.url)}catch{return console.log("❌ Webhook validation failed: Invalid URL format"),{valid:!1,error:"Invalid webhook URL format"}}if(t.timeout&&("number"!=typeof t.timeout||t.timeout<1||t.timeout>300))return console.log("❌ Webhook validation failed: Invalid timeout"),{valid:!1,error:"Timeout must be a number between 1 and 300 seconds"};if(t.retryAttempts&&("number"!=typeof t.retryAttempts||t.retryAttempts<0||t.retryAttempts>10))return console.log("❌ Webhook validation failed: Invalid retry attempts"),{valid:!1,error:"Retry attempts must be a number between 0 and 10"};break;case"email":if(!t.forwardTo)return console.log("❌ Email validation failed: forwardTo is required"),{valid:!1,error:"Forward-to email address is required"};if("string"!=typeof t.forwardTo)return console.log("❌ Email validation failed: forwardTo must be string"),{valid:!1,error:"Forward-to email must be a string"};if(!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(t.forwardTo))return console.log("❌ Email validation failed: Invalid email format"),{valid:!1,error:"Invalid forward-to email address format"};break;case"email_group":if(!t.emails||!Array.isArray(t.emails))return console.log("❌ Email group validation failed: emails array required"),{valid:!1,error:"Email group must have an emails array"};if(0===t.emails.length)return console.log("❌ Email group validation failed: empty emails array"),{valid:!1,error:"Email group must have at least one email address"};if(t.emails.length>50)return console.log("❌ Email group validation failed: too many emails"),{valid:!1,error:"Email group cannot have more than 50 email addresses"};let o=/^[^\s@]+@[^\s@]+\.[^\s@]+$/;for(let e of t.emails)if("string"!=typeof e||!o.test(e))return console.log("❌ Email group validation failed: invalid email in group:",e),{valid:!1,error:`Invalid email address in group: ${e}`};if(new Set(t.emails).size!==t.emails.length)return console.log("❌ Email group validation failed: duplicate emails"),{valid:!1,error:"Email group contains duplicate email addresses"};break;default:return console.log("❌ Validation failed: unknown endpoint type:",e),{valid:!1,error:"Unknown endpoint type"}}return console.log("✅ Configuration validation passed for type:",e),{valid:!0}}catch(e){return console.error("💥 Error during config validation:",e),{valid:!1,error:"Configuration validation failed"}}}(u[0].type,d.config);if(!e.valid)return console.log("❌ Configuration validation failed:",e.error),i.NextResponse.json({error:"Invalid configuration",details:e.error},{status:400});console.log("✅ Configuration validation passed")}let c={updatedAt:new Date};void 0!==d.name&&(c.name=d.name),void 0!==d.description&&(c.description=d.description),void 0!==d.isActive&&(c.isActive=d.isActive),void 0!==d.config&&(c.config=JSON.stringify(d.config)),console.log("💾 Updating endpoint with fields:",Object.keys(c));let[g]=await a.db.update(s.endpoints).set(c).where((0,r.eq)(s.endpoints.id,o)).returning();if(console.log("✅ Endpoint updated successfully"),d.config&&"email_group"===u[0].type&&"emails"in d.config){console.log("📧 Updating email group entries"),await a.db.delete(s.emailGroups).where((0,r.eq)(s.emailGroups.endpointId,o)),console.log("🗑️ Deleted existing group entries");let e=d.config.emails.map(e=>({id:(0,p.nanoid)(),endpointId:o,emailAddress:e,createdAt:new Date}));e.length>0&&(await a.db.insert(s.emailGroups).values(e),console.log("✅ Created",e.length,"new group entries"))}let m=null;"email_group"===g.type&&(console.log("📧 Fetching updated group emails"),m=(await a.db.select({emailAddress:s.emailGroups.emailAddress}).from(s.emailGroups).where((0,r.eq)(s.emailGroups.endpointId,o)).orderBy(s.emailGroups.createdAt)).map(e=>e.emailAddress),console.log("📧 Found",m.length,"updated group emails"));let f={...g,config:JSON.parse(g.config),groupEmails:m,createdAt:g.createdAt?new Date(g.createdAt).toISOString():null,updatedAt:g.updatedAt?new Date(g.updatedAt).toISOString():null};return console.log("✅ PUT /api/v2/endpoints/{id} - Successfully returning updated endpoint"),i.NextResponse.json(f)}catch(e){return console.error("💥 Unexpected error in PUT /api/v2/endpoints/{id}:",e),i.NextResponse.json({error:"Internal server error"},{status:500})}}async function g(e,{params:t}){let{id:o}=await t;console.log("🗑️ DELETE /api/v2/endpoints/{id} - Starting deletion for endpoint:",o);try{console.log("🔐 Validating request authentication");let{userId:t,error:l}=await (0,n.validateRequest)(e);if(!t)return console.log("❌ Authentication failed:",l),i.NextResponse.json({error:l},{status:401});console.log("✅ Authentication successful for userId:",t),console.log("🔍 Checking if endpoint exists and belongs to user");let d=await a.db.select().from(s.endpoints).where((0,r.and)((0,r.eq)(s.endpoints.id,o),(0,r.eq)(s.endpoints.userId,t))).limit(1);if(!d[0])return console.log("❌ Endpoint not found for user:",t,"endpoint:",o),i.NextResponse.json({error:"Endpoint not found"},{status:404});console.log("✅ Found endpoint to delete:",d[0].name,"type:",d[0].type),console.log("📮 Updating email addresses to store-only mode");let p=await a.db.update(s.emailAddresses).set({endpointId:null,updatedAt:new Date}).where((0,r.eq)(s.emailAddresses.endpointId,o)).returning({address:s.emailAddresses.address});console.log("📮 Updated",p.length,"email addresses to store-only"),console.log("🌐 Removing endpoint from catch-all domain configurations");let u=await a.db.update(s.emailDomains).set({catchAllEndpointId:null,updatedAt:new Date}).where((0,r.eq)(s.emailDomains.catchAllEndpointId,o)).returning({domain:s.emailDomains.domain});console.log("🌐 Updated",u.length,"domains to remove catch-all endpoint");let c=0;"email_group"===d[0].type&&(console.log("📧 Deleting email group entries"),c=(await a.db.delete(s.emailGroups).where((0,r.eq)(s.emailGroups.endpointId,o)).returning()).length,console.log("📧 Deleted",c,"group email entries")),console.log("📊 Deleting endpoint delivery history");let g=await a.db.delete(s.endpointDeliveries).where((0,r.eq)(s.endpointDeliveries.endpointId,o)).returning();return console.log("📊 Deleted",g.length,"delivery records"),console.log("🗑️ Deleting the endpoint"),await a.db.delete(s.endpoints).where((0,r.eq)(s.endpoints.id,o)),console.log("✅ DELETE /api/v2/endpoints/{id} - Successfully deleted endpoint and cleaned up"),i.NextResponse.json({message:"Endpoint deleted successfully",cleanup:{emailAddressesUpdated:p.length,emailAddresses:p.map(e=>e.address),domainsUpdated:u.length,domains:u.map(e=>e.domain),groupEmailsDeleted:c,deliveriesDeleted:g.length}})}catch(e){return console.error("💥 Unexpected error in DELETE /api/v2/endpoints/{id}:",e),i.NextResponse.json({error:"Internal server error"},{status:500})}}},539143:e=>{"use strict";var{g:t,__dirname:o}=e;{e.s({patchFetch:()=>r,routeModule:()=>t,serverHooks:()=>d,workAsyncStorage:()=>o,workUnitAsyncStorage:()=>l});var i=e.i(854885),n=e.i(814689),a=e.i(25402),s=e.i(119146);let t=new i.AppRouteRouteModule({definition:{kind:n.RouteKind.APP_ROUTE,page:"/api/v2/endpoints/[id]/route",pathname:"/api/v2/endpoints/[id]",filename:"route",bundlePath:""},resolvedPagePath:"[project]/app/api/v2/endpoints/[id]/route.ts",nextConfigOutput:"",userland:s}),{workAsyncStorage:o,workUnitAsyncStorage:l,serverHooks:d}=t;function r(){return(0,a.patchFetch)({workAsyncStorage:o,workUnitAsyncStorage:l})}}}};

//# sourceMappingURL=_b0b50c01._.js.map