module.exports={382025:e=>{"use strict";var{g:i,__dirname:t}=e;{e.s({CreateReceiptRuleSetCommand:()=>i}),e.i(176357);var l=e.i(765519);e.i(74189);var a=e.i(517274);e.i(608477);var s=e.i(677114),n=e.i(477034),r=e.i(62265);class i extends s.Command.classBuilder().ep(n.commonParams).m(function(e,i,t,s){return[(0,a.getSerdePlugin)(t,this.serialize,this.deserialize),(0,l.getEndpointPlugin)(t,e.getEndpointParameterInstructions())]}).s("SimpleEmailService","CreateReceiptRuleSet",{}).n("SESClient","CreateReceiptRuleSetCommand").f(void 0,void 0).ser(r.se_CreateReceiptRuleSetCommand).de(r.de_CreateReceiptRuleSetCommand).build(){}}},347403:e=>{"use strict";var{g:i,__dirname:t}=e;{e.s({CreateReceiptRuleCommand:()=>i}),e.i(176357);var l=e.i(765519);e.i(74189);var a=e.i(517274);e.i(608477);var s=e.i(677114),n=e.i(477034),r=e.i(62265);class i extends s.Command.classBuilder().ep(n.commonParams).m(function(e,i,t,s){return[(0,a.getSerdePlugin)(t,this.serialize,this.deserialize),(0,l.getEndpointPlugin)(t,e.getEndpointParameterInstructions())]}).s("SimpleEmailService","CreateReceiptRule",{}).n("SESClient","CreateReceiptRuleCommand").f(void 0,void 0).ser(r.se_CreateReceiptRuleCommand).de(r.de_CreateReceiptRuleCommand).build(){}}},765457:e=>{"use strict";var{g:i,__dirname:t}=e;{e.s({UpdateReceiptRuleCommand:()=>i}),e.i(176357);var l=e.i(765519);e.i(74189);var a=e.i(517274);e.i(608477);var s=e.i(677114),n=e.i(477034),r=e.i(62265);class i extends s.Command.classBuilder().ep(n.commonParams).m(function(e,i,t,s){return[(0,a.getSerdePlugin)(t,this.serialize,this.deserialize),(0,l.getEndpointPlugin)(t,e.getEndpointParameterInstructions())]}).s("SimpleEmailService","UpdateReceiptRule",{}).n("SESClient","UpdateReceiptRuleCommand").f(void 0,void 0).ser(r.se_UpdateReceiptRuleCommand).de(r.de_UpdateReceiptRuleCommand).build(){}}},181115:e=>{"use strict";var{g:i,__dirname:t}=e;{e.s({DeleteReceiptRuleCommand:()=>i}),e.i(176357);var l=e.i(765519);e.i(74189);var a=e.i(517274);e.i(608477);var s=e.i(677114),n=e.i(477034),r=e.i(62265);class i extends s.Command.classBuilder().ep(n.commonParams).m(function(e,i,t,s){return[(0,a.getSerdePlugin)(t,this.serialize,this.deserialize),(0,l.getEndpointPlugin)(t,e.getEndpointParameterInstructions())]}).s("SimpleEmailService","DeleteReceiptRule",{}).n("SESClient","DeleteReceiptRuleCommand").f(void 0,void 0).ser(r.se_DeleteReceiptRuleCommand).de(r.de_DeleteReceiptRuleCommand).build(){}}},325500:e=>{"use strict";var{g:i,__dirname:t}=e;{e.s({DescribeReceiptRuleSetCommand:()=>i}),e.i(176357);var l=e.i(765519);e.i(74189);var a=e.i(517274);e.i(608477);var s=e.i(677114),n=e.i(477034),r=e.i(62265);class i extends s.Command.classBuilder().ep(n.commonParams).m(function(e,i,t,s){return[(0,a.getSerdePlugin)(t,this.serialize,this.deserialize),(0,l.getEndpointPlugin)(t,e.getEndpointParameterInstructions())]}).s("SimpleEmailService","DescribeReceiptRuleSet",{}).n("SESClient","DescribeReceiptRuleSetCommand").f(void 0,void 0).ser(r.se_DescribeReceiptRuleSetCommand).de(r.de_DescribeReceiptRuleSetCommand).build(){}}},914260:e=>{"use strict";var{g:i,__dirname:t}=e;{e.s({SetActiveReceiptRuleSetCommand:()=>i}),e.i(176357);var l=e.i(765519);e.i(74189);var a=e.i(517274);e.i(608477);var s=e.i(677114),n=e.i(477034),r=e.i(62265);class i extends s.Command.classBuilder().ep(n.commonParams).m(function(e,i,t,s){return[(0,a.getSerdePlugin)(t,this.serialize,this.deserialize),(0,l.getEndpointPlugin)(t,e.getEndpointParameterInstructions())]}).s("SimpleEmailService","SetActiveReceiptRuleSet",{}).n("SESClient","SetActiveReceiptRuleSetCommand").f(void 0,void 0).ser(r.se_SetActiveReceiptRuleSetCommand).de(r.de_SetActiveReceiptRuleSetCommand).build(){}}},807204:e=>{"use strict";var{g:i,__dirname:t}=e;{e.s({AWSSESReceiptRuleManager:()=>i});var l=e.i(877465),a=e.i(382025),s=e.i(347403),n=e.i(765457),r=e.i(181115),o=e.i(325500),c=e.i(914260);class i{sesClient;region;constructor(e="us-east-2"){this.region=e,this.sesClient=new l.SESClient({region:e})}async configureEmailReceiving(e){let i=e.ruleSetName||"inbound-email-rules",t=`${e.domain}-rule`;try{console.log(`üîß SES Rules - Configuring email receiving for domain: ${e.domain}`),console.log(`üìß SES Rules - Email addresses: ${e.emailAddresses.join(", ")}`),await this.ensureRuleSetExists(i);let l=await this.getRuleIfExists(i,t),a=e.emailAddresses.length>0?e.emailAddresses:[e.domain];if(l&&l.Recipients){let e=l.Recipients||[];console.log(`üìã SES Rules - Existing recipients: ${e.join(", ")}`);let i=new Set([...e,...a]);a=Array.from(i),console.log(`üîÄ SES Rules - Merged recipients: ${a.join(", ")}`)}let r={Name:t,Enabled:!0,Recipients:a,Actions:[{S3Action:{BucketName:e.s3BucketName,ObjectKeyPrefix:`emails/${e.domain}/`,TopicArn:void 0}},{LambdaAction:{FunctionArn:e.lambdaFunctionArn,InvocationType:"Event"}}]},o="created";if(l){console.log(`üîÑ SES Rules - Updating existing rule: ${t}`);let e=new n.UpdateReceiptRuleCommand({RuleSetName:i,Rule:r});await this.sesClient.send(e),o="updated"}else{console.log(`‚ûï SES Rules - Creating new rule: ${t}`);let e=new s.CreateReceiptRuleCommand({RuleSetName:i,Rule:r});await this.sesClient.send(e),o="created"}return await this.setActiveRuleSet(i),console.log(`‚úÖ SES Rules - Successfully ${o} rule for ${e.domain}`),{ruleName:t,domain:e.domain,emailAddresses:a,status:o,isCatchAll:e.isCatchAll,catchAllWebhookId:e.catchAllWebhookId}}catch(i){return console.error("üí• SES Rules - Failed to configure email receiving:",i),{ruleName:t,domain:e.domain,emailAddresses:e.emailAddresses,status:"failed",error:i instanceof Error?i.message:"Unknown error",isCatchAll:e.isCatchAll,catchAllWebhookId:e.catchAllWebhookId}}}async removeEmailReceiving(e,i="inbound-email-rules"){try{let t=`${e}-rule`,l=new r.DeleteReceiptRuleCommand({RuleSetName:i,RuleName:t});return await this.sesClient.send(l),!0}catch(e){return console.error("Failed to remove receipt rule:",e),!1}}async getRuleIfExists(e,i){try{let t=new o.DescribeReceiptRuleSetCommand({RuleSetName:e}),l=await this.sesClient.send(t);return l.Rules?.find(e=>e.Name===i)||null}catch(t){return console.log(`üìã SES Rules - Rule set ${e} does not exist or rule ${i} not found`),null}}async ensureRuleSetExists(e){try{await this.sesClient.send(new o.DescribeReceiptRuleSetCommand({RuleSetName:e}))}catch(i){if(i instanceof Error&&"RuleSetDoesNotExistException"===i.name)await this.sesClient.send(new a.CreateReceiptRuleSetCommand({RuleSetName:e}));else throw i}}async setActiveRuleSet(e){await this.sesClient.send(new c.SetActiveReceiptRuleSetCommand({RuleSetName:e}))}static getLambdaFunctionArn(e,i,t){return`arn:aws:lambda:${t}:${i}:function:${e}`}static isValidEmailAddress(e){return/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(e)}static extractDomain(e){return e.split("@")[1]||""}async configureCatchAllDomain(e){let i=e.ruleSetName||"inbound-email-rules",t=`${e.domain}-catchall-rule`,l=`${e.domain}-rule`;try{console.log(`üåê SES Rules - Configuring catch-all for domain: ${e.domain}`),console.log(`ü™ù SES Rules - Webhook ID: ${e.webhookId}`),await this.ensureRuleSetExists(i),await this.getRuleIfExists(i,l)&&(console.log(`üóëÔ∏è SES Rules - Removing individual email rule to prevent conflicts: ${l}`),await this.sesClient.send(new r.DeleteReceiptRuleCommand({RuleSetName:i,RuleName:l})));let a={Name:t,Enabled:!0,Recipients:[e.domain],Actions:[{S3Action:{BucketName:e.s3BucketName,ObjectKeyPrefix:`emails/${e.domain}/catchall/`,TopicArn:void 0}},{LambdaAction:{FunctionArn:e.lambdaFunctionArn,InvocationType:"Event"}}]},o=await this.getRuleIfExists(i,t),c="created";if(o){console.log(`üîÑ SES Rules - Updating existing catch-all rule: ${t}`);let e=new n.UpdateReceiptRuleCommand({RuleSetName:i,Rule:a});await this.sesClient.send(e),c="updated"}else{console.log(`‚ûï SES Rules - Creating new catch-all rule: ${t}`);let e=new s.CreateReceiptRuleCommand({RuleSetName:i,Rule:a});await this.sesClient.send(e),c="created"}return await this.setActiveRuleSet(i),console.log(`‚úÖ SES Rules - Successfully ${c} catch-all rule for ${e.domain}`),{ruleName:t,domain:e.domain,emailAddresses:[e.domain],status:c,isCatchAll:!0,catchAllWebhookId:e.webhookId}}catch(i){return console.error("üí• SES Rules - Failed to configure catch-all:",i),{ruleName:t,domain:e.domain,emailAddresses:[e.domain],status:"failed",error:i instanceof Error?i.message:"Unknown error",isCatchAll:!0,catchAllWebhookId:e.webhookId}}}async removeCatchAllDomain(e,i="inbound-email-rules"){try{let t=`${e}-catchall-rule`,l=new r.DeleteReceiptRuleCommand({RuleSetName:i,RuleName:t});return await this.sesClient.send(l),console.log(`‚úÖ SES Rules - Successfully removed catch-all rule for ${e}`),!0}catch(e){return console.error("Failed to remove catch-all receipt rule:",e),!1}}async isCatchAllConfigured(e,i="inbound-email-rules"){let t=`${e}-catchall-rule`;return null!==await this.getRuleIfExists(i,t)}async getDomainRules(e,i="inbound-email-rules"){let t=`${e}-rule`,l=`${e}-catchall-rule`;return{individualRule:await this.getRuleIfExists(i,t),catchAllRule:await this.getRuleIfExists(i,l)}}async restoreIndividualEmailRules(e,i,t,l,a="inbound-email-rules"){let n=`${e}-rule`;try{if(console.log(`üîÑ SES Rules - Restoring individual email rules for domain: ${e}`),console.log(`üìß SES Rules - Email addresses: ${i.join(", ")}`),0===i.length)return console.log(`‚ö†Ô∏è SES Rules - No email addresses to restore for ${e}`),{ruleName:n,domain:e,emailAddresses:[],status:"created",isCatchAll:!1};let r={Name:n,Enabled:!0,Recipients:i,Actions:[{S3Action:{BucketName:l,ObjectKeyPrefix:`emails/${e}/`,TopicArn:void 0}},{LambdaAction:{FunctionArn:t,InvocationType:"Event"}}]};console.log(`‚ûï SES Rules - Creating individual email rule: ${n}`);let o=new s.CreateReceiptRuleCommand({RuleSetName:a,Rule:r});return await this.sesClient.send(o),await this.setActiveRuleSet(a),console.log(`‚úÖ SES Rules - Successfully restored individual email rules for ${e}`),{ruleName:n,domain:e,emailAddresses:i,status:"created",isCatchAll:!1}}catch(t){return console.error("üí• SES Rules - Failed to restore individual email rules:",t),{ruleName:n,domain:e,emailAddresses:i,status:"failed",error:t instanceof Error?t.message:"Unknown error",isCatchAll:!1}}}}}}};

//# sourceMappingURL=_7acd122c._.js.map