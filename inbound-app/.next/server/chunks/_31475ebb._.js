module.exports={906273:e=>{"use strict";var{g:i,__dirname:a}=e;e.s({areAllDnsRecordsVerified:()=>c,createDomainVerification:()=>d,createEmailAddress:()=>f,deleteDomainFromDatabase:()=>S,disableDomainCatchAll:()=>h,enableDomainCatchAll:()=>E,getDomainOwnerByDomain:()=>g,getDomainWithCatchAll:()=>y,getDomainWithRecords:()=>m,getDomainWithRecordsAndEmails:()=>A,getEmailAddressesForDomain:()=>D,isDomainCatchAllEnabled:()=>v,markDomainAsVerified:()=>p,updateDnsRecordVerification:()=>l,updateDomainSesVerification:()=>s,updateDomainStatus:()=>u,updateEmailAddressReceiptRule:()=>w});var n=e.i(557440);e.i(468686);var t=e.i(55379),r=e.i(176825),o=e.i(318812);async function d(e,i,a){let r={id:`indm_${(0,o.nanoid)()}`,domain:e,userId:i,status:"pending",canReceiveEmails:a.canReceiveEmails,hasMxRecords:a.hasMxRecords,domainProvider:a.provider?.name,providerConfidence:a.provider?.confidence,lastDnsCheck:new Date,updatedAt:new Date},[d]=await n.db.insert(t.emailDomains).values(r).returning();return d}async function s(e,i,a,d){let[s]=await n.db.update(t.emailDomains).set({verificationToken:i,status:"Success"===a?"verified":"pending",lastSesCheck:new Date,updatedAt:new Date}).where((0,r.eq)(t.emailDomains.id,e)).returning();for(let i of d){let a={id:`dns_${(0,o.nanoid)()}`,domainId:e,recordType:i.type,name:i.name,value:i.value,isRequired:!0,isVerified:!1};await n.db.insert(t.domainDnsRecords).values(a).onConflictDoNothing()}return s}async function m(e,i){let a=await n.db.select().from(t.emailDomains).where((0,r.and)((0,r.eq)(t.emailDomains.domain,e),(0,r.eq)(t.emailDomains.userId,i))).limit(1);if(!a[0])return null;let o=await n.db.select().from(t.domainDnsRecords).where((0,r.eq)(t.domainDnsRecords.domainId,a[0].id));return{...a[0],dnsRecords:o}}async function l(e,i,a,o){await n.db.update(t.domainDnsRecords).set({isVerified:o,lastChecked:new Date}).where((0,r.and)((0,r.eq)(t.domainDnsRecords.domainId,e),(0,r.eq)(t.domainDnsRecords.recordType,i),(0,r.eq)(t.domainDnsRecords.name,a)))}async function c(e){let i=await n.db.select().from(t.domainDnsRecords).where((0,r.and)((0,r.eq)(t.domainDnsRecords.domainId,e),(0,r.eq)(t.domainDnsRecords.isRequired,!0)));return i.length>0&&i.every(e=>e.isVerified)}async function u(e,i){let[a]=await n.db.update(t.emailDomains).set({status:i,updatedAt:new Date}).where((0,r.eq)(t.emailDomains.id,e)).returning();return a}async function f(e,i,a){let r={id:`email_${(0,o.nanoid)()}`,address:e,domainId:i,userId:a,isActive:!0,isReceiptRuleConfigured:!1,updatedAt:new Date},[d]=await n.db.insert(t.emailAddresses).values(r).returning();return d}async function D(e){return n.db.select().from(t.emailAddresses).where((0,r.eq)(t.emailAddresses.domainId,e))}async function w(e,i,a){let[o]=await n.db.update(t.emailAddresses).set({isReceiptRuleConfigured:i,receiptRuleName:a,updatedAt:new Date}).where((0,r.eq)(t.emailAddresses.id,e)).returning();return o}async function A(e,i){let a=await n.db.select().from(t.emailDomains).where((0,r.and)((0,r.eq)(t.emailDomains.domain,e),(0,r.eq)(t.emailDomains.userId,i))).limit(1);if(!a[0])return null;let o=await n.db.select().from(t.domainDnsRecords).where((0,r.eq)(t.domainDnsRecords.domainId,a[0].id)),d=await n.db.select().from(t.emailAddresses).where((0,r.eq)(t.emailAddresses.domainId,a[0].id));return{...a[0],dnsRecords:o,emailAddresses:d}}async function S(e,i){try{let a=await n.db.select().from(t.emailDomains).where((0,r.and)((0,r.eq)(t.emailDomains.id,e),(0,r.eq)(t.emailDomains.userId,i))).limit(1);if(!a[0])return{success:!1,error:"Domain not found or access denied"};return console.log(`üóëÔ∏è Deleting domain from database: ${a[0].domain}`),await n.db.delete(t.emailAddresses).where((0,r.eq)(t.emailAddresses.domainId,e)),await n.db.delete(t.domainDnsRecords).where((0,r.eq)(t.domainDnsRecords.domainId,e)),await n.db.delete(t.emailDomains).where((0,r.eq)(t.emailDomains.id,e)),console.log(`‚úÖ Successfully deleted domain from database: ${a[0].domain}`),{success:!0}}catch(e){return console.error("Database domain deletion error:",e),{success:!1,error:e instanceof Error?e.message:"Failed to delete domain from database"}}}async function E(e,i,a){let[o]=await n.db.update(t.emailDomains).set({isCatchAllEnabled:!0,catchAllWebhookId:i,catchAllReceiptRuleName:a,updatedAt:new Date}).where((0,r.eq)(t.emailDomains.id,e)).returning();if(!o)throw Error("Domain not found");return o}async function h(e){let[i]=await n.db.update(t.emailDomains).set({isCatchAllEnabled:!1,catchAllWebhookId:null,catchAllReceiptRuleName:null,updatedAt:new Date}).where((0,r.eq)(t.emailDomains.id,e)).returning();if(!i)throw Error("Domain not found");return i}async function y(e,i){let[a]=await n.db.select().from(t.emailDomains).where((0,r.and)((0,r.eq)(t.emailDomains.domain,e),(0,r.eq)(t.emailDomains.userId,i))).limit(1);return a||null}async function v(e){let[i]=await n.db.select({isCatchAllEnabled:t.emailDomains.isCatchAllEnabled}).from(t.emailDomains).where((0,r.eq)(t.emailDomains.id,e)).limit(1);return i?.isCatchAllEnabled||!1}async function g(i){try{let{user:a}=await e.r(278680)(e.i),o=await n.db.select({userId:t.emailDomains.userId,userEmail:a.email,userName:a.name}).from(t.emailDomains).innerJoin(a,(0,r.eq)(t.emailDomains.userId,a.id)).where((0,r.eq)(t.emailDomains.domain,i)).limit(1);if(!o[0])return console.log(`‚ùå getDomainOwnerByDomain - No owner found for domain: ${i}`),null;return console.log(`‚úÖ getDomainOwnerByDomain - Found owner for domain ${i}: ${o[0].userEmail}`),o[0]}catch(e){return console.error("‚ùå getDomainOwnerByDomain - Error looking up domain owner:",e),null}}async function p(e){try{let[i]=await n.db.update(t.emailDomains).set({status:"verified",lastSesCheck:new Date,updatedAt:new Date}).where((0,r.eq)(t.emailDomains.domain,e)).returning();return i&&console.log(`‚úÖ markDomainAsVerified - Domain ${e} marked as verified`),i||null}catch(e){return console.error("‚ùå markDomainAsVerified - Error updating domain status:",e),null}}},112527:e=>{"use strict";var{g:i,__dirname:a}=e;{e.s({VerifyDomainIdentityCommand:()=>i}),e.i(176357);var n=e.i(765519);e.i(74189);var t=e.i(517274);e.i(608477);var r=e.i(677114),o=e.i(477034),d=e.i(62265);class i extends r.Command.classBuilder().ep(o.commonParams).m(function(e,i,a,r){return[(0,t.getSerdePlugin)(a,this.serialize,this.deserialize),(0,n.getEndpointPlugin)(a,e.getEndpointParameterInstructions())]}).s("SimpleEmailService","VerifyDomainIdentity",{}).n("SESClient","VerifyDomainIdentityCommand").f(void 0,void 0).ser(d.se_VerifyDomainIdentityCommand).de(d.de_VerifyDomainIdentityCommand).build(){}}},547627:e=>{"use strict";var{g:i,__dirname:a}=e;{e.s({DeleteIdentityCommand:()=>i}),e.i(176357);var n=e.i(765519);e.i(74189);var t=e.i(517274);e.i(608477);var r=e.i(677114),o=e.i(477034),d=e.i(62265);class i extends r.Command.classBuilder().ep(o.commonParams).m(function(e,i,a,r){return[(0,t.getSerdePlugin)(a,this.serialize,this.deserialize),(0,n.getEndpointPlugin)(a,e.getEndpointParameterInstructions())]}).s("SimpleEmailService","DeleteIdentity",{}).n("SESClient","DeleteIdentityCommand").f(void 0,void 0).ser(d.se_DeleteIdentityCommand).de(d.de_DeleteIdentityCommand).build(){}}},236286:e=>{"use strict";var{g:i,__dirname:a}=e;{e.s({deleteDomainFromSES:()=>m,initiateDomainVerification:()=>s});var n=e.i(877465),t=e.i(112527),r=e.i(562454),o=e.i(547627),d=e.i(906273);let i=process.env.AWS_REGION||"us-east-2",a=process.env.AWS_ACCESS_KEY_ID,l=process.env.AWS_SECRET_ACCESS_KEY,c=null;async function s(e,a){try{let n=await (0,d.getDomainWithRecords)(e,a);if(!n)throw Error("Domain not found in database");if(!c)return{domain:e,domainId:n.id,verificationToken:"",status:"pending",dnsRecords:[],canProceed:!1,error:"AWS SES not configured. Please set AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY environment variables."};if(!/^[a-zA-Z0-9]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(\.[a-zA-Z0-9]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.test(e)||e.length>253)throw Error("Invalid domain format");let o=n.verificationToken;if(!o){let i=new t.VerifyDomainIdentityCommand({Domain:e});o=(await c.send(i)).VerificationToken||""}let s=new r.GetIdentityVerificationAttributesCommand({Identities:[e]}),m=await c.send(s),l=m.VerificationAttributes?.[e],u=l?.VerificationStatus||"Pending",f="pending";"Success"===u?f="verified":"Failed"===u&&(f="failed");let D=[{type:"TXT",name:`_amazonses.${e}`,value:o||"verification-token-not-available"},{type:"MX",name:e,value:`10 inbound-smtp.${i}.amazonaws.com`}];n.verificationToken||await (0,d.updateDomainSesVerification)(n.id,o,u,D);let w=D.map(e=>({type:e.type,name:e.name,value:e.value,isVerified:!1}));return{domain:e,domainId:n.id,verificationToken:o||"",status:f,sesStatus:u,dnsRecords:w,canProceed:"verified"===f}}catch(e){if(console.error("Domain verification error:",e),e instanceof Error){if("InvalidParameterValue"===e.name)throw Error("Invalid domain parameter");if("LimitExceededException"===e.name)throw Error("AWS SES limit exceeded")}throw Error("Failed to verify domain with AWS SES")}}async function m(e){try{if(!c)return{success:!1,error:"AWS SES not configured. Please set AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY environment variables."};if(!/^[a-zA-Z0-9]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(\.[a-zA-Z0-9]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.test(e)||e.length>253)return{success:!1,error:"Invalid domain format"};console.log(`üóëÔ∏è Deleting domain identity from SES: ${e}`);let i=new o.DeleteIdentityCommand({Identity:e});return await c.send(i),console.log(`‚úÖ Successfully deleted domain identity from SES: ${e}`),{success:!0}}catch(i){if(console.error("SES domain deletion error:",i),i instanceof Error){if("InvalidParameterValue"===i.name)return{success:!1,error:"Invalid domain parameter"};if("NotFoundException"===i.name)return console.log(`‚ö†Ô∏è Domain not found in SES (already deleted): ${e}`),{success:!0}}return{success:!1,error:i instanceof Error?i.message:"Failed to delete domain from AWS SES"}}}a&&l?c=new n.SESClient({region:i,credentials:{accessKeyId:a,secretAccessKey:l}}):console.warn("AWS credentials not configured. SES verification will not work.")}}};

//# sourceMappingURL=_31475ebb._.js.map