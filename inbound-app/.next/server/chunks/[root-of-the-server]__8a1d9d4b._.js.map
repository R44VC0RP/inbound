{"version":3,"sources":["turbopack:///[project]/lib/db/domains.ts","turbopack:///[project]/lib/domains-and-dns/dns.ts","turbopack:///[project]/app/api/inbound/check-dns-records/route.ts","turbopack:///[project]/node_modules/next/dist/src/build/templates/app-route.ts"],"sourcesContent":["import { db } from './index'\nimport { emailDomains, domainDnsRecords, emailAddresses, type EmailDomain, type NewEmailDomain, type DomainDnsRecord, type NewDomainDnsRecord, type EmailAddress, type NewEmailAddress } from './schema'\nimport { eq, and } from 'drizzle-orm'\nimport { nanoid } from 'nanoid'\n\nexport interface DomainWithRecords extends EmailDomain {\n  dnsRecords: DomainDnsRecord[]\n  emailAddresses?: EmailAddress[]\n}\n\n/**\n * Create a new domain verification record\n */\nexport async function createDomainVerification(\n  domain: string,\n  userId: string,\n  dnsCheckResult: {\n    canReceiveEmails: boolean\n    hasMxRecords: boolean\n    provider?: {\n      name: string\n      confidence: 'high' | 'medium' | 'low'\n    }\n  }\n): Promise<EmailDomain> {\n  const domainRecord: NewEmailDomain = {\n    id: `indm_${nanoid()}`,\n    domain,\n    userId,\n    status: 'pending',\n    canReceiveEmails: dnsCheckResult.canReceiveEmails,\n    hasMxRecords: dnsCheckResult.hasMxRecords,\n    domainProvider: dnsCheckResult.provider?.name,\n    providerConfidence: dnsCheckResult.provider?.confidence,\n    lastDnsCheck: new Date(),\n    updatedAt: new Date(),\n  }\n\n  const [created] = await db.insert(emailDomains).values(domainRecord).returning()\n  return created\n}\n\n/**\n * Update domain with SES verification information\n */\nexport async function updateDomainSesVerification(\n  domainId: string,\n  verificationToken: string,\n  sesStatus: string,\n  dnsRecords: Array<{ type: string; name: string; value: string }>\n): Promise<EmailDomain> {\n  // Update the domain record\n  const [updated] = await db\n    .update(emailDomains)\n    .set({\n      verificationToken,\n      status: sesStatus === 'Success' ? 'verified' : 'pending',\n      lastSesCheck: new Date(),\n      updatedAt: new Date(),\n    })\n    .where(eq(emailDomains.id, domainId))\n    .returning()\n\n  // Insert or update DNS records\n  for (const record of dnsRecords) {\n    const dnsRecord: NewDomainDnsRecord = {\n      id: `dns_${nanoid()}`,\n      domainId,\n      recordType: record.type,\n      name: record.name,\n      value: record.value,\n      isRequired: true,\n      isVerified: false,\n    }\n\n    await db.insert(domainDnsRecords).values(dnsRecord).onConflictDoNothing()\n  }\n\n  return updated\n}\n\n/**\n * Get domain with DNS records by domain name and user ID\n */\nexport async function getDomainWithRecords(domain: string, userId: string): Promise<DomainWithRecords | null> {\n  const domainRecord = await db\n    .select()\n    .from(emailDomains)\n    .where(and(eq(emailDomains.domain, domain), eq(emailDomains.userId, userId)))\n    .limit(1)\n\n  if (!domainRecord[0]) return null\n\n  const dnsRecords = await db\n    .select()\n    .from(domainDnsRecords)\n    .where(eq(domainDnsRecords.domainId, domainRecord[0].id))\n\n  return {\n    ...domainRecord[0],\n    dnsRecords,\n  }\n}\n\n/**\n * Update DNS record verification status\n */\nexport async function updateDnsRecordVerification(\n  domainId: string,\n  recordType: string,\n  name: string,\n  isVerified: boolean\n): Promise<void> {\n  await db\n    .update(domainDnsRecords)\n    .set({\n      isVerified,\n      lastChecked: new Date(),\n    })\n    .where(\n      and(\n        eq(domainDnsRecords.domainId, domainId),\n        eq(domainDnsRecords.recordType, recordType),\n        eq(domainDnsRecords.name, name)\n      )\n    )\n}\n\n/**\n * Check if all required DNS records are verified\n */\nexport async function areAllDnsRecordsVerified(domainId: string): Promise<boolean> {\n  const records = await db\n    .select()\n    .from(domainDnsRecords)\n    .where(and(eq(domainDnsRecords.domainId, domainId), eq(domainDnsRecords.isRequired, true)))\n\n  return records.length > 0 && records.every(record => record.isVerified)\n}\n\n/**\n * Update domain status based on verification progress\n */\nexport async function updateDomainStatus(domainId: string, status: string): Promise<EmailDomain> {\n  const [updated] = await db\n    .update(emailDomains)\n    .set({\n      status,\n      updatedAt: new Date(),\n    })\n    .where(eq(emailDomains.id, domainId))\n    .returning()\n\n  return updated\n}\n\n/**\n * Create a new email address for a domain\n */\nexport async function createEmailAddress(\n  address: string,\n  domainId: string,\n  userId: string\n): Promise<EmailAddress> {\n  const emailRecord: NewEmailAddress = {\n    id: `email_${nanoid()}`,\n    address,\n    domainId,\n    userId,\n    isActive: true,\n    isReceiptRuleConfigured: false,\n    updatedAt: new Date(),\n  }\n\n  const [created] = await db.insert(emailAddresses).values(emailRecord).returning()\n  return created\n}\n\n/**\n * Get email addresses for a domain\n */\nexport async function getEmailAddressesForDomain(domainId: string): Promise<EmailAddress[]> {\n  return db\n    .select()\n    .from(emailAddresses)\n    .where(eq(emailAddresses.domainId, domainId))\n}\n\n/**\n * Update email address receipt rule status\n */\nexport async function updateEmailAddressReceiptRule(\n  emailId: string,\n  isConfigured: boolean,\n  ruleName?: string\n): Promise<EmailAddress> {\n  const [updated] = await db\n    .update(emailAddresses)\n    .set({\n      isReceiptRuleConfigured: isConfigured,\n      receiptRuleName: ruleName,\n      updatedAt: new Date(),\n    })\n    .where(eq(emailAddresses.id, emailId))\n    .returning()\n\n  return updated\n}\n\n/**\n * Get domain with DNS records and email addresses\n */\nexport async function getDomainWithRecordsAndEmails(domain: string, userId: string): Promise<DomainWithRecords | null> {\n  const domainRecord = await db\n    .select()\n    .from(emailDomains)\n    .where(and(eq(emailDomains.domain, domain), eq(emailDomains.userId, userId)))\n    .limit(1)\n\n  if (!domainRecord[0]) return null\n\n  const dnsRecords = await db\n    .select()\n    .from(domainDnsRecords)\n    .where(eq(domainDnsRecords.domainId, domainRecord[0].id))\n\n  const emailAddressList = await db\n    .select()\n    .from(emailAddresses)\n    .where(eq(emailAddresses.domainId, domainRecord[0].id))\n\n  return {\n    ...domainRecord[0],\n    dnsRecords,\n    emailAddresses: emailAddressList,\n  }\n}\n\n/**\n * Delete a domain and all its related records from the database\n */\nexport async function deleteDomainFromDatabase(domainId: string, userId: string): Promise<{ success: boolean; error?: string }> {\n  try {\n    // Verify the domain belongs to the user\n    const domainRecord = await db\n      .select()\n      .from(emailDomains)\n      .where(and(eq(emailDomains.id, domainId), eq(emailDomains.userId, userId)))\n      .limit(1)\n\n    if (!domainRecord[0]) {\n      return {\n        success: false,\n        error: 'Domain not found or access denied'\n      }\n    }\n\n    console.log(`üóëÔ∏è Deleting domain from database: ${domainRecord[0].domain}`)\n\n    // Delete all email addresses for this domain\n    await db\n      .delete(emailAddresses)\n      .where(eq(emailAddresses.domainId, domainId))\n\n    // Delete all DNS records for this domain\n    await db\n      .delete(domainDnsRecords)\n      .where(eq(domainDnsRecords.domainId, domainId))\n\n    // Delete the domain record\n    await db\n      .delete(emailDomains)\n      .where(eq(emailDomains.id, domainId))\n\n    console.log(`‚úÖ Successfully deleted domain from database: ${domainRecord[0].domain}`)\n\n    return { success: true }\n\n  } catch (error) {\n    console.error('Database domain deletion error:', error)\n    return {\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to delete domain from database'\n    }\n  }\n}\n\n/**\n * Enable catch-all for a domain\n */\nexport async function enableDomainCatchAll(\n  domainId: string,\n  webhookId: string,\n  receiptRuleName: string\n): Promise<EmailDomain> {\n  const [updated] = await db\n    .update(emailDomains)\n    .set({\n      isCatchAllEnabled: true,\n      catchAllWebhookId: webhookId,\n      catchAllReceiptRuleName: receiptRuleName,\n      updatedAt: new Date(),\n    })\n    .where(eq(emailDomains.id, domainId))\n    .returning()\n\n  if (!updated) {\n    throw new Error('Domain not found')\n  }\n\n  return updated\n}\n\n/**\n * Disable catch-all for a domain\n */\nexport async function disableDomainCatchAll(domainId: string): Promise<EmailDomain> {\n  const [updated] = await db\n    .update(emailDomains)\n    .set({\n      isCatchAllEnabled: false,\n      catchAllWebhookId: null,\n      catchAllReceiptRuleName: null,\n      updatedAt: new Date(),\n    })\n    .where(eq(emailDomains.id, domainId))\n    .returning()\n\n  if (!updated) {\n    throw new Error('Domain not found')\n  }\n\n  return updated\n}\n\n/**\n * Get domain with catch-all configuration\n */\nexport async function getDomainWithCatchAll(domain: string, userId: string): Promise<EmailDomain | null> {\n  const [domainRecord] = await db\n    .select()\n    .from(emailDomains)\n    .where(and(eq(emailDomains.domain, domain), eq(emailDomains.userId, userId)))\n    .limit(1)\n\n  return domainRecord || null\n}\n\n/**\n * Check if domain has catch-all enabled\n */\nexport async function isDomainCatchAllEnabled(domainId: string): Promise<boolean> {\n  const [domain] = await db\n    .select({ isCatchAllEnabled: emailDomains.isCatchAllEnabled })\n    .from(emailDomains)\n    .where(eq(emailDomains.id, domainId))\n    .limit(1)\n\n  return domain?.isCatchAllEnabled || false\n}\n\n/**\n * Get domain owner information by domain name\n * Returns the user details for the domain owner to send notifications\n */\nexport async function getDomainOwnerByDomain(domain: string): Promise<{ userId: string; userEmail: string; userName: string | null } | null> {\n  try {\n    // Import user table from auth schema\n    const { user } = await import('./auth-schema')\n    \n    const result = await db\n      .select({\n        userId: emailDomains.userId,\n        userEmail: user.email,\n        userName: user.name,\n      })\n      .from(emailDomains)\n      .innerJoin(user, eq(emailDomains.userId, user.id))\n      .where(eq(emailDomains.domain, domain))\n      .limit(1)\n\n    if (!result[0]) {\n      console.log(`‚ùå getDomainOwnerByDomain - No owner found for domain: ${domain}`)\n      return null\n    }\n\n    console.log(`‚úÖ getDomainOwnerByDomain - Found owner for domain ${domain}: ${result[0].userEmail}`)\n    return result[0]\n  } catch (error) {\n    console.error('‚ùå getDomainOwnerByDomain - Error looking up domain owner:', error)\n    return null\n  }\n}\n\n/**\n * Update domain status to verified\n */\nexport async function markDomainAsVerified(domain: string): Promise<EmailDomain | null> {\n  try {\n    const [updated] = await db\n      .update(emailDomains)\n      .set({\n        status: 'verified',\n        lastSesCheck: new Date(),\n        updatedAt: new Date(),\n      })\n      .where(eq(emailDomains.domain, domain))\n      .returning()\n\n    if (updated) {\n      console.log(`‚úÖ markDomainAsVerified - Domain ${domain} marked as verified`)\n    }\n\n    return updated || null\n  } catch (error) {\n    console.error('‚ùå markDomainAsVerified - Error updating domain status:', error)\n    return null\n  }\n} ","/**\n * DNS Library - Consolidated DNS functionality\n * \n * Provides comprehensive DNS functionality including:\n * - Domain availability checking (ensures no conflicting MX/CNAME records)\n * - DNS record verification (confirms required records exist and match expected values)  \n * - Domain provider detection with fallback resolvers\n * - Used throughout domain onboarding and verification workflows\n */\n\nimport { promises as dns } from 'dns';\nimport { Resolver } from 'dns'\n\n/**\n * MX Record type definition\n */\nexport interface MxRecord {\n  exchange: string;\n  priority: number;\n}\n\n/**\n * DNS record verification result (from dns-verification.ts)\n */\nexport interface DnsRecordCheck {\n  type: string\n  name: string\n  expectedValue: string\n  actualValues: string[]\n  isVerified: boolean\n  error?: string\n}\n\n/**\n * Domain provider information\n */\nexport interface DomainProvider {\n  name: string;\n  icon: string; // Icon identifier for UI\n  detected: boolean;\n  confidence: 'high' | 'medium' | 'low';\n}\n\n/**\n * DNS check result types\n */\nexport interface DnsCheckResult {\n  domain: string;\n  canReceiveEmails: boolean;\n  hasMxRecords: boolean;\n  mxRecords?: MxRecord[];\n  provider?: DomainProvider;\n  error?: string;\n  timestamp: Date;\n}\n\nexport interface DnsError {\n  code: string;\n  errno: number;\n  message: string;\n}\n\n/**\n * Domain provider patterns based on nameservers\n */\nconst PROVIDER_PATTERNS = {\n  cloudflare: {\n    name: 'Cloudflare',\n    icon: 'cloudflare',\n    patterns: ['cloudflare.com', 'ns.cloudflare.com', 'cloudflare.net']\n  },\n  namecheap: {\n    name: 'Namecheap',\n    icon: 'namecheap', \n    patterns: ['registrar-servers.com', 'namecheap.com', 'namecheaphosting.com']\n  },\n  godaddy: {\n    name: 'GoDaddy',\n    icon: 'godaddy',\n    patterns: ['domaincontrol.com', 'godaddy.com', 'secureserver.net']\n  },\n  route53: {\n    name: 'AWS Route 53',\n    icon: 'aws',\n    patterns: ['awsdns', 'amazonaws.com', 'awsdns-']\n  },\n  google: {\n    name: 'Google Domains',\n    icon: 'google',\n    patterns: ['googledomains.com', 'google.com', 'googlehosted.com']\n  },\n  vercel: {\n    name: 'Vercel',\n    icon: 'vercel',\n    patterns: ['vercel-dns.com', 'vercel.app']\n  },\n  digitalocean: {\n    name: 'DigitalOcean',\n    icon: 'digitalocean',\n    patterns: ['digitalocean.com', 'ns1.digitalocean.com', 'ns2.digitalocean.com', 'ns3.digitalocean.com']\n  },\n  netlify: {\n    name: 'Netlify',\n    icon: 'netlify',\n    patterns: ['netlify.com', 'dns1.p01.nsone.net', 'dns2.p01.nsone.net']\n  },\n  dnsimple: {\n    name: 'DNSimple',\n    icon: 'dnsimple',\n    patterns: ['dnsimple.com', 'ns1.dnsimple.com', 'ns2.dnsimple.com']\n  },\n  hover: {\n    name: 'Hover',\n    icon: 'hover',\n    patterns: ['hover.com', 'ns1.hover.com', 'ns2.hover.com']\n  },\n  porkbun: {\n    name: 'Porkbun',\n    icon: 'porkbun',\n    patterns: ['porkbun.com', 'curitiba.porkbun.com', 'fortaleza.porkbun.com']\n  },\n  squarespace: {\n    name: 'Squarespace',\n    icon: 'squarespace',\n    patterns: ['squarespace.com', 'ext-dns.squarespace.com']\n  }\n};\n\n/**\n * Get all parent domains for a given domain\n * @param domain - Domain to get parents for\n * @returns Array of parent domains from most specific to least specific\n */\nfunction getParentDomains(domain: string): string[] {\n  const parts = domain.split('.');\n  const parents: string[] = [];\n  \n  // Start from the second level (skip the subdomain)\n  for (let i = 1; i < parts.length; i++) {\n    parents.push(parts.slice(i).join('.'));\n  }\n  \n  return parents;\n}\n\n/**\n * Detect domain provider based on nameservers with fallback to parent domains\n * @param domain - Domain to check\n * @returns Promise<DomainProvider | null> - Detected provider or null\n */\nexport async function detectDomainProvider(domain: string): Promise<DomainProvider | null> {\n  // Try the original domain first\n  const result = await tryDetectProvider(domain);\n  if (result && result.detected) {\n    return result;\n  }\n\n  // If no provider found or low confidence, try parent domains\n  const parentDomains = getParentDomains(domain);\n  \n  for (const parentDomain of parentDomains) {\n    try {\n      const parentResult = await tryDetectProvider(parentDomain);\n      if (parentResult && parentResult.detected) {\n        // Found a provider on parent domain, but mark confidence as medium\n        return {\n          ...parentResult,\n          confidence: parentResult.confidence === 'high' ? 'medium' : 'low'\n        };\n      }\n    } catch (error) {\n      // Continue to next parent domain if this one fails\n      continue;\n    }\n  }\n  \n  // If no provider detected on any level, return the original result or generic\n  return result || {\n    name: 'DNS Provider',\n    icon: 'globe',\n    detected: false,\n    confidence: 'low'\n  };\n}\n\n/**\n * Try to detect provider for a specific domain\n * @param domain - Domain to check\n * @returns Promise<DomainProvider | null> - Detected provider or null\n */\nasync function tryDetectProvider(domain: string): Promise<DomainProvider | null> {\n  try {\n    const nameservers = await dns.resolveNs(domain);\n    \n    for (const [key, provider] of Object.entries(PROVIDER_PATTERNS)) {\n      for (const ns of nameservers) {\n        for (const pattern of provider.patterns) {\n          if (ns.toLowerCase().includes(pattern.toLowerCase())) {\n            return {\n              name: provider.name,\n              icon: provider.icon,\n              detected: true,\n              confidence: 'high'\n            };\n          }\n        }\n      }\n    }\n    \n    // If nameservers found but no specific provider detected\n    if (nameservers.length > 0) {\n      return {\n        name: 'Custom DNS Provider',\n        icon: 'globe',\n        detected: false,\n        confidence: 'medium'\n      };\n    }\n    \n    return null;\n  } catch (error) {\n    return null;\n  }\n}\n\n/**\n * Check if a domain can safely receive emails by verifying it does NOT have MX records\n * @param domain - The domain to check\n * @returns Promise<DnsCheckResult> - Result indicating if domain can receive emails\n */\nexport async function checkDomainCanReceiveEmails(domain: string): Promise<DnsCheckResult> {\n  const result: DnsCheckResult = {\n    domain,\n    canReceiveEmails: false,\n    hasMxRecords: false,\n    timestamp: new Date(),\n  };\n\n  // Validate domain format\n  if (!isValidDomain(domain)) {\n    result.error = 'Invalid domain format';\n    return result;\n  }\n\n  // Detect domain provider\n  try {\n    const provider = await detectDomainProvider(domain);\n    if (provider) {\n      result.provider = provider;\n    }\n  } catch (error) {\n    // Provider detection failure is not critical, continue\n  }\n\n  // Check MX records separately\n  let mxRecords: MxRecord[] = [];\n  let mxError: string | null = null;\n  \n  try {\n    mxRecords = await dns.resolveMx(domain);\n    console.log('üèÅ CANDOMAINRECEIVE üèÅ \\n MX Records:', mxRecords);\n  } catch (error) {\n    const dnsError = error as DnsError;\n    if (dnsError.code !== 'ENOTFOUND' && dnsError.code !== 'ENODATA') {\n      mxError = dnsError.message;\n    }\n    // ENOTFOUND/ENODATA for MX is expected for domains without email\n  }\n\n  // Check CNAME records separately\n  let cnameRecords: string[] = [];\n  let cnameError: string | null = null;\n  \n  try {\n    cnameRecords = await dns.resolveCname(domain);\n  } catch (error) {\n    const dnsError = error as DnsError;\n    if (dnsError.code !== 'ENOTFOUND' && dnsError.code !== 'ENODATA') {\n      cnameError = dnsError.message;\n    }\n    // ENOTFOUND/ENODATA for CNAME is normal for most domains\n  }\n\n  // Determine if domain can receive emails\n  const hasMxRecords = mxRecords.length > 0;\n  const hasCnameRecords = cnameRecords.length > 0;\n\n  if (hasMxRecords || hasCnameRecords) {\n    // Domain HAS MX or CNAME records - cannot safely receive emails\n    result.hasMxRecords = hasMxRecords;\n    result.mxRecords = mxRecords;\n    result.canReceiveEmails = false;\n    \n    if (hasMxRecords) {\n      result.error = `Domain has ${mxRecords.length} MX record(s) - email already configured`;\n    } else if (hasCnameRecords) {\n      result.error = `Domain has CNAME record(s) - conflicts with MX records`;\n    }\n  } else {\n    // Domain has no MX or CNAME records - can receive emails\n    result.hasMxRecords = false;\n    result.canReceiveEmails = true;\n    \n    if (mxError || cnameError) {\n      const errors = [mxError, cnameError].filter(Boolean);\n      result.error = `Domain check: ${errors.join(', ')} (safe for email receiving)`;\n    }\n  }\n\n  return result;\n}\n\n/**\n * Batch check multiple domains\n * @param domains - Array of domains to check\n * @returns Promise<DnsCheckResult[]> - Array of results for each domain\n */\nexport async function checkMultipleDomainsCanReceiveEmails(\n  domains: string[]\n): Promise<DnsCheckResult[]> {\n  const promises = domains.map(domain => checkDomainCanReceiveEmails(domain));\n  return Promise.all(promises);\n}\n\n/**\n * Simple domain validation\n * @param domain - Domain to validate\n * @returns boolean - True if domain format is valid\n */\nfunction isValidDomain(domain: string): boolean {\n  const domainRegex = /^[a-zA-Z0-9]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(\\.[a-zA-Z0-9]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;\n  return domainRegex.test(domain) && domain.length <= 253;\n}\n\n/**\n * Get detailed provider information including nameservers\n * @param domain - Domain to check\n * @returns Promise with detailed provider information\n */\nexport async function getDetailedProviderInfo(domain: string): Promise<{\n  domain: string;\n  provider: DomainProvider | null;\n  nameservers: string[];\n  checkedDomains: string[];\n  error?: string;\n}> {\n  const checkedDomains: string[] = [domain];\n  \n  try {\n    // Try original domain first\n    let nameservers: string[] = [];\n    try {\n      nameservers = await dns.resolveNs(domain);\n    } catch (error) {\n      // If original domain fails, try parent domains\n      const parentDomains = getParentDomains(domain);\n      checkedDomains.push(...parentDomains);\n      \n      for (const parentDomain of parentDomains) {\n        try {\n          nameservers = await dns.resolveNs(parentDomain);\n          break; // Use first successful parent domain\n        } catch (parentError) {\n          continue;\n        }\n      }\n    }\n    \n    const provider = await detectDomainProvider(domain);\n    \n    return {\n      domain,\n      provider,\n      nameservers,\n      checkedDomains,\n    };\n  } catch (error) {\n    const dnsError = error as DnsError;\n    return {\n      domain,\n      provider: null,\n      nameservers: [],\n      checkedDomains,\n      error: dnsError.message,\n    };\n  }\n}\n\n/**\n * Get detailed MX record information for a domain (for debugging)\n * @param domain - Domain to check\n * @returns Promise with detailed MX information\n */\nexport async function getDetailedMxInfo(domain: string): Promise<{\n  domain: string;\n  mxRecords: MxRecord[];\n  hasRecords: boolean;\n  error?: string;\n}> {\n  try {\n    const mxRecords = await dns.resolveMx(domain);\n    return {\n      domain,\n      mxRecords,\n      hasRecords: mxRecords.length > 0,\n    };\n  } catch (error) {\n    const dnsError = error as DnsError;\n    return {\n      domain,\n      mxRecords: [],\n      hasRecords: false,\n      error: dnsError.message,\n    };\n  }\n}\n\n/**\n * Verify TXT record exists and matches expected value (from dns-verification.ts)\n */\nexport async function verifyTxtRecord(name: string, expectedValue: string): Promise<DnsRecordCheck> {\n  const result: DnsRecordCheck = {\n    type: 'TXT',\n    name,\n    expectedValue,\n    actualValues: [],\n    isVerified: false,\n  }\n\n  try {\n    console.log(`üîç TXT Verification - Checking TXT records for: ${name}`)\n    console.log(`üéØ TXT Verification - Expected value: ${expectedValue}`)\n    \n    const txtRecords = await dns.resolveTxt(name)\n    console.log(`üìã TXT Verification - Found ${txtRecords.length} TXT records:`, txtRecords)\n    \n    result.actualValues = txtRecords.flat()\n    console.log(`üìä TXT Verification - Flattened values:`, result.actualValues)\n    \n    result.isVerified = result.actualValues.some(value => value === expectedValue)\n    console.log(`‚úÖ TXT Verification - Is verified: ${result.isVerified}`)\n    \n    if (!result.isVerified && result.actualValues.length > 0) {\n      console.log(`‚ùå TXT Verification - Expected \"${expectedValue}\" but found:`, result.actualValues)\n    }\n  } catch (error) {\n    const errorMessage = error instanceof Error ? error.message : 'Unknown DNS error'\n    console.log(`üí• TXT Verification - DNS lookup failed for ${name}:`, errorMessage)\n    \n    // Provide more user-friendly error messages\n    if (errorMessage.includes('ENODATA') || errorMessage.includes('ENOTFOUND')) {\n      result.error = `No TXT records found for ${name}. Please add the TXT record to your DNS.`\n    } else {\n      result.error = errorMessage\n    }\n    \n    result.isVerified = false\n  }\n\n  return result\n}\n\n/**\n * Verify MX record exists and matches expected value (from dns-verification.ts)\n */\nexport async function verifyMxRecord(name: string, expectedValue: string): Promise<DnsRecordCheck> {\n  const result: DnsRecordCheck = {\n    type: 'MX',\n    name,\n    expectedValue,\n    actualValues: [],\n    isVerified: false,\n  }\n\n  try {\n    console.log(`üîç MX Verification - Checking MX records for: ${name}`)\n    console.log(`üéØ MX Verification - Expected value: ${expectedValue}`)\n    \n    const mxRecords = await dns.resolveMx(name)\n    console.log(`üìã MX Verification - Found ${mxRecords.length} MX records:`, mxRecords)\n    \n    result.actualValues = mxRecords.map(record => `${record.priority} ${record.exchange}`)\n    console.log(`üìä MX Verification - Formatted values:`, result.actualValues)\n    \n    result.isVerified = result.actualValues.some(value => value === expectedValue)\n    console.log(`‚úÖ MX Verification - Is verified: ${result.isVerified}`)\n    \n    if (!result.isVerified && result.actualValues.length > 0) {\n      console.log(`‚ùå MX Verification - Expected \"${expectedValue}\" but found:`, result.actualValues)\n    }\n  } catch (error) {\n    const errorMessage = error instanceof Error ? error.message : 'Unknown DNS error'\n    console.log(`üí• MX Verification - DNS lookup failed for ${name}:`, errorMessage)\n    \n    // Provide more user-friendly error messages\n    if (errorMessage.includes('ENODATA') || errorMessage.includes('ENOTFOUND')) {\n      result.error = `No MX records found for ${name}. Please add the MX record to your DNS.`\n    } else {\n      result.error = errorMessage\n    }\n    \n    result.isVerified = false\n  }\n\n  return result\n}\n\n/**\n * Try alternative DNS resolution for TXT records using different resolvers\n */\nasync function tryAlternativeTxtResolution(name: string): Promise<string[][]> {\n  const resolvers = [\n    ['8.8.8.8', '8.8.4.4'], // Google DNS\n    ['1.1.1.1', '1.0.0.1'], // Cloudflare DNS\n    ['208.67.222.222', '208.67.220.220'], // OpenDNS\n  ]\n\n  for (const resolverIPs of resolvers) {\n    try {\n      console.log(`üîÑ TXT Alternative - Trying resolver: ${resolverIPs.join(', ')}`)\n      const resolver = new Resolver()\n      resolver.setServers(resolverIPs)\n      \n      const txtRecords = await new Promise<string[][]>((resolve, reject) => {\n        resolver.resolveTxt(name, (err, records) => {\n          if (err) reject(err)\n          else resolve(records || [])\n        })\n      })\n      \n      if (txtRecords.length > 0) {\n        console.log(`‚úÖ TXT Alternative - Found records with ${resolverIPs[0]}:`, txtRecords)\n        return txtRecords\n      }\n    } catch (error) {\n      console.log(`‚ùå TXT Alternative - Failed with ${resolverIPs[0]}:`, error instanceof Error ? error.message : 'Unknown error')\n      continue\n    }\n  }\n  \n  return []\n}\n\n/**\n * Try alternative DNS resolution using different resolvers (from dns-verification.ts)\n */\nasync function tryAlternativeMxResolution(name: string): Promise<Array<{priority: number, exchange: string}>> {\n  const resolvers = [\n    ['8.8.8.8', '8.8.4.4'], // Google DNS\n    ['1.1.1.1', '1.0.0.1'], // Cloudflare DNS\n    ['208.67.222.222', '208.67.220.220'], // OpenDNS\n  ]\n\n  for (const resolverIPs of resolvers) {\n    try {\n      console.log(`üîÑ MX Alternative - Trying resolver: ${resolverIPs.join(', ')}`)\n      const resolver = new Resolver()\n      resolver.setServers(resolverIPs)\n      \n      const mxRecords = await new Promise<Array<{priority: number, exchange: string}>>((resolve, reject) => {\n        resolver.resolveMx(name, (err, records) => {\n          if (err) reject(err)\n          else resolve(records || [])\n        })\n      })\n      \n      if (mxRecords.length > 0) {\n        console.log(`‚úÖ MX Alternative - Found records with ${resolverIPs[0]}:`, mxRecords)\n        return mxRecords\n      }\n    } catch (error) {\n      console.log(`‚ùå MX Alternative - Failed with ${resolverIPs[0]}:`, error instanceof Error ? error.message : 'Unknown error')\n      continue\n    }\n  }\n  \n  return []\n}\n\n/**\n * Enhanced MX record verification with fallback resolvers (from dns-verification.ts)\n */\nexport async function verifyMxRecordWithFallback(name: string, expectedValue: string): Promise<DnsRecordCheck> {\n  const result: DnsRecordCheck = {\n    type: 'MX',\n    name,\n    expectedValue,\n    actualValues: [],\n    isVerified: false,\n  }\n\n  try {\n    console.log(`üîç MX Verification - Checking MX records for: ${name}`)\n    console.log(`üéØ MX Verification - Expected value: ${expectedValue}`)\n    \n    // Try default DNS first\n    let mxRecords: Array<{priority: number, exchange: string}> = []\n    try {\n      mxRecords = await dns.resolveMx(name)\n      console.log(`üìã MX Verification - Default DNS found ${mxRecords.length} MX records:`, mxRecords)\n    } catch (error) {\n      console.log(`‚ö†Ô∏è MX Verification - Default DNS failed, trying alternative resolvers...`)\n      mxRecords = await tryAlternativeMxResolution(name)\n    }\n    \n    result.actualValues = mxRecords.map(record => `${record.priority} ${record.exchange}`)\n    console.log(`üìä MX Verification - Formatted values:`, result.actualValues)\n    \n    result.isVerified = result.actualValues.some(value => value === expectedValue)\n    console.log(`‚úÖ MX Verification - Is verified: ${result.isVerified}`)\n    \n    if (!result.isVerified && result.actualValues.length > 0) {\n      console.log(`‚ùå MX Verification - Expected \"${expectedValue}\" but found:`, result.actualValues)\n    }\n    \n    if (result.actualValues.length === 0) {\n      result.error = `No MX records found for ${name} using multiple DNS resolvers. Please add the MX record to your DNS.`\n    }\n  } catch (error) {\n    const errorMessage = error instanceof Error ? error.message : 'Unknown DNS error'\n    console.log(`üí• MX Verification - All DNS lookups failed for ${name}:`, errorMessage)\n    result.error = `DNS resolution failed: ${errorMessage}`\n    result.isVerified = false\n  }\n\n  return result\n}\n\n/**\n * Enhanced TXT record verification with fallback resolvers\n */\nexport async function verifyTxtRecordWithFallback(name: string, expectedValue: string): Promise<DnsRecordCheck> {\n  const result: DnsRecordCheck = {\n    type: 'TXT',\n    name,\n    expectedValue,\n    actualValues: [],\n    isVerified: false,\n  }\n\n  try {\n    console.log(`üîç TXT Verification - Checking TXT records for: ${name}`)\n    console.log(`üéØ TXT Verification - Expected value: ${expectedValue}`)\n    \n    // Try default DNS first\n    let txtRecords: string[][] = []\n    try {\n      txtRecords = await dns.resolveTxt(name)\n      console.log(`üìã TXT Verification - Default DNS found ${txtRecords.length} TXT records:`, txtRecords)\n    } catch (error) {\n      console.log(`‚ö†Ô∏è TXT Verification - Default DNS failed, trying alternative resolvers...`)\n      txtRecords = await tryAlternativeTxtResolution(name)\n    }\n    \n    result.actualValues = txtRecords.flat()\n    console.log(`üìä TXT Verification - Flattened values:`, result.actualValues)\n    \n    result.isVerified = result.actualValues.some(value => value === expectedValue)\n    console.log(`‚úÖ TXT Verification - Is verified: ${result.isVerified}`)\n    \n    if (!result.isVerified && result.actualValues.length > 0) {\n      console.log(`‚ùå TXT Verification - Expected \"${expectedValue}\" but found:`, result.actualValues)\n    }\n    \n    if (result.actualValues.length === 0) {\n      result.error = `No TXT records found for ${name} using multiple DNS resolvers. Please add the TXT record to your DNS.`\n    }\n  } catch (error) {\n    const errorMessage = error instanceof Error ? error.message : 'Unknown DNS error'\n    console.log(`üí• TXT Verification - All DNS lookups failed for ${name}:`, errorMessage)\n    result.error = `DNS resolution failed: ${errorMessage}`\n    result.isVerified = false\n  }\n\n  return result\n}\n\n/**\n * Verify multiple DNS records (from dns-verification.ts)\n */\nexport async function verifyDnsRecords(records: Array<{\n  type: string\n  name: string\n  value: string\n}>): Promise<DnsRecordCheck[]> {\n  console.log(`üìã Starting verification of ${records.length} DNS records:`)\n  records.forEach((record, index) => {\n    console.log(`  ${index + 1}. ${record.type} record for ${record.name}`)\n  })\n  \n  const checks = records.map(async (record) => {\n    switch (record.type.toUpperCase()) {\n      case 'TXT':\n        return verifyTxtRecordWithFallback(record.name, record.value)\n      case 'MX':\n        return verifyMxRecordWithFallback(record.name, record.value)\n      default:\n        return {\n          type: record.type,\n          name: record.name,\n          expectedValue: record.value,\n          actualValues: [],\n          isVerified: false,\n          error: `Unsupported record type: ${record.type}`,\n        }\n    }\n  })\n\n  return Promise.all(checks)\n} ","import { NextRequest, NextResponse } from 'next/server'\nimport { getDomainWithRecords, updateDnsRecordVerification, updateDomainStatus } from '@/lib/db/domains'\nimport { verifyDnsRecords } from '@/lib/domains-and-dns/dns'\nimport { auth } from '@/lib/auth/auth'\nimport { headers } from 'next/headers'\n\nexport async function POST(request: NextRequest) {\n  const startTime = Date.now()\n  let domain = 'unknown'\n  \n  try {\n    console.log('üîç DNS Records Check - Starting verification process')\n    \n    // Get user session\n    const session = await auth.api.getSession({\n      headers: await headers()\n    })\n\n    if (!session?.user?.id) {\n      console.log('‚ùå DNS Records Check - Unauthorized access attempt')\n      return NextResponse.json(\n        { error: 'Unauthorized' },\n        { status: 401 }\n      )\n    }\n\n    const requestData = await request.json()\n    domain = requestData.domain\n    const domainId = requestData.domainId\n\n    console.log(`üåê DNS Records Check - Processing domain: ${domain} for user: ${session.user.email}`)\n\n    if (!domain) {\n      console.log('‚ö†Ô∏è DNS Records Check - Missing domain parameter')\n      return NextResponse.json(\n        { error: 'Domain is required' },\n        { status: 400 }\n      )\n    }\n\n    // Get domain record from database\n    console.log(`üìä DNS Records Check - Fetching domain record from database`)\n    const domainRecord = await getDomainWithRecords(domain, session.user.id)\n    if (!domainRecord) {\n      console.log(`‚ùå DNS Records Check - Domain not found: ${domain}`)\n      return NextResponse.json(\n        { error: 'Domain not found' },\n        { status: 404 }\n      )\n    }\n\n    console.log(`üìã DNS Records Check - Found ${domainRecord.dnsRecords.length} DNS records to verify`)\n\n    // Check DNS records\n    const recordsToCheck = domainRecord.dnsRecords.map(r => ({\n      type: r.recordType,\n      name: r.name,\n      value: r.value\n    }))\n\n    console.log(`üîé DNS Records Check - Starting DNS verification for records:`)\n    recordsToCheck.forEach((record, index) => {\n      console.log(`   ${index + 1}. ${record.type} ${record.name} = ${record.value.substring(0, 50)}${record.value.length > 50 ? '...' : ''}`)\n    })\n\n    const dnsChecks = await verifyDnsRecords(recordsToCheck)\n    \n    // Log verification results\n    console.log(`üìä DNS Records Check - Verification results:`)\n    dnsChecks.forEach((check, index) => {\n      const status = check.isVerified ? '‚úÖ' : '‚ùå'\n      console.log(`   ${index + 1}. ${status} ${check.type} ${check.name} - ${check.isVerified ? 'VERIFIED' : 'FAILED'}`)\n      if (!check.isVerified && check.error) {\n        console.log(`      Error: ${check.error}`)\n      }\n      if (check.actualValues && check.actualValues.length > 0) {\n        console.log(`      Found: ${check.actualValues.join(', ')}`)\n      }\n    })\n    \n    // Update database with verification results\n    console.log(`üíæ DNS Records Check - Updating database with verification results`)\n    for (const check of dnsChecks) {\n      await updateDnsRecordVerification(\n        domainRecord.id,\n        check.type,\n        check.name,\n        check.isVerified\n      )\n    }\n\n    // Check if all DNS records are verified\n    const allVerified = dnsChecks.every(check => check.isVerified)\n    const verifiedCount = dnsChecks.filter(check => check.isVerified).length\n    \n    console.log(`üìà DNS Records Check - Verification summary: ${verifiedCount}/${dnsChecks.length} records verified`)\n    \n    // Update domain status if all DNS records are verified\n    if (allVerified && domainRecord.status !== 'ses_verified') {\n      console.log(`üéâ DNS Records Check - All records verified! Updating domain status to 'dns_verified'`)\n      await updateDomainStatus(domainRecord.id, 'dns_verified')\n    } else if (allVerified) {\n      console.log(`‚úÖ DNS Records Check - All records verified (domain already in ses_verified status)`)\n    } else {\n      console.log(`‚è≥ DNS Records Check - Waiting for remaining records to be verified`)\n    }\n\n    const duration = Date.now() - startTime\n    console.log(`üèÅ DNS Records Check - Completed successfully for ${domain} in ${duration}ms`)\n    \n    return NextResponse.json({\n      domain,\n      domainId: domainRecord.id,\n      dnsRecords: dnsChecks.map(check => ({\n        type: check.type,\n        name: check.name,\n        value: check.expectedValue,\n        isVerified: check.isVerified,\n        actualValues: check.actualValues,\n        error: check.error\n      })),\n      allVerified,\n      canProceed: allVerified,\n      timestamp: new Date()\n    })\n  } catch (error) {\n    const duration = Date.now() - startTime\n    console.error(`üí• DNS Records Check - Error for domain ${domain} after ${duration}ms:`, error)\n    console.error(`   Error details:`, {\n      message: error instanceof Error ? error.message : 'Unknown error',\n      stack: error instanceof Error ? error.stack : undefined,\n      domain,\n      timestamp: new Date().toISOString()\n    })\n    \n    return NextResponse.json(\n      { error: 'Failed to check DNS records' },\n      { status: 500 }\n    )\n  }\n} ","import {\n  AppRouteRouteModule,\n  type AppRouteRouteModuleOptions,\n} from '../../server/route-modules/app-route/module.compiled'\nimport { RouteKind } from '../../server/route-kind'\nimport { patchFetch as _patchFetch } from '../../server/lib/patch-fetch'\n\nimport * as userland from 'VAR_USERLAND'\n\n// These are injected by the loader afterwards. This is injected as a variable\n// instead of a replacement because this could also be `undefined` instead of\n// an empty string.\ndeclare const nextConfigOutput: AppRouteRouteModuleOptions['nextConfigOutput']\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\n// INJECT:nextConfigOutput\n\nconst routeModule = new AppRouteRouteModule({\n  definition: {\n    kind: RouteKind.APP_ROUTE,\n    page: 'VAR_DEFINITION_PAGE',\n    pathname: 'VAR_DEFINITION_PATHNAME',\n    filename: 'VAR_DEFINITION_FILENAME',\n    bundlePath: 'VAR_DEFINITION_BUNDLE_PATH',\n  },\n  resolvedPagePath: 'VAR_RESOLVED_PAGE_PATH',\n  nextConfigOutput,\n  userland,\n})\n\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule\n\nfunction patchFetch() {\n  return _patchFetch({\n    workAsyncStorage,\n    workUnitAsyncStorage,\n  })\n}\n\nexport {\n  routeModule,\n  workAsyncStorage,\n  workUnitAsyncStorage,\n  serverHooks,\n  patchFetch,\n}\n"],"names":["AppRouteRouteModule","RouteKind","patchFetch","_patchFetch","userland","routeModule","definition","kind","APP_ROUTE","page","pathname","filename","bundlePath","resolvedPagePath","nextConfigOutput","workAsyncStorage","workUnitAsyncStorage","serverHooks"],"mappings":"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","ignoreList":[3]}