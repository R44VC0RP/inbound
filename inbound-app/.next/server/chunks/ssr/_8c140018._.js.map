{"version":3,"sources":["turbopack:///[project]/components/icons/alarm-clock.tsx","turbopack:///[project]/app/actions/data:08aceb <text/javascript>","turbopack:///[project]/components/mark-all-read-button.tsx","turbopack:///[project]/components/domain-filter-select.tsx","turbopack:///[project]/components/emails/EmailListItem.tsx","turbopack:///[project]/app/(main)/mail/page.tsx"],"sourcesContent":["import React, {SVGProps} from 'react';\n\ntype IconProps = SVGProps<SVGSVGElement> & {\n\tsecondaryfill?: string;\n\tstrokewidth?: number;\n\ttitle?: string;\n}\n\nfunction AlarmClock({fill = 'currentColor', secondaryfill, title = 'badge 13', ...props}: IconProps) {\n\tsecondaryfill = secondaryfill || fill;\n\n\treturn (\n\t\t<svg height=\"18\" width=\"18\" {...props} viewBox=\"0 0 18 18\" xmlns=\"http://www.w3.org/2000/svg\">\n\t<title>{title}</title>\n\t<g fill={fill}>\n\t\t<path d=\"M16.5,4.25c-.192,0-.384-.073-.53-.22l-2-2c-.293-.293-.293-.768,0-1.061s.768-.293,1.061,0l2,2c.293,.293,.293,.768,0,1.061-.146,.146-.338,.22-.53,.22Z\" fill={secondaryfill}/>\n\t\t<path d=\"M1.5,4.25c-.192,0-.384-.073-.53-.22-.293-.293-.293-.768,0-1.061L2.97,.97c.293-.293,.768-.293,1.061,0s.293,.768,0,1.061l-2,2c-.146,.146-.338,.22-.53,.22Z\" fill={secondaryfill}/>\n\t\t<path d=\"M14.447,13.386c.969-1.201,1.553-2.726,1.553-4.386,0-3.86-3.14-7-7-7S2,5.14,2,9c0,1.66,.584,3.185,1.553,4.386l-1.333,1.333c-.293,.293-.293,.768,0,1.061,.146,.146,.338,.22,.53,.22s.384-.073,.53-.22l1.333-1.333c1.201,.969,2.726,1.553,4.387,1.553s3.185-.583,4.387-1.553l1.333,1.333c.146,.146,.338,.22,.53,.22s.384-.073,.53-.22c.293-.293,.293-.768,0-1.061l-1.333-1.333Zm-2.064-2.234c-.143,.225-.386,.347-.633,.347-.138,0-.277-.038-.402-.117l-2.75-1.75c-.216-.138-.347-.376-.347-.633v-3.25c0-.414,.336-.75,.75-.75s.75,.336,.75,.75v2.838l2.403,1.529c.349,.223,.452,.686,.23,1.036Z\" fill={fill}/>\n\t</g>\n</svg>\n\t);\n};\n\nexport default AlarmClock;","/* __next_internal_action_entry_do_not_use__ [{\"00b110dd3c06704b76c3b03d988a4765d56aaab563\":\"markAllEmailsAsRead\"},\"app/actions/primary.ts\",\"\"] */\"use turbopack no side effects\";import{createServerReference,callServer,findSourceMapURL}from\"private-next-rsc-action-client-wrapper\";export var markAllEmailsAsRead=/*#__PURE__*/createServerReference(\"00b110dd3c06704b76c3b03d988a4765d56aaab563\",callServer,void 0,findSourceMapURL,\"markAllEmailsAsRead\");","\"use client\"\n\nimport { useState } from 'react'\nimport { Button } from '@/components/ui/button'\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog'\nimport CircleCheck from '@/components/icons/circle-check'\nimport CircleWarning2 from '@/components/icons/circle-warning-2'\nimport { markAllEmailsAsRead } from '@/app/actions/primary'\nimport { useRouter } from 'next/navigation'\n\ninterface MarkAllReadButtonProps {\n    unreadCount: number\n}\n\nexport function MarkAllReadButton({ unreadCount }: MarkAllReadButtonProps) {\n    const [isOpen, setIsOpen] = useState(false)\n    const [isLoading, setIsLoading] = useState(false)\n    const router = useRouter()\n\n    const handleMarkAllAsRead = async () => {\n        try {\n            setIsLoading(true)\n            const result = await markAllEmailsAsRead()\n            \n            if (result.error) {\n                console.error('Failed to mark all as read:', result.error)\n                return\n            }\n\n            console.log(result.message)\n            setIsOpen(false)\n            \n            // Refresh the page to show updated read status\n            router.refresh()\n        } catch (error) {\n            console.error('Error marking all emails as read:', error)\n        } finally {\n            setIsLoading(false)\n        }\n    }\n\n    if (unreadCount === 0) {\n        return null // Don't show button if no unread emails\n    }\n\n    return (\n        <Dialog open={isOpen} onOpenChange={setIsOpen}>\n            <DialogTrigger asChild>\n                <Button variant=\"primary\" size=\"sm\" >\n                    <CircleCheck className=\"h-4 w-4 mr-2\" />\n                    Mark All as Read\n                </Button>\n            </DialogTrigger>\n            <DialogContent className=\"sm:max-w-md\">\n                <DialogHeader>\n                    <DialogTitle className=\"flex items-center gap-2\">\n                        <CircleWarning2 className=\"h-5 w-5 text-amber-500\" />\n                        Mark All Emails as Read?\n                    </DialogTitle>\n                    <DialogDescription>\n                        This will mark all {unreadCount} unread email{unreadCount === 1 ? '' : 's'} as read. \n                        This action cannot be undone.\n                    </DialogDescription>\n                </DialogHeader>\n                <DialogFooter className=\"flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\">\n                    <Button \n                        variant=\"secondary\" \n                        onClick={() => setIsOpen(false)}\n                        disabled={isLoading}\n                    >\n                        Cancel\n                    </Button>\n                    <Button \n                        onClick={handleMarkAllAsRead}\n                        disabled={isLoading}\n                        className=\"bg-blue-600 hover:bg-blue-700 text-white\"\n                    >\n                        {isLoading ? (\n                            <>\n                                <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                                Marking as Read...\n                            </>\n                        ) : (\n                            <>\n                                <CircleCheck className=\"h-4 w-4 mr-2\" />\n                                Mark All as Read\n                            </>\n                        )}\n                    </Button>\n                </DialogFooter>\n            </DialogContent>\n        </Dialog>\n    )\n} ","\"use client\"\n\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'\nimport { useRouter, useSearchParams } from 'next/navigation'\n\ninterface DomainFilterSelectProps {\n  domains: string[]\n  currentDomain: string\n}\n\nexport function DomainFilterSelect({ domains, currentDomain }: DomainFilterSelectProps) {\n  const router = useRouter()\n  const searchParams = useSearchParams()\n\n  const handleDomainChange = (value: string) => {\n    const params = new URLSearchParams(searchParams.toString())\n    \n    if (value === 'all') {\n      params.delete('domain')\n    } else {\n      params.set('domain', value)\n    }\n    \n    // Reset offset when filtering\n    params.delete('offset')\n    \n    router.push(`/mail?${params.toString()}`)\n  }\n\n  return (\n    <Select value={currentDomain} onValueChange={handleDomainChange}>\n      <SelectTrigger className=\"w-40 h-9 rounded-xl\">\n        <SelectValue placeholder=\"All Domains\" />\n      </SelectTrigger>\n      <SelectContent className=\"rounded-xl\">\n        <SelectItem value=\"all\">All Domains</SelectItem>\n        {domains.map((domain) => (\n          <SelectItem key={domain} value={domain}>\n            {domain}\n          </SelectItem>\n        ))}\n      </SelectContent>\n    </Select>\n  )\n} ","'use client'\n\nimport Link from 'next/link'\nimport { formatDistanceToNow } from 'date-fns'\nimport File2 from '@/components/icons/file-2'\nimport { Checkbox } from '@/components/ui/checkbox'\nimport { useUpdateEmailMutation } from '@/features/emails/hooks'\n\ninterface EmailListItemProps {\n  email: {\n    id: string\n    from: string\n    subject: string\n    receivedAt: string | undefined\n    isRead: boolean\n    parsedData: {\n      fromData: any\n      preview: string\n      hasAttachments: boolean\n      htmlContent?: string | null\n      textContent?: string | null\n    }\n  }\n  isSelectMode?: boolean\n  isSelected?: boolean\n  onSelect?: (emailId: string, checked: boolean) => void\n  threadCount?: number\n}\n\nexport function EmailListItem({ email, isSelectMode = false, isSelected = false, onSelect, threadCount }: EmailListItemProps) {\n  const updateEmailMutation = useUpdateEmailMutation()\n\n  // Get sender name\n  const senderName = email.parsedData.fromData?.addresses?.[0]?.name ||\n    email.from.split('@')[0] ||\n    email.from.split('<')[0] ||\n    email.from\n\n  const preview = email.parsedData.preview || 'No preview available'\n\n  const handleCheckboxChange = (checked: boolean | 'indeterminate') => {\n    if (onSelect) {\n      onSelect(email.id, checked === true)\n    }\n  }\n\n  const handleEmailClick = () => {\n    // Optimistically mark as read when clicking on the email\n    if (!email.isRead) {\n      updateEmailMutation.mutate({\n        emailId: email.id,\n        updates: { isRead: true }\n      })\n    }\n  }\n\n  const content = (\n    <div className=\"flex items-center gap-4 relative\">\n      {/* Selection checkbox */}\n      {isSelectMode && (\n        <div className=\"flex-shrink-0\" onClick={(e) => e.stopPropagation()}>\n          <Checkbox\n            checked={isSelected}\n            onCheckedChange={handleCheckboxChange}\n          />\n        </div>\n      )}\n      \n      {/* Name Column */}\n      <div className=\"w-40 flex-shrink-0\">\n          <div className=\"flex items-center gap-2\">\n            <span className={`font-medium truncate text-foreground text-sm ${!email.isRead ? 'font-semibold' : ''}`}>\n              {senderName}\n            </span>\n            {!email.isRead && (\n              <div className=\"w-2 h-2 bg-primary rounded-full flex-shrink-0\"></div>\n            )}\n          </div>\n        </div>\n        \n        {/* Subject + Preview (flowing) */}\n        <div className=\"flex-1 min-w-0\">\n          <div className=\"flex items-center gap-3 text-sm\">\n            <div className=\"flex items-center gap-2 flex-shrink-0\">\n              <span className={`font-medium text-foreground ${!email.isRead ? 'font-semibold' : ''}`}>\n                {email.subject}\n              </span>\n              {threadCount && threadCount > 1 && (\n                <span className=\"bg-muted-foreground/20 text-muted-foreground text-xs px-1.5 py-0.5 rounded-md font-medium\">\n                  {threadCount}\n                </span>\n              )}\n            </div>\n            <span className=\"text-muted-foreground/80 truncate\">\n              — {preview}\n            </span>\n            {email.parsedData.hasAttachments && (\n              <File2 width=\"14\" height=\"14\" className=\"text-muted-foreground flex-shrink-0\" />\n            )}\n          </div>\n        </div>\n        \n        {/* Time Column */}\n        <div className=\"w-24 flex-shrink-0 text-right\">\n          <span className=\"text-xs text-muted-foreground whitespace-nowrap\">\n            {formatDistanceToNow(new Date(email.receivedAt || new Date()), { addSuffix: true })}\n          </span>\n        </div>\n      </div>\n    )\n\n  if (isSelectMode) {\n    return (\n      <div\n        className={`block w-full px-6 py-3 hover:bg-accent/50 transition-colors duration-200 group cursor-pointer \n        } ${isSelected ? 'bg-accent/30' : ''}`}\n        onClick={() => handleCheckboxChange(!isSelected)}\n      >\n        {content}\n      </div>\n    )\n  }\n\n  return (\n    <Link\n      href={`/mail/${email.id}`}\n      className={`block w-full px-6 py-3 hover:bg-accent/50 transition-colors duration-200 group ${\n        !email.isRead ? 'bg-primary/5 border-l-4 border-l-primary' : ''\n      }`}\n      onClick={handleEmailClick}\n    >\n      {content}\n    </Link>\n  )\n} ","\"use client\"\n\nimport { useState, useEffect } from 'react'\nimport { useSearchParams, useRouter } from 'next/navigation'\nimport { Card, CardContent } from '@/components/ui/card'\nimport { Badge } from '@/components/ui/badge'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { Checkbox } from '@/components/ui/checkbox'\nimport { useMailV2Query, useUpdateEmailMutation, useBulkUpdateEmailsMutation, useEmailThreadCountsV2Query } from '@/features/emails/hooks'\nimport type { EmailItem } from '@/app/api/v2/mail/route'\nimport Link from 'next/link'\nimport Check2 from '@/components/icons/check-2'\nimport AlarmClock from '@/components/icons/alarm-clock'\nimport Magnifier2 from '@/components/icons/magnifier-2'\nimport ArrowUpRight2 from '@/components/icons/arrow-up-right-2'\nimport CircleWarning2 from '@/components/icons/circle-warning-2'\nimport { CustomInboundIcon } from '@/components/icons/customInbound'\nimport { MarkAllReadButton } from '@/components/mark-all-read-button'\nimport { DomainFilterSelect } from '@/components/domain-filter-select'\nimport { EmailListItem } from '@/components/emails/EmailListItem'\n\nexport default function MailPage() {\n    const searchParams = useSearchParams()\n    const router = useRouter()\n\n    // Get search params with defaults\n    const searchQuery = searchParams.get('search') || ''\n    const statusFilter = searchParams.get('status') || 'all'\n    const domainFilter = searchParams.get('domain') || 'all'\n    const limit = parseInt(searchParams.get('limit') || '50')\n    const offset = parseInt(searchParams.get('offset') || '0')\n\n    // Selection state for bulk operations\n    const [selectedEmails, setSelectedEmails] = useState<string[]>([])\n    const [isSelectMode, setIsSelectMode] = useState(false)\n\n    // Fetch emails using v2 API with 5-second refresh\n    const {\n        data: emailsResult,\n        isLoading,\n        error,\n        refetch\n    } = useMailV2Query({\n        limit,\n        offset,\n        search: searchQuery,\n        status: statusFilter === 'all' ? undefined : (statusFilter as 'all' | 'processed' | 'failed'),\n        domain: domainFilter === 'all' ? undefined : domainFilter\n    })\n\n    // Mutations for bulk operations\n    const updateEmailMutation = useUpdateEmailMutation()\n    const bulkUpdateMutation = useBulkUpdateEmailsMutation()\n\n    // Get thread counts for all emails in current page\n    const emailIds = emailsResult?.emails?.map(email => email.id) || []\n    const {\n        data: threadCountsResult\n    } = useEmailThreadCountsV2Query(emailIds)\n\n    // Set up 5-second auto-refresh\n    useEffect(() => {\n        const interval = setInterval(() => {\n            refetch()\n        }, 5000) // 5 seconds\n\n        return () => clearInterval(interval)\n    }, [refetch])\n\n    // Selection handlers\n    const handleSelectEmail = (emailId: string, checked: boolean) => {\n        if (checked) {\n            setSelectedEmails(prev => [...prev, emailId])\n        } else {\n            setSelectedEmails(prev => prev.filter(id => id !== emailId))\n        }\n    }\n\n    const handleSelectAll = (checked: boolean) => {\n        if (checked && emailsResult?.emails) {\n            setSelectedEmails(emailsResult.emails.map(email => email.id))\n        } else {\n            setSelectedEmails([])\n        }\n    }\n\n    // Bulk action handlers\n    const handleBulkArchive = async () => {\n        if (selectedEmails.length === 0) return\n        \n        try {\n            await bulkUpdateMutation.mutateAsync({\n                emailIds: selectedEmails,\n                updates: { isArchived: true }\n            })\n            setSelectedEmails([])\n            setIsSelectMode(false)\n        } catch (error) {\n            console.error('Failed to archive emails:', error)\n        }\n    }\n\n    const handleBulkMarkAsRead = async () => {\n        if (selectedEmails.length === 0) return\n        \n        try {\n            await bulkUpdateMutation.mutateAsync({\n                emailIds: selectedEmails,\n                updates: { isRead: true }\n            })\n            setSelectedEmails([])\n        } catch (error) {\n            console.error('Failed to mark emails as read:', error)\n        }\n    }\n\n    // Clear selection when not in select mode\n    useEffect(() => {\n        if (!isSelectMode) {\n            setSelectedEmails([])\n        }\n    }, [isSelectMode])\n\n    if (error) {\n        return (\n            <div className=\"min-h-screen p-4 font-outfit\">\n                <div className=\"max-w-5xl mx-auto\">\n                    <Card className=\"border-destructive/50 bg-destructive/10\">\n                        <CardContent className=\"p-6\">\n                            <div className=\"flex items-center gap-2 text-destructive\">\n                                <CircleWarning2 width=\"16\" height=\"16\" />\n                                <span>{error.message}</span>\n                            </div>\n                        </CardContent>\n                    </Card>\n                </div>\n            </div>\n        )\n    }\n\n    if (isLoading) {\n        return (\n            <div className=\"min-h-screen p-4 font-outfit\">\n                <div className=\"max-w-5xl mx-auto\">\n                    <div className=\"flex items-center justify-center py-12\">\n                        <div className=\"text-muted-foreground\">Loading emails...</div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    if (!emailsResult) {\n        return (\n            <div className=\"min-h-screen p-4 font-outfit\">\n                <div className=\"max-w-5xl mx-auto\">\n                    <div className=\"flex items-center justify-center py-12\">\n                        <div className=\"text-muted-foreground\">No emails found</div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    const { emails, pagination, filters = { uniqueDomains: [] } } = emailsResult\n    const unreadCount = emails.filter(email => !email.isRead).length\n\n    // Function to get thread count for a specific email\n    const getThreadCountForEmail = (emailId: string): number | undefined => {\n        if (!threadCountsResult?.success) return undefined\n        const threadData = threadCountsResult.data.find(t => t.emailId === emailId)\n        return threadData?.threadCount\n    }\n\n    // Adapter function to convert v2 EmailItem to EmailListItem format\n    const adaptEmailForListItem = (email: EmailItem) => ({\n        id: email.id,\n        from: email.from,\n        subject: email.subject || 'No Subject',\n        receivedAt: email.receivedAt.toString(),\n        isRead: email.isRead,\n        parsedData: {\n            fromData: {\n                addresses: [{\n                    name: email.fromName,\n                    address: email.from\n                }]\n            },\n            preview: email.preview,\n            hasAttachments: email.hasAttachments,\n            htmlContent: null,\n            textContent: null\n        }\n    })\n\n    const getStatusBadge = (status: string) => {\n        switch (status) {\n            case 'received':\n                return (\n                    <Badge className=\"bg-emerald-100 text-emerald-800 border-emerald-200 rounded-full px-2.5 py-0.5 text-xs font-medium\">\n                        <Check2 width=\"12\" height=\"12\" className=\"mr-1\" />\n                        Received\n                    </Badge>\n                )\n            case 'processing':\n                return (\n                    <Badge className=\"bg-amber-100 text-amber-800 border-amber-200 rounded-full px-2.5 py-0.5 text-xs font-medium\">\n                        <AlarmClock width=\"12\" height=\"12\" className=\"mr-1\" />\n                        Processing\n                    </Badge>\n                )\n            case 'forwarded':\n                return (\n                    <Badge className=\"bg-blue-100 text-blue-800 border-blue-200 rounded-full px-2.5 py-0.5 text-xs font-medium\">\n                        <ArrowUpRight2 width=\"12\" height=\"12\" className=\"mr-1\" />\n                        Forwarded\n                    </Badge>\n                )\n            case 'failed':\n                return (\n                    <Badge className=\"bg-rose-100 text-rose-800 border-rose-200 rounded-full px-2.5 py-0.5 text-xs font-medium\">\n                        <CircleWarning2 width=\"12\" height=\"12\" className=\"mr-1\" />\n                        Failed\n                    </Badge>\n                )\n            default:\n                return (\n                    <Badge className=\"bg-secondary text-secondary-foreground border-border rounded-full px-2.5 py-0.5 text-xs font-medium\">\n                        <AlarmClock width=\"12\" height=\"12\" className=\"mr-1\" />\n                        {status}\n                    </Badge>\n                )\n        }\n    }\n\n    return (\n        <div className=\"min-h-screen font-outfit\">\n            <div className=\"max-w-6xl mx-auto p-4\">\n                {/* Header Section */}\n                <div className=\"mb-6\">\n                    <div className=\"flex items-center justify-between\">\n                        <div>\n                            <h2 className=\"text-2xl font-semibold text-foreground mb-1 tracking-tight\">\n                                Mail ({unreadCount} unread)\n                            </h2>\n                            <p className=\"text-muted-foreground text-sm font-medium\">Search and filter your received emails</p>\n                        </div>\n                        <div className=\"flex items-center gap-2\">\n                            {isSelectMode ? (\n                                <>\n                                    <Button\n                                        variant=\"outline\"\n                                        size=\"sm\"\n                                        onClick={() => setIsSelectMode(false)}\n                                    >\n                                        Cancel\n                                    </Button>\n                                    <Button\n                                        variant=\"outline\"\n                                        size=\"sm\"\n                                        onClick={handleBulkMarkAsRead}\n                                        disabled={selectedEmails.length === 0 || bulkUpdateMutation.isPending}\n                                    >\n                                        Mark Read ({selectedEmails.length})\n                                    </Button>\n                                    <Button\n                                        variant=\"outline\"\n                                        size=\"sm\"\n                                        onClick={handleBulkArchive}\n                                        disabled={selectedEmails.length === 0 || bulkUpdateMutation.isPending}\n                                        className=\"text-destructive hover:text-destructive\"\n                                    >\n                                        Archive ({selectedEmails.length})\n                                    </Button>\n                                </>\n                            ) : (\n                                <>\n                                    <Button\n                                        variant=\"outline\"\n                                        size=\"sm\"\n                                        onClick={() => setIsSelectMode(true)}\n                                        disabled={!emailsResult?.emails || emailsResult.emails.length === 0}\n                                    >\n                                        Select\n                                    </Button>\n                                    <MarkAllReadButton unreadCount={unreadCount} />\n                                </>\n                            )}\n                        </div>\n                    </div>\n                </div>\n\n                {/* Search and Filters Form */}\n                <div className=\"mb-6\">\n                    <div className=\"flex items-center gap-3\">\n                        {isSelectMode && (\n                            <div className=\"flex items-center gap-2\">\n                                <Checkbox\n                                    checked={emailsResult?.emails ? selectedEmails.length === emailsResult.emails.length && emailsResult.emails.length > 0 : false}\n                                    onCheckedChange={(checked) => handleSelectAll(checked === true)}\n                                />\n                                <span className=\"text-sm text-muted-foreground\">Select All</span>\n                            </div>\n                        )}\n                        <form method=\"GET\" className=\"relative flex-1\">\n                            <Magnifier2 width=\"16\" height=\"16\" className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground\" />\n                            <Input\n                                name=\"search\"\n                                placeholder=\"Search emails...\"\n                                defaultValue={searchQuery}\n                                className=\"pl-10 h-9 rounded-xl\"\n                            />\n                            {/* Hidden inputs to preserve other filter states */}\n                            {domainFilter !== 'all' && (\n                                <input type=\"hidden\" name=\"domain\" value={domainFilter} />\n                            )}\n                            <Button type=\"submit\" className=\"absolute right-2 top-1/2 transform -translate-y-1/2 h-6 px-2\">\n                                <Magnifier2 width=\"12\" height=\"12\" />\n                            </Button>\n                        </form>\n\n                        <DomainFilterSelect\n                            domains={filters.uniqueDomains}\n                            currentDomain={domainFilter}\n                        />\n                    </div>\n                </div>\n            </div>\n\n            {/* Email List - Edge to Edge */}\n            <div className=\"w-full max-w-6xl mx-auto\">\n                {emails.length === 0 ? (\n                    <div className=\"max-w-5xl mx-auto p-4\">\n                        <div className=\"bg-card border-border rounded-xl p-8\">\n                            <div className=\"text-center\">\n                                <CustomInboundIcon\n                                    text=\"EM\"\n                                    size={48}\n                                    backgroundColor=\"#8b5cf6\"\n                                    className=\"mx-auto mb-4\"\n                                />\n                                <h3 className=\"text-lg font-semibold mb-2 text-foreground\">No emails found</h3>\n                                <p className=\"text-sm text-muted-foreground mb-4\">\n                                    {searchQuery || statusFilter !== 'all' || domainFilter !== 'all'\n                                        ? 'No emails match your search criteria.'\n                                        : 'Hey! Looks like you don\\'t have any emails yet.'}\n                                </p>\n                                {!(searchQuery || statusFilter !== 'all' || domainFilter !== 'all') && (\n                                    <div className=\"space-y-3\">\n                                        <p className=\"text-sm text-muted-foreground\">\n                                            Ready to start receiving emails? Let's get you set up!\n                                        </p>\n                                        <Button asChild>\n                                            <Link href=\"/onboarding\">\n                                                Start Onboarding\n                                            </Link>\n                                        </Button>\n                                    </div>\n                                )}\n                            </div>\n                        </div>\n                    </div>\n                ) : (\n                    <div className=\"divide-y divide-border\">\n                        {emails.map((email) => (\n                            <EmailListItem \n                                key={email.id} \n                                email={adaptEmailForListItem(email)}\n                                isSelectMode={isSelectMode}\n                                isSelected={selectedEmails.includes(email.id)}\n                                onSelect={handleSelectEmail}\n                                threadCount={getThreadCountForEmail(email.id)}\n                            />\n                        ))}\n                    </div>\n                )}\n\n                {/* Pagination */}\n                {pagination.total > pagination.limit && (\n                    <div className=\"max-w-5xl mx-auto p-4\">\n                        <div className=\"bg-card border-border rounded-xl p-4\">\n                            <div className=\"flex items-center justify-between\">\n                                <div className=\"text-sm text-muted-foreground font-medium\">\n                                    Showing {pagination.offset + 1} to {Math.min(pagination.offset + pagination.limit, pagination.total)} of {pagination.total} emails\n                                </div>\n                                <div className=\"flex items-center gap-2\">\n                                    {pagination.offset > 0 && (\n                                        <Link\n                                            href={{\n                                                pathname: '/mail',\n                                                query: {\n                                                    ...(searchQuery && { search: searchQuery }),\n                                                    ...(statusFilter !== 'all' && { status: statusFilter }),\n                                                    ...(domainFilter !== 'all' && { domain: domainFilter }),\n                                                    offset: Math.max(0, pagination.offset - pagination.limit).toString()\n                                                }\n                                            }}\n                                        >\n                                            <Button variant=\"secondary\" size=\"sm\" className=\"rounded-xl\">\n                                                Previous\n                                            </Button>\n                                        </Link>\n                                    )}\n                                    {pagination.hasMore && (\n                                        <Link\n                                            href={{\n                                                pathname: '/mail',\n                                                query: {\n                                                    ...(searchQuery && { search: searchQuery }),\n                                                    ...(statusFilter !== 'all' && { status: statusFilter }),\n                                                    ...(domainFilter !== 'all' && { domain: domainFilter }),\n                                                    offset: (pagination.offset + pagination.limit).toString()\n                                                }\n                                            }}\n                                        >\n                                            <Button variant=\"secondary\" size=\"sm\" className=\"rounded-xl\">\n                                                Next\n                                            </Button>\n                                        </Link>\n                                    )}\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                )}\n            </div>\n        </div>\n    )\n} "],"names":[],"mappings":"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"}