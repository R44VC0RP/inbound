{"version":3,"sources":["turbopack:///[project]/components/icons/badge-check-2.tsx","turbopack:///[project]/components/icons/external-link-2.tsx","turbopack:///[project]/components/ResendIcon.tsx","turbopack:///[project]/node_modules/next/src/shared/lib/image-external.tsx","turbopack:///[project]/node_modules/next/image.js","turbopack:///[project]/components/add-domain-form.tsx"],"sourcesContent":["import React, {SVGProps} from 'react';\n\ntype IconProps = SVGProps<SVGSVGElement> & {\n\tsecondaryfill?: string;\n\tstrokewidth?: number;\n\ttitle?: string;\n}\n\nfunction BadgeCheck2({fill = 'currentColor', secondaryfill, title = 'badge 13', ...props}: IconProps) {\n\tsecondaryfill = secondaryfill || fill;\n\n\treturn (\n\t\t<svg height=\"18\" width=\"18\" {...props} viewBox=\"0 0 18 18\" xmlns=\"http://www.w3.org/2000/svg\">\n\t<title>{title}</title>\n\t<g fill={fill}>\n\t\t<path d=\"M16.249,7.763s0,0,0,0l-1.248-1.248v-1.765c0-.965-.785-1.75-1.75-1.75h-1.765l-1.249-1.249c-.681-.68-1.791-.681-2.474,0l-1.248,1.248h-1.765c-.965,0-1.75,.785-1.75,1.75v1.765l-1.249,1.249c-.681,.682-.681,1.792,0,2.474l1.248,1.248v1.765c0,.965,.785,1.75,1.75,1.75h1.765l1.249,1.249c.341,.34,.789,.511,1.237,.511s.896-.17,1.237-.511l1.248-1.248h1.765c.965,0,1.75-.785,1.75-1.75v-1.765l1.249-1.249c.681-.682,.681-1.792,0-2.474Zm-3.784-.8l-3.923,5c-.136,.174-.343,.279-.564,.287-.009,0-.017,0-.026,0-.212,0-.414-.089-.557-.247l-1.827-2.023c-.277-.308-.253-.782,.054-1.06,.307-.277,.782-.253,1.06,.054l1.23,1.362,3.374-4.299c.256-.326,.727-.383,1.053-.127,.326,.255,.383,.727,.127,1.053Z\" fill={fill}/>\n\t</g>\n</svg>\n\t);\n};\n\nexport default BadgeCheck2;","import React, {SVGProps} from 'react';\n\ntype IconProps = SVGProps<SVGSVGElement> & {\n\tsecondaryfill?: string;\n\tstrokewidth?: number;\n\ttitle?: string;\n}\n\nfunction ExternalLink2({fill = 'currentColor', secondaryfill, title = 'badge 13', ...props}: IconProps) {\n\tsecondaryfill = secondaryfill || fill;\n\n\treturn (\n\t\t<svg height=\"12\" width=\"12\" {...props} viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n\t<title>{title}</title>\n\t<g fill={fill}>\n\t\t<path d=\"m8.75,0h-4c-1.517,0-2.75,1.233-2.75,2.75v4.5c0,.485.137.935.358,1.331l4.081-4.081h-1.439c-.414,0-.75-.336-.75-.75s.336-.75.75-.75h3.25c.414,0,.75.336.75.75v3.25c0,.414-.336.75-.75.75s-.75-.336-.75-.75v-1.439l-4.081,4.081c.396.221.846.358,1.331.358h4c1.517,0,2.75-1.233,2.75-2.75V2.75c0-1.517-1.233-2.75-2.75-2.75Z\" fill={fill} strokeWidth=\"0\"/>\n\t\t<path d=\"m2.358,8.581L.22,10.72c-.293.293-.293.768,0,1.061.146.146.338.22.53.22s.384-.073.53-.22l2.139-2.139c-.446-.249-.811-.615-1.061-1.061Z\" fill={secondaryfill} strokeWidth=\"0\"/>\n\t</g>\n</svg>\n\t);\n};\n\nexport default ExternalLink2;","import * as React from \"react\";\n\ninterface ResendIconProps extends React.SVGProps<SVGSVGElement> {\n    variant?: \"white\" | \"black\";\n}\n\nconst ResendIcon = ({ variant = \"black\", className, ...props }: ResendIconProps) => (\n    <svg width=\"1500\" height=\"489\" viewBox=\"0 0 1500 489\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" className={className} {...props}>\n        <path d=\"M25.4092 393.747V97.3065H146.103C211.32 97.3065 254.939 135.844 254.939 195.979C254.939 234.093 235.035 264.584 204.121 279.406L262.562 393.747H192.263L142.292 294.228H88.9323V393.747H25.4092ZM141.021 150.242H88.9323V241.292H141.021C171.089 241.292 190.146 223.506 190.146 195.979C190.146 168.029 171.089 150.242 141.021 150.242ZM388.86 396.288C316.444 396.288 272.825 352.669 272.825 285.335C272.825 217.577 317.291 173.534 384.625 173.534C449.842 173.534 493.885 214.189 494.732 278.135C494.732 284.488 494.308 291.687 493.038 298.463H335.077V301.427C336.348 332.342 356.252 350.975 386.319 350.975C410.458 350.975 427.398 340.388 432.479 320.061H491.344C484.568 362.409 446.878 396.288 388.86 396.288ZM336.348 259.502H434.597C430.362 232.822 412.152 218 385.049 218C359.216 218 339.736 233.669 336.348 259.502ZM515.546 321.331H572.293C574.41 340.388 590.926 353.516 620.147 353.516C645.133 353.516 660.378 345.47 660.378 330.224C660.378 312.438 645.556 311.167 610.407 306.509C559.588 300.58 520.204 289.146 520.204 244.256C520.204 201.061 557.894 172.687 613.795 173.111C672.236 173.111 712.467 198.943 715.431 243.409H658.261C656.567 226.046 640.051 215.459 615.912 215.459C592.62 215.459 577.375 223.929 577.375 237.904C577.375 254.42 596.008 256.114 627.346 259.925C677.318 265.007 718.819 276.441 718.819 325.566C718.819 368.762 678.165 396.288 619.723 396.288C559.165 396.288 518.087 367.915 515.546 321.331ZM857.839 396.288C785.423 396.288 741.803 352.669 741.803 285.335C741.803 217.577 786.27 173.534 853.604 173.534C918.821 173.534 962.864 214.189 963.711 278.135C963.711 284.488 963.287 291.687 962.017 298.463H804.056V301.427C805.326 332.342 825.23 350.975 855.298 350.975C879.437 350.975 896.376 340.388 901.458 320.061H960.323C953.547 362.409 915.857 396.288 857.839 396.288ZM805.326 259.502H903.575C899.341 232.822 881.131 218 854.027 218C828.195 218 808.714 233.669 805.326 259.502ZM1121.27 173.534C1168.28 173.534 1208.51 198.52 1208.51 273.054V393.747H1148.8V278.982C1148.8 242.139 1134.82 222.659 1104.75 222.659C1073.84 222.659 1056.05 244.68 1056.05 282.37V393.747H996.342V176.075H1048.43L1053.94 203.178C1067.91 186.239 1087.82 173.534 1121.27 173.534ZM1403.27 203.178V97.3065H1462.98V393.747H1410.89L1404.96 363.68C1390.56 382.313 1369.39 396.288 1338.05 396.288C1279.61 396.288 1236.84 353.516 1236.84 284.488C1236.84 217.153 1279.61 173.534 1337.63 173.534C1367.69 173.534 1389.29 185.392 1403.27 203.178ZM1351.18 347.587C1383.79 347.587 1404.11 322.178 1404.11 285.335C1404.11 248.068 1383.79 222.235 1351.18 222.235C1318.57 222.235 1297.82 247.644 1297.82 284.911C1297.82 322.178 1318.57 347.587 1351.18 347.587Z\" fill={variant} />\n    </svg>\n);\n\nexport default ResendIcon;\n","import type { ImageConfigComplete, ImageLoaderProps } from './image-config'\nimport type { ImageProps, ImageLoader, StaticImageData } from './get-img-props'\n\nimport { getImgProps } from './get-img-props'\nimport { Image } from '../../client/image-component'\n\n// @ts-ignore - This is replaced by webpack alias\nimport defaultLoader from 'next/dist/shared/lib/image-loader'\n\n/**\n * For more advanced use cases, you can call `getImageProps()`\n * to get the props that would be passed to the underlying `<img>` element,\n * and instead pass to them to another component, style, canvas, etc.\n *\n * Read more: [Next.js docs: `getImageProps`](https://nextjs.org/docs/app/api-reference/components/image#getimageprops)\n */\nexport function getImageProps(imgProps: ImageProps) {\n  const { props } = getImgProps(imgProps, {\n    defaultLoader,\n    // This is replaced by webpack define plugin\n    imgConf: process.env.__NEXT_IMAGE_OPTS as any as ImageConfigComplete,\n  })\n  // Normally we don't care about undefined props because we pass to JSX,\n  // but this exported function could be used by the end user for anything\n  // so we delete undefined props to clean it up a little.\n  for (const [key, value] of Object.entries(props)) {\n    if (value === undefined) {\n      delete props[key as keyof typeof props]\n    }\n  }\n  return { props }\n}\n\nexport default Image\n\nexport type { ImageProps, ImageLoaderProps, ImageLoader, StaticImageData }\n","module.exports = require('./dist/shared/lib/image-external')\n","\"use client\"\n\nimport React, { useState, useEffect, useMemo, FormEvent } from \"react\"\nimport { motion, AnimatePresence } from \"framer-motion\"\nimport { toast } from \"sonner\"\nimport { track } from '@vercel/analytics'\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Checkbox } from \"@/components/ui/checkbox\"\nimport { cn } from \"@/lib/utils\"\nimport ArrowBoldRight from \"@/components/icons/arrow-bold-right\"\nimport Clock2 from \"@/components/icons/clock-2\"\nimport CircleCheck from \"@/components/icons/circle-check\"\nimport CircleWarning2 from \"@/components/icons/circle-warning-2\"\nimport Loader from \"@/components/icons/loader\"\nimport Clipboard2 from \"@/components/icons/clipboard-2\"\nimport Download2 from \"@/components/icons/download-2\"\nimport Refresh2 from \"@/components/icons/refresh-2\"\nimport BadgeCheck2 from \"@/components/icons/badge-check-2\"\nimport Globe2 from \"@/components/icons/globe-2\"\nimport ExternalLink2 from \"@/components/icons/external-link-2\"\nimport ResendIcon from \"@/components/ResendIcon\"\nimport CheckList from \"@/components/icons/check-list\"\nimport { useRouter } from \"next/navigation\"\nimport Image from \"next/image\"\nimport type { \n  PostDomainsResponse, \n  DomainWithStats\n} from \"@/app/api/v2/domains/route\"\n\ninterface StepConfig {\n  id: string\n  name: string\n  description: string\n}\n\nconst stepsConfig: StepConfig[] = [\n  {\n    id: \"add-domain\",\n    name: \"Add Domain\",\n    description: \"Add a domain you own to send emails.\",\n  },\n  {\n    id: \"configure-dns\",\n    name: \"Configure DNS\",\n    description: \"Add the following DNS records to your domain provider.\",\n  },\n  {\n    id: \"verified\",\n    name: \"Verified\",\n    description: \"Start sending emails to your domain.\",\n  },\n]\n\nconst stepVariants = {\n  hidden: { opacity: 0, x: 20 },\n  visible: { opacity: 1, x: 0 },\n  exit: { opacity: 0, x: -20 },\n}\n\ninterface DnsRecord {\n  type: 'TXT' | 'MX' | string  // Allow string for flexibility\n  name: string\n  value: string\n  isVerified?: boolean\n}\n\n// Type for DNS records from verification check\ntype VerificationDnsRecord = {\n  type: string\n  name: string\n  value: string\n  isVerified: boolean\n  error?: string\n}\n\n// Enhanced type for domain response with verification check\ninterface DomainResponseWithCheck extends Omit<DomainWithStats, 'stats' | 'catchAllEndpoint'> {\n  stats: {\n    totalEmailAddresses: number\n    activeEmailAddresses: number\n    hasCatchAll: boolean\n  }\n  catchAllEndpoint?: {\n    id: string\n    name: string\n    type: string\n    isActive: boolean\n  } | null\n  verificationCheck?: {\n    dnsRecords?: Array<VerificationDnsRecord>\n    sesStatus?: string\n    isFullyVerified?: boolean\n    lastChecked?: Date\n  }\n}\n\ninterface ApiResponse {\n  success: boolean\n  error?: string\n  domain?: string\n  domainId?: string\n  status?: 'pending' | 'verified' | 'failed'\n  dnsRecords?: DnsRecord[]\n  verificationToken?: string\n  provider?: {\n    name: string\n    confidence: 'high' | 'medium' | 'low'\n  }\n}\n\ninterface AddDomainFormProps {\n  // Optional props for preloading existing domain data\n  preloadedDomain?: string\n  preloadedDomainId?: string\n  preloadedDnsRecords?: DnsRecord[]\n  preloadedStep?: number\n  preloadedProvider?: string\n  onRefresh?: () => void\n  overrideRefreshFunction?: () => Promise<void>\n  // Optional callback when domain is successfully added/verified\n  onSuccess?: (domainId: string) => void\n}\n\n// Provider documentation mapping\nconst getProviderDocUrl = (provider: string): string | null => {\n  const providerMap: Record<string, string> = {\n    'route53': 'https://resend.com/docs/knowledge-base/route53',\n    'amazon route 53': 'https://resend.com/docs/knowledge-base/route53',\n    'aws': 'https://resend.com/docs/knowledge-base/route53',\n    'cloudflare': 'https://resend.com/docs/knowledge-base/cloudflare',\n    'namecheap': 'https://resend.com/docs/knowledge-base/namecheap',\n    'vercel': 'https://resend.com/docs/knowledge-base/vercel',\n    'squarespace': 'https://resend.com/docs/knowledge-base/squarespace',\n    'hostzinger': 'https://resend.com/docs/knowledge-base/hostzinger',\n    'ionos': 'https://resend.com/docs/knowledge-base/ionos',\n    'gandi': 'https://resend.com/docs/knowledge-base/gandi',\n    'porkbun': 'https://resend.com/docs/knowledge-base/porkbun'\n  }\n\n  const normalizedProvider = provider.toLowerCase().trim()\n  return providerMap[normalizedProvider] || null\n}\n\nexport default function AddDomainForm({\n  preloadedDomain = \"\",\n  preloadedDomainId = \"\",\n  preloadedDnsRecords = [],\n  preloadedStep = 0,\n  preloadedProvider = \"\",\n  onRefresh,\n  overrideRefreshFunction,\n  onSuccess\n}: AddDomainFormProps) {\n  const [currentStepIdx, setCurrentStepIdx] = useState(preloadedStep)\n  const [domainName, setDomainName] = useState(preloadedDomain)\n  const [error, setError] = useState(\"\")\n  const [isLoading, setIsLoading] = useState(false)\n  const [isRefreshing, setIsRefreshing] = useState(false)\n  const [verificationStatus, setVerificationStatus] = useState<'pending' | 'verified' | 'failed' | null>(null)\n  const [dnsRecords, setDnsRecords] = useState<DnsRecord[]>(preloadedDnsRecords)\n  const [domainId, setDomainId] = useState(preloadedDomainId)\n  const [resendApiKey, setResendApiKey] = useState(\"\")\n  const [isImporting, setIsImporting] = useState(false)\n  const [showDomainSelection, setShowDomainSelection] = useState(false)\n  const [showBulkImport, setShowBulkImport] = useState(false)\n  const [resendDomains, setResendDomains] = useState<any[]>([])\n  const [selectedDomains, setSelectedDomains] = useState<Set<string>>(new Set())\n  const [importProgress, setImportProgress] = useState<{\n    [key: string]: {\n      status: 'pending' | 'processing' | 'success' | 'failed' | 'exists'\n      message?: string\n      domainId?: string\n    }\n  }>({})\n  const [isProcessing, setIsProcessing] = useState(false)\n  const [periodicCheckEnabled, setPeriodicCheckEnabled] = useState(false)\n  const router = useRouter()\n  const [showDnsWarning, setShowDnsWarning] = useState(false)\n\n  // Memoize the DNS records to prevent unnecessary re-renders\n  const memoizedPreloadedDnsRecords = useMemo(() => preloadedDnsRecords, [\n    JSON.stringify(preloadedDnsRecords)\n  ])\n\n  // Update state when props change (for when component is reused with different data)\n  useEffect(() => {\n    setCurrentStepIdx(preloadedStep)\n    setDomainName(preloadedDomain)\n    setDnsRecords(memoizedPreloadedDnsRecords)\n    setDomainId(preloadedDomainId)\n  }, [preloadedStep, preloadedDomain, memoizedPreloadedDnsRecords, preloadedDomainId])\n\n  // Lazy refresh status when component loads with preloaded data (pending domain)\n  useEffect(() => {\n    if (preloadedDomainId && preloadedDomain && preloadedStep === 1) {\n      // Add a small delay to let the component fully mount\n      const timer = setTimeout(() => {\n        console.log(\"🔄 Auto-refreshing domain verification status for:\", preloadedDomain)\n        handleRefresh()\n        // Enable periodic checks after initial refresh\n        setPeriodicCheckEnabled(true)\n      }, 500) // 500ms delay\n\n      return () => clearTimeout(timer)\n    }\n  }, [preloadedDomainId, preloadedDomain, preloadedStep])\n\n  // Fetch DNS records when we have a domainId but no DNS records\n  useEffect(() => {\n    if (domainId && dnsRecords.length === 0 && currentStepIdx === 1) {\n      const fetchDnsRecords = async () => {\n        try {\n          const response = await fetch(`/api/v2/domains/${domainId}/dns-records`)\n          if (response.ok) {\n            const data = await response.json()\n            const mappedRecords = data.records.map((record: any) => ({\n              type: record.recordType,\n              name: record.name,\n              value: record.value,\n              isVerified: record.isVerified || false\n            }))\n            setDnsRecords(mappedRecords)\n          }\n        } catch (error) {\n          console.error('Error fetching DNS records:', error)\n        }\n      }\n      fetchDnsRecords()\n    }\n  }, [domainId, dnsRecords.length, currentStepIdx])\n\n  // Periodic verification check every 5 seconds\n  useEffect(() => {\n    if (!periodicCheckEnabled || !domainId || !domainName || verificationStatus === 'verified' || verificationStatus === 'failed') {\n      return\n    }\n\n    console.log(\"🔄 Starting periodic verification checks every 5 seconds for:\", domainName)\n\n    const intervalId = setInterval(() => {\n      console.log(\"⏰ Periodic verification check for:\", domainName)\n      handlePeriodicRefresh()\n    }, 5000) // 5 seconds\n\n    return () => {\n      console.log(\"🛑 Stopping periodic verification checks for:\", domainName)\n      clearInterval(intervalId)\n    }\n  }, [periodicCheckEnabled, domainId, domainName, verificationStatus])\n\n  // Handle periodic refresh (silent, no loading states)\n  const handlePeriodicRefresh = async () => {\n    if (!domainId || !domainName || isRefreshing) {\n      return\n    }\n\n    // Use overrideRefreshFunction if provided\n    if (overrideRefreshFunction) {\n      try {\n        await overrideRefreshFunction()\n      } catch (err) {\n        console.error('Error in periodic refresh:', err)\n      }\n      return\n    }\n\n    try {\n      const response = await fetch(`/api/v2/domains?status=pending&check=true`)\n\n      if (!response.ok) {\n        console.error('Failed to check domain status:', response.status)\n        return\n      }\n\n      const result = await response.json()\n      \n      // Find our domain in the response\n      const ourDomain = result.data?.find((d: DomainResponseWithCheck) => d.id === domainId)\n      \n      if (!ourDomain) {\n        console.error('Domain not found in response')\n        return\n      }\n\n      // Update verification status based on domain status\n      setVerificationStatus(ourDomain.status as 'pending' | 'verified' | 'failed')\n\n      // Update DNS records if verification check is available\n      if (ourDomain.verificationCheck?.dnsRecords) {\n        setDnsRecords(ourDomain.verificationCheck.dnsRecords.map((record: VerificationDnsRecord) => ({\n          type: record.type,\n          name: record.name,\n          value: record.value,\n          isVerified: record.isVerified\n        })))\n      }\n\n      if (ourDomain.status === 'verified') {\n        console.log(\"✅ Domain verified! Redirecting to domain details page...\")\n        toast.success(\"Domain verified successfully! Redirecting...\")\n        setPeriodicCheckEnabled(false) // Stop periodic checks\n        \n        // Redirect to domain details page\n        setTimeout(() => {\n          router.push(`/emails/${domainId}`)\n        }, 1500) // Small delay to show the success message\n      }\n    } catch (err) {\n      console.error('Error in periodic verification check:', err)\n      // Don't show error toast for periodic checks to avoid spamming\n    }\n  }\n\n  const handleNext = () => {\n    if (currentStepIdx === 0 && !domainName.trim()) {\n      setError(\"Please enter a valid domain name.\")\n      return\n    }\n    if (currentStepIdx === 0 && domainName.trim()) {\n      if (!/^[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/.test(domainName)) {\n        setError(\"Please enter a valid domain format (e.g., example.com).\")\n        return\n      }\n    }\n    setError(\"\")\n    if (currentStepIdx < stepsConfig.length - 1) {\n      setCurrentStepIdx((prev) => prev + 1)\n    }\n  }\n\n\n\n  const handleSubmitDomain = async (e: FormEvent) => {\n    e.preventDefault()\n    if (!domainName.trim()) {\n      setError(\"Please enter a valid domain name.\")\n      return\n    }\n\n    if (!/^[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/.test(domainName)) {\n      setError(\"Please enter a valid domain format (e.g., example.com).\")\n      return\n    }\n\n    setIsLoading(true)\n    setError(\"\")\n\n    try {\n      // Use v2 API to add domain\n      const addResponse = await fetch('/api/v2/domains', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          domain: domainName\n        })\n      })\n\n      const addResult: PostDomainsResponse | { error: string } = await addResponse.json()\n\n      if (!addResponse.ok) {\n        const errorResult = addResult as { error: string; code?: string }\n        \n        // Check for specific error types\n        if (addResponse.status === 409) {\n          // Use the specific error message from the API for better UX\n          setError(errorResult.error || 'This domain already exists.')\n        } else if (addResponse.status === 403) {\n          setError(errorResult.error || 'Domain limit reached. Please upgrade your plan.')\n        } else if (addResponse.status === 400 && errorResult.error?.includes('conflicting DNS records')) {\n          setError('This domain cannot be used. It may have conflicting DNS records (MX or CNAME). Please remove them before adding this domain.')\n        } else {\n          setError(errorResult.error || 'Failed to add domain')\n        }\n        return\n      }\n\n      const successResult = addResult as PostDomainsResponse\n      console.log(\"Domain added successfully:\", successResult)\n\n      // Track domain addition\n      track('Domain Added', {\n        domain: domainName,\n        domainId: successResult.id\n      })\n\n      // Call success callback if provided\n      if (onSuccess) {\n        onSuccess(successResult.id)\n      }\n\n      // Redirect to domain details page\n      toast.success(\"Domain added successfully! Redirecting...\")\n      setTimeout(() => {\n        router.push(`/emails/${successResult.id}`)\n      }, 1000) // Small delay to show the success message\n\n    } catch (err) {\n      console.error('Error adding domain:', err)\n      setError('An unexpected error occurred. Please try again.')\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  const handleRefresh = async () => {\n    // Use overrideRefreshFunction if provided, otherwise fall back to onRefresh or default behavior\n    if (overrideRefreshFunction) {\n      setIsRefreshing(true)\n      try {\n        await overrideRefreshFunction()\n      } catch (err) {\n        console.error('Error in override refresh function:', err)\n        toast.error(\"Failed to refresh status\")\n      } finally {\n        setIsRefreshing(false)\n      }\n      return\n    }\n\n    if (onRefresh) {\n      onRefresh()\n      return\n    }\n\n    if (!domainId) {\n      toast.error(\"No domain ID available for verification\")\n      return\n    }\n\n    setIsRefreshing(true)\n    setError(\"\")\n\n    console.log(\"🔄 Manual refresh for domainId:\", domainId)\n\n    try {\n      const response = await fetch(`/api/v2/domains?status=pending&check=true`)\n\n      if (!response.ok) {\n        const errorData = await response.json()\n        setError(errorData.error || 'Failed to check verification status')\n        toast.error(\"Failed to refresh status\")\n        setPeriodicCheckEnabled(false) // Stop periodic checks on error\n        return\n      }\n\n      const result = await response.json()\n      \n      // Find our domain in the response\n      const ourDomain = result.data?.find((d: DomainResponseWithCheck) => d.id === domainId)\n      \n      if (!ourDomain) {\n        setError('Domain not found')\n        toast.error(\"Domain not found\")\n        setPeriodicCheckEnabled(false)\n        return\n      }\n\n      console.log(\"🔍 Manual refresh result:\", ourDomain)\n\n      // Update verification status\n      setVerificationStatus(ourDomain.status as 'pending' | 'verified' | 'failed')\n\n      if (ourDomain.status === 'verified') {\n        console.log(\"✅ Domain verified via manual refresh! Redirecting...\")\n        toast.success(\"Domain verified successfully! Redirecting...\")\n        setPeriodicCheckEnabled(false) // Stop periodic checks\n        \n        // Redirect to domain details page\n        setTimeout(() => {\n          router.push(`/emails/${domainId}`)\n        }, 1500) // Small delay to show the success message\n      } else if (ourDomain.status === 'failed') {\n        toast.error(\"Domain verification failed\")\n        setPeriodicCheckEnabled(false) // Stop periodic checks on failure\n      } else {\n        toast.info(\"Domain verification still pending\")\n        // Enable periodic checks if not already enabled\n        if (!periodicCheckEnabled) {\n          setPeriodicCheckEnabled(true)\n        }\n      }\n\n      // Update DNS records if verification check is available\n      if (ourDomain.verificationCheck?.dnsRecords) {\n        setDnsRecords(ourDomain.verificationCheck.dnsRecords.map((record: VerificationDnsRecord) => ({\n          type: record.type,\n          name: record.name,\n          value: record.value,\n          isVerified: record.isVerified\n        })))\n      }\n\n    } catch (err) {\n      console.error('Error checking verification:', err)\n      setError('An unexpected error occurred while checking verification status.')\n      toast.error(\"Failed to refresh status\")\n      setPeriodicCheckEnabled(false) // Stop periodic checks on error\n    } finally {\n      setIsRefreshing(false)\n    }\n  }\n\n  const copyToClipboard = async (text: string) => {\n    try {\n      await navigator.clipboard.writeText(text)\n      toast.success(\"Copied to clipboard\")\n    } catch (err) {\n      console.error(\"Failed to copy text: \", err)\n      toast.error(\"Failed to copy to clipboard\")\n    }\n  }\n\n  const downloadZoneFile = (absolute: boolean = false) => {\n    if (!domainName || dnsRecords.length === 0) {\n      toast.error(\"No DNS records available to download\")\n      return\n    }\n\n    try {\n      // Generate zone file content\n      const zoneFileContent = generateZoneFile(domainName, dnsRecords, absolute)\n      \n      // Create blob and download\n      const blob = new Blob([zoneFileContent], { type: 'text/plain' })\n      const url = URL.createObjectURL(blob)\n      const link = document.createElement('a')\n      link.href = url\n      link.download = `${domainName}.txt`\n      document.body.appendChild(link)\n      link.click()\n      document.body.removeChild(link)\n      URL.revokeObjectURL(url)\n      \n      toast.success(\"Zone file downloaded successfully\")\n    } catch (err) {\n      console.error(\"Failed to generate zone file:\", err)\n      toast.error(\"Failed to generate zone file\")\n    }\n  }\n\n  const generateZoneFile = (domain: string, records: DnsRecord[], absolute: boolean = false): string => {\n    // Extract root domain (last two parts: domain.tld)\n    const domainParts = domain.split('.')\n    const rootDomain = domainParts.slice(-2).join('.')\n    \n    let zoneContent = `; Zone file for ${domain}\\n`\n    zoneContent += `; Generated by Inbound Email Service\\n`\n    zoneContent += `; \\n`\n    \n    if (absolute) {\n      zoneContent += `; This file uses ABSOLUTE domain names (full names).\\n`\n      zoneContent += `; Each record includes the complete domain name.\\n`\n      zoneContent += `; Use this format if your DNS provider requires full domain names.\\n`\n      zoneContent += `; \\n`\n    } else {\n      zoneContent += `; IMPORTANT: This zone file uses relative names.\\n`\n      zoneContent += `; The $ORIGIN directive means all names are relative to ${rootDomain}\\n`\n      zoneContent += `; For example, '_amazonses' will become '_amazonses.${rootDomain}'\\n`\n      zoneContent += `; and '@' represents the root domain (${rootDomain})\\n`\n      zoneContent += `; \\n`\n      zoneContent += `; Some DNS providers may require you to enter the full domain name.\\n`\n      zoneContent += `; If so, use '_amazonses.${rootDomain}' instead of just '_amazonses'\\n`\n      zoneContent += `; \\n`\n      zoneContent += `$ORIGIN ${rootDomain}.\\n`\n    }\n    \n    zoneContent += `$TTL 3600\\n\\n`\n    \n    // Group records by type\n    const txtRecords = records.filter(r => r.type === 'TXT')\n    const mxRecords = records.filter(r => r.type === 'MX')\n    \n    // TXT Records\n    if (txtRecords.length > 0) {\n      zoneContent += `; TXT Records\\n`\n      txtRecords.forEach(record => {\n        const recordName = extractRecordName(record.name, domain)\n        const name = absolute \n          ? (recordName === '@' ? rootDomain : record.name)\n          : (recordName === '@' ? '@' : recordName)\n        zoneContent += `${name}\\t\\t3600\\tTXT\\t\"${record.value}\"\\n`\n      })\n      zoneContent += `\\n`\n    }\n    \n    // MX Records\n    if (mxRecords.length > 0) {\n      zoneContent += `; MX Records\\n`\n      mxRecords.forEach(record => {\n        const recordName = extractRecordName(record.name, domain)\n        const name = absolute \n          ? (recordName === '@' ? rootDomain : record.name)\n          : (recordName === '@' ? '@' : recordName)\n        const [priority, mailServer] = record.value.split(' ')\n        zoneContent += `${name}\\t\\t3600\\tMX\\t${priority}\\t${mailServer}\\n`\n      })\n      zoneContent += `\\n`\n    }\n    \n    return zoneContent\n  }\n\n  const handleResendImport = async () => {\n    if (!resendApiKey.trim()) {\n      toast.error(\"Please enter your Resend API key\")\n      return\n    }\n\n    if (!resendApiKey.startsWith('re_')) {\n      toast.error(\"Invalid Resend API key format. It should start with 're_'\")\n      return\n    }\n\n    setIsImporting(true)\n    setError(\"\")\n\n    try {\n      // Fetch domains from Resend API via our server endpoint\n      const response = await fetch('/api/resend/domains', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          apiKey: resendApiKey\n        })\n      })\n\n      const data = await response.json()\n\n      if (!response.ok) {\n        throw new Error(data.error || 'Failed to fetch domains from Resend')\n      }\n\n      if (!data.success) {\n        throw new Error(data.error || 'Failed to fetch domains from Resend')\n      }\n\n      if (data.domains && data.domains.length > 0) {\n        toast.success(`Found ${data.domains.length} domain(s) in your Resend account`)\n\n        // Set up domains for selection\n        setResendDomains(data.domains)\n        setSelectedDomains(new Set()) // Start with no domains selected\n\n        // Show domain selection screen\n        setShowDomainSelection(true)\n\n        console.log('Resend domains:', data.domains)\n      } else {\n        toast.info(\"No domains found in your Resend account\")\n      }\n\n      // Clear the API key for security\n      setResendApiKey(\"\")\n\n    } catch (err) {\n      console.error('Error importing from Resend:', err)\n      toast.error(err instanceof Error ? err.message : 'Failed to import domains from Resend. Please check your API key.')\n    } finally {\n      setIsImporting(false)\n    }\n  }\n\n  const handleSelectAll = () => {\n    const allDomainNames = new Set(resendDomains.map(domain => domain.name))\n    setSelectedDomains(allDomainNames)\n  }\n\n  const handleSelectNone = () => {\n    setSelectedDomains(new Set())\n  }\n\n  const handleDomainToggle = (domainName: string) => {\n    const newSelected = new Set(selectedDomains)\n    if (newSelected.has(domainName)) {\n      newSelected.delete(domainName)\n    } else {\n      newSelected.add(domainName)\n    }\n    setSelectedDomains(newSelected)\n  }\n\n  const startBulkImport = () => {\n    if (selectedDomains.size === 0) {\n      toast.error(\"Please select at least one domain to import\")\n      return\n    }\n\n    // Initialize progress tracking for selected domains only\n    const initialProgress: { [key: string]: { status: 'pending', message?: string } } = {}\n    selectedDomains.forEach((domainName) => {\n      initialProgress[domainName] = { status: 'pending' }\n    })\n    setImportProgress(initialProgress)\n\n    // Show bulk import screen and start processing\n    setShowDomainSelection(false)\n    setShowBulkImport(true)\n    processBulkImport()\n  }\n\n  const processBulkImport = async () => {\n    setIsProcessing(true)\n\n    // Only process selected domains\n    const selectedDomainObjects = resendDomains.filter(domain => selectedDomains.has(domain.name))\n\n    for (const domain of selectedDomainObjects) {\n      const domainName = domain.name\n\n      // Update status to processing\n      setImportProgress(prev => ({\n        ...prev,\n        [domainName]: { status: 'processing', message: 'Adding domain...' }\n      }))\n\n      try {\n        // Use v2 API to add domain\n        const addResponse = await fetch('/api/v2/domains', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({\n            domain: domainName\n          })\n        })\n\n        const addResult = await addResponse.json()\n\n        if (addResponse.ok) {\n          const successResult = addResult as PostDomainsResponse\n          setImportProgress(prev => ({\n            ...prev,\n            [domainName]: {\n              status: 'success',\n              message: `Successfully added. Status: ${successResult.status}`,\n              domainId: successResult.id\n            }\n          }))\n        } else {\n          // Handle specific error cases\n          let errorMessage = addResult.error || 'Failed to add domain'\n\n          if (addResponse.status === 409) {\n            setImportProgress(prev => ({\n              ...prev,\n              [domainName]: {\n                status: 'exists',\n                message: errorMessage // Use the specific error message from the API\n              }\n            }))\n          } else if (addResponse.status === 403) {\n            setImportProgress(prev => ({\n              ...prev,\n              [domainName]: {\n                status: 'failed',\n                message: 'Domain limit reached. Please upgrade your plan to add more domains.'\n              }\n            }))\n            // Stop processing if limit reached\n            break\n          } else if (addResponse.status === 400 && errorMessage.includes('conflicting DNS records')) {\n            setImportProgress(prev => ({\n              ...prev,\n              [domainName]: {\n                status: 'failed',\n                message: 'Domain cannot be used. May have conflicting DNS records or MX records already configured.'\n              }\n            }))\n          } else {\n            setImportProgress(prev => ({\n              ...prev,\n              [domainName]: {\n                status: 'failed',\n                message: errorMessage\n              }\n            }))\n          }\n        }\n\n      } catch (err) {\n        console.error(`Error processing domain ${domainName}:`, err)\n        setImportProgress(prev => ({\n          ...prev,\n          [domainName]: {\n            status: 'failed',\n            message: 'Network error occurred while adding domain'\n          }\n        }))\n      }\n\n      // Small delay between requests to avoid overwhelming the API\n      await new Promise(resolve => setTimeout(resolve, 500))\n    }\n\n    setIsProcessing(false)\n\n    // Show completion summary\n    const results = Object.values(importProgress)\n    const successful = results.filter(r => r.status === 'success').length\n    const existing = results.filter(r => r.status === 'exists').length\n    const failed = results.filter(r => r.status === 'failed').length\n\n    toast.success(`Import completed: ${successful} added, ${existing} already existed, ${failed} failed`)\n  }\n\n  const extractRecordName = (recordName: string, domainName: string) => {\n    // Extract root domain from domainName (get last 2 parts: domain.tld)\n    const domainParts = domainName.split('.')\n    const rootDomain = domainParts.slice(-2).join('.')\n\n    // If the record name is exactly the root domain, return \"@\"\n    if (recordName === rootDomain) {\n      return \"@\"\n    }\n\n    // If the record name ends with the root domain, extract the subdomain part\n    if (recordName.endsWith(`.${rootDomain}`)) {\n      return recordName.replace(`.${rootDomain}`, '')\n    }\n\n    // Fallback: if no match found, return the original record name\n    return recordName\n  }\n\n  const isStepCompleted = (index: number) => index < currentStepIdx\n  const isStepCurrent = (index: number) => index === currentStepIdx\n  const isStepFuture = (index: number) => index > currentStepIdx\n\n  return (\n    <div className=\"flex flex-col\">\n      <div className=\"w-full max-w-4xl px-2  mx-auto\">\n        <header className=\"mb-8 flex items-center space-x-4\">\n          {/* <div className=\"rounded-lg bg-iconBg\">\n            <Image src=\"/domain-icon.png\" alt=\"Logo\" width={48} height={48} className=\"p-2\" />\n          </div> */}\n          {/* <div>\n            <h1 className=\"text-3xl font-semibold text-darkText\">Add Domain</h1>\n            <p className=\"text-base text-mediumText\">Use a domain you own to send emails.</p>\n          </div> */}\n        </header>\n\n        {/* Top Horizontal Stepper */}\n        <div className=\"w-full mb-8\">\n          <nav className=\"flex items-center justify-center\">\n            {stepsConfig.map((step, index) => {\n              const completed = isStepCompleted(index)\n              const current = isStepCurrent(index)\n              const future = isStepFuture(index)\n\n              // Determine which icon to use based on step and state\n              let iconSrc = \"\"\n              if (index === 0) {\n                iconSrc = \"/domain-icon.png\"\n              } else if (index === 1) {\n                iconSrc = completed || current ? \"/dns-icon.png\" : \"/dns-icon-greyed.png\"\n              } else if (index === 2) {\n                iconSrc = completed || current ? \"/verified-icon.png\" : \"/verified-icon-greyed.png\"\n              }\n\n              return (\n                <div key={step.id} className=\"flex items-center\">\n                  <motion.div\n                    className=\"flex h-10 w-10 items-center justify-center\"\n                    initial={{ scale: current ? 1.1 : 1 }}\n                    animate={{ scale: current ? 1.1 : 1 }}\n                    transition={{ duration: 0.2 }}\n                  >\n                    <Image\n                      src={iconSrc}\n                      alt={step.name}\n                      width={40}\n                      height={40}\n                      className=\"object-contain\"\n                    />\n                  </motion.div>\n                  {/* Arrow between steps */}\n                  {index < stepsConfig.length - 1 && (\n                    <div className=\"mx-8\">\n                      <ArrowBoldRight\n                        className={cn(\"h-5 w-5 transition-colors duration-300\", {\n                          \"text-brandPurple\": completed,\n                          \"text-gray-400\": !completed,\n                        })}\n                      />\n                    </div>\n                  )}\n                </div>\n              )\n            })}\n          </nav>\n        </div>\n\n        {/* Main Content Area */}\n        <div className=\"w-full max-w-2xl mx-auto\">\n          <AnimatePresence mode=\"wait\">\n            <motion.div\n              key={currentStepIdx}\n              variants={stepVariants}\n              initial=\"hidden\"\n              animate=\"visible\"\n              exit=\"exit\"\n              transition={{ duration: 0.3, type: \"tween\" }}\n              className=\"pt-1\"\n            >\n              {currentStepIdx > 0 && (\n                <div className=\"mb-10 rounded-lg bg-accent/20 p-5 border border-accent\">\n                  <div className=\"flex items-center mb-1\">\n                    <h2 className=\"text-lg font-semibold text-foreground\">{stepsConfig[0].name}</h2>\n                    <CircleCheck width=\"18\" height=\"18\" className=\"ml-2 text-green-600\" />\n                  </div>\n                  <p className=\"text-sm text-muted-foreground mb-3\">{stepsConfig[0].description}</p>\n                  <div className=\"flex items-center rounded-md border border-border bg-card px-3 py-2 shadow-sm\">\n                    {/* <Image src=\"/domain-icon.png\" alt=\"Logo\" width={16} height={16} /> */}\n                    <span className=\"font-mono text-sm text-foreground\">{domainName}</span>\n                  </div>\n                </div>\n              )}\n\n              {showDomainSelection && (\n                <div className=\"space-y-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <h2 className=\"text-lg font-semibold text-foreground\">Select Domains to Import</h2>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Choose which domains from your Resend account to import into Inbound\n                      </p>\n                    </div>\n                    <Button\n                      variant=\"secondary\"\n                      onClick={() => {\n                        setShowDomainSelection(false)\n                        setResendDomains([])\n                        setSelectedDomains(new Set())\n                      }}\n                    >\n                      Cancel\n                    </Button>\n                  </div>\n\n                  {/* Selection Controls */}\n                  <div className=\"flex items-center gap-4 p-4 bg-muted/50 rounded-lg\">\n                    <div className=\"flex items-center gap-2\">\n                      <Button\n                        variant=\"secondary\"\n                        size=\"sm\"\n                        onClick={handleSelectAll}\n                      >\n                        Select All\n                      </Button>\n                      <Button\n                        variant=\"secondary\"\n                        size=\"sm\"\n                        onClick={handleSelectNone}\n                      >\n                        Select None\n                      </Button>\n                    </div>\n                    <div className=\"text-sm text-muted-foreground\">\n                      {selectedDomains.size} of {resendDomains.length} domains selected\n                    </div>\n                  </div>\n\n                  {/* Domains Table */}\n                  <div className=\"border border-border rounded-lg overflow-hidden\">\n                    {/* Table Header */}\n                    <div className=\"bg-muted/30 border-b border-border\">\n                      <div className=\"flex items-center text-sm font-medium text-muted-foreground px-4 py-3\">\n                        <div className=\"w-12\"></div>\n                        <div className=\"flex-1\">Domain</div>\n                        <div className=\"w-24\">Status</div>\n                        <div className=\"w-32\">Created</div>\n                      </div>\n                    </div>\n\n                    {/* Table Body */}\n                    <div className=\"bg-card\">\n                        {resendDomains.map((domain, index) => (\n                            <div\n                              key={domain.id}\n                              className={cn(\n                                \"flex items-center px-4 py-3 hover:bg-muted/50 cursor-pointer\",\n                                {\n                                  \"border-b border-border/50\": index < resendDomains.length - 1,\n                                  \"bg-accent/20\": selectedDomains.has(domain.name)\n                                }\n                              )}\n                              onClick={() => handleDomainToggle(domain.name)}\n                            >\n                              <div className=\"w-12\">\n                                <Checkbox\n                                  checked={selectedDomains.has(domain.name)}\n                                  onCheckedChange={() => handleDomainToggle(domain.name)}\n                                />\n                              </div>\n                              <div className=\"flex-1\">\n                                <div className=\"font-mono text-sm font-medium\">{domain.name}</div>\n                                {domain.region && (\n                                  <div className=\"text-xs text-muted-foreground\">Region: {domain.region}</div>\n                                )}\n                              </div>\n                              <div className=\"w-24\">\n                                <span className={cn(\n                                  \"inline-flex items-center px-2 py-1 rounded-full text-xs font-medium\",\n                                  {\n                                    \"bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400\": domain.status === 'verified',\n                                    \"bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-400\": domain.status === 'pending',\n                                    \"bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-400\": domain.status === 'failed',\n                                    \"bg-muted text-muted-foreground\": !domain.status\n                                  }\n                                )}>\n                                  {domain.status || 'unknown'}\n                                </span>\n                              </div>\n                              <div className=\"w-32 text-sm text-muted-foreground\">\n                                {domain.created_at ? new Date(domain.created_at).toLocaleDateString() : 'N/A'}\n                              </div>\n                            </div>\n                        ))}\n                    </div>\n                  </div>\n\n                  {/* Import Button */}\n                  <div className=\"flex justify-end\">\n                    <Button\n                      onClick={startBulkImport}\n                      variant=\"primary\"\n                      disabled={selectedDomains.size === 0}\n                      className=\"min-w-32\"\n                    >\n                      Import {selectedDomains.size} Domain{selectedDomains.size !== 1 ? 's' : ''}\n                    </Button>\n                  </div>\n                </div>\n              )}\n\n              {showBulkImport && (\n                                  <div className=\"space-y-6\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <h2 className=\"text-lg font-semibold text-foreground\">Import Domains from Resend</h2>\n                        <p className=\"text-sm text-muted-foreground\">\n                          Processing {selectedDomains.size} selected domain(s) from your Resend account\n                        </p>\n                      </div>\n                    <Button\n                      variant=\"secondary\"\n                      onClick={() => {\n                        setShowBulkImport(false)\n                        setShowDomainSelection(true)\n                      }}\n                      disabled={isProcessing}\n                    >\n                      Cancel\n                    </Button>\n                  </div>\n\n                  {/* Domain Processing List */}\n                  <div className=\"space-y-3 max-h-96 overflow-y-auto\">\n                    {resendDomains.filter(domain => selectedDomains.has(domain.name)).map((domain, index) => {\n                      const progress = importProgress[domain.name]\n                      const status = progress?.status || 'pending'\n\n                      return (\n                        <div\n                          key={domain.name}\n                          className={cn(\n                            \"flex items-center justify-between p-4 rounded-lg border\",\n                            {\n                              \"bg-muted/50 border-border\": status === 'pending',\n                              \"bg-blue-500/10 border-blue-500/20 dark:bg-blue-500/5\": status === 'processing',\n                              \"bg-green-500/10 border-green-500/20 dark:bg-green-500/5\": status === 'success',\n                              \"bg-yellow-500/10 border-yellow-500/20 dark:bg-yellow-500/5\": status === 'exists',\n                              \"bg-destructive/10 border-destructive/20 dark:bg-destructive/5\": status === 'failed',\n                            }\n                          )}\n                        >\n                                                      <div className=\"flex items-center gap-3\">\n                              <div className=\"flex items-center justify-center w-8 h-8 rounded-full bg-background border\">\n                                {status === 'pending' && (\n                                  <span className=\"text-sm font-medium text-muted-foreground\">{index + 1}</span>\n                                )}\n                                {status === 'processing' && (\n                                  <Loader width=\"16\" height=\"16\" className=\"animate-spin text-blue-600\" />\n                                )}\n                                {status === 'success' && (\n                                  <CircleCheck width=\"16\" height=\"16\" className=\"text-green-600\" />\n                                )}\n                                {status === 'exists' && (\n                                  <CircleCheck width=\"16\" height=\"16\" className=\"text-yellow-600\" />\n                                )}\n                                {status === 'failed' && (\n                                  <CircleWarning2 width=\"16\" height=\"16\" className=\"text-destructive\" />\n                                )}\n                              </div>\n                              <div>\n                                <div className=\"font-mono text-sm font-medium\">{domain.name}</div>\n                                {domain.status && (\n                                  <div className=\"text-xs text-muted-foreground\">\n                                    Resend Status: {domain.status}\n                                  </div>\n                                )}\n                              </div>\n                            </div>\n\n                                                      <div className=\"text-right\">\n                              <div className={cn(\n                                \"text-sm font-medium\",\n                                {\n                                  \"text-muted-foreground\": status === 'pending',\n                                  \"text-blue-600\": status === 'processing',\n                                  \"text-green-600\": status === 'success',\n                                  \"text-yellow-600\": status === 'exists',\n                                  \"text-destructive\": status === 'failed',\n                                }\n                              )}>\n                                {status === 'pending' && 'Waiting...'}\n                                {status === 'processing' && 'Processing...'}\n                                {status === 'success' && 'Added Successfully'}\n                                {status === 'exists' && 'Already Exists'}\n                                {status === 'failed' && 'Failed'}\n                              </div>\n                              {progress?.message && (\n                                <div className=\"text-xs text-muted-foreground mt-1 max-w-xs\">\n                                  {progress.message}\n                                </div>\n                              )}\n                            </div>\n                        </div>\n                      )\n                    })}\n                  </div>\n\n                  {/* Action Buttons */}\n                  <div className=\"flex gap-3\">\n                    {!isProcessing && Object.keys(importProgress).length === 0 && (\n                      <Button\n                        onClick={processBulkImport}\n                        variant=\"primary\"\n                        className=\"flex-1\"\n                      >\n                        Start Import\n                      </Button>\n                    )}\n\n                    {isProcessing && (\n                      <Button\n                        variant=\"primary\"\n                        className=\"flex-1\"\n                        disabled\n                      >\n                        <Loader width=\"16\" height=\"16\" className=\"mr-2 animate-spin\" />\n                        Processing Domains...\n                      </Button>\n                    )}\n\n                    {!isProcessing && Object.keys(importProgress).length > 0 && (\n                      <>\n                        <Button\n                          onClick={() => router.push('/emails')}\n                          variant=\"primary\"\n                          className=\"flex-1\"\n                        >\n                          View All Domains\n                        </Button>\n                        <Button\n                          onClick={() => {\n                            setShowBulkImport(false)\n                            setShowDomainSelection(false)\n                            setResendDomains([])\n                            setSelectedDomains(new Set())\n                            setImportProgress({})\n                          }}\n                          variant=\"secondary\"\n                        >\n                          Import More\n                        </Button>\n                      </>\n                    )}\n                  </div>\n\n                                      {/* Summary Stats */}\n                    {Object.keys(importProgress).length > 0 && (\n                      <div className=\"grid grid-cols-4 gap-4 p-4 bg-muted/50 rounded-lg\">\n                        <div className=\"text-center\">\n                          <div className=\"text-lg font-semibold text-green-600\">\n                            {Object.values(importProgress).filter(p => p.status === 'success').length}\n                          </div>\n                          <div className=\"text-xs text-muted-foreground\">Added</div>\n                        </div>\n                        <div className=\"text-center\">\n                          <div className=\"text-lg font-semibold text-yellow-600\">\n                            {Object.values(importProgress).filter(p => p.status === 'exists').length}\n                          </div>\n                          <div className=\"text-xs text-muted-foreground\">Existing</div>\n                        </div>\n                        <div className=\"text-center\">\n                          <div className=\"text-lg font-semibold text-destructive\">\n                            {Object.values(importProgress).filter(p => p.status === 'failed').length}\n                          </div>\n                          <div className=\"text-xs text-muted-foreground\">Failed</div>\n                        </div>\n                        <div className=\"text-center\">\n                          <div className=\"text-lg font-semibold text-muted-foreground\">\n                            {Object.values(importProgress).filter(p => p.status === 'pending').length}\n                          </div>\n                          <div className=\"text-xs text-muted-foreground\">Pending</div>\n                        </div>\n                      </div>\n                    )}\n                </div>\n              )}\n\n              {!showDomainSelection && !showBulkImport && currentStepIdx === 0 && (\n                <div className=\"\">\n                  <h2 className=\"mb-1 text-lg font-semibold text-foreground\">{stepsConfig[0].name}</h2>\n                  <p className=\"mb-5 text-sm text-muted-foreground\">{stepsConfig[0].description}</p>\n                  <form onSubmit={handleSubmitDomain}>\n                    <label htmlFor=\"domainName\" className=\"mb-1.5 block text-sm font-medium text-foreground\">\n                      Name\n                    </label>\n                    <Input\n                      id=\"domainName\"\n                      type=\"text\"\n                      value={domainName}\n                      onChange={(e) => {\n                        setDomainName(e.target.value)\n                        if (error) setError(\"\")\n                      }}\n                      placeholder=\"example.com\"\n                      className=\"mb-2 w-full font-mono text-sm\"\n                      aria-label=\"Domain Name\"\n                      disabled={isLoading || !!preloadedDomain} // Disable if preloaded\n                    />\n                    {error && <p className=\"mb-4 text-sm text-destructive\">{error}</p>}\n                    \n                    <Button type=\"submit\" variant=\"primary\" className=\"mt-4 w-full md:w-auto\" disabled={isLoading}>\n                      {isLoading ? (\n                        <>\n                          <Loader width=\"16\" height=\"16\" className=\"mr-2 animate-spin\" />\n                          Adding Domain...\n                        </>\n                      ) : (\n                        <>\n                          Add Domain <ArrowBoldRight width=\"16\" height=\"16\" className=\"ml-1.5\" />\n                        </>\n                      )}\n                    </Button>\n                  </form>\n\n                  {/* Import from Resend Section */}\n                  <div className=\"mt-8 rounded-lg border border-border bg-card p-6\">\n                    <div className=\"flex items-center gap-3 mb-4\">\n\n                      <h3 className=\"text-lg font-semibold text-foreground\">Import from</h3>\n                      <ResendIcon variant=\"black\" className=\"h-12 w-16 -ml-1 dark:invert\" />\n                    </div>\n                    <p className=\"text-sm text-muted-foreground mb-4\">\n                      Already have domains in Resend? Paste your API key to import them for bulk processing.\n                    </p>\n                    <div className=\"space-y-3\">\n                      <Input\n                        type=\"password\"\n                        value={resendApiKey}\n                        onChange={(e) => setResendApiKey(e.target.value)}\n                        placeholder=\"Paste your Resend API key (re_...)\"\n                        className=\"bg-transparent border-input\"\n                        disabled={isImporting}\n                      />\n                      <Button\n                        variant=\"secondary\"\n                        className=\"w-full\"\n                        onClick={handleResendImport}\n                        disabled={isImporting || !resendApiKey.trim()}\n                      >\n                        {isImporting ? (\n                          <>\n                            <Loader width=\"16\" height=\"16\" className=\"mr-2 animate-spin\" />\n                            Importing...\n                          </>\n                        ) : (\n                          \"Import Domains\"\n                        )}\n                      </Button>\n                    </div>\n                    <p className=\"text-xs text-muted-foreground mt-3\">\n                      Your API key is not stored and only used to fetch your domains.\n                    </p>\n                  </div>\n                </div>\n              )}\n\n              {!showDomainSelection && !showBulkImport && currentStepIdx === 1 && (\n                <div>\n                    <div className=\"flex items-center justify-between mb-1\">\n                        <h2 className=\"text-lg font-semibold text-foreground\">{stepsConfig[1].name}</h2>\n                        {preloadedProvider && (\n                            <div className=\"flex items-center gap-2\">\n                                {getProviderDocUrl(preloadedProvider) ? (\n                                    <Button\n                                        variant=\"secondary\"\n                                        size=\"sm\"\n                                        onClick={() => window.open(getProviderDocUrl(preloadedProvider)!, '_blank')}\n                                        className=\"flex items-center gap-2 text-sm border\"\n                                    >\n                                        <Globe2 width=\"16\" height=\"16\" />\n                                        <span>{preloadedProvider} Setup Guide</span>\n                                        <ExternalLink2 width=\"12\" height=\"12\" />\n                                    </Button>\n                                ) : (\n                                    <div className=\"flex items-center gap-1 text-sm text-muted-foreground\">\n                                        <Globe2 width=\"16\" height=\"16\" />\n                                        <span>Provider: <span className=\"font-medium\">{preloadedProvider}</span></span>\n                                    </div>\n                                )}\n                            </div>\n                        )}\n                    </div>\n                    <p className=\"mb-6 text-sm text-muted-foreground\">{stepsConfig[1].description}</p>\n\n                    {/* Verification Status Indicator */}\n                    {verificationStatus && (\n                        <div className={cn(\n                            \"mb-6 rounded-lg p-4 border\",\n                            {\n                                \"bg-yellow-500/10 border-yellow-500/20 dark:bg-yellow-500/5\": verificationStatus === 'pending',\n                                \"bg-green-500/10 border-green-500/20 dark:bg-green-500/5\": verificationStatus === 'verified',\n                                \"bg-destructive/10 border-destructive/20 dark:bg-destructive/5\": verificationStatus === 'failed',\n                            }\n                        )}>\n                            <div className=\"flex items-center justify-between\">\n                                <div className=\"flex items-center\">\n                                    {verificationStatus === 'pending' && (\n                                        <>\n                                            <Clock2 width=\"16\" height=\"16\" className=\"text-yellow-600 mr-2\" />\n                                            <span className=\"text-sm font-medium text-yellow-700 dark:text-yellow-400\">\n                                                Verification Pending\n                                            </span>\n                                            {isRefreshing && (\n                                                <Loader width=\"16\" height=\"16\" className=\"ml-2 animate-spin text-yellow-600\" />\n                                            )}\n                                        </>\n                                    )}\n                                    {verificationStatus === 'verified' && (\n                                        <>\n                                            <CircleCheck width=\"16\" height=\"16\" className=\"text-green-600 mr-2\" />\n                                            <span className=\"text-sm font-medium text-green-700 dark:text-green-400\">\n                                                Domain Verified\n                                            </span>\n                                        </>\n                                    )}\n                                    {verificationStatus === 'failed' && (\n                                        <>\n                                            <CircleWarning2 width=\"16\" height=\"16\" className=\"text-destructive mr-2\" />\n                                            <span className=\"text-sm font-medium text-destructive\">\n                                                Verification Failed\n                                            </span>\n                                        </>\n                                    )}\n                                </div>\n                                \n                                {/* Periodic Check Indicator */}\n                                {periodicCheckEnabled && verificationStatus === 'pending' && (\n                                    <div className=\"flex items-center text-xs text-yellow-600 dark:text-yellow-400\">\n                                        <div className=\"w-2 h-2 bg-yellow-500 rounded-full mr-2 animate-pulse\"></div>\n                                        <span>Auto-checking every 5s</span>\n                                    </div>\n                                )}\n                            </div>\n                            \n                            <p className=\"text-xs text-muted-foreground mt-1\">\n                                {verificationStatus === 'pending' && !periodicCheckEnabled && \"DNS records are being verified. This may take a few hours.\"}\n                                {verificationStatus === 'pending' && periodicCheckEnabled && \"We're automatically checking your domain verification status. You'll be redirected once it's verified.\"}\n                                {verificationStatus === 'verified' && \"Your domain has been successfully verified and is ready to use.\"}\n                                {verificationStatus === 'failed' && \"Please check your DNS records and try again.\"}\n                            </p>\n                        </div>\n                    )}\n\n                    {/* Verification Status Summary */}\n                    {dnsRecords.length > 0 && (\n                        <div className=\"mb-4\">\n                            {(() => {\n                                const verifiedCount = dnsRecords.filter(r => r.isVerified).length\n                                const totalCount = dnsRecords.length\n                                const allVerified = verifiedCount === totalCount\n                                \n                                return (\n                                    <div className={cn(\n                                        \"rounded-lg p-4 border\",\n                                        allVerified \n                                            ? \"bg-green-500/10 border-green-500/20 dark:bg-green-500/5\"\n                                            : verifiedCount > 0 \n                                                ? \"bg-yellow-500/10 border-yellow-500/20 dark:bg-yellow-500/5\"\n                                                : \"bg-muted/50 border-border\"\n                                    )}>\n                                        <div className=\"flex items-center gap-2\">\n                                            {allVerified ? (\n                                                <>\n                                                    <CircleCheck width=\"20\" height=\"20\" className=\"text-green-600\" />\n                                                    <div>\n                                                        <p className=\"font-medium text-green-700 dark:text-green-400\">\n                                                            All DNS records verified!\n                                                        </p>\n                                                        <p className=\"text-sm text-green-600 dark:text-green-500\">\n                                                            {verificationStatus === 'verified' \n                                                                ? \"Domain is fully verified and ready to receive emails.\"\n                                                                : \"DNS records are configured correctly. Waiting for Email status to be verified.\"}\n                                                        </p>\n                                                    </div>\n                                                </>\n                                            ) : verifiedCount > 0 ? (\n                                                <>\n                                                    <Clock2 width=\"20\" height=\"20\" className=\"text-yellow-600\" />\n                                                    <div>\n                                                        <p className=\"font-medium text-yellow-700 dark:text-yellow-400\">\n                                                            Partial verification ({verifiedCount}/{totalCount} records verified)\n                                                        </p>\n                                                        <p className=\"text-sm text-yellow-600 dark:text-yellow-500\">\n                                                            {dnsRecords.filter(r => !r.isVerified).map(r => r.type).join(', ')} record{dnsRecords.filter(r => !r.isVerified).length > 1 ? 's' : ''} still need{dnsRecords.filter(r => !r.isVerified).length > 1 ? '' : 's'} to be configured.\n                                                        </p>\n                                                    </div>\n                                                </>\n                                            ) : (\n                                                <>\n                                                    <CircleWarning2 width=\"20\" height=\"20\" className=\"text-muted-foreground\" />\n                                                    <div>\n                                                        <p className=\"font-medium text-foreground\">\n                                                            DNS records not yet verified\n                                                        </p>\n                                                        <p className=\"text-sm text-muted-foreground\">\n                                                            Please add the DNS records below to your domain provider. Verification may take a few minutes after adding the records.\n                                                        </p>\n                                                    </div>\n                                                </>\n                                            )}\n                                        </div>\n                                    </div>\n                                )\n                            })()}\n                        </div>\n                    )}\n\n                    <div className=\"overflow-hidden border border-border rounded-lg\">\n                        {/* DNS Configuration Warning */}\n                        {showDnsWarning && (\n                            <div className=\"bg-yellow-500/10 border-b border-yellow-500/20 p-4\">\n                                <div className=\"flex items-start gap-2\">\n                                    <CircleWarning2 width=\"16\" height=\"16\" className=\"text-yellow-600 mt-0.5 flex-shrink-0\" />\n                                    <div className=\"flex-1 text-sm\">\n                                        <p className=\"font-medium text-yellow-700 dark:text-yellow-400 mb-1\">\n                                            Important DNS Configuration Note\n                                        </p>\n                                        <p className=\"text-yellow-600 dark:text-yellow-500 mb-2\">\n                                            When adding MX records, use only the mail server hostname without your domain appended. \n                                            For example, use <span className=\"font-mono\">inbound-smtp.us-east-2.amazonaws.com</span> \n                                            NOT <span className=\"font-mono\">inbound-smtp.us-east-2.amazonaws.com.{domainName}</span>\n                                        </p>\n                                        <p className=\"text-yellow-600 dark:text-yellow-500 text-xs\">\n                                            Note: TXT records may take longer to propagate than MX records. If TXT verification fails, \n                                            please wait a few minutes and try refreshing again.\n                                        </p>\n                                    </div>\n                                    <Button\n                                        variant=\"ghost\"\n                                        size=\"sm\"\n                                        onClick={() => setShowDnsWarning(false)}\n                                        className=\"h-6 w-6 p-0 hover:bg-yellow-500/20 rounded text-yellow-600 hover:text-yellow-700 dark:hover:text-yellow-400\"\n                                        aria-label=\"Dismiss DNS configuration note\"\n                                    >\n                                        <span className=\"text-base font-medium leading-none\">×</span>\n                                    </Button>\n                                </div>\n                            </div>\n                        )}\n                        \n                        {/* Table Header */}\n                        <div className=\"bg-muted/30 border-b border-border\">\n                            <div className=\"flex text-sm font-medium text-muted-foreground px-4 py-3\">\n                                <span className=\"w-[25%]\">Record name</span>\n                                <span className=\"w-[15%]\">Type</span>\n                                <span className=\"w-[10%]\">TTL</span>\n                                <span className=\"w-[30%]\">Value</span>\n                                <span className=\"w-[15%] text-right\">Priority</span>\n                            </div>\n                        </div>\n\n                        {/* Table Body */}\n                        <div className=\"bg-card\">\n                            {dnsRecords.map((record, idx) => (\n                                <div key={`${record.type}-${idx}`} className={cn(\n                                    \"flex transition-colors px-4 py-3\",\n                                    {\n                                        \"bg-green-500/10 hover:bg-green-500/20 dark:bg-green-500/5 dark:hover:bg-green-500/10\": record.isVerified,\n                                        \"bg-card hover:bg-muted/50\": !record.isVerified,\n                                        \"border-b border-border/50\": idx < dnsRecords.length - 1\n                                    }\n                                )}>\n                                    <div className=\"w-[25%] pr-4\">\n                                        <div className=\"flex items-center justify-between\">\n                                            <span className=\"font-mono text-sm truncate\">\n                                                {extractRecordName(record.name, domainName)}\n                                            </span>\n                                            <Button\n                                                variant=\"ghost\"\n                                                size=\"sm\"\n                                                onClick={() => copyToClipboard(extractRecordName(record.name, domainName))}\n                                                className=\"h-8 w-8 p-0 hover:bg-muted border border-border rounded flex-shrink-0 ml-2\"\n                                            >\n                                                <Clipboard2 width=\"16\" height=\"16\" className=\"text-muted-foreground\" />\n                                            </Button>\n                                        </div>\n                                    </div>\n                                    <div className=\"w-[15%] pr-4\">\n                                        <div className=\"flex items-center justify-between\">\n                                            <div className=\"flex items-center gap-2\">\n                                                <span className=\"text-sm\">{record.type}</span>\n                                                {record.isVerified && (\n                                                    <CircleCheck width=\"16\" height=\"16\" className=\"text-green-600\" />\n                                                )}\n                                            </div>\n                                            <Button\n                                                variant=\"ghost\"\n                                                size=\"sm\"\n                                                onClick={() => copyToClipboard(record.type)}\n                                                className=\"h-8 w-8 p-0 hover:bg-muted border border-border rounded flex-shrink-0 ml-2\"\n                                            >\n                                                <Clipboard2 width=\"16\" height=\"16\" className=\"text-muted-foreground\" />\n                                            </Button>\n                                        </div>\n                                    </div>\n                                    <div className=\"w-[10%] pr-4\">\n                                        <span className=\"text-sm\">Auto</span>\n                                    </div>\n                                    <div className=\"w-[30%]\">\n                                        <div className=\"flex items-center justify-between\">\n                                            <span className={cn(\n                                                \"font-mono text-sm truncate\",\n                                                record.isVerified ? \"text-green-700 dark:text-green-400\" : \"opacity-50\"\n                                            )}>\n                                                {record.type === \"MX\" ? (\n                                                    <>\n                                                        {record.value.split(\" \")[1]}\n                                                        {!record.isVerified && record.value.split(\" \")[1].endsWith(`.${domainName}`) && (\n                                                            <span className=\"text-destructive ml-1\">(Remove .{domainName})</span>\n                                                        )}\n                                                    </>\n                                                ) : (\n                                                    record.value\n                                                )}\n                                            </span>\n                                            <Button\n                                                variant=\"ghost\"\n                                                size=\"sm\"\n                                                onClick={() => copyToClipboard(record.type === \"MX\" ? record.value.split(\" \")[1] : record.value)}\n                                                className=\"h-8 w-8 p-0 hover:bg-muted border border-border rounded flex-shrink-0 ml-2\"\n                                            >\n                                                <Clipboard2 width=\"16\" height=\"16\" className=\"text-muted-foreground\" />\n                                            </Button>\n                                        </div>\n                                    </div>\n                                    <div className=\"w-[15%] text-right ml-2\">\n                                        <div className=\"flex items-center justify-end\">\n                                            <span className={cn(\n                                                \"text-sm\",\n                                                record.isVerified && record.type === \"MX\" ? \"text-green-700 dark:text-green-400\" : \"\"\n                                            )}>\n                                                {record.type === \"MX\" ? record.value.split(\" \")[0] : \"\"}\n                                            </span>\n                                            {record.type === \"MX\" && (\n                                                <Button\n                                                    variant=\"ghost\"\n                                                    size=\"sm\"\n                                                    onClick={() => copyToClipboard(record.type === \"MX\" ? record.value.split(\" \")[0] : \"\")}\n                                                    className=\"h-8 w-8 p-0 hover:bg-muted border border-border rounded flex-shrink-0 ml-2\"\n                                                >\n                                                    <Clipboard2 width=\"16\" height=\"16\" className=\"text-muted-foreground\" />\n                                                </Button>\n                                            )}\n                                        </div>\n                                    </div>\n                                </div>\n                            ))}\n                            {dnsRecords.length === 0 && (\n                                <div className=\"text-center py-8 text-muted-foreground\">\n                                    No DNS records available yet.\n                                </div>\n                            )}\n                        </div>\n                    </div>\n\n                    {error && <p className=\"mt-4 text-sm text-destructive\">{error}</p>}\n\n                    <div className=\"flex gap-3 mt-10\">\n                        {/* <Button\n                            onClick={() => downloadZoneFile()}\n                            variant=\"secondary\"\n                            className=\"w-full md:w-auto\"\n                            disabled={!domainName || dnsRecords.length === 0}\n                        >\n                            <Download2 width=\"16\" height=\"16\" className=\"mr-2\" />\n                            Download Zone File\n                        </Button> */}\n                        {/* <Button\n                            onClick={() => downloadZoneFile(true)}\n                            variant=\"secondary\"\n                            className=\"w-full md:w-auto\"\n                            disabled={!domainName || dnsRecords.length === 0}\n                        >\n                            <Download2 width=\"16\" height=\"16\" className=\"mr-2\" />\n                            Download Zone File\n                        </Button> */}\n                    </div>\n                </div>\n            )}\n\n              {!showDomainSelection && !showBulkImport && currentStepIdx === 2 && (\n                <div className=\"text-center py-8\">\n                  <BadgeCheck2 width=\"80\" height=\"80\" className=\"mx-auto mb-5 text-green-600\" />\n                  <h2 className=\"mb-2 text-2xl font-semibold text-foreground\">Domain Verified!</h2>\n                  <p className=\"text-muted-foreground mb-1\">\n                    Your domain <span className=\"font-semibold text-foreground\">{domainName}</span> is now ready.\n                  </p>\n                  <p className=\"text-sm text-muted-foreground\">{stepsConfig[2].description}</p>\n                  <div className=\"flex gap-4 justify-center mt-10\">\n                    <Button\n                      onClick={() => router.push('/emails')}\n                      variant=\"primary\"\n                    >\n                      View Domains\n                    </Button>\n                    <Button\n                      onClick={() => {\n                        setCurrentStepIdx(0)\n                        setDomainName(\"\")\n                        setDnsRecords([])\n                        setDomainId(\"\")\n                        setError(\"\")\n                      }}\n                      variant=\"secondary\"\n                    >\n                      Add Another Domain\n                    </Button>\n                  </div>\n                </div>\n              )}\n            </motion.div>\n          </AnimatePresence>\n        </div>\n      </div>\n    </div>\n  )\n}\n\n"],"names":["getImageProps","imgProps","props","getImgProps","defaultLoader","imgConf","process","env","__NEXT_IMAGE_OPTS","key","value","Object","entries","undefined","Image"],"mappings":"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","ignoreList":[3,4]}