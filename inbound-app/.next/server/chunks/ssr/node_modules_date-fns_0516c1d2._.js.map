{"version":3,"sources":["turbopack:///[project]/node_modules/date-fns/startOfDay.js","turbopack:///[project]/node_modules/date-fns/differenceInCalendarDays.js","turbopack:///[project]/node_modules/date-fns/startOfYear.js","turbopack:///[project]/node_modules/date-fns/getDayOfYear.js","turbopack:///[project]/node_modules/date-fns/startOfWeek.js","turbopack:///[project]/node_modules/date-fns/startOfISOWeek.js","turbopack:///[project]/node_modules/date-fns/getISOWeekYear.js","turbopack:///[project]/node_modules/date-fns/startOfISOWeekYear.js","turbopack:///[project]/node_modules/date-fns/getISOWeek.js","turbopack:///[project]/node_modules/date-fns/getWeekYear.js","turbopack:///[project]/node_modules/date-fns/startOfWeekYear.js","turbopack:///[project]/node_modules/date-fns/getWeek.js","turbopack:///[project]/node_modules/date-fns/_lib/addLeadingZeros.js","turbopack:///[project]/node_modules/date-fns/_lib/format/lightFormatters.js","turbopack:///[project]/node_modules/date-fns/_lib/format/formatters.js","turbopack:///[project]/node_modules/date-fns/_lib/format/longFormatters.js","turbopack:///[project]/node_modules/date-fns/_lib/protectedTokens.js","turbopack:///[project]/node_modules/date-fns/isDate.js","turbopack:///[project]/node_modules/date-fns/isValid.js","turbopack:///[project]/node_modules/date-fns/format.js"],"sourcesContent":["import { toDate } from \"./toDate.js\";\n\n/**\n * The {@link startOfDay} function options.\n */\n\n/**\n * @name startOfDay\n * @category Day Helpers\n * @summary Return the start of a day for the given date.\n *\n * @description\n * Return the start of a day for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - The options\n *\n * @returns The start of a day\n *\n * @example\n * // The start of a day for 2 September 2014 11:55:00:\n * const result = startOfDay(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 02 2014 00:00:00\n */\nexport function startOfDay(date, options) {\n  const _date = toDate(date, options?.in);\n  _date.setHours(0, 0, 0, 0);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default startOfDay;\n","import { getTimezoneOffsetInMilliseconds } from \"./_lib/getTimezoneOffsetInMilliseconds.js\";\nimport { normalizeDates } from \"./_lib/normalizeDates.js\";\nimport { millisecondsInDay } from \"./constants.js\";\nimport { startOfDay } from \"./startOfDay.js\";\n\n/**\n * The {@link differenceInCalendarDays} function options.\n */\n\n/**\n * @name differenceInCalendarDays\n * @category Day Helpers\n * @summary Get the number of calendar days between the given dates.\n *\n * @description\n * Get the number of calendar days between the given dates. This means that the times are removed\n * from the dates and then the difference in days is calculated.\n *\n * @param laterDate - The later date\n * @param earlierDate - The earlier date\n * @param options - The options object\n *\n * @returns The number of calendar days\n *\n * @example\n * // How many calendar days are between\n * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\n * const result = differenceInCalendarDays(\n *   new Date(2012, 6, 2, 0, 0),\n *   new Date(2011, 6, 2, 23, 0)\n * )\n * //=> 366\n * // How many calendar days are between\n * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?\n * const result = differenceInCalendarDays(\n *   new Date(2011, 6, 3, 0, 1),\n *   new Date(2011, 6, 2, 23, 59)\n * )\n * //=> 1\n */\nexport function differenceInCalendarDays(laterDate, earlierDate, options) {\n  const [laterDate_, earlierDate_] = normalizeDates(\n    options?.in,\n    laterDate,\n    earlierDate,\n  );\n\n  const laterStartOfDay = startOfDay(laterDate_);\n  const earlierStartOfDay = startOfDay(earlierDate_);\n\n  const laterTimestamp =\n    +laterStartOfDay - getTimezoneOffsetInMilliseconds(laterStartOfDay);\n  const earlierTimestamp =\n    +earlierStartOfDay - getTimezoneOffsetInMilliseconds(earlierStartOfDay);\n\n  // Round the number of days to the nearest integer because the number of\n  // milliseconds in a day is not constant (e.g. it's different in the week of\n  // the daylight saving time clock shift).\n  return Math.round((laterTimestamp - earlierTimestamp) / millisecondsInDay);\n}\n\n// Fallback for modularized imports:\nexport default differenceInCalendarDays;\n","import { toDate } from \"./toDate.js\";\n\n/**\n * The {@link startOfYear} function options.\n */\n\n/**\n * @name startOfYear\n * @category Year Helpers\n * @summary Return the start of a year for the given date.\n *\n * @description\n * Return the start of a year for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - The options\n *\n * @returns The start of a year\n *\n * @example\n * // The start of a year for 2 September 2014 11:55:00:\n * const result = startOfYear(new Date(2014, 8, 2, 11, 55, 00))\n * //=> Wed Jan 01 2014 00:00:00\n */\nexport function startOfYear(date, options) {\n  const date_ = toDate(date, options?.in);\n  date_.setFullYear(date_.getFullYear(), 0, 1);\n  date_.setHours(0, 0, 0, 0);\n  return date_;\n}\n\n// Fallback for modularized imports:\nexport default startOfYear;\n","import { differenceInCalendarDays } from \"./differenceInCalendarDays.js\";\nimport { startOfYear } from \"./startOfYear.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link getDayOfYear} function options.\n */\n\n/**\n * @name getDayOfYear\n * @category Day Helpers\n * @summary Get the day of the year of the given date.\n *\n * @description\n * Get the day of the year of the given date.\n *\n * @param date - The given date\n * @param options - The options\n *\n * @returns The day of year\n *\n * @example\n * // Which day of the year is 2 July 2014?\n * const result = getDayOfYear(new Date(2014, 6, 2))\n * //=> 183\n */\nexport function getDayOfYear(date, options) {\n  const _date = toDate(date, options?.in);\n  const diff = differenceInCalendarDays(_date, startOfYear(_date));\n  const dayOfYear = diff + 1;\n  return dayOfYear;\n}\n\n// Fallback for modularized imports:\nexport default getDayOfYear;\n","import { getDefaultOptions } from \"./_lib/defaultOptions.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link startOfWeek} function options.\n */\n\n/**\n * @name startOfWeek\n * @category Week Helpers\n * @summary Return the start of a week for the given date.\n *\n * @description\n * Return the start of a week for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The start of a week\n *\n * @example\n * // The start of a week for 2 September 2014 11:55:00:\n * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Sun Aug 31 2014 00:00:00\n *\n * @example\n * // If the week starts on Monday, the start of the week for 2 September 2014 11:55:00:\n * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })\n * //=> Mon Sep 01 2014 00:00:00\n */\nexport function startOfWeek(date, options) {\n  const defaultOptions = getDefaultOptions();\n  const weekStartsOn =\n    options?.weekStartsOn ??\n    options?.locale?.options?.weekStartsOn ??\n    defaultOptions.weekStartsOn ??\n    defaultOptions.locale?.options?.weekStartsOn ??\n    0;\n\n  const _date = toDate(date, options?.in);\n  const day = _date.getDay();\n  const diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;\n\n  _date.setDate(_date.getDate() - diff);\n  _date.setHours(0, 0, 0, 0);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default startOfWeek;\n","import { startOfWeek } from \"./startOfWeek.js\";\n\n/**\n * The {@link startOfISOWeek} function options.\n */\n\n/**\n * @name startOfISOWeek\n * @category ISO Week Helpers\n * @summary Return the start of an ISO week for the given date.\n *\n * @description\n * Return the start of an ISO week for the given date.\n * The result will be in the local timezone.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The start of an ISO week\n *\n * @example\n * // The start of an ISO week for 2 September 2014 11:55:00:\n * const result = startOfISOWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Mon Sep 01 2014 00:00:00\n */\nexport function startOfISOWeek(date, options) {\n  return startOfWeek(date, { ...options, weekStartsOn: 1 });\n}\n\n// Fallback for modularized imports:\nexport default startOfISOWeek;\n","import { constructFrom } from \"./constructFrom.js\";\nimport { startOfISOWeek } from \"./startOfISOWeek.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link getISOWeekYear} function options.\n */\n\n/**\n * @name getISOWeekYear\n * @category ISO Week-Numbering Year Helpers\n * @summary Get the ISO week-numbering year of the given date.\n *\n * @description\n * Get the ISO week-numbering year of the given date,\n * which always starts 3 days before the year's first Thursday.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @param date - The given date\n *\n * @returns The ISO week-numbering year\n *\n * @example\n * // Which ISO-week numbering year is 2 January 2005?\n * const result = getISOWeekYear(new Date(2005, 0, 2))\n * //=> 2004\n */\nexport function getISOWeekYear(date, options) {\n  const _date = toDate(date, options?.in);\n  const year = _date.getFullYear();\n\n  const fourthOfJanuaryOfNextYear = constructFrom(_date, 0);\n  fourthOfJanuaryOfNextYear.setFullYear(year + 1, 0, 4);\n  fourthOfJanuaryOfNextYear.setHours(0, 0, 0, 0);\n  const startOfNextYear = startOfISOWeek(fourthOfJanuaryOfNextYear);\n\n  const fourthOfJanuaryOfThisYear = constructFrom(_date, 0);\n  fourthOfJanuaryOfThisYear.setFullYear(year, 0, 4);\n  fourthOfJanuaryOfThisYear.setHours(0, 0, 0, 0);\n  const startOfThisYear = startOfISOWeek(fourthOfJanuaryOfThisYear);\n\n  if (_date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1;\n  } else if (_date.getTime() >= startOfThisYear.getTime()) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}\n\n// Fallback for modularized imports:\nexport default getISOWeekYear;\n","import { constructFrom } from \"./constructFrom.js\";\nimport { getISOWeekYear } from \"./getISOWeekYear.js\";\nimport { startOfISOWeek } from \"./startOfISOWeek.js\";\n\n/**\n * The {@link startOfISOWeekYear} function options.\n */\n\n/**\n * @name startOfISOWeekYear\n * @category ISO Week-Numbering Year Helpers\n * @summary Return the start of an ISO week-numbering year for the given date.\n *\n * @description\n * Return the start of an ISO week-numbering year,\n * which always starts 3 days before the year's first Thursday.\n * The result will be in the local timezone.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The start of an ISO week-numbering year\n *\n * @example\n * // The start of an ISO week-numbering year for 2 July 2005:\n * const result = startOfISOWeekYear(new Date(2005, 6, 2))\n * //=> Mon Jan 03 2005 00:00:00\n */\nexport function startOfISOWeekYear(date, options) {\n  const year = getISOWeekYear(date, options);\n  const fourthOfJanuary = constructFrom(options?.in || date, 0);\n  fourthOfJanuary.setFullYear(year, 0, 4);\n  fourthOfJanuary.setHours(0, 0, 0, 0);\n  return startOfISOWeek(fourthOfJanuary);\n}\n\n// Fallback for modularized imports:\nexport default startOfISOWeekYear;\n","import { millisecondsInWeek } from \"./constants.js\";\nimport { startOfISOWeek } from \"./startOfISOWeek.js\";\nimport { startOfISOWeekYear } from \"./startOfISOWeekYear.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link getISOWeek} function options.\n */\n\n/**\n * @name getISOWeek\n * @category ISO Week Helpers\n * @summary Get the ISO week of the given date.\n *\n * @description\n * Get the ISO week of the given date.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @param date - The given date\n * @param options - The options\n *\n * @returns The ISO week\n *\n * @example\n * // Which week of the ISO-week numbering year is 2 January 2005?\n * const result = getISOWeek(new Date(2005, 0, 2))\n * //=> 53\n */\nexport function getISOWeek(date, options) {\n  const _date = toDate(date, options?.in);\n  const diff = +startOfISOWeek(_date) - +startOfISOWeekYear(_date);\n\n  // Round the number of weeks to the nearest integer because the number of\n  // milliseconds in a week is not constant (e.g. it's different in the week of\n  // the daylight saving time clock shift).\n  return Math.round(diff / millisecondsInWeek) + 1;\n}\n\n// Fallback for modularized imports:\nexport default getISOWeek;\n","import { getDefaultOptions } from \"./_lib/defaultOptions.js\";\nimport { constructFrom } from \"./constructFrom.js\";\nimport { startOfWeek } from \"./startOfWeek.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link getWeekYear} function options.\n */\n\n/**\n * @name getWeekYear\n * @category Week-Numbering Year Helpers\n * @summary Get the local week-numbering year of the given date.\n *\n * @description\n * Get the local week-numbering year of the given date.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\n *\n * @param date - The given date\n * @param options - An object with options.\n *\n * @returns The local week-numbering year\n *\n * @example\n * // Which week numbering year is 26 December 2004 with the default settings?\n * const result = getWeekYear(new Date(2004, 11, 26))\n * //=> 2005\n *\n * @example\n * // Which week numbering year is 26 December 2004 if week starts on Saturday?\n * const result = getWeekYear(new Date(2004, 11, 26), { weekStartsOn: 6 })\n * //=> 2004\n *\n * @example\n * // Which week numbering year is 26 December 2004 if the first week contains 4 January?\n * const result = getWeekYear(new Date(2004, 11, 26), { firstWeekContainsDate: 4 })\n * //=> 2004\n */\nexport function getWeekYear(date, options) {\n  const _date = toDate(date, options?.in);\n  const year = _date.getFullYear();\n\n  const defaultOptions = getDefaultOptions();\n  const firstWeekContainsDate =\n    options?.firstWeekContainsDate ??\n    options?.locale?.options?.firstWeekContainsDate ??\n    defaultOptions.firstWeekContainsDate ??\n    defaultOptions.locale?.options?.firstWeekContainsDate ??\n    1;\n\n  const firstWeekOfNextYear = constructFrom(options?.in || date, 0);\n  firstWeekOfNextYear.setFullYear(year + 1, 0, firstWeekContainsDate);\n  firstWeekOfNextYear.setHours(0, 0, 0, 0);\n  const startOfNextYear = startOfWeek(firstWeekOfNextYear, options);\n\n  const firstWeekOfThisYear = constructFrom(options?.in || date, 0);\n  firstWeekOfThisYear.setFullYear(year, 0, firstWeekContainsDate);\n  firstWeekOfThisYear.setHours(0, 0, 0, 0);\n  const startOfThisYear = startOfWeek(firstWeekOfThisYear, options);\n\n  if (+_date >= +startOfNextYear) {\n    return year + 1;\n  } else if (+_date >= +startOfThisYear) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}\n\n// Fallback for modularized imports:\nexport default getWeekYear;\n","import { getDefaultOptions } from \"./_lib/defaultOptions.js\";\nimport { constructFrom } from \"./constructFrom.js\";\nimport { getWeekYear } from \"./getWeekYear.js\";\nimport { startOfWeek } from \"./startOfWeek.js\";\n\n/**\n * The {@link startOfWeekYear} function options.\n */\n\n/**\n * @name startOfWeekYear\n * @category Week-Numbering Year Helpers\n * @summary Return the start of a local week-numbering year for the given date.\n *\n * @description\n * Return the start of a local week-numbering year.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type.\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The start of a week-numbering year\n *\n * @example\n * // The start of an a week-numbering year for 2 July 2005 with default settings:\n * const result = startOfWeekYear(new Date(2005, 6, 2))\n * //=> Sun Dec 26 2004 00:00:00\n *\n * @example\n * // The start of a week-numbering year for 2 July 2005\n * // if Monday is the first day of week\n * // and 4 January is always in the first week of the year:\n * const result = startOfWeekYear(new Date(2005, 6, 2), {\n *   weekStartsOn: 1,\n *   firstWeekContainsDate: 4\n * })\n * //=> Mon Jan 03 2005 00:00:00\n */\nexport function startOfWeekYear(date, options) {\n  const defaultOptions = getDefaultOptions();\n  const firstWeekContainsDate =\n    options?.firstWeekContainsDate ??\n    options?.locale?.options?.firstWeekContainsDate ??\n    defaultOptions.firstWeekContainsDate ??\n    defaultOptions.locale?.options?.firstWeekContainsDate ??\n    1;\n\n  const year = getWeekYear(date, options);\n  const firstWeek = constructFrom(options?.in || date, 0);\n  firstWeek.setFullYear(year, 0, firstWeekContainsDate);\n  firstWeek.setHours(0, 0, 0, 0);\n  const _date = startOfWeek(firstWeek, options);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default startOfWeekYear;\n","import { millisecondsInWeek } from \"./constants.js\";\nimport { startOfWeek } from \"./startOfWeek.js\";\nimport { startOfWeekYear } from \"./startOfWeekYear.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link getWeek} function options.\n */\n\n/**\n * @name getWeek\n * @category Week Helpers\n * @summary Get the local week index of the given date.\n *\n * @description\n * Get the local week index of the given date.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\n *\n * @param date - The given date\n * @param options - An object with options\n *\n * @returns The week\n *\n * @example\n * // Which week of the local week numbering year is 2 January 2005 with default options?\n * const result = getWeek(new Date(2005, 0, 2))\n * //=> 2\n *\n * @example\n * // Which week of the local week numbering year is 2 January 2005,\n * // if Monday is the first day of the week,\n * // and the first week of the year always contains 4 January?\n * const result = getWeek(new Date(2005, 0, 2), {\n *   weekStartsOn: 1,\n *   firstWeekContainsDate: 4\n * })\n * //=> 53\n */\nexport function getWeek(date, options) {\n  const _date = toDate(date, options?.in);\n  const diff = +startOfWeek(_date, options) - +startOfWeekYear(_date, options);\n\n  // Round the number of weeks to the nearest integer because the number of\n  // milliseconds in a week is not constant (e.g. it's different in the week of\n  // the daylight saving time clock shift).\n  return Math.round(diff / millisecondsInWeek) + 1;\n}\n\n// Fallback for modularized imports:\nexport default getWeek;\n","export function addLeadingZeros(number, targetLength) {\n  const sign = number < 0 ? \"-\" : \"\";\n  const output = Math.abs(number).toString().padStart(targetLength, \"0\");\n  return sign + output;\n}\n","import { addLeadingZeros } from \"../addLeadingZeros.js\";\n\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* |                                |\n * |  d  | Day of month                   |  D  |                                |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  m  | Minute                         |  M  | Month                          |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  y  | Year (abs)                     |  Y  |                                |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n */\n\nexport const lightFormatters = {\n  // Year\n  y(date, token) {\n    // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_tokens\n    // | Year     |     y | yy |   yyy |  yyyy | yyyyy |\n    // |----------|-------|----|-------|-------|-------|\n    // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |\n    // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |\n    // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |\n    // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |\n    // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |\n\n    const signedYear = date.getFullYear();\n    // Returns 1 for 1 BC (which is year 0 in JavaScript)\n    const year = signedYear > 0 ? signedYear : 1 - signedYear;\n    return addLeadingZeros(token === \"yy\" ? year % 100 : year, token.length);\n  },\n\n  // Month\n  M(date, token) {\n    const month = date.getMonth();\n    return token === \"M\" ? String(month + 1) : addLeadingZeros(month + 1, 2);\n  },\n\n  // Day of the month\n  d(date, token) {\n    return addLeadingZeros(date.getDate(), token.length);\n  },\n\n  // AM or PM\n  a(date, token) {\n    const dayPeriodEnumValue = date.getHours() / 12 >= 1 ? \"pm\" : \"am\";\n\n    switch (token) {\n      case \"a\":\n      case \"aa\":\n        return dayPeriodEnumValue.toUpperCase();\n      case \"aaa\":\n        return dayPeriodEnumValue;\n      case \"aaaaa\":\n        return dayPeriodEnumValue[0];\n      case \"aaaa\":\n      default:\n        return dayPeriodEnumValue === \"am\" ? \"a.m.\" : \"p.m.\";\n    }\n  },\n\n  // Hour [1-12]\n  h(date, token) {\n    return addLeadingZeros(date.getHours() % 12 || 12, token.length);\n  },\n\n  // Hour [0-23]\n  H(date, token) {\n    return addLeadingZeros(date.getHours(), token.length);\n  },\n\n  // Minute\n  m(date, token) {\n    return addLeadingZeros(date.getMinutes(), token.length);\n  },\n\n  // Second\n  s(date, token) {\n    return addLeadingZeros(date.getSeconds(), token.length);\n  },\n\n  // Fraction of second\n  S(date, token) {\n    const numberOfDigits = token.length;\n    const milliseconds = date.getMilliseconds();\n    const fractionalSeconds = Math.trunc(\n      milliseconds * Math.pow(10, numberOfDigits - 3),\n    );\n    return addLeadingZeros(fractionalSeconds, token.length);\n  },\n};\n","import { getDayOfYear } from \"../../getDayOfYear.js\";\nimport { getISOWeek } from \"../../getISOWeek.js\";\nimport { getISOWeekYear } from \"../../getISOWeekYear.js\";\nimport { getWeek } from \"../../getWeek.js\";\nimport { getWeekYear } from \"../../getWeekYear.js\";\n\nimport { addLeadingZeros } from \"../addLeadingZeros.js\";\nimport { lightFormatters } from \"./lightFormatters.js\";\n\nconst dayPeriodEnum = {\n  am: \"am\",\n  pm: \"pm\",\n  midnight: \"midnight\",\n  noon: \"noon\",\n  morning: \"morning\",\n  afternoon: \"afternoon\",\n  evening: \"evening\",\n  night: \"night\",\n};\n\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* | Milliseconds in day            |\n * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |\n * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |\n * |  d  | Day of month                   |  D  | Day of year                    |\n * |  e  | Local day of week              |  E  | Day of week                    |\n * |  f  |                                |  F* | Day of week in month           |\n * |  g* | Modified Julian day            |  G  | Era                            |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  i! | ISO day of week                |  I! | ISO week of year               |\n * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |\n * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |\n * |  l* | (deprecated)                   |  L  | Stand-alone month              |\n * |  m  | Minute                         |  M  | Month                          |\n * |  n  |                                |  N  |                                |\n * |  o! | Ordinal number modifier        |  O  | Timezone (GMT)                 |\n * |  p! | Long localized time            |  P! | Long localized date            |\n * |  q  | Stand-alone quarter            |  Q  | Quarter                        |\n * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |\n * |  u  | Extended year                  |  U* | Cyclic year                    |\n * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |\n * |  w  | Local week of year             |  W* | Week of month                  |\n * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |\n * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |\n * |  z  | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n *\n * Letters marked by ! are non-standard, but implemented by date-fns:\n * - `o` modifies the previous token to turn it into an ordinal (see `format` docs)\n * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,\n *   i.e. 7 for Sunday, 1 for Monday, etc.\n * - `I` is ISO week of year, as opposed to `w` which is local week of year.\n * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.\n *   `R` is supposed to be used in conjunction with `I` and `i`\n *   for universal ISO week-numbering date, whereas\n *   `Y` is supposed to be used in conjunction with `w` and `e`\n *   for week-numbering date specific to the locale.\n * - `P` is long localized date format\n * - `p` is long localized time format\n */\n\nexport const formatters = {\n  // Era\n  G: function (date, token, localize) {\n    const era = date.getFullYear() > 0 ? 1 : 0;\n    switch (token) {\n      // AD, BC\n      case \"G\":\n      case \"GG\":\n      case \"GGG\":\n        return localize.era(era, { width: \"abbreviated\" });\n      // A, B\n      case \"GGGGG\":\n        return localize.era(era, { width: \"narrow\" });\n      // Anno Domini, Before Christ\n      case \"GGGG\":\n      default:\n        return localize.era(era, { width: \"wide\" });\n    }\n  },\n\n  // Year\n  y: function (date, token, localize) {\n    // Ordinal number\n    if (token === \"yo\") {\n      const signedYear = date.getFullYear();\n      // Returns 1 for 1 BC (which is year 0 in JavaScript)\n      const year = signedYear > 0 ? signedYear : 1 - signedYear;\n      return localize.ordinalNumber(year, { unit: \"year\" });\n    }\n\n    return lightFormatters.y(date, token);\n  },\n\n  // Local week-numbering year\n  Y: function (date, token, localize, options) {\n    const signedWeekYear = getWeekYear(date, options);\n    // Returns 1 for 1 BC (which is year 0 in JavaScript)\n    const weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear;\n\n    // Two digit year\n    if (token === \"YY\") {\n      const twoDigitYear = weekYear % 100;\n      return addLeadingZeros(twoDigitYear, 2);\n    }\n\n    // Ordinal number\n    if (token === \"Yo\") {\n      return localize.ordinalNumber(weekYear, { unit: \"year\" });\n    }\n\n    // Padding\n    return addLeadingZeros(weekYear, token.length);\n  },\n\n  // ISO week-numbering year\n  R: function (date, token) {\n    const isoWeekYear = getISOWeekYear(date);\n\n    // Padding\n    return addLeadingZeros(isoWeekYear, token.length);\n  },\n\n  // Extended year. This is a single number designating the year of this calendar system.\n  // The main difference between `y` and `u` localizers are B.C. years:\n  // | Year | `y` | `u` |\n  // |------|-----|-----|\n  // | AC 1 |   1 |   1 |\n  // | BC 1 |   1 |   0 |\n  // | BC 2 |   2 |  -1 |\n  // Also `yy` always returns the last two digits of a year,\n  // while `uu` pads single digit years to 2 characters and returns other years unchanged.\n  u: function (date, token) {\n    const year = date.getFullYear();\n    return addLeadingZeros(year, token.length);\n  },\n\n  // Quarter\n  Q: function (date, token, localize) {\n    const quarter = Math.ceil((date.getMonth() + 1) / 3);\n    switch (token) {\n      // 1, 2, 3, 4\n      case \"Q\":\n        return String(quarter);\n      // 01, 02, 03, 04\n      case \"QQ\":\n        return addLeadingZeros(quarter, 2);\n      // 1st, 2nd, 3rd, 4th\n      case \"Qo\":\n        return localize.ordinalNumber(quarter, { unit: \"quarter\" });\n      // Q1, Q2, Q3, Q4\n      case \"QQQ\":\n        return localize.quarter(quarter, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n      case \"QQQQQ\":\n        return localize.quarter(quarter, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // 1st quarter, 2nd quarter, ...\n      case \"QQQQ\":\n      default:\n        return localize.quarter(quarter, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // Stand-alone quarter\n  q: function (date, token, localize) {\n    const quarter = Math.ceil((date.getMonth() + 1) / 3);\n    switch (token) {\n      // 1, 2, 3, 4\n      case \"q\":\n        return String(quarter);\n      // 01, 02, 03, 04\n      case \"qq\":\n        return addLeadingZeros(quarter, 2);\n      // 1st, 2nd, 3rd, 4th\n      case \"qo\":\n        return localize.ordinalNumber(quarter, { unit: \"quarter\" });\n      // Q1, Q2, Q3, Q4\n      case \"qqq\":\n        return localize.quarter(quarter, {\n          width: \"abbreviated\",\n          context: \"standalone\",\n        });\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n      case \"qqqqq\":\n        return localize.quarter(quarter, {\n          width: \"narrow\",\n          context: \"standalone\",\n        });\n      // 1st quarter, 2nd quarter, ...\n      case \"qqqq\":\n      default:\n        return localize.quarter(quarter, {\n          width: \"wide\",\n          context: \"standalone\",\n        });\n    }\n  },\n\n  // Month\n  M: function (date, token, localize) {\n    const month = date.getMonth();\n    switch (token) {\n      case \"M\":\n      case \"MM\":\n        return lightFormatters.M(date, token);\n      // 1st, 2nd, ..., 12th\n      case \"Mo\":\n        return localize.ordinalNumber(month + 1, { unit: \"month\" });\n      // Jan, Feb, ..., Dec\n      case \"MMM\":\n        return localize.month(month, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // J, F, ..., D\n      case \"MMMMM\":\n        return localize.month(month, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // January, February, ..., December\n      case \"MMMM\":\n      default:\n        return localize.month(month, { width: \"wide\", context: \"formatting\" });\n    }\n  },\n\n  // Stand-alone month\n  L: function (date, token, localize) {\n    const month = date.getMonth();\n    switch (token) {\n      // 1, 2, ..., 12\n      case \"L\":\n        return String(month + 1);\n      // 01, 02, ..., 12\n      case \"LL\":\n        return addLeadingZeros(month + 1, 2);\n      // 1st, 2nd, ..., 12th\n      case \"Lo\":\n        return localize.ordinalNumber(month + 1, { unit: \"month\" });\n      // Jan, Feb, ..., Dec\n      case \"LLL\":\n        return localize.month(month, {\n          width: \"abbreviated\",\n          context: \"standalone\",\n        });\n      // J, F, ..., D\n      case \"LLLLL\":\n        return localize.month(month, {\n          width: \"narrow\",\n          context: \"standalone\",\n        });\n      // January, February, ..., December\n      case \"LLLL\":\n      default:\n        return localize.month(month, { width: \"wide\", context: \"standalone\" });\n    }\n  },\n\n  // Local week of year\n  w: function (date, token, localize, options) {\n    const week = getWeek(date, options);\n\n    if (token === \"wo\") {\n      return localize.ordinalNumber(week, { unit: \"week\" });\n    }\n\n    return addLeadingZeros(week, token.length);\n  },\n\n  // ISO week of year\n  I: function (date, token, localize) {\n    const isoWeek = getISOWeek(date);\n\n    if (token === \"Io\") {\n      return localize.ordinalNumber(isoWeek, { unit: \"week\" });\n    }\n\n    return addLeadingZeros(isoWeek, token.length);\n  },\n\n  // Day of the month\n  d: function (date, token, localize) {\n    if (token === \"do\") {\n      return localize.ordinalNumber(date.getDate(), { unit: \"date\" });\n    }\n\n    return lightFormatters.d(date, token);\n  },\n\n  // Day of year\n  D: function (date, token, localize) {\n    const dayOfYear = getDayOfYear(date);\n\n    if (token === \"Do\") {\n      return localize.ordinalNumber(dayOfYear, { unit: \"dayOfYear\" });\n    }\n\n    return addLeadingZeros(dayOfYear, token.length);\n  },\n\n  // Day of week\n  E: function (date, token, localize) {\n    const dayOfWeek = date.getDay();\n    switch (token) {\n      // Tue\n      case \"E\":\n      case \"EE\":\n      case \"EEE\":\n        return localize.day(dayOfWeek, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // T\n      case \"EEEEE\":\n        return localize.day(dayOfWeek, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // Tu\n      case \"EEEEEE\":\n        return localize.day(dayOfWeek, {\n          width: \"short\",\n          context: \"formatting\",\n        });\n      // Tuesday\n      case \"EEEE\":\n      default:\n        return localize.day(dayOfWeek, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // Local day of week\n  e: function (date, token, localize, options) {\n    const dayOfWeek = date.getDay();\n    const localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;\n    switch (token) {\n      // Numerical value (Nth day of week with current locale or weekStartsOn)\n      case \"e\":\n        return String(localDayOfWeek);\n      // Padded numerical value\n      case \"ee\":\n        return addLeadingZeros(localDayOfWeek, 2);\n      // 1st, 2nd, ..., 7th\n      case \"eo\":\n        return localize.ordinalNumber(localDayOfWeek, { unit: \"day\" });\n      case \"eee\":\n        return localize.day(dayOfWeek, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // T\n      case \"eeeee\":\n        return localize.day(dayOfWeek, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // Tu\n      case \"eeeeee\":\n        return localize.day(dayOfWeek, {\n          width: \"short\",\n          context: \"formatting\",\n        });\n      // Tuesday\n      case \"eeee\":\n      default:\n        return localize.day(dayOfWeek, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // Stand-alone local day of week\n  c: function (date, token, localize, options) {\n    const dayOfWeek = date.getDay();\n    const localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;\n    switch (token) {\n      // Numerical value (same as in `e`)\n      case \"c\":\n        return String(localDayOfWeek);\n      // Padded numerical value\n      case \"cc\":\n        return addLeadingZeros(localDayOfWeek, token.length);\n      // 1st, 2nd, ..., 7th\n      case \"co\":\n        return localize.ordinalNumber(localDayOfWeek, { unit: \"day\" });\n      case \"ccc\":\n        return localize.day(dayOfWeek, {\n          width: \"abbreviated\",\n          context: \"standalone\",\n        });\n      // T\n      case \"ccccc\":\n        return localize.day(dayOfWeek, {\n          width: \"narrow\",\n          context: \"standalone\",\n        });\n      // Tu\n      case \"cccccc\":\n        return localize.day(dayOfWeek, {\n          width: \"short\",\n          context: \"standalone\",\n        });\n      // Tuesday\n      case \"cccc\":\n      default:\n        return localize.day(dayOfWeek, {\n          width: \"wide\",\n          context: \"standalone\",\n        });\n    }\n  },\n\n  // ISO day of week\n  i: function (date, token, localize) {\n    const dayOfWeek = date.getDay();\n    const isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;\n    switch (token) {\n      // 2\n      case \"i\":\n        return String(isoDayOfWeek);\n      // 02\n      case \"ii\":\n        return addLeadingZeros(isoDayOfWeek, token.length);\n      // 2nd\n      case \"io\":\n        return localize.ordinalNumber(isoDayOfWeek, { unit: \"day\" });\n      // Tue\n      case \"iii\":\n        return localize.day(dayOfWeek, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // T\n      case \"iiiii\":\n        return localize.day(dayOfWeek, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // Tu\n      case \"iiiiii\":\n        return localize.day(dayOfWeek, {\n          width: \"short\",\n          context: \"formatting\",\n        });\n      // Tuesday\n      case \"iiii\":\n      default:\n        return localize.day(dayOfWeek, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // AM or PM\n  a: function (date, token, localize) {\n    const hours = date.getHours();\n    const dayPeriodEnumValue = hours / 12 >= 1 ? \"pm\" : \"am\";\n\n    switch (token) {\n      case \"a\":\n      case \"aa\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      case \"aaa\":\n        return localize\n          .dayPeriod(dayPeriodEnumValue, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          })\n          .toLowerCase();\n      case \"aaaaa\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      case \"aaaa\":\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // AM, PM, midnight, noon\n  b: function (date, token, localize) {\n    const hours = date.getHours();\n    let dayPeriodEnumValue;\n    if (hours === 12) {\n      dayPeriodEnumValue = dayPeriodEnum.noon;\n    } else if (hours === 0) {\n      dayPeriodEnumValue = dayPeriodEnum.midnight;\n    } else {\n      dayPeriodEnumValue = hours / 12 >= 1 ? \"pm\" : \"am\";\n    }\n\n    switch (token) {\n      case \"b\":\n      case \"bb\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      case \"bbb\":\n        return localize\n          .dayPeriod(dayPeriodEnumValue, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          })\n          .toLowerCase();\n      case \"bbbbb\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      case \"bbbb\":\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // in the morning, in the afternoon, in the evening, at night\n  B: function (date, token, localize) {\n    const hours = date.getHours();\n    let dayPeriodEnumValue;\n    if (hours >= 17) {\n      dayPeriodEnumValue = dayPeriodEnum.evening;\n    } else if (hours >= 12) {\n      dayPeriodEnumValue = dayPeriodEnum.afternoon;\n    } else if (hours >= 4) {\n      dayPeriodEnumValue = dayPeriodEnum.morning;\n    } else {\n      dayPeriodEnumValue = dayPeriodEnum.night;\n    }\n\n    switch (token) {\n      case \"B\":\n      case \"BB\":\n      case \"BBB\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      case \"BBBBB\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      case \"BBBB\":\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // Hour [1-12]\n  h: function (date, token, localize) {\n    if (token === \"ho\") {\n      let hours = date.getHours() % 12;\n      if (hours === 0) hours = 12;\n      return localize.ordinalNumber(hours, { unit: \"hour\" });\n    }\n\n    return lightFormatters.h(date, token);\n  },\n\n  // Hour [0-23]\n  H: function (date, token, localize) {\n    if (token === \"Ho\") {\n      return localize.ordinalNumber(date.getHours(), { unit: \"hour\" });\n    }\n\n    return lightFormatters.H(date, token);\n  },\n\n  // Hour [0-11]\n  K: function (date, token, localize) {\n    const hours = date.getHours() % 12;\n\n    if (token === \"Ko\") {\n      return localize.ordinalNumber(hours, { unit: \"hour\" });\n    }\n\n    return addLeadingZeros(hours, token.length);\n  },\n\n  // Hour [1-24]\n  k: function (date, token, localize) {\n    let hours = date.getHours();\n    if (hours === 0) hours = 24;\n\n    if (token === \"ko\") {\n      return localize.ordinalNumber(hours, { unit: \"hour\" });\n    }\n\n    return addLeadingZeros(hours, token.length);\n  },\n\n  // Minute\n  m: function (date, token, localize) {\n    if (token === \"mo\") {\n      return localize.ordinalNumber(date.getMinutes(), { unit: \"minute\" });\n    }\n\n    return lightFormatters.m(date, token);\n  },\n\n  // Second\n  s: function (date, token, localize) {\n    if (token === \"so\") {\n      return localize.ordinalNumber(date.getSeconds(), { unit: \"second\" });\n    }\n\n    return lightFormatters.s(date, token);\n  },\n\n  // Fraction of second\n  S: function (date, token) {\n    return lightFormatters.S(date, token);\n  },\n\n  // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)\n  X: function (date, token, _localize) {\n    const timezoneOffset = date.getTimezoneOffset();\n\n    if (timezoneOffset === 0) {\n      return \"Z\";\n    }\n\n    switch (token) {\n      // Hours and optional minutes\n      case \"X\":\n        return formatTimezoneWithOptionalMinutes(timezoneOffset);\n\n      // Hours, minutes and optional seconds without `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XX`\n      case \"XXXX\":\n      case \"XX\": // Hours and minutes without `:` delimiter\n        return formatTimezone(timezoneOffset);\n\n      // Hours, minutes and optional seconds with `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XXX`\n      case \"XXXXX\":\n      case \"XXX\": // Hours and minutes with `:` delimiter\n      default:\n        return formatTimezone(timezoneOffset, \":\");\n    }\n  },\n\n  // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)\n  x: function (date, token, _localize) {\n    const timezoneOffset = date.getTimezoneOffset();\n\n    switch (token) {\n      // Hours and optional minutes\n      case \"x\":\n        return formatTimezoneWithOptionalMinutes(timezoneOffset);\n\n      // Hours, minutes and optional seconds without `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xx`\n      case \"xxxx\":\n      case \"xx\": // Hours and minutes without `:` delimiter\n        return formatTimezone(timezoneOffset);\n\n      // Hours, minutes and optional seconds with `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xxx`\n      case \"xxxxx\":\n      case \"xxx\": // Hours and minutes with `:` delimiter\n      default:\n        return formatTimezone(timezoneOffset, \":\");\n    }\n  },\n\n  // Timezone (GMT)\n  O: function (date, token, _localize) {\n    const timezoneOffset = date.getTimezoneOffset();\n\n    switch (token) {\n      // Short\n      case \"O\":\n      case \"OO\":\n      case \"OOO\":\n        return \"GMT\" + formatTimezoneShort(timezoneOffset, \":\");\n      // Long\n      case \"OOOO\":\n      default:\n        return \"GMT\" + formatTimezone(timezoneOffset, \":\");\n    }\n  },\n\n  // Timezone (specific non-location)\n  z: function (date, token, _localize) {\n    const timezoneOffset = date.getTimezoneOffset();\n\n    switch (token) {\n      // Short\n      case \"z\":\n      case \"zz\":\n      case \"zzz\":\n        return \"GMT\" + formatTimezoneShort(timezoneOffset, \":\");\n      // Long\n      case \"zzzz\":\n      default:\n        return \"GMT\" + formatTimezone(timezoneOffset, \":\");\n    }\n  },\n\n  // Seconds timestamp\n  t: function (date, token, _localize) {\n    const timestamp = Math.trunc(+date / 1000);\n    return addLeadingZeros(timestamp, token.length);\n  },\n\n  // Milliseconds timestamp\n  T: function (date, token, _localize) {\n    return addLeadingZeros(+date, token.length);\n  },\n};\n\nfunction formatTimezoneShort(offset, delimiter = \"\") {\n  const sign = offset > 0 ? \"-\" : \"+\";\n  const absOffset = Math.abs(offset);\n  const hours = Math.trunc(absOffset / 60);\n  const minutes = absOffset % 60;\n  if (minutes === 0) {\n    return sign + String(hours);\n  }\n  return sign + String(hours) + delimiter + addLeadingZeros(minutes, 2);\n}\n\nfunction formatTimezoneWithOptionalMinutes(offset, delimiter) {\n  if (offset % 60 === 0) {\n    const sign = offset > 0 ? \"-\" : \"+\";\n    return sign + addLeadingZeros(Math.abs(offset) / 60, 2);\n  }\n  return formatTimezone(offset, delimiter);\n}\n\nfunction formatTimezone(offset, delimiter = \"\") {\n  const sign = offset > 0 ? \"-\" : \"+\";\n  const absOffset = Math.abs(offset);\n  const hours = addLeadingZeros(Math.trunc(absOffset / 60), 2);\n  const minutes = addLeadingZeros(absOffset % 60, 2);\n  return sign + hours + delimiter + minutes;\n}\n","const dateLongFormatter = (pattern, formatLong) => {\n  switch (pattern) {\n    case \"P\":\n      return formatLong.date({ width: \"short\" });\n    case \"PP\":\n      return formatLong.date({ width: \"medium\" });\n    case \"PPP\":\n      return formatLong.date({ width: \"long\" });\n    case \"PPPP\":\n    default:\n      return formatLong.date({ width: \"full\" });\n  }\n};\n\nconst timeLongFormatter = (pattern, formatLong) => {\n  switch (pattern) {\n    case \"p\":\n      return formatLong.time({ width: \"short\" });\n    case \"pp\":\n      return formatLong.time({ width: \"medium\" });\n    case \"ppp\":\n      return formatLong.time({ width: \"long\" });\n    case \"pppp\":\n    default:\n      return formatLong.time({ width: \"full\" });\n  }\n};\n\nconst dateTimeLongFormatter = (pattern, formatLong) => {\n  const matchResult = pattern.match(/(P+)(p+)?/) || [];\n  const datePattern = matchResult[1];\n  const timePattern = matchResult[2];\n\n  if (!timePattern) {\n    return dateLongFormatter(pattern, formatLong);\n  }\n\n  let dateTimeFormat;\n\n  switch (datePattern) {\n    case \"P\":\n      dateTimeFormat = formatLong.dateTime({ width: \"short\" });\n      break;\n    case \"PP\":\n      dateTimeFormat = formatLong.dateTime({ width: \"medium\" });\n      break;\n    case \"PPP\":\n      dateTimeFormat = formatLong.dateTime({ width: \"long\" });\n      break;\n    case \"PPPP\":\n    default:\n      dateTimeFormat = formatLong.dateTime({ width: \"full\" });\n      break;\n  }\n\n  return dateTimeFormat\n    .replace(\"{{date}}\", dateLongFormatter(datePattern, formatLong))\n    .replace(\"{{time}}\", timeLongFormatter(timePattern, formatLong));\n};\n\nexport const longFormatters = {\n  p: timeLongFormatter,\n  P: dateTimeLongFormatter,\n};\n","const dayOfYearTokenRE = /^D+$/;\nconst weekYearTokenRE = /^Y+$/;\n\nconst throwTokens = [\"D\", \"DD\", \"YY\", \"YYYY\"];\n\nexport function isProtectedDayOfYearToken(token) {\n  return dayOfYearTokenRE.test(token);\n}\n\nexport function isProtectedWeekYearToken(token) {\n  return weekYearTokenRE.test(token);\n}\n\nexport function warnOrThrowProtectedError(token, format, input) {\n  const _message = message(token, format, input);\n  console.warn(_message);\n  if (throwTokens.includes(token)) throw new RangeError(_message);\n}\n\nfunction message(token, format, input) {\n  const subject = token[0] === \"Y\" ? \"years\" : \"days of the month\";\n  return `Use \\`${token.toLowerCase()}\\` instead of \\`${token}\\` (in \\`${format}\\`) for formatting ${subject} to the input \\`${input}\\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`;\n}\n","/**\n * @name isDate\n * @category Common Helpers\n * @summary Is the given value a date?\n *\n * @description\n * Returns true if the given value is an instance of Date. The function works for dates transferred across iframes.\n *\n * @param value - The value to check\n *\n * @returns True if the given value is a date\n *\n * @example\n * // For a valid date:\n * const result = isDate(new Date())\n * //=> true\n *\n * @example\n * // For an invalid date:\n * const result = isDate(new Date(NaN))\n * //=> true\n *\n * @example\n * // For some value:\n * const result = isDate('2014-02-31')\n * //=> false\n *\n * @example\n * // For an object:\n * const result = isDate({})\n * //=> false\n */\nexport function isDate(value) {\n  return (\n    value instanceof Date ||\n    (typeof value === \"object\" &&\n      Object.prototype.toString.call(value) === \"[object Date]\")\n  );\n}\n\n// Fallback for modularized imports:\nexport default isDate;\n","import { isDate } from \"./isDate.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * @name isValid\n * @category Common Helpers\n * @summary Is the given date valid?\n *\n * @description\n * Returns false if argument is Invalid Date and true otherwise.\n * Argument is converted to Date using `toDate`. See [toDate](https://date-fns.org/docs/toDate)\n * Invalid Date is a Date, whose time value is NaN.\n *\n * Time value of Date: http://es5.github.io/#x15.9.1.1\n *\n * @param date - The date to check\n *\n * @returns The date is valid\n *\n * @example\n * // For the valid date:\n * const result = isValid(new Date(2014, 1, 31))\n * //=> true\n *\n * @example\n * // For the value, convertible into a date:\n * const result = isValid(1393804800000)\n * //=> true\n *\n * @example\n * // For the invalid date:\n * const result = isValid(new Date(''))\n * //=> false\n */\nexport function isValid(date) {\n  return !((!isDate(date) && typeof date !== \"number\") || isNaN(+toDate(date)));\n}\n\n// Fallback for modularized imports:\nexport default isValid;\n","import { defaultLocale } from \"./_lib/defaultLocale.js\";\nimport { getDefaultOptions } from \"./_lib/defaultOptions.js\";\nimport { formatters } from \"./_lib/format/formatters.js\";\nimport { longFormatters } from \"./_lib/format/longFormatters.js\";\nimport {\n  isProtectedDayOfYearToken,\n  isProtectedWeekYearToken,\n  warnOrThrowProtectedError,\n} from \"./_lib/protectedTokens.js\";\nimport { isValid } from \"./isValid.js\";\nimport { toDate } from \"./toDate.js\";\n\n// Rexports of internal for libraries to use.\n// See: https://github.com/date-fns/date-fns/issues/3638#issuecomment-1877082874\nexport { formatters, longFormatters };\n\n// This RegExp consists of three parts separated by `|`:\n// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token\n//   (one of the certain letters followed by `o`)\n// - (\\w)\\1* matches any sequences of the same letter\n// - '' matches two quote characters in a row\n// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),\n//   except a single quote symbol, which ends the sequence.\n//   Two quote characters do not end the sequence.\n//   If there is no matching single quote\n//   then the sequence will continue until the end of the string.\n// - . matches any single character unmatched by previous parts of the RegExps\nconst formattingTokensRegExp =\n  /[yYQqMLwIdDecihHKkms]o|(\\w)\\1*|''|'(''|[^'])+('|$)|./g;\n\n// This RegExp catches symbols escaped by quotes, and also\n// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`\nconst longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;\n\nconst escapedStringRegExp = /^'([^]*?)'?$/;\nconst doubleQuoteRegExp = /''/g;\nconst unescapedLatinCharacterRegExp = /[a-zA-Z]/;\n\nexport { format as formatDate };\n\n/**\n * The {@link format} function options.\n */\n\n/**\n * @name format\n * @alias formatDate\n * @category Common Helpers\n * @summary Format the date.\n *\n * @description\n * Return the formatted date string in the given format. The result may vary by locale.\n *\n * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.\n * > See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * The characters wrapped between two single quotes characters (') are escaped.\n * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.\n * (see the last example)\n *\n * Format of the string is based on Unicode Technical Standard #35:\n * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * with a few additions (see note 7 below the table).\n *\n * Accepted patterns:\n * | Unit                            | Pattern | Result examples                   | Notes |\n * |---------------------------------|---------|-----------------------------------|-------|\n * | Era                             | G..GGG  | AD, BC                            |       |\n * |                                 | GGGG    | Anno Domini, Before Christ        | 2     |\n * |                                 | GGGGG   | A, B                              |       |\n * | Calendar year                   | y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | yo      | 44th, 1st, 0th, 17th              | 5,7   |\n * |                                 | yy      | 44, 01, 00, 17                    | 5     |\n * |                                 | yyy     | 044, 001, 1900, 2017              | 5     |\n * |                                 | yyyy    | 0044, 0001, 1900, 2017            | 5     |\n * |                                 | yyyyy   | ...                               | 3,5   |\n * | Local week-numbering year       | Y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | Yo      | 44th, 1st, 1900th, 2017th         | 5,7   |\n * |                                 | YY      | 44, 01, 00, 17                    | 5,8   |\n * |                                 | YYY     | 044, 001, 1900, 2017              | 5     |\n * |                                 | YYYY    | 0044, 0001, 1900, 2017            | 5,8   |\n * |                                 | YYYYY   | ...                               | 3,5   |\n * | ISO week-numbering year         | R       | -43, 0, 1, 1900, 2017             | 5,7   |\n * |                                 | RR      | -43, 00, 01, 1900, 2017           | 5,7   |\n * |                                 | RRR     | -043, 000, 001, 1900, 2017        | 5,7   |\n * |                                 | RRRR    | -0043, 0000, 0001, 1900, 2017     | 5,7   |\n * |                                 | RRRRR   | ...                               | 3,5,7 |\n * | Extended year                   | u       | -43, 0, 1, 1900, 2017             | 5     |\n * |                                 | uu      | -43, 01, 1900, 2017               | 5     |\n * |                                 | uuu     | -043, 001, 1900, 2017             | 5     |\n * |                                 | uuuu    | -0043, 0001, 1900, 2017           | 5     |\n * |                                 | uuuuu   | ...                               | 3,5   |\n * | Quarter (formatting)            | Q       | 1, 2, 3, 4                        |       |\n * |                                 | Qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | QQ      | 01, 02, 03, 04                    |       |\n * |                                 | QQQ     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | QQQQQ   | 1, 2, 3, 4                        | 4     |\n * | Quarter (stand-alone)           | q       | 1, 2, 3, 4                        |       |\n * |                                 | qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | qq      | 01, 02, 03, 04                    |       |\n * |                                 | qqq     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | qqqqq   | 1, 2, 3, 4                        | 4     |\n * | Month (formatting)              | M       | 1, 2, ..., 12                     |       |\n * |                                 | Mo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | MM      | 01, 02, ..., 12                   |       |\n * |                                 | MMM     | Jan, Feb, ..., Dec                |       |\n * |                                 | MMMM    | January, February, ..., December  | 2     |\n * |                                 | MMMMM   | J, F, ..., D                      |       |\n * | Month (stand-alone)             | L       | 1, 2, ..., 12                     |       |\n * |                                 | Lo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | LL      | 01, 02, ..., 12                   |       |\n * |                                 | LLL     | Jan, Feb, ..., Dec                |       |\n * |                                 | LLLL    | January, February, ..., December  | 2     |\n * |                                 | LLLLL   | J, F, ..., D                      |       |\n * | Local week of year              | w       | 1, 2, ..., 53                     |       |\n * |                                 | wo      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | ww      | 01, 02, ..., 53                   |       |\n * | ISO week of year                | I       | 1, 2, ..., 53                     | 7     |\n * |                                 | Io      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | II      | 01, 02, ..., 53                   | 7     |\n * | Day of month                    | d       | 1, 2, ..., 31                     |       |\n * |                                 | do      | 1st, 2nd, ..., 31st               | 7     |\n * |                                 | dd      | 01, 02, ..., 31                   |       |\n * | Day of year                     | D       | 1, 2, ..., 365, 366               | 9     |\n * |                                 | Do      | 1st, 2nd, ..., 365th, 366th       | 7     |\n * |                                 | DD      | 01, 02, ..., 365, 366             | 9     |\n * |                                 | DDD     | 001, 002, ..., 365, 366           |       |\n * |                                 | DDDD    | ...                               | 3     |\n * | Day of week (formatting)        | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | EEEEE   | M, T, W, T, F, S, S               |       |\n * |                                 | EEEEEE  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | ISO day of week (formatting)    | i       | 1, 2, 3, ..., 7                   | 7     |\n * |                                 | io      | 1st, 2nd, ..., 7th                | 7     |\n * |                                 | ii      | 01, 02, ..., 07                   | 7     |\n * |                                 | iii     | Mon, Tue, Wed, ..., Sun           | 7     |\n * |                                 | iiii    | Monday, Tuesday, ..., Sunday      | 2,7   |\n * |                                 | iiiii   | M, T, W, T, F, S, S               | 7     |\n * |                                 | iiiiii  | Mo, Tu, We, Th, Fr, Sa, Su        | 7     |\n * | Local day of week (formatting)  | e       | 2, 3, 4, ..., 1                   |       |\n * |                                 | eo      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | ee      | 02, 03, ..., 01                   |       |\n * |                                 | eee     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | eeee    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | eeeee   | M, T, W, T, F, S, S               |       |\n * |                                 | eeeeee  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | Local day of week (stand-alone) | c       | 2, 3, 4, ..., 1                   |       |\n * |                                 | co      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | cc      | 02, 03, ..., 01                   |       |\n * |                                 | ccc     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | cccc    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | ccccc   | M, T, W, T, F, S, S               |       |\n * |                                 | cccccc  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | AM, PM                          | a..aa   | AM, PM                            |       |\n * |                                 | aaa     | am, pm                            |       |\n * |                                 | aaaa    | a.m., p.m.                        | 2     |\n * |                                 | aaaaa   | a, p                              |       |\n * | AM, PM, noon, midnight          | b..bb   | AM, PM, noon, midnight            |       |\n * |                                 | bbb     | am, pm, noon, midnight            |       |\n * |                                 | bbbb    | a.m., p.m., noon, midnight        | 2     |\n * |                                 | bbbbb   | a, p, n, mi                       |       |\n * | Flexible day period             | B..BBB  | at night, in the morning, ...     |       |\n * |                                 | BBBB    | at night, in the morning, ...     | 2     |\n * |                                 | BBBBB   | at night, in the morning, ...     |       |\n * | Hour [1-12]                     | h       | 1, 2, ..., 11, 12                 |       |\n * |                                 | ho      | 1st, 2nd, ..., 11th, 12th         | 7     |\n * |                                 | hh      | 01, 02, ..., 11, 12               |       |\n * | Hour [0-23]                     | H       | 0, 1, 2, ..., 23                  |       |\n * |                                 | Ho      | 0th, 1st, 2nd, ..., 23rd          | 7     |\n * |                                 | HH      | 00, 01, 02, ..., 23               |       |\n * | Hour [0-11]                     | K       | 1, 2, ..., 11, 0                  |       |\n * |                                 | Ko      | 1st, 2nd, ..., 11th, 0th          | 7     |\n * |                                 | KK      | 01, 02, ..., 11, 00               |       |\n * | Hour [1-24]                     | k       | 24, 1, 2, ..., 23                 |       |\n * |                                 | ko      | 24th, 1st, 2nd, ..., 23rd         | 7     |\n * |                                 | kk      | 24, 01, 02, ..., 23               |       |\n * | Minute                          | m       | 0, 1, ..., 59                     |       |\n * |                                 | mo      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | mm      | 00, 01, ..., 59                   |       |\n * | Second                          | s       | 0, 1, ..., 59                     |       |\n * |                                 | so      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | ss      | 00, 01, ..., 59                   |       |\n * | Fraction of second              | S       | 0, 1, ..., 9                      |       |\n * |                                 | SS      | 00, 01, ..., 99                   |       |\n * |                                 | SSS     | 000, 001, ..., 999                |       |\n * |                                 | SSSS    | ...                               | 3     |\n * | Timezone (ISO-8601 w/ Z)        | X       | -08, +0530, Z                     |       |\n * |                                 | XX      | -0800, +0530, Z                   |       |\n * |                                 | XXX     | -08:00, +05:30, Z                 |       |\n * |                                 | XXXX    | -0800, +0530, Z, +123456          | 2     |\n * |                                 | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |\n * | Timezone (ISO-8601 w/o Z)       | x       | -08, +0530, +00                   |       |\n * |                                 | xx      | -0800, +0530, +0000               |       |\n * |                                 | xxx     | -08:00, +05:30, +00:00            | 2     |\n * |                                 | xxxx    | -0800, +0530, +0000, +123456      |       |\n * |                                 | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |\n * | Timezone (GMT)                  | O...OOO | GMT-8, GMT+5:30, GMT+0            |       |\n * |                                 | OOOO    | GMT-08:00, GMT+05:30, GMT+00:00   | 2     |\n * | Timezone (specific non-locat.)  | z...zzz | GMT-8, GMT+5:30, GMT+0            | 6     |\n * |                                 | zzzz    | GMT-08:00, GMT+05:30, GMT+00:00   | 2,6   |\n * | Seconds timestamp               | t       | 512969520                         | 7     |\n * |                                 | tt      | ...                               | 3,7   |\n * | Milliseconds timestamp          | T       | 512969520900                      | 7     |\n * |                                 | TT      | ...                               | 3,7   |\n * | Long localized date             | P       | 04/29/1453                        | 7     |\n * |                                 | PP      | Apr 29, 1453                      | 7     |\n * |                                 | PPP     | April 29th, 1453                  | 7     |\n * |                                 | PPPP    | Friday, April 29th, 1453          | 2,7   |\n * | Long localized time             | p       | 12:00 AM                          | 7     |\n * |                                 | pp      | 12:00:00 AM                       | 7     |\n * |                                 | ppp     | 12:00:00 AM GMT+2                 | 7     |\n * |                                 | pppp    | 12:00:00 AM GMT+02:00             | 2,7   |\n * | Combination of date and time    | Pp      | 04/29/1453, 12:00 AM              | 7     |\n * |                                 | PPpp    | Apr 29, 1453, 12:00:00 AM         | 7     |\n * |                                 | PPPppp  | April 29th, 1453 at ...           | 7     |\n * |                                 | PPPPpppp| Friday, April 29th, 1453 at ...   | 2,7   |\n * Notes:\n * 1. \"Formatting\" units (e.g. formatting quarter) in the default en-US locale\n *    are the same as \"stand-alone\" units, but are different in some languages.\n *    \"Formatting\" units are declined according to the rules of the language\n *    in the context of a date. \"Stand-alone\" units are always nominative singular:\n *\n *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`\n *\n *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`\n *\n * 2. Any sequence of the identical letters is a pattern, unless it is escaped by\n *    the single quote characters (see below).\n *    If the sequence is longer than listed in table (e.g. `EEEEEEEEEEE`)\n *    the output will be the same as default pattern for this unit, usually\n *    the longest one (in case of ISO weekdays, `EEEE`). Default patterns for units\n *    are marked with \"2\" in the last column of the table.\n *\n *    `format(new Date(2017, 10, 6), 'MMM') //=> 'Nov'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMM') //=> 'November'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMM') //=> 'N'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMMM') //=> 'November'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMMMM') //=> 'November'`\n *\n * 3. Some patterns could be unlimited length (such as `yyyyyyyy`).\n *    The output will be padded with zeros to match the length of the pattern.\n *\n *    `format(new Date(2017, 10, 6), 'yyyyyyyy') //=> '00002017'`\n *\n * 4. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.\n *    These tokens represent the shortest form of the quarter.\n *\n * 5. The main difference between `y` and `u` patterns are B.C. years:\n *\n *    | Year | `y` | `u` |\n *    |------|-----|-----|\n *    | AC 1 |   1 |   1 |\n *    | BC 1 |   1 |   0 |\n *    | BC 2 |   2 |  -1 |\n *\n *    Also `yy` always returns the last two digits of a year,\n *    while `uu` pads single digit years to 2 characters and returns other years unchanged:\n *\n *    | Year | `yy` | `uu` |\n *    |------|------|------|\n *    | 1    |   01 |   01 |\n *    | 14   |   14 |   14 |\n *    | 376  |   76 |  376 |\n *    | 1453 |   53 | 1453 |\n *\n *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),\n *    except local week-numbering years are dependent on `options.weekStartsOn`\n *    and `options.firstWeekContainsDate` (compare [getISOWeekYear](https://date-fns.org/docs/getISOWeekYear)\n *    and [getWeekYear](https://date-fns.org/docs/getWeekYear)).\n *\n * 6. Specific non-location timezones are currently unavailable in `date-fns`,\n *    so right now these tokens fall back to GMT timezones.\n *\n * 7. These patterns are not in the Unicode Technical Standard #35:\n *    - `i`: ISO day of week\n *    - `I`: ISO week of year\n *    - `R`: ISO week-numbering year\n *    - `t`: seconds timestamp\n *    - `T`: milliseconds timestamp\n *    - `o`: ordinal number modifier\n *    - `P`: long localized date\n *    - `p`: long localized time\n *\n * 8. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.\n *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * 9. `D` and `DD` tokens represent days of the year but they are often confused with days of the month.\n *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * @param date - The original date\n * @param format - The string of tokens\n * @param options - An object with options\n *\n * @returns The formatted date string\n *\n * @throws `date` must not be Invalid Date\n * @throws `options.locale` must contain `localize` property\n * @throws `options.locale` must contain `formatLong` property\n * @throws use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws format string contains an unescaped latin alphabet character\n *\n * @example\n * // Represent 11 February 2014 in middle-endian format:\n * const result = format(new Date(2014, 1, 11), 'MM/dd/yyyy')\n * //=> '02/11/2014'\n *\n * @example\n * // Represent 2 July 2014 in Esperanto:\n * import { eoLocale } from 'date-fns/locale/eo'\n * const result = format(new Date(2014, 6, 2), \"do 'de' MMMM yyyy\", {\n *   locale: eoLocale\n * })\n * //=> '2-a de julio 2014'\n *\n * @example\n * // Escape string by single quote characters:\n * const result = format(new Date(2014, 6, 2, 15), \"h 'o''clock'\")\n * //=> \"3 o'clock\"\n */\nexport function format(date, formatStr, options) {\n  const defaultOptions = getDefaultOptions();\n  const locale = options?.locale ?? defaultOptions.locale ?? defaultLocale;\n\n  const firstWeekContainsDate =\n    options?.firstWeekContainsDate ??\n    options?.locale?.options?.firstWeekContainsDate ??\n    defaultOptions.firstWeekContainsDate ??\n    defaultOptions.locale?.options?.firstWeekContainsDate ??\n    1;\n\n  const weekStartsOn =\n    options?.weekStartsOn ??\n    options?.locale?.options?.weekStartsOn ??\n    defaultOptions.weekStartsOn ??\n    defaultOptions.locale?.options?.weekStartsOn ??\n    0;\n\n  const originalDate = toDate(date, options?.in);\n\n  if (!isValid(originalDate)) {\n    throw new RangeError(\"Invalid time value\");\n  }\n\n  let parts = formatStr\n    .match(longFormattingTokensRegExp)\n    .map((substring) => {\n      const firstCharacter = substring[0];\n      if (firstCharacter === \"p\" || firstCharacter === \"P\") {\n        const longFormatter = longFormatters[firstCharacter];\n        return longFormatter(substring, locale.formatLong);\n      }\n      return substring;\n    })\n    .join(\"\")\n    .match(formattingTokensRegExp)\n    .map((substring) => {\n      // Replace two single quote characters with one single quote character\n      if (substring === \"''\") {\n        return { isToken: false, value: \"'\" };\n      }\n\n      const firstCharacter = substring[0];\n      if (firstCharacter === \"'\") {\n        return { isToken: false, value: cleanEscapedString(substring) };\n      }\n\n      if (formatters[firstCharacter]) {\n        return { isToken: true, value: substring };\n      }\n\n      if (firstCharacter.match(unescapedLatinCharacterRegExp)) {\n        throw new RangeError(\n          \"Format string contains an unescaped latin alphabet character `\" +\n            firstCharacter +\n            \"`\",\n        );\n      }\n\n      return { isToken: false, value: substring };\n    });\n\n  // invoke localize preprocessor (only for french locales at the moment)\n  if (locale.localize.preprocessor) {\n    parts = locale.localize.preprocessor(originalDate, parts);\n  }\n\n  const formatterOptions = {\n    firstWeekContainsDate,\n    weekStartsOn,\n    locale,\n  };\n\n  return parts\n    .map((part) => {\n      if (!part.isToken) return part.value;\n\n      const token = part.value;\n\n      if (\n        (!options?.useAdditionalWeekYearTokens &&\n          isProtectedWeekYearToken(token)) ||\n        (!options?.useAdditionalDayOfYearTokens &&\n          isProtectedDayOfYearToken(token))\n      ) {\n        warnOrThrowProtectedError(token, formatStr, String(date));\n      }\n\n      const formatter = formatters[token[0]];\n      return formatter(originalDate, token, locale.localize, formatterOptions);\n    })\n    .join(\"\");\n}\n\nfunction cleanEscapedString(input) {\n  const matched = input.match(escapedStringRegExp);\n\n  if (!matched) {\n    return input;\n  }\n\n  return matched[1].replace(doubleQuoteRegExp, \"'\");\n}\n\n// Fallback for modularized imports:\nexport default format;\n"],"names":[],"mappings":"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","ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]}