module.exports={851792:a=>{"use strict";var{g:b,__dirname:c}=a;a.s({httpRequest:()=>g}),a.i(175454);var d=a.i(771445),e=a.i(963018),f=a.i(62445);function g(a){return new Promise((b,c)=>{let g=(0,f.request)({method:"GET",...a,hostname:a.hostname?.replace(/^\[(.+)\]$/,"$1")});g.on("error",a=>{c(Object.assign(new d.ProviderError("Unable to connect to instance metadata service"),a)),g.destroy()}),g.on("timeout",()=>{c(new d.ProviderError("TimeoutError from instance metadata service")),g.destroy()}),g.on("response",a=>{let{statusCode:f=400}=a;(f<200||300<=f)&&(c(Object.assign(new d.ProviderError("Error response received from instance metadata service"),{statusCode:f})),g.destroy());let h=[];a.on("data",a=>{h.push(a)}),a.on("end",()=>{b(e.Buffer.concat(h)),g.destroy()})}),g.end()})}},609708:a=>{"use strict";var{g:b,__dirname:c}=a;{a.s({fromImdsCredentials:()=>c,isImdsCredentials:()=>b});let b=a=>!!a&&"object"==typeof a&&"string"==typeof a.AccessKeyId&&"string"==typeof a.SecretAccessKey&&"string"==typeof a.Token&&"string"==typeof a.Expiration,c=a=>({accessKeyId:a.AccessKeyId,secretAccessKey:a.SecretAccessKey,sessionToken:a.Token,expiration:new Date(a.Expiration),...a.AccountId&&{accountId:a.AccountId}})}},932370:a=>{"use strict";var{g:b,__dirname:c}=a;{a.s({DEFAULT_MAX_RETRIES:()=>c,DEFAULT_TIMEOUT:()=>b,providerConfigFromInit:()=>d});let b=1e3,c=0,d=({maxRetries:a=c,timeout:d=b})=>({maxRetries:a,timeout:d})}},773794:a=>{"use strict";var{g:b,__dirname:c}=a;{a.s({retry:()=>b});let b=(a,b)=>{let c=a();for(let d=0;d<b;d++)c=c.catch(a);return c}}},495668:a=>{"use strict";var{g:b,__dirname:c}=a;{a.s({ENV_CMDS_AUTH_TOKEN:()=>j,ENV_CMDS_FULL_URI:()=>b,ENV_CMDS_RELATIVE_URI:()=>c,fromContainerMetadata:()=>k}),a.i(175454);var d=a.i(9686),e=a.i(771485),f=a.i(851792),g=a.i(609708),h=a.i(932370),i=a.i(773794);let b="AWS_CONTAINER_CREDENTIALS_FULL_URI",c="AWS_CONTAINER_CREDENTIALS_RELATIVE_URI",j="AWS_CONTAINER_AUTHORIZATION_TOKEN",k=(a={})=>{let{timeout:b,maxRetries:c}=(0,h.providerConfigFromInit)(a);return()=>(0,i.retry)(async()=>{let c=await o({logger:a.logger}),e=JSON.parse(await l(b,c));if(!(0,g.isImdsCredentials)(e))throw new d.CredentialsProviderError("Invalid response received from instance metadata service.",{logger:a.logger});return(0,g.fromImdsCredentials)(e)},c)},l=async(a,b)=>(process.env[j]&&(b.headers={...b.headers,Authorization:process.env[j]}),(await (0,f.httpRequest)({...b,timeout:a})).toString()),m={localhost:!0,"127.0.0.1":!0},n={"http:":!0,"https:":!0},o=async({logger:a})=>{if(process.env[c])return{hostname:"169.254.170.2",path:process.env[c]};if(process.env[b]){let c=(0,e.parse)(process.env[b]);if(!c.hostname||!(c.hostname in m))throw new d.CredentialsProviderError(`${c.hostname} is not a valid container metadata service hostname`,{tryNextLink:!1,logger:a});if(!c.protocol||!(c.protocol in n))throw new d.CredentialsProviderError(`${c.protocol} is not a valid container metadata service protocol`,{tryNextLink:!1,logger:a});return{...c,port:c.port?parseInt(c.port,10):void 0}}throw new d.CredentialsProviderError(`The container metadata credential provider cannot be used unless the ${c} or ${b} environment variable is set`,{tryNextLink:!1,logger:a})}}},871993:a=>{"use strict";var{g:b,__dirname:c}=a;{a.s({InstanceMetadataV1FallbackError:()=>b}),a.i(175454);var d=a.i(9686);class b extends d.CredentialsProviderError{constructor(a,c=!0){super(a,c),this.tryNextLink=c,this.name="InstanceMetadataV1FallbackError",Object.setPrototypeOf(this,b.prototype)}}}},674768:a=>{"use strict";var b,{g:c,__dirname:d}=a;a.s({Endpoint:()=>b}),function(a){a.IPv4="http://169.254.169.254",a.IPv6="http://[fd00:ec2::254]"}(b||(b={}))},980800:a=>{"use strict";var{g:b,__dirname:c}=a;{a.s({CONFIG_ENDPOINT_NAME:()=>c,ENDPOINT_CONFIG_OPTIONS:()=>d,ENV_ENDPOINT_NAME:()=>b});let b="AWS_EC2_METADATA_SERVICE_ENDPOINT",c="ec2_metadata_service_endpoint",d={environmentVariableSelector:a=>a[b],configFileSelector:a=>a[c],default:void 0}}},499876:a=>{"use strict";var b,{g:c,__dirname:d}=a;a.s({EndpointMode:()=>b}),function(a){a.IPv4="IPv4",a.IPv6="IPv6"}(b||(b={}))},632021:a=>{"use strict";var{g:b,__dirname:c}=a;{a.s({CONFIG_ENDPOINT_MODE_NAME:()=>c,ENDPOINT_MODE_CONFIG_OPTIONS:()=>e,ENV_ENDPOINT_MODE_NAME:()=>b});var d=a.i(499876);let b="AWS_EC2_METADATA_SERVICE_ENDPOINT_MODE",c="ec2_metadata_service_endpoint_mode",e={environmentVariableSelector:a=>a[b],configFileSelector:a=>a[c],default:d.EndpointMode.IPv4}}},414892:a=>{"use strict";var{g:b,__dirname:c}=a;{a.s({getInstanceMetadataEndpoint:()=>b}),a.i(323031);var d=a.i(441146),e=a.i(942928),f=a.i(674768),g=a.i(980800),h=a.i(499876),i=a.i(632021);let b=async()=>(0,e.parseUrl)(await c()||await j()),c=async()=>(0,d.loadConfig)(g.ENDPOINT_CONFIG_OPTIONS)(),j=async()=>{let a=await (0,d.loadConfig)(i.ENDPOINT_MODE_CONFIG_OPTIONS)();switch(a){case h.EndpointMode.IPv4:return f.Endpoint.IPv4;case h.EndpointMode.IPv6:return f.Endpoint.IPv6;default:throw Error(`Unsupported endpoint mode: ${a}. Select from ${Object.values(h.EndpointMode)}`)}}}},282702:a=>{"use strict";var{g:b,__dirname:c}=a;{a.s({getExtendedInstanceMetadataCredentials:()=>b});let b=(a,b)=>{let c=300+Math.floor(300*Math.random()),d=new Date(Date.now()+1e3*c);b.warn(`Attempting credential expiration extension due to a credential service availability issue. A refresh of these credentials will be attempted after ${new Date(d)}.
For more information, please visit: https://docs.aws.amazon.com/sdkref/latest/guide/feature-static-credentials.html`);let e=a.originalExpiration??a.expiration;return{...a,...e?{originalExpiration:e}:{},expiration:d}}}},605105:a=>{"use strict";var{g:b,__dirname:c}=a;{a.s({staticStabilityProvider:()=>b});var d=a.i(282702);let b=(a,b={})=>{let c,e=b?.logger||console;return async()=>{let b;try{(b=await a()).expiration&&b.expiration.getTime()<Date.now()&&(b=(0,d.getExtendedInstanceMetadataCredentials)(b,e))}catch(a){if(c)e.warn("Credential renew failed: ",a),b=(0,d.getExtendedInstanceMetadataCredentials)(c,e);else throw a}return c=b,b}}}},341524:a=>{"use strict";var{g:b,__dirname:c}=a;{a.s({fromInstanceMetadata:()=>o}),a.i(323031);var d=a.i(441146);a.i(175454);var e=a.i(9686),f=a.i(871993),g=a.i(851792),h=a.i(609708),i=a.i(932370),j=a.i(773794),k=a.i(414892),l=a.i(605105);let b="/latest/meta-data/iam/security-credentials/",c="AWS_EC2_METADATA_V1_DISABLED",m="ec2_metadata_v1_disabled",n="x-aws-ec2-metadata-token",o=(a={})=>(0,l.staticStabilityProvider)(p(a),{logger:a.logger}),p=(a={})=>{let b=!1,{logger:g,profile:h}=a,{timeout:l,maxRetries:o}=(0,i.providerConfigFromInit)(a),p=async(g,i)=>{if(b||i.headers?.[n]==null){let b=!1,g=!1,i=await (0,d.loadConfig)({environmentVariableSelector:b=>{let d=b[c];if(g=!!d&&"false"!==d,void 0===d)throw new e.CredentialsProviderError(`${c} not set in env, checking config file next.`,{logger:a.logger});return g},configFileSelector:a=>{let c=a[m];return b=!!c&&"false"!==c},default:!1},{profile:h})();if(a.ec2MetadataV1Disabled||i){let d=[];throw a.ec2MetadataV1Disabled&&d.push("credential provider initialization (runtime option ec2MetadataV1Disabled)"),b&&d.push(`config file profile (${m})`),g&&d.push(`process environment variable (${c})`),new f.InstanceMetadataV1FallbackError(`AWS EC2 Metadata v1 fallback has been blocked by AWS SDK configuration in the following: [${d.join(", ")}].`)}}let k=(await (0,j.retry)(async()=>{let a;try{a=await r(i)}catch(a){throw 401===a.statusCode&&(b=!1),a}return a},g)).trim();return(0,j.retry)(async()=>{let c;try{c=await s(k,i,a)}catch(a){throw 401===a.statusCode&&(b=!1),a}return c},g)};return async()=>{let a=await (0,k.getInstanceMetadataEndpoint)();if(b)return g?.debug("AWS SDK Instance Metadata","using v1 fallback (no token fetch)"),p(o,{...a,timeout:l});{let c;try{c=(await q({...a,timeout:l})).toString()}catch(c){if(c?.statusCode===400)throw Object.assign(c,{message:"EC2 Metadata token request returned error"});return("TimeoutError"===c.message||[403,404,405].includes(c.statusCode))&&(b=!0),g?.debug("AWS SDK Instance Metadata","using v1 fallback (initial)"),p(o,{...a,timeout:l})}return p(o,{...a,headers:{[n]:c},timeout:l})}}},q=async a=>(0,g.httpRequest)({...a,path:"/latest/api/token",method:"PUT",headers:{"x-aws-ec2-metadata-token-ttl-seconds":"21600"}}),r=async a=>(await (0,g.httpRequest)({...a,path:b})).toString(),s=async(a,c,d)=>{let f=JSON.parse((await (0,g.httpRequest)({...c,path:b+a})).toString());if(!(0,h.isImdsCredentials)(f))throw new e.CredentialsProviderError("Invalid response received from instance metadata service.",{logger:d.logger});return(0,h.fromImdsCredentials)(f)}}},755818:a=>{"use strict";var{g:b,__dirname:c}=a;a.s({})},163410:a=>{"use strict";var{g:b,__dirname:c}=a;a.s({}),a.i(495668),a.i(341524),a.i(932370),a.i(755818),a.i(851792),a.i(414892),a.i(674768)},817909:a=>{"use strict";var{g:b,__dirname:c}=a;a.s({}),a.i(495668),a.i(341524),a.i(932370),a.i(755818),a.i(851792),a.i(414892),a.i(674768),a.i(163410)},229422:a=>{"use strict";var{g:b,__dirname:c}=a;a.s({DEFAULT_MAX_RETRIES:()=>f.DEFAULT_MAX_RETRIES,DEFAULT_TIMEOUT:()=>f.DEFAULT_TIMEOUT,ENV_CMDS_AUTH_TOKEN:()=>d.ENV_CMDS_AUTH_TOKEN,ENV_CMDS_FULL_URI:()=>d.ENV_CMDS_FULL_URI,ENV_CMDS_RELATIVE_URI:()=>d.ENV_CMDS_RELATIVE_URI,Endpoint:()=>i.Endpoint,fromContainerMetadata:()=>d.fromContainerMetadata,fromInstanceMetadata:()=>e.fromInstanceMetadata,getInstanceMetadataEndpoint:()=>h.getInstanceMetadataEndpoint,httpRequest:()=>g.httpRequest,providerConfigFromInit:()=>f.providerConfigFromInit});var d=a.i(495668),e=a.i(341524),f=a.i(932370);a.i(755818);var g=a.i(851792),h=a.i(414892),i=a.i(674768);a.i(163410)},579174:a=>{"use strict";var{g:b,__dirname:c}=a;a.s({DEFAULT_MAX_RETRIES:()=>d.DEFAULT_MAX_RETRIES,DEFAULT_TIMEOUT:()=>d.DEFAULT_TIMEOUT,ENV_CMDS_AUTH_TOKEN:()=>d.ENV_CMDS_AUTH_TOKEN,ENV_CMDS_FULL_URI:()=>d.ENV_CMDS_FULL_URI,ENV_CMDS_RELATIVE_URI:()=>d.ENV_CMDS_RELATIVE_URI,Endpoint:()=>d.Endpoint,fromContainerMetadata:()=>d.fromContainerMetadata,fromInstanceMetadata:()=>d.fromInstanceMetadata,getInstanceMetadataEndpoint:()=>d.getInstanceMetadataEndpoint,httpRequest:()=>d.httpRequest,providerConfigFromInit:()=>d.providerConfigFromInit}),a.i(817909);var d=a.i(229422)}};

//# sourceMappingURL=9f50b_%40smithy_credential-provider-imds_dist-es_1d341466._.js.map