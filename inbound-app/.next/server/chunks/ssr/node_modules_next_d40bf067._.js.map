{"version":3,"sources":["turbopack:///[project]/node_modules/next/src/server/lib/clone-response.ts","turbopack:///[project]/node_modules/next/src/server/lib/dedupe-fetch.ts","turbopack:///[project]/node_modules/next/src/server/response-cache/types.ts","turbopack:///[project]/node_modules/next/src/lib/batcher.ts","turbopack:///[project]/node_modules/next/src/server/request-meta.ts","turbopack:///[project]/node_modules/next/src/server/base-http/helpers.ts","turbopack:///[project]/node_modules/next/src/server/web/spec-extension/adapters/next-request.ts","turbopack:///[project]/node_modules/next/src/server/client-component-renderer-logger.ts","turbopack:///[project]/node_modules/next/src/server/pipe-readable.ts","turbopack:///[project]/node_modules/next/src/server/render-result.ts","turbopack:///[project]/node_modules/next/src/server/route-kind.ts","turbopack:///[project]/node_modules/next/src/server/response-cache/utils.ts","turbopack:///[project]/node_modules/next/src/server/response-cache/index.ts","turbopack:///[project]/node_modules/next/src/server/lib/patch-fetch.ts","turbopack:///[project]/node_modules/next/src/server/web/spec-extension/unstable-cache.ts","turbopack:///[project]/node_modules/next/src/shared/lib/router/utils/sorted-routes.ts","turbopack:///[project]/node_modules/next/src/shared/lib/router/utils/is-dynamic.ts","turbopack:///[project]/node_modules/next/src/shared/lib/router/utils/index.ts","turbopack:///[project]/node_modules/next/src/server/web/spec-extension/revalidate.ts","turbopack:///[project]/node_modules/next/src/server/web/spec-extension/unstable-no-store.ts","turbopack:///[project]/node_modules/next/src/server/use-cache/cache-life.ts","turbopack:///[project]/node_modules/next/src/server/use-cache/cache-tag.ts","turbopack:///[project]/node_modules/next/cache.js"],"sourcesContent":["/**\n * Clones a response by teeing the body so we can return two independent\n * ReadableStreams from it. This avoids the bug in the undici library around\n * response cloning.\n *\n * After cloning, the original response's body will be consumed and closed.\n *\n * @see https://github.com/vercel/next.js/pull/73274\n *\n * @param original - The original response to clone.\n * @returns A tuple containing two independent clones of the original response.\n */\nexport function cloneResponse(original: Response): [Response, Response] {\n  // If the response has no body, then we can just return the original response\n  // twice because it's immutable.\n  if (!original.body) {\n    return [original, original]\n  }\n\n  const [body1, body2] = original.body.tee()\n\n  const cloned1 = new Response(body1, {\n    status: original.status,\n    statusText: original.statusText,\n    headers: original.headers,\n  })\n\n  Object.defineProperty(cloned1, 'url', {\n    value: original.url,\n  })\n\n  const cloned2 = new Response(body2, {\n    status: original.status,\n    statusText: original.statusText,\n    headers: original.headers,\n  })\n\n  Object.defineProperty(cloned2, 'url', {\n    value: original.url,\n  })\n\n  return [cloned1, cloned2]\n}\n","/**\n * Based on https://github.com/facebook/react/blob/d4e78c42a94be027b4dc7ed2659a5fddfbf9bd4e/packages/react/src/ReactFetch.js\n */\nimport * as React from 'react'\nimport { cloneResponse } from './clone-response'\nimport { InvariantError } from '../../shared/lib/invariant-error'\n\nconst simpleCacheKey = '[\"GET\",[],null,\"follow\",null,null,null,null]' // generateCacheKey(new Request('https://blank'));\n\nfunction generateCacheKey(request: Request): string {\n  // We pick the fields that goes into the key used to dedupe requests.\n  // We don't include the `cache` field, because we end up using whatever\n  // caching resulted from the first request.\n  // Notably we currently don't consider non-standard (or future) options.\n  // This might not be safe. TODO: warn for non-standard extensions differing.\n  // IF YOU CHANGE THIS UPDATE THE simpleCacheKey ABOVE.\n  return JSON.stringify([\n    request.method,\n    Array.from(request.headers.entries()),\n    request.mode,\n    request.redirect,\n    request.credentials,\n    request.referrer,\n    request.referrerPolicy,\n    request.integrity,\n  ])\n}\n\ntype CacheEntry = [\n  key: string,\n  promise: Promise<Response>,\n  response: Response | null,\n]\n\nexport function createDedupeFetch(originalFetch: typeof fetch) {\n  const getCacheEntries = React.cache(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars -- url is the cache key\n    (url: string): CacheEntry[] => []\n  )\n\n  return function dedupeFetch(\n    resource: URL | RequestInfo,\n    options?: RequestInit\n  ): Promise<Response> {\n    if (options && options.signal) {\n      // If we're passed a signal, then we assume that\n      // someone else controls the lifetime of this object and opts out of\n      // caching. It's effectively the opt-out mechanism.\n      // Ideally we should be able to check this on the Request but\n      // it always gets initialized with its own signal so we don't\n      // know if it's supposed to override - unless we also override the\n      // Request constructor.\n      return originalFetch(resource, options)\n    }\n    // Normalize the Request\n    let url: string\n    let cacheKey: string\n    if (typeof resource === 'string' && !options) {\n      // Fast path.\n      cacheKey = simpleCacheKey\n      url = resource\n    } else {\n      // Normalize the request.\n      // if resource is not a string or a URL (its an instance of Request)\n      // then do not instantiate a new Request but instead\n      // reuse the request as to not disturb the body in the event it's a ReadableStream.\n      const request =\n        typeof resource === 'string' || resource instanceof URL\n          ? new Request(resource, options)\n          : resource\n      if (\n        (request.method !== 'GET' && request.method !== 'HEAD') ||\n        request.keepalive\n      ) {\n        // We currently don't dedupe requests that might have side-effects. Those\n        // have to be explicitly cached. We assume that the request doesn't have a\n        // body if it's GET or HEAD.\n        // keepalive gets treated the same as if you passed a custom cache signal.\n        return originalFetch(resource, options)\n      }\n      cacheKey = generateCacheKey(request)\n      url = request.url\n    }\n\n    const cacheEntries = getCacheEntries(url)\n    for (let i = 0, j = cacheEntries.length; i < j; i += 1) {\n      const [key, promise] = cacheEntries[i]\n      if (key === cacheKey) {\n        return promise.then(() => {\n          const response = cacheEntries[i][2]\n          if (!response) throw new InvariantError('No cached response')\n\n          // We're cloning the response using this utility because there exists\n          // a bug in the undici library around response cloning. See the\n          // following pull request for more details:\n          // https://github.com/vercel/next.js/pull/73274\n          const [cloned1, cloned2] = cloneResponse(response)\n          cacheEntries[i][2] = cloned2\n          return cloned1\n        })\n      }\n    }\n\n    // We pass the original arguments here in case normalizing the Request\n    // doesn't include all the options in this environment.\n    const promise = originalFetch(resource, options)\n    const entry: CacheEntry = [cacheKey, promise, null]\n    cacheEntries.push(entry)\n\n    return promise.then((response) => {\n      // We're cloning the response using this utility because there exists\n      // a bug in the undici library around response cloning. See the\n      // following pull request for more details:\n      // https://github.com/vercel/next.js/pull/73274\n      const [cloned1, cloned2] = cloneResponse(response)\n      entry[2] = cloned2\n      return cloned1\n    })\n  }\n}\n","import type { OutgoingHttpHeaders } from 'http'\nimport type RenderResult from '../render-result'\nimport type { CacheControl, Revalidate } from '../lib/cache-control'\nimport type { RouteKind } from '../route-kind'\n\nexport interface ResponseCacheBase {\n  get(\n    key: string | null,\n    responseGenerator: ResponseGenerator,\n    context: {\n      isOnDemandRevalidate?: boolean\n      isPrefetch?: boolean\n      incrementalCache: IncrementalCache\n      /**\n       * This is a hint to the cache to help it determine what kind of route\n       * this is so it knows where to look up the cache entry from. If not\n       * provided it will test the filesystem to check.\n       */\n      routeKind: RouteKind\n\n      /**\n       * True if this is a fallback request.\n       */\n      isFallback?: boolean\n\n      /**\n       * True if the route is enabled for PPR.\n       */\n      isRoutePPREnabled?: boolean\n    }\n  ): Promise<ResponseCacheEntry | null>\n}\n\n// The server components HMR cache might store other data as well in the future,\n// at which point this should be refactored to a discriminated union type.\nexport interface ServerComponentsHmrCache {\n  get(key: string): CachedFetchData | undefined\n  set(key: string, data: CachedFetchData): void\n}\n\nexport type CachedFetchData = {\n  headers: Record<string, string>\n  body: string\n  url: string\n  status?: number\n}\n\nexport const enum CachedRouteKind {\n  APP_PAGE = 'APP_PAGE',\n  APP_ROUTE = 'APP_ROUTE',\n  PAGES = 'PAGES',\n  FETCH = 'FETCH',\n  REDIRECT = 'REDIRECT',\n  IMAGE = 'IMAGE',\n}\n\nexport interface CachedFetchValue {\n  kind: CachedRouteKind.FETCH\n  data: CachedFetchData\n  // tags are only present with file-system-cache\n  // fetch cache stores tags outside of cache entry\n  tags?: string[]\n  revalidate: number\n}\n\nexport interface CachedRedirectValue {\n  kind: CachedRouteKind.REDIRECT\n  props: Object\n}\n\nexport interface CachedAppPageValue {\n  kind: CachedRouteKind.APP_PAGE\n  // this needs to be a RenderResult so since renderResponse\n  // expects that type instead of a string\n  html: RenderResult\n  rscData: Buffer | undefined\n  status: number | undefined\n  postponed: string | undefined\n  headers: OutgoingHttpHeaders | undefined\n  segmentData: Map<string, Buffer> | undefined\n}\n\nexport interface CachedPageValue {\n  kind: CachedRouteKind.PAGES\n  // this needs to be a RenderResult so since renderResponse\n  // expects that type instead of a string\n  html: RenderResult\n  pageData: Object\n  status: number | undefined\n  headers: OutgoingHttpHeaders | undefined\n}\n\nexport interface CachedRouteValue {\n  kind: CachedRouteKind.APP_ROUTE\n  // this needs to be a RenderResult so since renderResponse\n  // expects that type instead of a string\n  body: Buffer\n  status: number\n  headers: OutgoingHttpHeaders\n}\n\nexport interface CachedImageValue {\n  kind: CachedRouteKind.IMAGE\n  etag: string\n  upstreamEtag: string\n  buffer: Buffer\n  extension: string\n  isMiss?: boolean\n  isStale?: boolean\n}\n\nexport interface IncrementalCachedAppPageValue {\n  kind: CachedRouteKind.APP_PAGE\n  // this needs to be a string since the cache expects to store\n  // the string value\n  html: string\n  rscData: Buffer | undefined\n  headers: OutgoingHttpHeaders | undefined\n  postponed: string | undefined\n  status: number | undefined\n  segmentData: Map<string, Buffer> | undefined\n}\n\nexport interface IncrementalCachedPageValue {\n  kind: CachedRouteKind.PAGES\n  // this needs to be a string since the cache expects to store\n  // the string value\n  html: string\n  pageData: Object\n  headers: OutgoingHttpHeaders | undefined\n  status: number | undefined\n}\n\nexport interface IncrementalResponseCacheEntry {\n  cacheControl?: CacheControl\n  /**\n   * timestamp in milliseconds to revalidate after\n   */\n  revalidateAfter?: Revalidate\n  /**\n   * `-1` here dictates a blocking revalidate should be used\n   */\n  isStale?: boolean | -1\n  isMiss?: boolean\n  isFallback: boolean | undefined\n  value: Exclude<IncrementalCacheValue, CachedFetchValue> | null\n}\n\nexport interface IncrementalFetchCacheEntry {\n  /**\n   * `-1` here dictates a blocking revalidate should be used\n   */\n  isStale?: boolean | -1\n  value: CachedFetchValue\n}\n\nexport type IncrementalCacheEntry =\n  | IncrementalResponseCacheEntry\n  | IncrementalFetchCacheEntry\n\nexport type IncrementalCacheValue =\n  | CachedRedirectValue\n  | IncrementalCachedPageValue\n  | IncrementalCachedAppPageValue\n  | CachedImageValue\n  | CachedFetchValue\n  | CachedRouteValue\n\nexport type ResponseCacheValue =\n  | CachedRedirectValue\n  | CachedPageValue\n  | CachedAppPageValue\n  | CachedImageValue\n  | CachedRouteValue\n\nexport type ResponseCacheEntry = {\n  cacheControl?: CacheControl\n  value: ResponseCacheValue | null\n  isStale?: boolean | -1\n  isMiss?: boolean\n  isFallback: boolean | undefined\n}\n\n/**\n * @param hasResolved whether the responseGenerator has resolved it's promise\n * @param previousCacheEntry the previous cache entry if it exists or the current\n */\nexport type ResponseGenerator = (state: {\n  hasResolved: boolean\n  previousCacheEntry?: IncrementalResponseCacheEntry | null\n  isRevalidating?: boolean\n}) => Promise<ResponseCacheEntry | null>\n\nexport const enum IncrementalCacheKind {\n  APP_PAGE = 'APP_PAGE',\n  APP_ROUTE = 'APP_ROUTE',\n  PAGES = 'PAGES',\n  FETCH = 'FETCH',\n  IMAGE = 'IMAGE',\n}\n\nexport interface GetIncrementalFetchCacheContext {\n  kind: IncrementalCacheKind.FETCH\n  revalidate?: Revalidate\n  fetchUrl?: string\n  fetchIdx?: number\n  tags?: string[]\n  softTags?: string[]\n}\n\nexport interface GetIncrementalResponseCacheContext {\n  kind: Exclude<IncrementalCacheKind, IncrementalCacheKind.FETCH>\n\n  /**\n   * True if the route is enabled for PPR.\n   */\n  isRoutePPREnabled?: boolean\n\n  /**\n   * True if this is a fallback request.\n   */\n  isFallback: boolean\n}\n\nexport interface SetIncrementalFetchCacheContext {\n  fetchCache: true\n  fetchUrl?: string\n  fetchIdx?: number\n  tags?: string[]\n}\n\nexport interface SetIncrementalResponseCacheContext {\n  fetchCache?: false\n  cacheControl?: CacheControl\n\n  /**\n   * True if the route is enabled for PPR.\n   */\n  isRoutePPREnabled?: boolean\n\n  /**\n   * True if this is a fallback request.\n   */\n  isFallback?: boolean\n}\n\nexport interface IncrementalResponseCache {\n  get(\n    cacheKey: string,\n    ctx: GetIncrementalResponseCacheContext\n  ): Promise<IncrementalResponseCacheEntry | null>\n  set(\n    key: string,\n    data: Exclude<IncrementalCacheValue, CachedFetchValue> | null,\n    ctx: SetIncrementalResponseCacheContext\n  ): Promise<void>\n}\n\nexport interface IncrementalCache extends IncrementalResponseCache {\n  get(\n    cacheKey: string,\n    ctx: GetIncrementalFetchCacheContext\n  ): Promise<IncrementalFetchCacheEntry | null>\n  get(\n    cacheKey: string,\n    ctx: GetIncrementalResponseCacheContext\n  ): Promise<IncrementalResponseCacheEntry | null>\n  set(\n    key: string,\n    data: CachedFetchValue | null,\n    ctx: SetIncrementalFetchCacheContext\n  ): Promise<void>\n  set(\n    key: string,\n    data: Exclude<IncrementalCacheValue, CachedFetchValue> | null,\n    ctx: SetIncrementalResponseCacheContext\n  ): Promise<void>\n}\n","import type { SchedulerFn } from './scheduler'\n\nimport { DetachedPromise } from './detached-promise'\n\ntype CacheKeyFn<K, C extends string | number | null> = (\n  key: K\n) => PromiseLike<C> | C\n\ntype BatcherOptions<K, C extends string | number | null> = {\n  cacheKeyFn?: CacheKeyFn<K, C>\n  schedulerFn?: SchedulerFn<void>\n}\n\ntype WorkFn<V, C> = (\n  key: C,\n  resolve: (value: V | PromiseLike<V>) => void\n) => Promise<V>\n\n/**\n * A wrapper for a function that will only allow one call to the function to\n * execute at a time.\n */\nexport class Batcher<K, V, C extends string | number | null> {\n  private readonly pending = new Map<C, Promise<V>>()\n\n  protected constructor(\n    private readonly cacheKeyFn?: CacheKeyFn<K, C>,\n    /**\n     * A function that will be called to schedule the wrapped function to be\n     * executed. This defaults to a function that will execute the function\n     * immediately.\n     */\n    private readonly schedulerFn: SchedulerFn<void> = (fn) => fn()\n  ) {}\n\n  /**\n   * Creates a new instance of PendingWrapper. If the key extends a string or\n   * number, the key will be used as the cache key. If the key is an object, a\n   * cache key function must be provided.\n   */\n  public static create<K extends string | number | null, V>(\n    options?: BatcherOptions<K, K>\n  ): Batcher<K, V, K>\n  public static create<K, V, C extends string | number | null>(\n    options: BatcherOptions<K, C> &\n      Required<Pick<BatcherOptions<K, C>, 'cacheKeyFn'>>\n  ): Batcher<K, V, C>\n  public static create<K, V, C extends string | number | null>(\n    options?: BatcherOptions<K, C>\n  ): Batcher<K, V, C> {\n    return new Batcher<K, V, C>(options?.cacheKeyFn, options?.schedulerFn)\n  }\n\n  /**\n   * Wraps a function in a promise that will be resolved or rejected only once\n   * for a given key. This will allow multiple calls to the function to be\n   * made, but only one will be executed at a time. The result of the first\n   * call will be returned to all callers.\n   *\n   * @param key the key to use for the cache\n   * @param fn the function to wrap\n   * @returns a promise that resolves to the result of the function\n   */\n  public async batch(key: K, fn: WorkFn<V, C>): Promise<V> {\n    const cacheKey = (this.cacheKeyFn ? await this.cacheKeyFn(key) : key) as C\n    if (cacheKey === null) {\n      return fn(cacheKey, Promise.resolve)\n    }\n\n    const pending = this.pending.get(cacheKey)\n    if (pending) return pending\n\n    const { promise, resolve, reject } = new DetachedPromise<V>()\n    this.pending.set(cacheKey, promise)\n\n    this.schedulerFn(async () => {\n      try {\n        const result = await fn(cacheKey, resolve)\n\n        // Resolving a promise multiple times is a no-op, so we can safely\n        // resolve all pending promises with the same result.\n        resolve(result)\n      } catch (err) {\n        reject(err)\n      } finally {\n        this.pending.delete(cacheKey)\n      }\n    })\n\n    return promise\n  }\n}\n","/* eslint-disable no-redeclare */\nimport type { IncomingMessage } from 'http'\nimport type { ParsedUrlQuery } from 'querystring'\nimport type { UrlWithParsedQuery } from 'url'\nimport type { BaseNextRequest } from './base-http'\nimport type { CloneableBody } from './body-streams'\nimport type { RouteMatch } from './route-matches/route-match'\nimport type { NEXT_RSC_UNION_QUERY } from '../client/components/app-router-headers'\nimport type { ServerComponentsHmrCache } from './response-cache'\n\n// FIXME: (wyattjoh) this is a temporary solution to allow us to pass data between bundled modules\nexport const NEXT_REQUEST_META = Symbol.for('NextInternalRequestMeta')\n\nexport type NextIncomingMessage = (BaseNextRequest | IncomingMessage) & {\n  [NEXT_REQUEST_META]?: RequestMeta\n}\n\nexport interface RequestMeta {\n  /**\n   * The query that was used to make the request.\n   */\n  initQuery?: ParsedUrlQuery\n\n  /**\n   * The URL that was used to make the request.\n   */\n  initURL?: string\n\n  /**\n   * The protocol that was used to make the request.\n   */\n  initProtocol?: string\n\n  /**\n   * The body that was read from the request. This is used to allow the body to\n   * be read multiple times.\n   */\n  clonableBody?: CloneableBody\n\n  /**\n   * True when the request matched a locale domain that was configured in the\n   * next.config.js file.\n   */\n  isLocaleDomain?: boolean\n\n  /**\n   * True when the request had locale information stripped from the pathname\n   * part of the URL.\n   */\n  didStripLocale?: boolean\n\n  /**\n   * If the request had it's URL rewritten, this is the URL it was rewritten to.\n   */\n  rewroteURL?: string\n\n  /**\n   * The cookies that were added by middleware and were added to the response.\n   */\n  middlewareCookie?: string[]\n\n  /**\n   * The match on the request for a given route.\n   */\n  match?: RouteMatch\n\n  /**\n   * The incremental cache to use for the request.\n   */\n  incrementalCache?: any\n\n  /**\n   * The server components HMR cache, only for dev.\n   */\n  serverComponentsHmrCache?: ServerComponentsHmrCache\n\n  /**\n   * Equals the segment path that was used for the prefetch RSC request.\n   */\n  segmentPrefetchRSCRequest?: string\n\n  /**\n   * True when the request is for the prefetch flight data.\n   */\n  isPrefetchRSCRequest?: true\n\n  /**\n   * True when the request is for the flight data.\n   */\n  isRSCRequest?: true\n\n  /**\n   * True when the request is for the `/_next/data` route using the pages\n   * router.\n   */\n  isNextDataReq?: true\n\n  /**\n   * Postponed state to use for resumption. If present it's assumed that the\n   * request is for a page that has postponed (there are no guarantees that the\n   * page actually has postponed though as it would incur an additional cache\n   * lookup).\n   */\n  postponed?: string\n\n  /**\n   * If provided, this will be called when a response cache entry was generated\n   * or looked up in the cache.\n   */\n  onCacheEntry?: (\n    cacheEntry: any,\n    requestMeta: any\n  ) => Promise<boolean | void> | boolean | void\n\n  /**\n   * The previous revalidate before rendering 404 page for notFound: true\n   */\n  notFoundRevalidate?: number | false\n\n  /**\n   * In development, the original source page that returned a 404.\n   */\n  developmentNotFoundSourcePage?: string\n\n  /**\n   * The path we routed to and should be invoked\n   */\n  invokePath?: string\n\n  /**\n   * The specific page output we should be matching\n   */\n  invokeOutput?: string\n\n  /**\n   * The status we are invoking the request with from routing\n   */\n  invokeStatus?: number\n\n  /**\n   * The routing error we are invoking with\n   */\n  invokeError?: Error\n\n  /**\n   * The query parsed for the invocation\n   */\n  invokeQuery?: Record<string, undefined | string | string[]>\n\n  /**\n   * Whether the request is a middleware invocation\n   */\n  middlewareInvoke?: boolean\n\n  /**\n   * Whether the default route matches were set on the request during routing.\n   */\n  didSetDefaultRouteMatches?: boolean\n\n  /**\n   * Whether the request is for the custom error page.\n   */\n  customErrorRender?: true\n\n  /**\n   * Whether to bubble up the NoFallbackError to the caller when a 404 is\n   * returned.\n   */\n  bubbleNoFallback?: true\n\n  /**\n   * True when the request had locale information inferred from the default\n   * locale.\n   */\n  localeInferredFromDefault?: true\n\n  /**\n   * The locale that was inferred or explicitly set for the request.\n   */\n  locale?: string\n\n  /**\n   * The default locale that was inferred or explicitly set for the request.\n   */\n  defaultLocale?: string\n}\n\n/**\n * Gets the request metadata. If no key is provided, the entire metadata object\n * is returned.\n *\n * @param req the request to get the metadata from\n * @param key the key to get from the metadata (optional)\n * @returns the value for the key or the entire metadata object\n */\nexport function getRequestMeta(\n  req: NextIncomingMessage,\n  key?: undefined\n): RequestMeta\nexport function getRequestMeta<K extends keyof RequestMeta>(\n  req: NextIncomingMessage,\n  key: K\n): RequestMeta[K]\nexport function getRequestMeta<K extends keyof RequestMeta>(\n  req: NextIncomingMessage,\n  key?: K\n): RequestMeta | RequestMeta[K] {\n  const meta = req[NEXT_REQUEST_META] || {}\n  return typeof key === 'string' ? meta[key] : meta\n}\n\n/**\n * Sets the request metadata.\n *\n * @param req the request to set the metadata on\n * @param meta the metadata to set\n * @returns the mutated request metadata\n */\nexport function setRequestMeta(req: NextIncomingMessage, meta: RequestMeta) {\n  req[NEXT_REQUEST_META] = meta\n  return meta\n}\n\n/**\n * Adds a value to the request metadata.\n *\n * @param request the request to mutate\n * @param key the key to set\n * @param value the value to set\n * @returns the mutated request metadata\n */\nexport function addRequestMeta<K extends keyof RequestMeta>(\n  request: NextIncomingMessage,\n  key: K,\n  value: RequestMeta[K]\n) {\n  const meta = getRequestMeta(request)\n  meta[key] = value\n  return setRequestMeta(request, meta)\n}\n\n/**\n * Removes a key from the request metadata.\n *\n * @param request the request to mutate\n * @param key the key to remove\n * @returns the mutated request metadata\n */\nexport function removeRequestMeta<K extends keyof RequestMeta>(\n  request: NextIncomingMessage,\n  key: K\n) {\n  const meta = getRequestMeta(request)\n  delete meta[key]\n  return setRequestMeta(request, meta)\n}\n\ntype NextQueryMetadata = {\n  /**\n   * The `_rsc` query parameter used for cache busting to ensure that the RSC\n   * requests do not get cached by the browser explicitly.\n   */\n  [NEXT_RSC_UNION_QUERY]?: string\n}\n\nexport type NextParsedUrlQuery = ParsedUrlQuery &\n  NextQueryMetadata & {\n    amp?: '1'\n  }\n\nexport interface NextUrlWithParsedQuery extends UrlWithParsedQuery {\n  query: NextParsedUrlQuery\n}\n","import type { BaseNextRequest, BaseNextResponse } from './'\nimport type { NodeNextRequest, NodeNextResponse } from './node'\nimport type { WebNextRequest, WebNextResponse } from './web'\n\n/**\n * This file provides some helpers that should be used in conjunction with\n * explicit environment checks. When combined with the environment checks, it\n * will ensure that the correct typings are used as well as enable code\n * elimination.\n */\n\n/**\n * Type guard to determine if a request is a WebNextRequest. This does not\n * actually check the type of the request, but rather the runtime environment.\n * It's expected that when the runtime environment is the edge runtime, that any\n * base request is a WebNextRequest.\n */\nexport const isWebNextRequest = (req: BaseNextRequest): req is WebNextRequest =>\n  process.env.NEXT_RUNTIME === 'edge'\n\n/**\n * Type guard to determine if a response is a WebNextResponse. This does not\n * actually check the type of the response, but rather the runtime environment.\n * It's expected that when the runtime environment is the edge runtime, that any\n * base response is a WebNextResponse.\n */\nexport const isWebNextResponse = (\n  res: BaseNextResponse\n): res is WebNextResponse => process.env.NEXT_RUNTIME === 'edge'\n\n/**\n * Type guard to determine if a request is a NodeNextRequest. This does not\n * actually check the type of the request, but rather the runtime environment.\n * It's expected that when the runtime environment is the node runtime, that any\n * base request is a NodeNextRequest.\n */\nexport const isNodeNextRequest = (\n  req: BaseNextRequest\n): req is NodeNextRequest => process.env.NEXT_RUNTIME !== 'edge'\n\n/**\n * Type guard to determine if a response is a NodeNextResponse. This does not\n * actually check the type of the response, but rather the runtime environment.\n * It's expected that when the runtime environment is the node runtime, that any\n * base response is a NodeNextResponse.\n */\nexport const isNodeNextResponse = (\n  res: BaseNextResponse\n): res is NodeNextResponse => process.env.NEXT_RUNTIME !== 'edge'\n","import type { BaseNextRequest } from '../../../base-http'\nimport type { NodeNextRequest } from '../../../base-http/node'\nimport type { WebNextRequest } from '../../../base-http/web'\nimport type { Writable } from 'node:stream'\n\nimport { getRequestMeta } from '../../../request-meta'\nimport { fromNodeOutgoingHttpHeaders } from '../../utils'\nimport { NextRequest } from '../request'\nimport { isNodeNextRequest, isWebNextRequest } from '../../../base-http/helpers'\n\nexport const ResponseAbortedName = 'ResponseAborted'\nexport class ResponseAborted extends Error {\n  public readonly name = ResponseAbortedName\n}\n\n/**\n * Creates an AbortController tied to the closing of a ServerResponse (or other\n * appropriate Writable).\n *\n * If the `close` event is fired before the `finish` event, then we'll send the\n * `abort` signal.\n */\nexport function createAbortController(response: Writable): AbortController {\n  const controller = new AbortController()\n\n  // If `finish` fires first, then `res.end()` has been called and the close is\n  // just us finishing the stream on our side. If `close` fires first, then we\n  // know the client disconnected before we finished.\n  response.once('close', () => {\n    if (response.writableFinished) return\n\n    controller.abort(new ResponseAborted())\n  })\n\n  return controller\n}\n\n/**\n * Creates an AbortSignal tied to the closing of a ServerResponse (or other\n * appropriate Writable).\n *\n * This cannot be done with the request (IncomingMessage or Readable) because\n * the `abort` event will not fire if to data has been fully read (because that\n * will \"close\" the readable stream and nothing fires after that).\n */\nexport function signalFromNodeResponse(response: Writable): AbortSignal {\n  const { errored, destroyed } = response\n  if (errored || destroyed) {\n    return AbortSignal.abort(errored ?? new ResponseAborted())\n  }\n\n  const { signal } = createAbortController(response)\n  return signal\n}\n\nexport class NextRequestAdapter {\n  public static fromBaseNextRequest(\n    request: BaseNextRequest,\n    signal: AbortSignal\n  ): NextRequest {\n    if (\n      // The type check here ensures that `req` is correctly typed, and the\n      // environment variable check provides dead code elimination.\n      process.env.NEXT_RUNTIME === 'edge' &&\n      isWebNextRequest(request)\n    ) {\n      return NextRequestAdapter.fromWebNextRequest(request)\n    } else if (\n      // The type check here ensures that `req` is correctly typed, and the\n      // environment variable check provides dead code elimination.\n      process.env.NEXT_RUNTIME !== 'edge' &&\n      isNodeNextRequest(request)\n    ) {\n      return NextRequestAdapter.fromNodeNextRequest(request, signal)\n    } else {\n      throw new Error('Invariant: Unsupported NextRequest type')\n    }\n  }\n\n  public static fromNodeNextRequest(\n    request: NodeNextRequest,\n    signal: AbortSignal\n  ): NextRequest {\n    // HEAD and GET requests can not have a body.\n    let body: BodyInit | null = null\n    if (request.method !== 'GET' && request.method !== 'HEAD' && request.body) {\n      // @ts-expect-error - this is handled by undici, when streams/web land use it instead\n      body = request.body\n    }\n\n    let url: URL\n    if (request.url.startsWith('http')) {\n      url = new URL(request.url)\n    } else {\n      // Grab the full URL from the request metadata.\n      const base = getRequestMeta(request, 'initURL')\n      if (!base || !base.startsWith('http')) {\n        // Because the URL construction relies on the fact that the URL provided\n        // is absolute, we need to provide a base URL. We can't use the request\n        // URL because it's relative, so we use a dummy URL instead.\n        url = new URL(request.url, 'http://n')\n      } else {\n        url = new URL(request.url, base)\n      }\n    }\n\n    return new NextRequest(url, {\n      method: request.method,\n      headers: fromNodeOutgoingHttpHeaders(request.headers),\n      duplex: 'half',\n      signal,\n      // geo\n      // ip\n      // nextConfig\n\n      // body can not be passed if request was aborted\n      // or we get a Request body was disturbed error\n      ...(signal.aborted\n        ? {}\n        : {\n            body,\n          }),\n    })\n  }\n\n  public static fromWebNextRequest(request: WebNextRequest): NextRequest {\n    // HEAD and GET requests can not have a body.\n    let body: ReadableStream | null = null\n    if (request.method !== 'GET' && request.method !== 'HEAD') {\n      body = request.body\n    }\n\n    return new NextRequest(request.url, {\n      method: request.method,\n      headers: fromNodeOutgoingHttpHeaders(request.headers),\n      duplex: 'half',\n      signal: request.request.signal,\n      // geo\n      // ip\n      // nextConfig\n\n      // body can not be passed if request was aborted\n      // or we get a Request body was disturbed error\n      ...(request.request.signal.aborted\n        ? {}\n        : {\n            body,\n          }),\n    })\n  }\n}\n","import type { AppPageModule } from './route-modules/app-page/module'\n\n// Combined load times for loading client components\nlet clientComponentLoadStart = 0\nlet clientComponentLoadTimes = 0\nlet clientComponentLoadCount = 0\n\nexport function wrapClientComponentLoader(\n  ComponentMod: AppPageModule\n): AppPageModule['__next_app__'] {\n  if (!('performance' in globalThis)) {\n    return ComponentMod.__next_app__\n  }\n\n  return {\n    require: (...args) => {\n      const startTime = performance.now()\n\n      if (clientComponentLoadStart === 0) {\n        clientComponentLoadStart = startTime\n      }\n\n      try {\n        clientComponentLoadCount += 1\n        return ComponentMod.__next_app__.require(...args)\n      } finally {\n        clientComponentLoadTimes += performance.now() - startTime\n      }\n    },\n    loadChunk: (...args) => {\n      const startTime = performance.now()\n      const result = ComponentMod.__next_app__.loadChunk(...args)\n      // Avoid wrapping `loadChunk`'s result in an extra promise in case something like React depends on its identity.\n      // We only need to know when it's settled.\n      result.finally(() => {\n        clientComponentLoadTimes += performance.now() - startTime\n      })\n      return result\n    },\n  }\n}\n\nexport function getClientComponentLoaderMetrics(\n  options: { reset?: boolean } = {}\n) {\n  const metrics =\n    clientComponentLoadStart === 0\n      ? undefined\n      : {\n          clientComponentLoadStart,\n          clientComponentLoadTimes,\n          clientComponentLoadCount,\n        }\n\n  if (options.reset) {\n    clientComponentLoadStart = 0\n    clientComponentLoadTimes = 0\n    clientComponentLoadCount = 0\n  }\n\n  return metrics\n}\n","import type { ServerResponse } from 'node:http'\n\nimport {\n  ResponseAbortedName,\n  createAbortController,\n} from './web/spec-extension/adapters/next-request'\nimport { DetachedPromise } from '../lib/detached-promise'\nimport { getTracer } from './lib/trace/tracer'\nimport { NextNodeServerSpan } from './lib/trace/constants'\nimport { getClientComponentLoaderMetrics } from './client-component-renderer-logger'\n\nexport function isAbortError(e: any): e is Error & { name: 'AbortError' } {\n  return e?.name === 'AbortError' || e?.name === ResponseAbortedName\n}\n\nfunction createWriterFromResponse(\n  res: ServerResponse,\n  waitUntilForEnd?: Promise<unknown>\n): WritableStream<Uint8Array> {\n  let started = false\n\n  // Create a promise that will resolve once the response has drained. See\n  // https://nodejs.org/api/stream.html#stream_event_drain\n  let drained = new DetachedPromise<void>()\n  function onDrain() {\n    drained.resolve()\n  }\n  res.on('drain', onDrain)\n\n  // If the finish event fires, it means we shouldn't block and wait for the\n  // drain event.\n  res.once('close', () => {\n    res.off('drain', onDrain)\n    drained.resolve()\n  })\n\n  // Create a promise that will resolve once the response has finished. See\n  // https://nodejs.org/api/http.html#event-finish_1\n  const finished = new DetachedPromise<void>()\n  res.once('finish', () => {\n    finished.resolve()\n  })\n\n  // Create a writable stream that will write to the response.\n  return new WritableStream<Uint8Array>({\n    write: async (chunk) => {\n      // You'd think we'd want to use `start` instead of placing this in `write`\n      // but this ensures that we don't actually flush the headers until we've\n      // started writing chunks.\n      if (!started) {\n        started = true\n\n        if (\n          'performance' in globalThis &&\n          process.env.NEXT_OTEL_PERFORMANCE_PREFIX\n        ) {\n          const metrics = getClientComponentLoaderMetrics()\n          if (metrics) {\n            performance.measure(\n              `${process.env.NEXT_OTEL_PERFORMANCE_PREFIX}:next-client-component-loading`,\n              {\n                start: metrics.clientComponentLoadStart,\n                end:\n                  metrics.clientComponentLoadStart +\n                  metrics.clientComponentLoadTimes,\n              }\n            )\n          }\n        }\n\n        res.flushHeaders()\n        getTracer().trace(\n          NextNodeServerSpan.startResponse,\n          {\n            spanName: 'start response',\n          },\n          () => undefined\n        )\n      }\n\n      try {\n        const ok = res.write(chunk)\n\n        // Added by the `compression` middleware, this is a function that will\n        // flush the partially-compressed response to the client.\n        if ('flush' in res && typeof res.flush === 'function') {\n          res.flush()\n        }\n\n        // If the write returns false, it means there's some backpressure, so\n        // wait until it's streamed before continuing.\n        if (!ok) {\n          await drained.promise\n\n          // Reset the drained promise so that we can wait for the next drain event.\n          drained = new DetachedPromise<void>()\n        }\n      } catch (err) {\n        res.end()\n        throw new Error('failed to write chunk to response', { cause: err })\n      }\n    },\n    abort: (err) => {\n      if (res.writableFinished) return\n\n      res.destroy(err)\n    },\n    close: async () => {\n      // if a waitUntil promise was passed, wait for it to resolve before\n      // ending the response.\n      if (waitUntilForEnd) {\n        await waitUntilForEnd\n      }\n\n      if (res.writableFinished) return\n\n      res.end()\n      return finished.promise\n    },\n  })\n}\n\nexport async function pipeToNodeResponse(\n  readable: ReadableStream<Uint8Array>,\n  res: ServerResponse,\n  waitUntilForEnd?: Promise<unknown>\n) {\n  try {\n    // If the response has already errored, then just return now.\n    const { errored, destroyed } = res\n    if (errored || destroyed) return\n\n    // Create a new AbortController so that we can abort the readable if the\n    // client disconnects.\n    const controller = createAbortController(res)\n\n    const writer = createWriterFromResponse(res, waitUntilForEnd)\n\n    await readable.pipeTo(writer, { signal: controller.signal })\n  } catch (err: any) {\n    // If this isn't related to an abort error, re-throw it.\n    if (isAbortError(err)) return\n\n    throw new Error('failed to pipe response', { cause: err })\n  }\n}\n","import type { OutgoingHttpHeaders, ServerResponse } from 'http'\nimport type { CacheControl } from './lib/cache-control'\nimport type { FetchMetrics } from './base-http'\n\nimport {\n  chainStreams,\n  streamFromBuffer,\n  streamFromString,\n  streamToBuffer,\n  streamToString,\n} from './stream-utils/node-web-streams-helper'\nimport { isAbortError, pipeToNodeResponse } from './pipe-readable'\nimport type { RenderResumeDataCache } from './resume-data-cache/resume-data-cache'\n\ntype ContentTypeOption = string | undefined\n\nexport type AppPageRenderResultMetadata = {\n  flightData?: Buffer\n  cacheControl?: CacheControl\n  staticBailoutInfo?: {\n    stack?: string\n    description?: string\n  }\n\n  /**\n   * The postponed state if the render had postponed and needs to be resumed.\n   */\n  postponed?: string\n\n  /**\n   * The headers to set on the response that were added by the render.\n   */\n  headers?: OutgoingHttpHeaders\n  fetchTags?: string\n  fetchMetrics?: FetchMetrics\n\n  segmentData?: Map<string, Buffer>\n\n  /**\n   * In development, the cache is warmed up before the render. This is attached\n   * to the metadata so that it can be used during the render.\n   */\n  devRenderResumeDataCache?: RenderResumeDataCache\n}\n\nexport type PagesRenderResultMetadata = {\n  pageData?: any\n  cacheControl?: CacheControl\n  assetQueryString?: string\n  isNotFound?: boolean\n  isRedirect?: boolean\n}\n\nexport type StaticRenderResultMetadata = {}\n\nexport type RenderResultMetadata = AppPageRenderResultMetadata &\n  PagesRenderResultMetadata &\n  StaticRenderResultMetadata\n\nexport type RenderResultResponse =\n  | ReadableStream<Uint8Array>[]\n  | ReadableStream<Uint8Array>\n  | string\n  | Buffer\n  | null\n\nexport type RenderResultOptions<\n  Metadata extends RenderResultMetadata = RenderResultMetadata,\n> = {\n  contentType?: ContentTypeOption\n  waitUntil?: Promise<unknown>\n  metadata: Metadata\n}\n\nexport default class RenderResult<\n  Metadata extends RenderResultMetadata = RenderResultMetadata,\n> {\n  /**\n   * The detected content type for the response. This is used to set the\n   * `Content-Type` header.\n   */\n  public readonly contentType: ContentTypeOption\n\n  /**\n   * The metadata for the response. This is used to set the revalidation times\n   * and other metadata.\n   */\n  public readonly metadata: Readonly<Metadata>\n\n  /**\n   * The response itself. This can be a string, a stream, or null. If it's a\n   * string, then it's a static response. If it's a stream, then it's a\n   * dynamic response. If it's null, then the response was not found or was\n   * already sent.\n   */\n  private response: RenderResultResponse\n\n  /**\n   * Creates a new RenderResult instance from a static response.\n   *\n   * @param value the static response value\n   * @returns a new RenderResult instance\n   */\n  public static fromStatic(value: string | Buffer) {\n    return new RenderResult<StaticRenderResultMetadata>(value, { metadata: {} })\n  }\n\n  private readonly waitUntil?: Promise<unknown>\n\n  constructor(\n    response: RenderResultResponse,\n    { contentType, waitUntil, metadata }: RenderResultOptions<Metadata>\n  ) {\n    this.response = response\n    this.contentType = contentType\n    this.metadata = metadata\n    this.waitUntil = waitUntil\n  }\n\n  public assignMetadata(metadata: Metadata) {\n    Object.assign(this.metadata, metadata)\n  }\n\n  /**\n   * Returns true if the response is null. It can be null if the response was\n   * not found or was already sent.\n   */\n  public get isNull(): boolean {\n    return this.response === null\n  }\n\n  /**\n   * Returns false if the response is a string. It can be a string if the page\n   * was prerendered. If it's not, then it was generated dynamically.\n   */\n  public get isDynamic(): boolean {\n    return typeof this.response !== 'string'\n  }\n\n  public toUnchunkedBuffer(stream?: false): Buffer\n  public toUnchunkedBuffer(stream: true): Promise<Buffer>\n  public toUnchunkedBuffer(stream = false): Promise<Buffer> | Buffer {\n    if (this.response === null) {\n      throw new Error('Invariant: null responses cannot be unchunked')\n    }\n\n    if (typeof this.response !== 'string') {\n      if (!stream) {\n        throw new Error(\n          'Invariant: dynamic responses cannot be unchunked. This is a bug in Next.js'\n        )\n      }\n\n      return streamToBuffer(this.readable)\n    }\n\n    return Buffer.from(this.response)\n  }\n\n  /**\n   * Returns the response if it is a string. If the page was dynamic, this will\n   * return a promise if the `stream` option is true, or it will throw an error.\n   *\n   * @param stream Whether or not to return a promise if the response is dynamic\n   * @returns The response as a string\n   */\n  public toUnchunkedString(stream?: false): string\n  public toUnchunkedString(stream: true): Promise<string>\n  public toUnchunkedString(stream = false): Promise<string> | string {\n    if (this.response === null) {\n      throw new Error('Invariant: null responses cannot be unchunked')\n    }\n\n    if (typeof this.response !== 'string') {\n      if (!stream) {\n        throw new Error(\n          'Invariant: dynamic responses cannot be unchunked. This is a bug in Next.js'\n        )\n      }\n\n      return streamToString(this.readable)\n    }\n\n    return this.response\n  }\n\n  /**\n   * Returns the response if it is a stream, or throws an error if it is a\n   * string.\n   */\n  private get readable(): ReadableStream<Uint8Array> {\n    if (this.response === null) {\n      throw new Error('Invariant: null responses cannot be streamed')\n    }\n    if (typeof this.response === 'string') {\n      throw new Error('Invariant: static responses cannot be streamed')\n    }\n\n    if (Buffer.isBuffer(this.response)) {\n      return streamFromBuffer(this.response)\n    }\n\n    // If the response is an array of streams, then chain them together.\n    if (Array.isArray(this.response)) {\n      return chainStreams(...this.response)\n    }\n\n    return this.response\n  }\n\n  /**\n   * Chains a new stream to the response. This will convert the response to an\n   * array of streams if it is not already one and will add the new stream to\n   * the end. When this response is piped, all of the streams will be piped\n   * one after the other.\n   *\n   * @param readable The new stream to chain\n   */\n  public chain(readable: ReadableStream<Uint8Array>) {\n    if (this.response === null) {\n      throw new Error('Invariant: response is null. This is a bug in Next.js')\n    }\n\n    // If the response is not an array of streams already, make it one.\n    let responses: ReadableStream<Uint8Array>[]\n    if (typeof this.response === 'string') {\n      responses = [streamFromString(this.response)]\n    } else if (Array.isArray(this.response)) {\n      responses = this.response\n    } else if (Buffer.isBuffer(this.response)) {\n      responses = [streamFromBuffer(this.response)]\n    } else {\n      responses = [this.response]\n    }\n\n    // Add the new stream to the array.\n    responses.push(readable)\n\n    // Update the response.\n    this.response = responses\n  }\n\n  /**\n   * Pipes the response to a writable stream. This will close/cancel the\n   * writable stream if an error is encountered. If this doesn't throw, then\n   * the writable stream will be closed or aborted.\n   *\n   * @param writable Writable stream to pipe the response to\n   */\n  public async pipeTo(writable: WritableStream<Uint8Array>): Promise<void> {\n    try {\n      await this.readable.pipeTo(writable, {\n        // We want to close the writable stream ourselves so that we can wait\n        // for the waitUntil promise to resolve before closing it. If an error\n        // is encountered, we'll abort the writable stream if we swallowed the\n        // error.\n        preventClose: true,\n      })\n\n      // If there is a waitUntil promise, wait for it to resolve before\n      // closing the writable stream.\n      if (this.waitUntil) await this.waitUntil\n\n      // Close the writable stream.\n      await writable.close()\n    } catch (err) {\n      // If this is an abort error, we should abort the writable stream (as we\n      // took ownership of it when we started piping). We don't need to re-throw\n      // because we handled the error.\n      if (isAbortError(err)) {\n        // Abort the writable stream if an error is encountered.\n        await writable.abort(err)\n\n        return\n      }\n\n      // We're not aborting the writer here as when this method throws it's not\n      // clear as to how so the caller should assume it's their responsibility\n      // to clean up the writer.\n      throw err\n    }\n  }\n\n  /**\n   * Pipes the response to a node response. This will close/cancel the node\n   * response if an error is encountered.\n   *\n   * @param res\n   */\n  public async pipeToNodeResponse(res: ServerResponse) {\n    await pipeToNodeResponse(this.readable, res, this.waitUntil)\n  }\n}\n","export const enum RouteKind {\n  /**\n   * `PAGES` represents all the React pages that are under `pages/`.\n   */\n  PAGES = 'PAGES',\n  /**\n   * `PAGES_API` represents all the API routes under `pages/api/`.\n   */\n  PAGES_API = 'PAGES_API',\n  /**\n   * `APP_PAGE` represents all the React pages that are under `app/` with the\n   * filename of `page.{j,t}s{,x}`.\n   */\n  APP_PAGE = 'APP_PAGE',\n  /**\n   * `APP_ROUTE` represents all the API routes and metadata routes that are under `app/` with the\n   * filename of `route.{j,t}s{,x}`.\n   */\n  APP_ROUTE = 'APP_ROUTE',\n\n  /**\n   * `IMAGE` represents all the images that are generated by `next/image`.\n   */\n  IMAGE = 'IMAGE',\n}\n","import {\n  CachedRouteKind,\n  IncrementalCacheKind,\n  type CachedAppPageValue,\n  type CachedPageValue,\n  type IncrementalResponseCacheEntry,\n  type ResponseCacheEntry,\n} from './types'\n\nimport RenderResult from '../render-result'\nimport { RouteKind } from '../route-kind'\n\nexport async function fromResponseCacheEntry(\n  cacheEntry: ResponseCacheEntry\n): Promise<IncrementalResponseCacheEntry> {\n  return {\n    ...cacheEntry,\n    value:\n      cacheEntry.value?.kind === CachedRouteKind.PAGES\n        ? {\n            kind: CachedRouteKind.PAGES,\n            html: await cacheEntry.value.html.toUnchunkedString(true),\n            pageData: cacheEntry.value.pageData,\n            headers: cacheEntry.value.headers,\n            status: cacheEntry.value.status,\n          }\n        : cacheEntry.value?.kind === CachedRouteKind.APP_PAGE\n          ? {\n              kind: CachedRouteKind.APP_PAGE,\n              html: await cacheEntry.value.html.toUnchunkedString(true),\n              postponed: cacheEntry.value.postponed,\n              rscData: cacheEntry.value.rscData,\n              headers: cacheEntry.value.headers,\n              status: cacheEntry.value.status,\n              segmentData: cacheEntry.value.segmentData,\n            }\n          : cacheEntry.value,\n  }\n}\n\nexport async function toResponseCacheEntry(\n  response: IncrementalResponseCacheEntry | null\n): Promise<ResponseCacheEntry | null> {\n  if (!response) return null\n\n  return {\n    isMiss: response.isMiss,\n    isStale: response.isStale,\n    cacheControl: response.cacheControl,\n    isFallback: response.isFallback,\n    value:\n      response.value?.kind === CachedRouteKind.PAGES\n        ? ({\n            kind: CachedRouteKind.PAGES,\n            html: RenderResult.fromStatic(response.value.html),\n            pageData: response.value.pageData,\n            headers: response.value.headers,\n            status: response.value.status,\n          } satisfies CachedPageValue)\n        : response.value?.kind === CachedRouteKind.APP_PAGE\n          ? ({\n              kind: CachedRouteKind.APP_PAGE,\n              html: RenderResult.fromStatic(response.value.html),\n              rscData: response.value.rscData,\n              headers: response.value.headers,\n              status: response.value.status,\n              postponed: response.value.postponed,\n              segmentData: response.value.segmentData,\n            } satisfies CachedAppPageValue)\n          : response.value,\n  }\n}\n\nexport function routeKindToIncrementalCacheKind(\n  routeKind: RouteKind\n): Exclude<IncrementalCacheKind, IncrementalCacheKind.FETCH> {\n  switch (routeKind) {\n    case RouteKind.PAGES:\n      return IncrementalCacheKind.PAGES\n    case RouteKind.APP_PAGE:\n      return IncrementalCacheKind.APP_PAGE\n    case RouteKind.IMAGE:\n      return IncrementalCacheKind.IMAGE\n    case RouteKind.APP_ROUTE:\n      return IncrementalCacheKind.APP_ROUTE\n    default:\n      throw new Error(`Unexpected route kind ${routeKind}`)\n  }\n}\n","import type {\n  ResponseCacheEntry,\n  ResponseGenerator,\n  ResponseCacheBase,\n  IncrementalResponseCacheEntry,\n  IncrementalResponseCache,\n} from './types'\n\nimport { Batcher } from '../../lib/batcher'\nimport { scheduleOnNextTick } from '../../lib/scheduler'\nimport {\n  fromResponseCacheEntry,\n  routeKindToIncrementalCacheKind,\n  toResponseCacheEntry,\n} from './utils'\nimport type { RouteKind } from '../route-kind'\n\nexport * from './types'\n\nexport default class ResponseCache implements ResponseCacheBase {\n  private readonly batcher = Batcher.create<\n    { key: string; isOnDemandRevalidate: boolean },\n    IncrementalResponseCacheEntry | null,\n    string\n  >({\n    // Ensure on-demand revalidate doesn't block normal requests, it should be\n    // safe to run an on-demand revalidate for the same key as a normal request.\n    cacheKeyFn: ({ key, isOnDemandRevalidate }) =>\n      `${key}-${isOnDemandRevalidate ? '1' : '0'}`,\n    // We wait to do any async work until after we've added our promise to\n    // `pendingResponses` to ensure that any any other calls will reuse the\n    // same promise until we've fully finished our work.\n    schedulerFn: scheduleOnNextTick,\n  })\n\n  private previousCacheItem?: {\n    key: string\n    entry: IncrementalResponseCacheEntry | null\n    expiresAt: number\n  }\n\n  private minimalMode?: boolean\n\n  constructor(minimalMode: boolean) {\n    // this is a hack to avoid Webpack knowing this is equal to this.minimalMode\n    // because we replace this.minimalMode to true in production bundles.\n    const minimalModeKey = 'minimalMode'\n    this[minimalModeKey] = minimalMode\n  }\n\n  public async get(\n    key: string | null,\n    responseGenerator: ResponseGenerator,\n    context: {\n      routeKind: RouteKind\n      isOnDemandRevalidate?: boolean\n      isPrefetch?: boolean\n      incrementalCache: IncrementalResponseCache\n      isRoutePPREnabled?: boolean\n      isFallback?: boolean\n    }\n  ): Promise<ResponseCacheEntry | null> {\n    // If there is no key for the cache, we can't possibly look this up in the\n    // cache so just return the result of the response generator.\n    if (!key) {\n      return responseGenerator({ hasResolved: false, previousCacheEntry: null })\n    }\n\n    const {\n      incrementalCache,\n      isOnDemandRevalidate = false,\n      isFallback = false,\n      isRoutePPREnabled = false,\n    } = context\n\n    const response = await this.batcher.batch(\n      { key, isOnDemandRevalidate },\n      async (cacheKey, resolve) => {\n        // We keep the previous cache entry around to leverage when the\n        // incremental cache is disabled in minimal mode.\n        if (\n          this.minimalMode &&\n          this.previousCacheItem?.key === cacheKey &&\n          this.previousCacheItem.expiresAt > Date.now()\n        ) {\n          return this.previousCacheItem.entry\n        }\n\n        // Coerce the kindHint into a given kind for the incremental cache.\n        const kind = routeKindToIncrementalCacheKind(context.routeKind)\n\n        let resolved = false\n        let cachedResponse: IncrementalResponseCacheEntry | null = null\n        try {\n          cachedResponse = !this.minimalMode\n            ? await incrementalCache.get(key, {\n                kind,\n                isRoutePPREnabled: context.isRoutePPREnabled,\n                isFallback,\n              })\n            : null\n\n          if (cachedResponse && !isOnDemandRevalidate) {\n            resolve(cachedResponse)\n            resolved = true\n\n            if (!cachedResponse.isStale || context.isPrefetch) {\n              // The cached value is still valid, so we don't need\n              // to update it yet.\n              return null\n            }\n          }\n\n          const cacheEntry = await responseGenerator({\n            hasResolved: resolved,\n            previousCacheEntry: cachedResponse,\n            isRevalidating: true,\n          })\n\n          // If the cache entry couldn't be generated, we don't want to cache\n          // the result.\n          if (!cacheEntry) {\n            // Unset the previous cache item if it was set.\n            if (this.minimalMode) this.previousCacheItem = undefined\n            return null\n          }\n\n          const resolveValue = await fromResponseCacheEntry({\n            ...cacheEntry,\n            isMiss: !cachedResponse,\n          })\n          if (!resolveValue) {\n            // Unset the previous cache item if it was set.\n            if (this.minimalMode) this.previousCacheItem = undefined\n            return null\n          }\n\n          // For on-demand revalidate wait to resolve until cache is set.\n          // Otherwise resolve now.\n          if (!isOnDemandRevalidate && !resolved) {\n            resolve(resolveValue)\n            resolved = true\n          }\n\n          // We want to persist the result only if it has a cache control value\n          // defined.\n          if (resolveValue.cacheControl) {\n            if (this.minimalMode) {\n              this.previousCacheItem = {\n                key: cacheKey,\n                entry: resolveValue,\n                expiresAt: Date.now() + 1000,\n              }\n            } else {\n              await incrementalCache.set(key, resolveValue.value, {\n                cacheControl: resolveValue.cacheControl,\n                isRoutePPREnabled,\n                isFallback,\n              })\n            }\n          }\n\n          return resolveValue\n        } catch (err) {\n          // When a path is erroring we automatically re-set the existing cache\n          // with new revalidate and expire times to prevent non-stop retrying.\n          if (cachedResponse?.cacheControl) {\n            const newRevalidate = Math.min(\n              Math.max(cachedResponse.cacheControl.revalidate || 3, 3),\n              30\n            )\n\n            const newExpire =\n              cachedResponse.cacheControl.expire === undefined\n                ? undefined\n                : Math.max(\n                    newRevalidate + 3,\n                    cachedResponse.cacheControl.expire\n                  )\n\n            await incrementalCache.set(key, cachedResponse.value, {\n              cacheControl: { revalidate: newRevalidate, expire: newExpire },\n              isRoutePPREnabled,\n              isFallback,\n            })\n          }\n\n          // While revalidating in the background we can't reject as we already\n          // resolved the cache entry so log the error here.\n          if (resolved) {\n            console.error(err)\n            return null\n          }\n\n          // We haven't resolved yet, so let's throw to indicate an error.\n          throw err\n        }\n      }\n    )\n\n    return toResponseCacheEntry(response)\n  }\n}\n","import type {\n  WorkAsyncStorage,\n  WorkStore,\n} from '../app-render/work-async-storage.external'\n\nimport { AppRenderSpan, NextNodeServerSpan } from './trace/constants'\nimport { getTracer, SpanKind } from './trace/tracer'\nimport {\n  CACHE_ONE_YEAR,\n  INFINITE_CACHE,\n  NEXT_CACHE_TAG_MAX_ITEMS,\n  NEXT_CACHE_TAG_MAX_LENGTH,\n} from '../../lib/constants'\nimport { markCurrentScopeAsDynamic } from '../app-render/dynamic-rendering'\nimport { makeHangingPromise } from '../dynamic-rendering-utils'\nimport type { FetchMetric } from '../base-http'\nimport { createDedupeFetch } from './dedupe-fetch'\nimport type { WorkUnitAsyncStorage } from '../app-render/work-unit-async-storage.external'\nimport {\n  CachedRouteKind,\n  IncrementalCacheKind,\n  type CachedFetchData,\n} from '../response-cache'\nimport { waitAtLeastOneReactRenderTask } from '../../lib/scheduler'\nimport { cloneResponse } from './clone-response'\n\nconst isEdgeRuntime = process.env.NEXT_RUNTIME === 'edge'\n\ntype Fetcher = typeof fetch\n\ntype PatchedFetcher = Fetcher & {\n  readonly __nextPatched: true\n  readonly __nextGetStaticStore: () => WorkAsyncStorage\n  readonly _nextOriginalFetch: Fetcher\n}\n\nexport const NEXT_PATCH_SYMBOL = Symbol.for('next-patch')\n\nfunction isFetchPatched() {\n  return (globalThis as Record<symbol, unknown>)[NEXT_PATCH_SYMBOL] === true\n}\n\nexport function validateRevalidate(\n  revalidateVal: unknown,\n  route: string\n): undefined | number {\n  try {\n    let normalizedRevalidate: number | undefined = undefined\n\n    if (revalidateVal === false) {\n      normalizedRevalidate = INFINITE_CACHE\n    } else if (\n      typeof revalidateVal === 'number' &&\n      !isNaN(revalidateVal) &&\n      revalidateVal > -1\n    ) {\n      normalizedRevalidate = revalidateVal\n    } else if (typeof revalidateVal !== 'undefined') {\n      throw new Error(\n        `Invalid revalidate value \"${revalidateVal}\" on \"${route}\", must be a non-negative number or false`\n      )\n    }\n    return normalizedRevalidate\n  } catch (err: any) {\n    // handle client component error from attempting to check revalidate value\n    if (err instanceof Error && err.message.includes('Invalid revalidate')) {\n      throw err\n    }\n    return undefined\n  }\n}\n\nexport function validateTags(tags: any[], description: string) {\n  const validTags: string[] = []\n  const invalidTags: Array<{\n    tag: any\n    reason: string\n  }> = []\n\n  for (let i = 0; i < tags.length; i++) {\n    const tag = tags[i]\n\n    if (typeof tag !== 'string') {\n      invalidTags.push({ tag, reason: 'invalid type, must be a string' })\n    } else if (tag.length > NEXT_CACHE_TAG_MAX_LENGTH) {\n      invalidTags.push({\n        tag,\n        reason: `exceeded max length of ${NEXT_CACHE_TAG_MAX_LENGTH}`,\n      })\n    } else {\n      validTags.push(tag)\n    }\n\n    if (validTags.length > NEXT_CACHE_TAG_MAX_ITEMS) {\n      console.warn(\n        `Warning: exceeded max tag count for ${description}, dropped tags:`,\n        tags.slice(i).join(', ')\n      )\n      break\n    }\n  }\n\n  if (invalidTags.length > 0) {\n    console.warn(`Warning: invalid tags passed to ${description}: `)\n\n    for (const { tag, reason } of invalidTags) {\n      console.log(`tag: \"${tag}\" ${reason}`)\n    }\n  }\n  return validTags\n}\n\nfunction trackFetchMetric(\n  workStore: WorkStore,\n  ctx: Omit<FetchMetric, 'end' | 'idx'>\n) {\n  // If the static generation store is not available, we can't track the fetch\n  if (!workStore) return\n  if (workStore.requestEndedState?.ended) return\n\n  const isDebugBuild =\n    (!!process.env.NEXT_DEBUG_BUILD ||\n      process.env.NEXT_SSG_FETCH_METRICS === '1') &&\n    workStore.isStaticGeneration\n  const isDevelopment = process.env.NODE_ENV === 'development'\n\n  if (\n    // The only time we want to track fetch metrics outside of development is when\n    // we are performing a static generation & we are in debug mode.\n    !isDebugBuild &&\n    !isDevelopment\n  ) {\n    return\n  }\n\n  workStore.fetchMetrics ??= []\n\n  workStore.fetchMetrics.push({\n    ...ctx,\n    end: performance.timeOrigin + performance.now(),\n    idx: workStore.nextFetchId || 0,\n  })\n}\n\ninterface PatchableModule {\n  workAsyncStorage: WorkAsyncStorage\n  workUnitAsyncStorage: WorkUnitAsyncStorage\n}\n\nexport function createPatchedFetcher(\n  originFetch: Fetcher,\n  { workAsyncStorage, workUnitAsyncStorage }: PatchableModule\n): PatchedFetcher {\n  // Create the patched fetch function. We don't set the type here, as it's\n  // verified as the return value of this function.\n  const patched = async (\n    input: RequestInfo | URL,\n    init: RequestInit | undefined\n  ) => {\n    let url: URL | undefined\n    try {\n      url = new URL(input instanceof Request ? input.url : input)\n      url.username = ''\n      url.password = ''\n    } catch {\n      // Error caused by malformed URL should be handled by native fetch\n      url = undefined\n    }\n    const fetchUrl = url?.href ?? ''\n    const method = init?.method?.toUpperCase() || 'GET'\n\n    // Do create a new span trace for internal fetches in the\n    // non-verbose mode.\n    const isInternal = (init?.next as any)?.internal === true\n    const hideSpan = process.env.NEXT_OTEL_FETCH_DISABLED === '1'\n    // We don't track fetch metrics for internal fetches\n    // so it's not critical that we have a start time, as it won't be recorded.\n    // This is to workaround a flaky issue where performance APIs might\n    // not be available and will require follow-up investigation.\n    const fetchStart: number | undefined = isInternal\n      ? undefined\n      : performance.timeOrigin + performance.now()\n\n    const workStore = workAsyncStorage.getStore()\n    const workUnitStore = workUnitAsyncStorage.getStore()\n\n    // During static generation we track cache reads so we can reason about when they fill\n    let cacheSignal =\n      workUnitStore && workUnitStore.type === 'prerender'\n        ? workUnitStore.cacheSignal\n        : null\n    if (cacheSignal) {\n      cacheSignal.beginRead()\n    }\n\n    const result = getTracer().trace(\n      isInternal ? NextNodeServerSpan.internalFetch : AppRenderSpan.fetch,\n      {\n        hideSpan,\n        kind: SpanKind.CLIENT,\n        spanName: ['fetch', method, fetchUrl].filter(Boolean).join(' '),\n        attributes: {\n          'http.url': fetchUrl,\n          'http.method': method,\n          'net.peer.name': url?.hostname,\n          'net.peer.port': url?.port || undefined,\n        },\n      },\n      async () => {\n        // If this is an internal fetch, we should not do any special treatment.\n        if (isInternal) {\n          return originFetch(input, init)\n        }\n\n        // If the workStore is not available, we can't do any\n        // special treatment of fetch, therefore fallback to the original\n        // fetch implementation.\n        if (!workStore) {\n          return originFetch(input, init)\n        }\n\n        // We should also fallback to the original fetch implementation if we\n        // are in draft mode, it does not constitute a static generation.\n        if (workStore.isDraftMode) {\n          return originFetch(input, init)\n        }\n\n        const isRequestInput =\n          input &&\n          typeof input === 'object' &&\n          typeof (input as Request).method === 'string'\n\n        const getRequestMeta = (field: string) => {\n          // If request input is present but init is not, retrieve from input first.\n          const value = (init as any)?.[field]\n          return value || (isRequestInput ? (input as any)[field] : null)\n        }\n\n        let finalRevalidate: number | undefined = undefined\n        const getNextField = (field: 'revalidate' | 'tags') => {\n          return typeof init?.next?.[field] !== 'undefined'\n            ? init?.next?.[field]\n            : isRequestInput\n              ? (input as any).next?.[field]\n              : undefined\n        }\n        // RequestInit doesn't keep extra fields e.g. next so it's\n        // only available if init is used separate\n        let currentFetchRevalidate = getNextField('revalidate')\n        const tags: string[] = validateTags(\n          getNextField('tags') || [],\n          `fetch ${input.toString()}`\n        )\n\n        const revalidateStore =\n          workUnitStore &&\n          (workUnitStore.type === 'cache' ||\n            workUnitStore.type === 'prerender' ||\n            workUnitStore.type === 'prerender-ppr' ||\n            workUnitStore.type === 'prerender-legacy')\n            ? workUnitStore\n            : undefined\n\n        if (revalidateStore) {\n          if (Array.isArray(tags)) {\n            // Collect tags onto parent caches or parent prerenders.\n            const collectedTags =\n              revalidateStore.tags ?? (revalidateStore.tags = [])\n            for (const tag of tags) {\n              if (!collectedTags.includes(tag)) {\n                collectedTags.push(tag)\n              }\n            }\n          }\n        }\n\n        const implicitTags = workUnitStore?.implicitTags\n\n        // Inside unstable-cache we treat it the same as force-no-store on the\n        // page.\n        const pageFetchCacheMode =\n          workUnitStore && workUnitStore.type === 'unstable-cache'\n            ? 'force-no-store'\n            : workStore.fetchCache\n\n        const isUsingNoStore = !!workStore.isUnstableNoStore\n\n        let currentFetchCacheConfig = getRequestMeta('cache')\n        let cacheReason = ''\n        let cacheWarning: string | undefined\n\n        if (\n          typeof currentFetchCacheConfig === 'string' &&\n          typeof currentFetchRevalidate !== 'undefined'\n        ) {\n          // If the revalidate value conflicts with the cache value, we should warn the user and unset the conflicting values.\n          const isConflictingRevalidate =\n            // revalidate: 0 and cache: force-cache\n            (currentFetchCacheConfig === 'force-cache' &&\n              currentFetchRevalidate === 0) ||\n            // revalidate: >0 or revalidate: false and cache: no-store\n            (currentFetchCacheConfig === 'no-store' &&\n              (currentFetchRevalidate > 0 || currentFetchRevalidate === false))\n\n          if (isConflictingRevalidate) {\n            cacheWarning = `Specified \"cache: ${currentFetchCacheConfig}\" and \"revalidate: ${currentFetchRevalidate}\", only one should be specified.`\n            currentFetchCacheConfig = undefined\n            currentFetchRevalidate = undefined\n          }\n        }\n\n        const hasExplicitFetchCacheOptOut =\n          // fetch config itself signals not to cache\n          currentFetchCacheConfig === 'no-cache' ||\n          currentFetchCacheConfig === 'no-store' ||\n          // the fetch isn't explicitly caching and the segment level cache config signals not to cache\n          // note: `pageFetchCacheMode` is also set by being in an unstable_cache context.\n          pageFetchCacheMode === 'force-no-store' ||\n          pageFetchCacheMode === 'only-no-store'\n\n        // If no explicit fetch cache mode is set, but dynamic = `force-dynamic` is set,\n        // we shouldn't consider caching the fetch. This is because the `dynamic` cache\n        // is considered a \"top-level\" cache mode, whereas something like `fetchCache` is more\n        // fine-grained. Top-level modes are responsible for setting reasonable defaults for the\n        // other configurations.\n        const noFetchConfigAndForceDynamic =\n          !pageFetchCacheMode &&\n          !currentFetchCacheConfig &&\n          !currentFetchRevalidate &&\n          workStore.forceDynamic\n\n        if (\n          // force-cache was specified without a revalidate value. We set the revalidate value to false\n          // which will signal the cache to not revalidate\n          currentFetchCacheConfig === 'force-cache' &&\n          typeof currentFetchRevalidate === 'undefined'\n        ) {\n          currentFetchRevalidate = false\n        } else if (\n          // if we are inside of \"use cache\"/\"unstable_cache\"\n          // we shouldn't set the revalidate to 0 as it's overridden\n          // by the cache context\n          workUnitStore?.type !== 'cache' &&\n          (hasExplicitFetchCacheOptOut || noFetchConfigAndForceDynamic)\n        ) {\n          currentFetchRevalidate = 0\n        }\n\n        if (\n          currentFetchCacheConfig === 'no-cache' ||\n          currentFetchCacheConfig === 'no-store'\n        ) {\n          cacheReason = `cache: ${currentFetchCacheConfig}`\n        }\n\n        finalRevalidate = validateRevalidate(\n          currentFetchRevalidate,\n          workStore.route\n        )\n\n        const _headers = getRequestMeta('headers')\n        const initHeaders: Headers =\n          typeof _headers?.get === 'function'\n            ? _headers\n            : new Headers(_headers || {})\n\n        const hasUnCacheableHeader =\n          initHeaders.get('authorization') || initHeaders.get('cookie')\n\n        const isUnCacheableMethod = !['get', 'head'].includes(\n          getRequestMeta('method')?.toLowerCase() || 'get'\n        )\n\n        /**\n         * We automatically disable fetch caching under the following conditions:\n         * - Fetch cache configs are not set. Specifically:\n         *    - A page fetch cache mode is not set (export const fetchCache=...)\n         *    - A fetch cache mode is not set in the fetch call (fetch(url, { cache: ... }))\n         *      or the fetch cache mode is set to 'default'\n         *    - A fetch revalidate value is not set in the fetch call (fetch(url, { revalidate: ... }))\n         * - OR the fetch comes after a configuration that triggered dynamic rendering (e.g., reading cookies())\n         *   and the fetch was considered uncacheable (e.g., POST method or has authorization headers)\n         */\n        const hasNoExplicitCacheConfig =\n          // eslint-disable-next-line eqeqeq\n          pageFetchCacheMode == undefined &&\n          // eslint-disable-next-line eqeqeq\n          (currentFetchCacheConfig == undefined ||\n            // when considering whether to opt into the default \"no-cache\" fetch semantics,\n            // a \"default\" cache config should be treated the same as no cache config\n            currentFetchCacheConfig === 'default') &&\n          // eslint-disable-next-line eqeqeq\n          currentFetchRevalidate == undefined\n        const autoNoCache =\n          // this condition is hit for null/undefined\n          // eslint-disable-next-line eqeqeq\n          (hasNoExplicitCacheConfig &&\n            // we disable automatic no caching behavior during build time SSG so that we can still\n            // leverage the fetch cache between SSG workers\n            !workStore.isPrerendering) ||\n          ((hasUnCacheableHeader || isUnCacheableMethod) &&\n            revalidateStore &&\n            revalidateStore.revalidate === 0)\n\n        if (\n          hasNoExplicitCacheConfig &&\n          workUnitStore !== undefined &&\n          workUnitStore.type === 'prerender'\n        ) {\n          // If we have no cache config, and we're in Dynamic I/O prerendering, it'll be a dynamic call.\n          // We don't have to issue that dynamic call.\n          if (cacheSignal) {\n            cacheSignal.endRead()\n            cacheSignal = null\n          }\n          return makeHangingPromise<Response>(\n            workUnitStore.renderSignal,\n            'fetch()'\n          )\n        }\n\n        switch (pageFetchCacheMode) {\n          case 'force-no-store': {\n            cacheReason = 'fetchCache = force-no-store'\n            break\n          }\n          case 'only-no-store': {\n            if (\n              currentFetchCacheConfig === 'force-cache' ||\n              (typeof finalRevalidate !== 'undefined' && finalRevalidate > 0)\n            ) {\n              throw new Error(\n                `cache: 'force-cache' used on fetch for ${fetchUrl} with 'export const fetchCache = 'only-no-store'`\n              )\n            }\n            cacheReason = 'fetchCache = only-no-store'\n            break\n          }\n          case 'only-cache': {\n            if (currentFetchCacheConfig === 'no-store') {\n              throw new Error(\n                `cache: 'no-store' used on fetch for ${fetchUrl} with 'export const fetchCache = 'only-cache'`\n              )\n            }\n            break\n          }\n          case 'force-cache': {\n            if (\n              typeof currentFetchRevalidate === 'undefined' ||\n              currentFetchRevalidate === 0\n            ) {\n              cacheReason = 'fetchCache = force-cache'\n              finalRevalidate = INFINITE_CACHE\n            }\n            break\n          }\n          default:\n          // sometimes we won't match the above cases. the reason we don't move\n          // everything to this switch is the use of autoNoCache which is not a fetchCacheMode\n          // I suspect this could be unified with fetchCacheMode however in which case we could\n          // simplify the switch case and ensure we have an exhaustive switch handling all modes\n        }\n\n        if (typeof finalRevalidate === 'undefined') {\n          if (pageFetchCacheMode === 'default-cache' && !isUsingNoStore) {\n            finalRevalidate = INFINITE_CACHE\n            cacheReason = 'fetchCache = default-cache'\n          } else if (pageFetchCacheMode === 'default-no-store') {\n            finalRevalidate = 0\n            cacheReason = 'fetchCache = default-no-store'\n          } else if (isUsingNoStore) {\n            finalRevalidate = 0\n            cacheReason = 'noStore call'\n          } else if (autoNoCache) {\n            finalRevalidate = 0\n            cacheReason = 'auto no cache'\n          } else {\n            // TODO: should we consider this case an invariant?\n            cacheReason = 'auto cache'\n            finalRevalidate = revalidateStore\n              ? revalidateStore.revalidate\n              : INFINITE_CACHE\n          }\n        } else if (!cacheReason) {\n          cacheReason = `revalidate: ${finalRevalidate}`\n        }\n\n        if (\n          // when force static is configured we don't bail from\n          // `revalidate: 0` values\n          !(workStore.forceStatic && finalRevalidate === 0) &&\n          // we don't consider autoNoCache to switch to dynamic for ISR\n          !autoNoCache &&\n          // If the revalidate value isn't currently set or the value is less\n          // than the current revalidate value, we should update the revalidate\n          // value.\n          revalidateStore &&\n          finalRevalidate < revalidateStore.revalidate\n        ) {\n          // If we were setting the revalidate value to 0, we should try to\n          // postpone instead first.\n          if (finalRevalidate === 0) {\n            if (workUnitStore && workUnitStore.type === 'prerender') {\n              if (cacheSignal) {\n                cacheSignal.endRead()\n                cacheSignal = null\n              }\n              return makeHangingPromise<Response>(\n                workUnitStore.renderSignal,\n                'fetch()'\n              )\n            } else {\n              markCurrentScopeAsDynamic(\n                workStore,\n                workUnitStore,\n                `revalidate: 0 fetch ${input} ${workStore.route}`\n              )\n            }\n          }\n\n          // We only want to set the revalidate store's revalidate time if it\n          // was explicitly set for the fetch call, i.e. currentFetchRevalidate.\n          if (revalidateStore && currentFetchRevalidate === finalRevalidate) {\n            revalidateStore.revalidate = finalRevalidate\n          }\n        }\n\n        const isCacheableRevalidate =\n          typeof finalRevalidate === 'number' && finalRevalidate > 0\n\n        let cacheKey: string | undefined\n        const { incrementalCache } = workStore\n\n        const useCacheOrRequestStore =\n          workUnitStore?.type === 'request' || workUnitStore?.type === 'cache'\n            ? workUnitStore\n            : undefined\n\n        if (\n          incrementalCache &&\n          (isCacheableRevalidate ||\n            useCacheOrRequestStore?.serverComponentsHmrCache)\n        ) {\n          try {\n            cacheKey = await incrementalCache.generateCacheKey(\n              fetchUrl,\n              isRequestInput ? (input as RequestInit) : init\n            )\n          } catch (err) {\n            console.error(`Failed to generate cache key for`, input)\n          }\n        }\n\n        const fetchIdx = workStore.nextFetchId ?? 1\n        workStore.nextFetchId = fetchIdx + 1\n\n        let handleUnlock = () => Promise.resolve()\n\n        const doOriginalFetch = async (\n          isStale?: boolean,\n          cacheReasonOverride?: string\n        ) => {\n          const requestInputFields = [\n            'cache',\n            'credentials',\n            'headers',\n            'integrity',\n            'keepalive',\n            'method',\n            'mode',\n            'redirect',\n            'referrer',\n            'referrerPolicy',\n            'window',\n            'duplex',\n\n            // don't pass through signal when revalidating\n            ...(isStale ? [] : ['signal']),\n          ]\n\n          if (isRequestInput) {\n            const reqInput: Request = input as any\n            const reqOptions: RequestInit = {\n              body: (reqInput as any)._ogBody || reqInput.body,\n            }\n\n            for (const field of requestInputFields) {\n              // @ts-expect-error custom fields\n              reqOptions[field] = reqInput[field]\n            }\n            input = new Request(reqInput.url, reqOptions)\n          } else if (init) {\n            const { _ogBody, body, signal, ...otherInput } =\n              init as RequestInit & { _ogBody?: any }\n            init = {\n              ...otherInput,\n              body: _ogBody || body,\n              signal: isStale ? undefined : signal,\n            }\n          }\n\n          // add metadata to init without editing the original\n          const clonedInit = {\n            ...init,\n            next: { ...init?.next, fetchType: 'origin', fetchIdx },\n          }\n\n          return originFetch(input, clonedInit)\n            .then(async (res) => {\n              if (!isStale && fetchStart) {\n                trackFetchMetric(workStore, {\n                  start: fetchStart,\n                  url: fetchUrl,\n                  cacheReason: cacheReasonOverride || cacheReason,\n                  cacheStatus:\n                    finalRevalidate === 0 || cacheReasonOverride\n                      ? 'skip'\n                      : 'miss',\n                  cacheWarning,\n                  status: res.status,\n                  method: clonedInit.method || 'GET',\n                })\n              }\n              if (\n                res.status === 200 &&\n                incrementalCache &&\n                cacheKey &&\n                (isCacheableRevalidate ||\n                  useCacheOrRequestStore?.serverComponentsHmrCache)\n              ) {\n                const normalizedRevalidate =\n                  finalRevalidate >= INFINITE_CACHE\n                    ? CACHE_ONE_YEAR\n                    : finalRevalidate\n\n                if (workUnitStore && workUnitStore.type === 'prerender') {\n                  // We are prerendering at build time or revalidate time with dynamicIO so we need to\n                  // buffer the response so we can guarantee it can be read in a microtask\n                  const bodyBuffer = await res.arrayBuffer()\n\n                  const fetchedData = {\n                    headers: Object.fromEntries(res.headers.entries()),\n                    body: Buffer.from(bodyBuffer).toString('base64'),\n                    status: res.status,\n                    url: res.url,\n                  }\n\n                  // We can skip checking the serverComponentsHmrCache because we aren't in\n                  // dev mode.\n\n                  await incrementalCache.set(\n                    cacheKey,\n                    {\n                      kind: CachedRouteKind.FETCH,\n                      data: fetchedData,\n                      revalidate: normalizedRevalidate,\n                    },\n                    { fetchCache: true, fetchUrl, fetchIdx, tags }\n                  )\n                  await handleUnlock()\n\n                  // We return a new Response to the caller.\n                  return new Response(bodyBuffer, {\n                    headers: res.headers,\n                    status: res.status,\n                    statusText: res.statusText,\n                  })\n                } else {\n                  // We're cloning the response using this utility because there\n                  // exists a bug in the undici library around response cloning.\n                  // See the following pull request for more details:\n                  // https://github.com/vercel/next.js/pull/73274\n\n                  const [cloned1, cloned2] = cloneResponse(res)\n\n                  // We are dynamically rendering including dev mode. We want to return\n                  // the response to the caller as soon as possible because it might stream\n                  // over a very long time.\n                  cloned1\n                    .arrayBuffer()\n                    .then(async (arrayBuffer) => {\n                      const bodyBuffer = Buffer.from(arrayBuffer)\n\n                      const fetchedData = {\n                        headers: Object.fromEntries(cloned1.headers.entries()),\n                        body: bodyBuffer.toString('base64'),\n                        status: cloned1.status,\n                        url: cloned1.url,\n                      }\n\n                      useCacheOrRequestStore?.serverComponentsHmrCache?.set(\n                        cacheKey,\n                        fetchedData\n                      )\n\n                      if (isCacheableRevalidate) {\n                        await incrementalCache.set(\n                          cacheKey,\n                          {\n                            kind: CachedRouteKind.FETCH,\n                            data: fetchedData,\n                            revalidate: normalizedRevalidate,\n                          },\n                          { fetchCache: true, fetchUrl, fetchIdx, tags }\n                        )\n                      }\n                    })\n                    .catch((error) =>\n                      console.warn(`Failed to set fetch cache`, input, error)\n                    )\n                    .finally(handleUnlock)\n\n                  return cloned2\n                }\n              }\n\n              // we had response that we determined shouldn't be cached so we return it\n              // and don't cache it. This also needs to unlock the cache lock we acquired.\n              await handleUnlock()\n\n              return res\n            })\n            .catch((error) => {\n              handleUnlock()\n              throw error\n            })\n        }\n\n        let cacheReasonOverride\n        let isForegroundRevalidate = false\n        let isHmrRefreshCache = false\n\n        if (cacheKey && incrementalCache) {\n          let cachedFetchData: CachedFetchData | undefined\n\n          if (\n            useCacheOrRequestStore?.isHmrRefresh &&\n            useCacheOrRequestStore.serverComponentsHmrCache\n          ) {\n            cachedFetchData =\n              useCacheOrRequestStore.serverComponentsHmrCache.get(cacheKey)\n\n            isHmrRefreshCache = true\n          }\n\n          if (isCacheableRevalidate && !cachedFetchData) {\n            handleUnlock = await incrementalCache.lock(cacheKey)\n            const entry = workStore.isOnDemandRevalidate\n              ? null\n              : await incrementalCache.get(cacheKey, {\n                  kind: IncrementalCacheKind.FETCH,\n                  revalidate: finalRevalidate,\n                  fetchUrl,\n                  fetchIdx,\n                  tags,\n                  softTags: implicitTags?.tags,\n                })\n\n            if (hasNoExplicitCacheConfig) {\n              // We sometimes use the cache to dedupe fetches that do not specify a cache configuration\n              // In these cases we want to make sure we still exclude them from prerenders if dynamicIO is on\n              // so we introduce an artificial Task boundary here.\n              if (workUnitStore && workUnitStore.type === 'prerender') {\n                await waitAtLeastOneReactRenderTask()\n              }\n            }\n\n            if (entry) {\n              await handleUnlock()\n            } else {\n              // in dev, incremental cache response will be null in case the browser adds `cache-control: no-cache` in the request headers\n              cacheReasonOverride = 'cache-control: no-cache (hard refresh)'\n            }\n\n            if (entry?.value && entry.value.kind === CachedRouteKind.FETCH) {\n              // when stale and is revalidating we wait for fresh data\n              // so the revalidated entry has the updated data\n              if (workStore.isRevalidate && entry.isStale) {\n                isForegroundRevalidate = true\n              } else {\n                if (entry.isStale) {\n                  workStore.pendingRevalidates ??= {}\n                  if (!workStore.pendingRevalidates[cacheKey]) {\n                    const pendingRevalidate = doOriginalFetch(true)\n                      .then(async (response) => ({\n                        body: await response.arrayBuffer(),\n                        headers: response.headers,\n                        status: response.status,\n                        statusText: response.statusText,\n                      }))\n                      .finally(() => {\n                        workStore.pendingRevalidates ??= {}\n                        delete workStore.pendingRevalidates[cacheKey || '']\n                      })\n\n                    // Attach the empty catch here so we don't get a \"unhandled\n                    // promise rejection\" warning.\n                    pendingRevalidate.catch(console.error)\n\n                    workStore.pendingRevalidates[cacheKey] = pendingRevalidate\n                  }\n                }\n\n                cachedFetchData = entry.value.data\n              }\n            }\n          }\n\n          if (cachedFetchData) {\n            if (fetchStart) {\n              trackFetchMetric(workStore, {\n                start: fetchStart,\n                url: fetchUrl,\n                cacheReason,\n                cacheStatus: isHmrRefreshCache ? 'hmr' : 'hit',\n                cacheWarning,\n                status: cachedFetchData.status || 200,\n                method: init?.method || 'GET',\n              })\n            }\n\n            const response = new Response(\n              Buffer.from(cachedFetchData.body, 'base64'),\n              {\n                headers: cachedFetchData.headers,\n                status: cachedFetchData.status,\n              }\n            )\n\n            Object.defineProperty(response, 'url', {\n              value: cachedFetchData.url,\n            })\n\n            return response\n          }\n        }\n\n        if (workStore.isStaticGeneration && init && typeof init === 'object') {\n          const { cache } = init\n\n          // Delete `cache` property as Cloudflare Workers will throw an error\n          if (isEdgeRuntime) delete init.cache\n\n          if (cache === 'no-store') {\n            // If enabled, we should bail out of static generation.\n            if (workUnitStore && workUnitStore.type === 'prerender') {\n              if (cacheSignal) {\n                cacheSignal.endRead()\n                cacheSignal = null\n              }\n              return makeHangingPromise<Response>(\n                workUnitStore.renderSignal,\n                'fetch()'\n              )\n            } else {\n              markCurrentScopeAsDynamic(\n                workStore,\n                workUnitStore,\n                `no-store fetch ${input} ${workStore.route}`\n              )\n            }\n          }\n\n          const hasNextConfig = 'next' in init\n          const { next = {} } = init\n          if (\n            typeof next.revalidate === 'number' &&\n            revalidateStore &&\n            next.revalidate < revalidateStore.revalidate\n          ) {\n            if (next.revalidate === 0) {\n              // If enabled, we should bail out of static generation.\n              if (workUnitStore && workUnitStore.type === 'prerender') {\n                return makeHangingPromise<Response>(\n                  workUnitStore.renderSignal,\n                  'fetch()'\n                )\n              } else {\n                markCurrentScopeAsDynamic(\n                  workStore,\n                  workUnitStore,\n                  `revalidate: 0 fetch ${input} ${workStore.route}`\n                )\n              }\n            }\n\n            if (!workStore.forceStatic || next.revalidate !== 0) {\n              revalidateStore.revalidate = next.revalidate\n            }\n          }\n          if (hasNextConfig) delete init.next\n        }\n\n        // if we are revalidating the whole page via time or on-demand and\n        // the fetch cache entry is stale we should still de-dupe the\n        // origin hit if it's a cache-able entry\n        if (cacheKey && isForegroundRevalidate) {\n          const pendingRevalidateKey = cacheKey\n          workStore.pendingRevalidates ??= {}\n          let pendingRevalidate =\n            workStore.pendingRevalidates[pendingRevalidateKey]\n\n          if (pendingRevalidate) {\n            const revalidatedResult: {\n              body: ArrayBuffer\n              headers: Headers\n              status: number\n              statusText: string\n            } = await pendingRevalidate\n            return new Response(revalidatedResult.body, {\n              headers: revalidatedResult.headers,\n              status: revalidatedResult.status,\n              statusText: revalidatedResult.statusText,\n            })\n          }\n\n          // We used to just resolve the Response and clone it however for\n          // static generation with dynamicIO we need the response to be able to\n          // be resolved in a microtask and cloning the response will never have\n          // a body that can resolve in a microtask in node (as observed through\n          // experimentation) So instead we await the body and then when it is\n          // available we construct manually cloned Response objects with the\n          // body as an ArrayBuffer. This will be resolvable in a microtask\n          // making it compatible with dynamicIO.\n          const pendingResponse = doOriginalFetch(true, cacheReasonOverride)\n            // We're cloning the response using this utility because there\n            // exists a bug in the undici library around response cloning.\n            // See the following pull request for more details:\n            // https://github.com/vercel/next.js/pull/73274\n            .then(cloneResponse)\n\n          pendingRevalidate = pendingResponse\n            .then(async (responses) => {\n              const response = responses[0]\n              return {\n                body: await response.arrayBuffer(),\n                headers: response.headers,\n                status: response.status,\n                statusText: response.statusText,\n              }\n            })\n            .finally(() => {\n              // If the pending revalidate is not present in the store, then\n              // we have nothing to delete.\n              if (!workStore.pendingRevalidates?.[pendingRevalidateKey]) {\n                return\n              }\n\n              delete workStore.pendingRevalidates[pendingRevalidateKey]\n            })\n\n          // Attach the empty catch here so we don't get a \"unhandled promise\n          // rejection\" warning\n          pendingRevalidate.catch(() => {})\n\n          workStore.pendingRevalidates[pendingRevalidateKey] = pendingRevalidate\n\n          return pendingResponse.then((responses) => responses[1])\n        } else {\n          return doOriginalFetch(false, cacheReasonOverride)\n        }\n      }\n    )\n\n    if (cacheSignal) {\n      try {\n        return await result\n      } finally {\n        if (cacheSignal) {\n          cacheSignal.endRead()\n        }\n      }\n    }\n    return result\n  }\n\n  // Attach the necessary properties to the patched fetch function.\n  // We don't use this to determine if the fetch function has been patched,\n  // but for external consumers to determine if the fetch function has been\n  // patched.\n  patched.__nextPatched = true as const\n  patched.__nextGetStaticStore = () => workAsyncStorage\n  patched._nextOriginalFetch = originFetch\n  ;(globalThis as Record<symbol, unknown>)[NEXT_PATCH_SYMBOL] = true\n\n  return patched\n}\n// we patch fetch to collect cache information used for\n// determining if a page is static or not\nexport function patchFetch(options: PatchableModule) {\n  // If we've already patched fetch, we should not patch it again.\n  if (isFetchPatched()) return\n\n  // Grab the original fetch function. We'll attach this so we can use it in\n  // the patched fetch function.\n  const original = createDedupeFetch(globalThis.fetch)\n\n  // Set the global fetch to the patched fetch.\n  globalThis.fetch = createPatchedFetcher(original, options)\n}\n","import type { IncrementalCache } from '../../lib/incremental-cache'\n\nimport { CACHE_ONE_YEAR } from '../../../lib/constants'\nimport { validateRevalidate, validateTags } from '../../lib/patch-fetch'\nimport { workAsyncStorage } from '../../app-render/work-async-storage.external'\nimport {\n  getDraftModeProviderForCacheScope,\n  workUnitAsyncStorage,\n} from '../../app-render/work-unit-async-storage.external'\nimport {\n  CachedRouteKind,\n  IncrementalCacheKind,\n  type CachedFetchData,\n} from '../../response-cache'\nimport type { UnstableCacheStore } from '../../app-render/work-unit-async-storage.external'\n\ntype Callback = (...args: any[]) => Promise<any>\n\nlet noStoreFetchIdx = 0\n\nasync function cacheNewResult<T>(\n  result: T,\n  incrementalCache: IncrementalCache,\n  cacheKey: string,\n  tags: string[],\n  revalidate: number | false | undefined,\n  fetchIdx: number,\n  fetchUrl: string\n): Promise<unknown> {\n  await incrementalCache.set(\n    cacheKey,\n    {\n      kind: CachedRouteKind.FETCH,\n      data: {\n        headers: {},\n        // TODO: handle non-JSON values?\n        body: JSON.stringify(result),\n        status: 200,\n        url: '',\n      } satisfies CachedFetchData,\n      revalidate: typeof revalidate !== 'number' ? CACHE_ONE_YEAR : revalidate,\n    },\n    { fetchCache: true, tags, fetchIdx, fetchUrl }\n  )\n  return\n}\n\n/**\n * This function allows you to cache the results of expensive operations, like database queries, and reuse them across multiple requests.\n *\n * Read more: [Next.js Docs: `unstable_cache`](https://nextjs.org/docs/app/api-reference/functions/unstable_cache)\n */\nexport function unstable_cache<T extends Callback>(\n  cb: T,\n  keyParts?: string[],\n  options: {\n    /**\n     * The revalidation interval in seconds.\n     */\n    revalidate?: number | false\n    tags?: string[]\n  } = {}\n): T {\n  if (options.revalidate === 0) {\n    throw new Error(\n      `Invariant revalidate: 0 can not be passed to unstable_cache(), must be \"false\" or \"> 0\" ${cb.toString()}`\n    )\n  }\n\n  // Validate the tags provided are valid\n  const tags = options.tags\n    ? validateTags(options.tags, `unstable_cache ${cb.toString()}`)\n    : []\n\n  // Validate the revalidate options\n  validateRevalidate(\n    options.revalidate,\n    `unstable_cache ${cb.name || cb.toString()}`\n  )\n\n  // Stash the fixed part of the key at construction time. The invocation key will combine\n  // the fixed key with the arguments when actually called\n  // @TODO if cb.toString() is long we should hash it\n  // @TODO come up with a collision-free way to combine keyParts\n  // @TODO consider validating the keyParts are all strings. TS can't provide runtime guarantees\n  // and the error produced by accidentally using something that cannot be safely coerced is likely\n  // hard to debug\n  const fixedKey = `${cb.toString()}-${\n    Array.isArray(keyParts) && keyParts.join(',')\n  }`\n\n  const cachedCb = async (...args: any[]) => {\n    const workStore = workAsyncStorage.getStore()\n    const workUnitStore = workUnitAsyncStorage.getStore()\n\n    // We must be able to find the incremental cache otherwise we throw\n    const maybeIncrementalCache:\n      | import('../../lib/incremental-cache').IncrementalCache\n      | undefined =\n      workStore?.incrementalCache || (globalThis as any).__incrementalCache\n\n    if (!maybeIncrementalCache) {\n      throw new Error(\n        `Invariant: incrementalCache missing in unstable_cache ${cb.toString()}`\n      )\n    }\n    const incrementalCache = maybeIncrementalCache\n\n    const cacheSignal =\n      workUnitStore && workUnitStore.type === 'prerender'\n        ? workUnitStore.cacheSignal\n        : null\n    if (cacheSignal) {\n      cacheSignal.beginRead()\n    }\n    try {\n      // If there's no request store, we aren't in a request (or we're not in app\n      // router)  and if there's no static generation store, we aren't in app\n      // router. Default to an empty pathname and search params when there's no\n      // request store or static generation store available.\n      const requestStore =\n        workUnitStore && workUnitStore.type === 'request'\n          ? workUnitStore\n          : undefined\n      const pathname = requestStore?.url.pathname ?? workStore?.route ?? ''\n      const searchParams = new URLSearchParams(requestStore?.url.search ?? '')\n\n      const sortedSearchKeys = [...searchParams.keys()].sort((a, b) => {\n        return a.localeCompare(b)\n      })\n      const sortedSearch = sortedSearchKeys\n        .map((key) => `${key}=${searchParams.get(key)}`)\n        .join('&')\n\n      // Construct the complete cache key for this function invocation\n      // @TODO stringify is likely not safe here. We will coerce undefined to null which will make\n      // the keyspace smaller than the execution space\n      const invocationKey = `${fixedKey}-${JSON.stringify(args)}`\n      const cacheKey = await incrementalCache.generateCacheKey(invocationKey)\n      // $urlWithPath,$sortedQueryStringKeys,$hashOfEveryThingElse\n      const fetchUrl = `unstable_cache ${pathname}${sortedSearch.length ? '?' : ''}${sortedSearch} ${cb.name ? ` ${cb.name}` : cacheKey}`\n      const fetchIdx =\n        (workStore ? workStore.nextFetchId : noStoreFetchIdx) ?? 1\n\n      const implicitTags = workUnitStore?.implicitTags\n\n      const innerCacheStore: UnstableCacheStore = {\n        type: 'unstable-cache',\n        phase: 'render',\n        implicitTags,\n        draftMode:\n          workUnitStore &&\n          workStore &&\n          getDraftModeProviderForCacheScope(workStore, workUnitStore),\n      }\n\n      if (workStore) {\n        workStore.nextFetchId = fetchIdx + 1\n\n        // We are in an App Router context. We try to return the cached entry if it exists and is valid\n        // If the entry is fresh we return it. If the entry is stale we return it but revalidate the entry in\n        // the background. If the entry is missing or invalid we generate a new entry and return it.\n\n        // We update the store's revalidate property if the option.revalidate is a higher precedence\n        if (\n          workUnitStore &&\n          (workUnitStore.type === 'cache' ||\n            workUnitStore.type === 'prerender' ||\n            workUnitStore.type === 'prerender-ppr' ||\n            workUnitStore.type === 'prerender-legacy')\n        ) {\n          // options.revalidate === undefined doesn't affect timing.\n          // options.revalidate === false doesn't shrink timing. it stays at the maximum.\n          if (typeof options.revalidate === 'number') {\n            if (workUnitStore.revalidate < options.revalidate) {\n              // The store is already revalidating on a shorter time interval, leave it alone\n            } else {\n              workUnitStore.revalidate = options.revalidate\n            }\n          }\n\n          // We need to accumulate the tags for this invocation within the store\n          const collectedTags = workUnitStore.tags\n          if (collectedTags === null) {\n            workUnitStore.tags = tags.slice()\n          } else {\n            for (const tag of tags) {\n              // @TODO refactor tags to be a set to avoid this O(n) lookup\n              if (!collectedTags.includes(tag)) {\n                collectedTags.push(tag)\n              }\n            }\n          }\n        }\n\n        const isNestedUnstableCache =\n          workUnitStore && workUnitStore.type === 'unstable-cache'\n        if (\n          // when we are nested inside of other unstable_cache's\n          // we should bypass cache similar to fetches\n          !isNestedUnstableCache &&\n          workStore.fetchCache !== 'force-no-store' &&\n          !workStore.isOnDemandRevalidate &&\n          !incrementalCache.isOnDemandRevalidate &&\n          !workStore.isDraftMode\n        ) {\n          // We attempt to get the current cache entry from the incremental cache.\n          const cacheEntry = await incrementalCache.get(cacheKey, {\n            kind: IncrementalCacheKind.FETCH,\n            revalidate: options.revalidate,\n            tags,\n            softTags: implicitTags?.tags,\n            fetchIdx,\n            fetchUrl,\n          })\n\n          if (cacheEntry && cacheEntry.value) {\n            // The entry exists and has a value\n            if (cacheEntry.value.kind !== CachedRouteKind.FETCH) {\n              // The entry is invalid and we need a special warning\n              // @TODO why do we warn this way? Should this just be an error? How are these errors surfaced\n              // so bugs can be reported\n              // @TODO the invocation key can have sensitive data in it. we should not log this entire object\n              console.error(\n                `Invariant invalid cacheEntry returned for ${invocationKey}`\n              )\n              // will fall through to generating a new cache entry below\n            } else {\n              // We have a valid cache entry so we will be returning it. We also check to see if we need\n              // to background revalidate it by checking if it is stale.\n              const cachedResponse =\n                cacheEntry.value.data.body !== undefined\n                  ? JSON.parse(cacheEntry.value.data.body)\n                  : undefined\n              if (cacheEntry.isStale) {\n                // In App Router we return the stale result and revalidate in the background\n                if (!workStore.pendingRevalidates) {\n                  workStore.pendingRevalidates = {}\n                }\n\n                // We run the cache function asynchronously and save the result when it completes\n                workStore.pendingRevalidates[invocationKey] =\n                  workUnitAsyncStorage\n                    .run(innerCacheStore, cb, ...args)\n                    .then((result) => {\n                      return cacheNewResult(\n                        result,\n                        incrementalCache,\n                        cacheKey,\n                        tags,\n                        options.revalidate,\n                        fetchIdx,\n                        fetchUrl\n                      )\n                    })\n                    // @TODO This error handling seems wrong. We swallow the error?\n                    .catch((err) =>\n                      console.error(\n                        `revalidating cache with key: ${invocationKey}`,\n                        err\n                      )\n                    )\n              }\n              // We had a valid cache entry so we return it here\n              return cachedResponse\n            }\n          }\n        }\n\n        // If we got this far then we had an invalid cache entry and need to generate a new one\n        const result = await workUnitAsyncStorage.run(\n          innerCacheStore,\n          cb,\n          ...args\n        )\n\n        if (!workStore.isDraftMode) {\n          cacheNewResult(\n            result,\n            incrementalCache,\n            cacheKey,\n            tags,\n            options.revalidate,\n            fetchIdx,\n            fetchUrl\n          )\n        }\n\n        return result\n      } else {\n        noStoreFetchIdx += 1\n        // We are in Pages Router or were called outside of a render. We don't have a store\n        // so we just call the callback directly when it needs to run.\n        // If the entry is fresh we return it. If the entry is stale we return it but revalidate the entry in\n        // the background. If the entry is missing or invalid we generate a new entry and return it.\n\n        if (!incrementalCache.isOnDemandRevalidate) {\n          // We aren't doing an on demand revalidation so we check use the cache if valid\n          const cacheEntry = await incrementalCache.get(cacheKey, {\n            kind: IncrementalCacheKind.FETCH,\n            revalidate: options.revalidate,\n            tags,\n            fetchIdx,\n            fetchUrl,\n            softTags: implicitTags?.tags,\n          })\n\n          if (cacheEntry && cacheEntry.value) {\n            // The entry exists and has a value\n            if (cacheEntry.value.kind !== CachedRouteKind.FETCH) {\n              // The entry is invalid and we need a special warning\n              // @TODO why do we warn this way? Should this just be an error? How are these errors surfaced\n              // so bugs can be reported\n              console.error(\n                `Invariant invalid cacheEntry returned for ${invocationKey}`\n              )\n              // will fall through to generating a new cache entry below\n            } else if (!cacheEntry.isStale) {\n              // We have a valid cache entry and it is fresh so we return it\n              return cacheEntry.value.data.body !== undefined\n                ? JSON.parse(cacheEntry.value.data.body)\n                : undefined\n            }\n          }\n        }\n\n        // If we got this far then we had an invalid cache entry and need to generate a new one\n        const result = await workUnitAsyncStorage.run(\n          innerCacheStore,\n          cb,\n          ...args\n        )\n        cacheNewResult(\n          result,\n          incrementalCache,\n          cacheKey,\n          tags,\n          options.revalidate,\n          fetchIdx,\n          fetchUrl\n        )\n        return result\n      }\n    } finally {\n      if (cacheSignal) {\n        cacheSignal.endRead()\n      }\n    }\n  }\n  // TODO: once AsyncLocalStorage.run() returns the correct types this override will no longer be necessary\n  return cachedCb as unknown as T\n}\n","class UrlNode {\n  placeholder: boolean = true\n  children: Map<string, UrlNode> = new Map()\n  slugName: string | null = null\n  restSlugName: string | null = null\n  optionalRestSlugName: string | null = null\n\n  insert(urlPath: string): void {\n    this._insert(urlPath.split('/').filter(Boolean), [], false)\n  }\n\n  smoosh(): string[] {\n    return this._smoosh()\n  }\n\n  private _smoosh(prefix: string = '/'): string[] {\n    const childrenPaths = [...this.children.keys()].sort()\n    if (this.slugName !== null) {\n      childrenPaths.splice(childrenPaths.indexOf('[]'), 1)\n    }\n    if (this.restSlugName !== null) {\n      childrenPaths.splice(childrenPaths.indexOf('[...]'), 1)\n    }\n    if (this.optionalRestSlugName !== null) {\n      childrenPaths.splice(childrenPaths.indexOf('[[...]]'), 1)\n    }\n\n    const routes = childrenPaths\n      .map((c) => this.children.get(c)!._smoosh(`${prefix}${c}/`))\n      .reduce((prev, curr) => [...prev, ...curr], [])\n\n    if (this.slugName !== null) {\n      routes.push(\n        ...this.children.get('[]')!._smoosh(`${prefix}[${this.slugName}]/`)\n      )\n    }\n\n    if (!this.placeholder) {\n      const r = prefix === '/' ? '/' : prefix.slice(0, -1)\n      if (this.optionalRestSlugName != null) {\n        throw new Error(\n          `You cannot define a route with the same specificity as a optional catch-all route (\"${r}\" and \"${r}[[...${this.optionalRestSlugName}]]\").`\n        )\n      }\n\n      routes.unshift(r)\n    }\n\n    if (this.restSlugName !== null) {\n      routes.push(\n        ...this.children\n          .get('[...]')!\n          ._smoosh(`${prefix}[...${this.restSlugName}]/`)\n      )\n    }\n\n    if (this.optionalRestSlugName !== null) {\n      routes.push(\n        ...this.children\n          .get('[[...]]')!\n          ._smoosh(`${prefix}[[...${this.optionalRestSlugName}]]/`)\n      )\n    }\n\n    return routes\n  }\n\n  private _insert(\n    urlPaths: string[],\n    slugNames: string[],\n    isCatchAll: boolean\n  ): void {\n    if (urlPaths.length === 0) {\n      this.placeholder = false\n      return\n    }\n\n    if (isCatchAll) {\n      throw new Error(`Catch-all must be the last part of the URL.`)\n    }\n\n    // The next segment in the urlPaths list\n    let nextSegment = urlPaths[0]\n\n    // Check if the segment matches `[something]`\n    if (nextSegment.startsWith('[') && nextSegment.endsWith(']')) {\n      // Strip `[` and `]`, leaving only `something`\n      let segmentName = nextSegment.slice(1, -1)\n\n      let isOptional = false\n      if (segmentName.startsWith('[') && segmentName.endsWith(']')) {\n        // Strip optional `[` and `]`, leaving only `something`\n        segmentName = segmentName.slice(1, -1)\n        isOptional = true\n      }\n\n      if (segmentName.startsWith('…')) {\n        throw new Error(\n          `Detected a three-dot character ('…') at ('${segmentName}'). Did you mean ('...')?`\n        )\n      }\n\n      if (segmentName.startsWith('...')) {\n        // Strip `...`, leaving only `something`\n        segmentName = segmentName.substring(3)\n        isCatchAll = true\n      }\n\n      if (segmentName.startsWith('[') || segmentName.endsWith(']')) {\n        throw new Error(\n          `Segment names may not start or end with extra brackets ('${segmentName}').`\n        )\n      }\n\n      if (segmentName.startsWith('.')) {\n        throw new Error(\n          `Segment names may not start with erroneous periods ('${segmentName}').`\n        )\n      }\n\n      function handleSlug(previousSlug: string | null, nextSlug: string) {\n        if (previousSlug !== null) {\n          // If the specific segment already has a slug but the slug is not `something`\n          // This prevents collisions like:\n          // pages/[post]/index.js\n          // pages/[id]/index.js\n          // Because currently multiple dynamic params on the same segment level are not supported\n          if (previousSlug !== nextSlug) {\n            // TODO: This error seems to be confusing for users, needs an error link, the description can be based on above comment.\n            throw new Error(\n              `You cannot use different slug names for the same dynamic path ('${previousSlug}' !== '${nextSlug}').`\n            )\n          }\n        }\n\n        slugNames.forEach((slug) => {\n          if (slug === nextSlug) {\n            throw new Error(\n              `You cannot have the same slug name \"${nextSlug}\" repeat within a single dynamic path`\n            )\n          }\n\n          if (slug.replace(/\\W/g, '') === nextSegment.replace(/\\W/g, '')) {\n            throw new Error(\n              `You cannot have the slug names \"${slug}\" and \"${nextSlug}\" differ only by non-word symbols within a single dynamic path`\n            )\n          }\n        })\n\n        slugNames.push(nextSlug)\n      }\n\n      if (isCatchAll) {\n        if (isOptional) {\n          if (this.restSlugName != null) {\n            throw new Error(\n              `You cannot use both an required and optional catch-all route at the same level (\"[...${this.restSlugName}]\" and \"${urlPaths[0]}\" ).`\n            )\n          }\n\n          handleSlug(this.optionalRestSlugName, segmentName)\n          // slugName is kept as it can only be one particular slugName\n          this.optionalRestSlugName = segmentName\n          // nextSegment is overwritten to [[...]] so that it can later be sorted specifically\n          nextSegment = '[[...]]'\n        } else {\n          if (this.optionalRestSlugName != null) {\n            throw new Error(\n              `You cannot use both an optional and required catch-all route at the same level (\"[[...${this.optionalRestSlugName}]]\" and \"${urlPaths[0]}\").`\n            )\n          }\n\n          handleSlug(this.restSlugName, segmentName)\n          // slugName is kept as it can only be one particular slugName\n          this.restSlugName = segmentName\n          // nextSegment is overwritten to [...] so that it can later be sorted specifically\n          nextSegment = '[...]'\n        }\n      } else {\n        if (isOptional) {\n          throw new Error(\n            `Optional route parameters are not yet supported (\"${urlPaths[0]}\").`\n          )\n        }\n        handleSlug(this.slugName, segmentName)\n        // slugName is kept as it can only be one particular slugName\n        this.slugName = segmentName\n        // nextSegment is overwritten to [] so that it can later be sorted specifically\n        nextSegment = '[]'\n      }\n    }\n\n    // If this UrlNode doesn't have the nextSegment yet we create a new child UrlNode\n    if (!this.children.has(nextSegment)) {\n      this.children.set(nextSegment, new UrlNode())\n    }\n\n    this.children\n      .get(nextSegment)!\n      ._insert(urlPaths.slice(1), slugNames, isCatchAll)\n  }\n}\n\nexport function getSortedRoutes(\n  normalizedPages: ReadonlyArray<string>\n): string[] {\n  // First the UrlNode is created, and every UrlNode can have only 1 dynamic segment\n  // Eg you can't have pages/[post]/abc.js and pages/[hello]/something-else.js\n  // Only 1 dynamic segment per nesting level\n\n  // So in the case that is test/integration/dynamic-routing it'll be this:\n  // pages/[post]/comments.js\n  // pages/blog/[post]/comment/[id].js\n  // Both are fine because `pages/[post]` and `pages/blog` are on the same level\n  // So in this case `UrlNode` created here has `this.slugName === 'post'`\n  // And since your PR passed through `slugName` as an array basically it'd including it in too many possibilities\n  // Instead what has to be passed through is the upwards path's dynamic names\n  const root = new UrlNode()\n\n  // Here the `root` gets injected multiple paths, and insert will break them up into sublevels\n  normalizedPages.forEach((pagePath) => root.insert(pagePath))\n  // Smoosh will then sort those sublevels up to the point where you get the correct route definition priority\n  return root.smoosh()\n}\n\nexport function getSortedRouteObjects<T>(\n  objects: T[],\n  getter: (obj: T) => string\n): T[] {\n  // We're assuming here that all the pathnames are unique, that way we can\n  // sort the list and use the index as the key.\n  const indexes: Record<string, number> = {}\n  const pathnames: string[] = []\n  for (let i = 0; i < objects.length; i++) {\n    const pathname = getter(objects[i])\n    indexes[pathname] = i\n    pathnames[i] = pathname\n  }\n\n  // Sort the pathnames.\n  const sorted = getSortedRoutes(pathnames)\n\n  // Map the sorted pathnames back to the original objects using the new sorted\n  // index.\n  return sorted.map((pathname) => objects[indexes[pathname]])\n}\n","import {\n  extractInterceptionRouteInformation,\n  isInterceptionRouteAppPath,\n} from './interception-routes'\n\n// Identify /.*[param].*/ in route string\nconst TEST_ROUTE = /\\/[^/]*\\[[^/]+\\][^/]*(?=\\/|$)/\n\n// Identify /[param]/ in route string\nconst TEST_STRICT_ROUTE = /\\/\\[[^/]+\\](?=\\/|$)/\n\n/**\n * Check if a route is dynamic.\n *\n * @param route - The route to check.\n * @param strict - Whether to use strict mode which prohibits segments with prefixes/suffixes (default: true).\n * @returns Whether the route is dynamic.\n */\nexport function isDynamicRoute(route: string, strict: boolean = true): boolean {\n  if (isInterceptionRouteAppPath(route)) {\n    route = extractInterceptionRouteInformation(route).interceptedRoute\n  }\n\n  if (strict) {\n    return TEST_STRICT_ROUTE.test(route)\n  }\n\n  return TEST_ROUTE.test(route)\n}\n","export { getSortedRoutes, getSortedRouteObjects } from './sorted-routes'\nexport { isDynamicRoute } from './is-dynamic'\n","import {\n  abortAndThrowOnSynchronousRequestDataAccess,\n  postponeWithTracking,\n} from '../../app-render/dynamic-rendering'\nimport { isDynamicRoute } from '../../../shared/lib/router/utils'\nimport {\n  NEXT_CACHE_IMPLICIT_TAG_ID,\n  NEXT_CACHE_SOFT_TAG_MAX_LENGTH,\n} from '../../../lib/constants'\nimport { workAsyncStorage } from '../../app-render/work-async-storage.external'\nimport { workUnitAsyncStorage } from '../../app-render/work-unit-async-storage.external'\nimport { DynamicServerError } from '../../../client/components/hooks-server-context'\n\n/**\n * This function allows you to purge [cached data](https://nextjs.org/docs/app/building-your-application/caching) on-demand for a specific cache tag.\n *\n * Read more: [Next.js Docs: `revalidateTag`](https://nextjs.org/docs/app/api-reference/functions/revalidateTag)\n */\nexport function revalidateTag(tag: string) {\n  return revalidate([tag], `revalidateTag ${tag}`)\n}\n\n/**\n * This function allows you to purge [cached data](https://nextjs.org/docs/app/building-your-application/caching) on-demand for a specific path.\n *\n * Read more: [Next.js Docs: `unstable_expirePath`](https://nextjs.org/docs/app/api-reference/functions/unstable_expirePath)\n */\nexport function unstable_expirePath(\n  originalPath: string,\n  type?: 'layout' | 'page'\n) {\n  if (originalPath.length > NEXT_CACHE_SOFT_TAG_MAX_LENGTH) {\n    console.warn(\n      `Warning: expirePath received \"${originalPath}\" which exceeded max length of ${NEXT_CACHE_SOFT_TAG_MAX_LENGTH}. See more info here https://nextjs.org/docs/app/api-reference/functions/unstable_expirePath`\n    )\n    return\n  }\n\n  let normalizedPath = `${NEXT_CACHE_IMPLICIT_TAG_ID}${originalPath}`\n\n  if (type) {\n    normalizedPath += `${normalizedPath.endsWith('/') ? '' : '/'}${type}`\n  } else if (isDynamicRoute(originalPath)) {\n    console.warn(\n      `Warning: a dynamic page path \"${originalPath}\" was passed to \"expirePath\", but the \"type\" parameter is missing. This has no effect by default, see more info here https://nextjs.org/docs/app/api-reference/functions/unstable_expirePath`\n    )\n  }\n  return revalidate([normalizedPath], `unstable_expirePath ${originalPath}`)\n}\n\n/**\n * This function allows you to purge [cached data](https://nextjs.org/docs/app/building-your-application/caching) on-demand for a specific cache tag.\n *\n * Read more: [Next.js Docs: `unstable_expireTag`](https://nextjs.org/docs/app/api-reference/functions/unstable_expireTag)\n */\nexport function unstable_expireTag(...tags: string[]) {\n  return revalidate(tags, `unstable_expireTag ${tags.join(', ')}`)\n}\n\n/**\n * This function allows you to purge [cached data](https://nextjs.org/docs/app/building-your-application/caching) on-demand for a specific path.\n *\n * Read more: [Next.js Docs: `revalidatePath`](https://nextjs.org/docs/app/api-reference/functions/revalidatePath)\n */\nexport function revalidatePath(originalPath: string, type?: 'layout' | 'page') {\n  if (originalPath.length > NEXT_CACHE_SOFT_TAG_MAX_LENGTH) {\n    console.warn(\n      `Warning: revalidatePath received \"${originalPath}\" which exceeded max length of ${NEXT_CACHE_SOFT_TAG_MAX_LENGTH}. See more info here https://nextjs.org/docs/app/api-reference/functions/revalidatePath`\n    )\n    return\n  }\n\n  let normalizedPath = `${NEXT_CACHE_IMPLICIT_TAG_ID}${originalPath}`\n\n  if (type) {\n    normalizedPath += `${normalizedPath.endsWith('/') ? '' : '/'}${type}`\n  } else if (isDynamicRoute(originalPath)) {\n    console.warn(\n      `Warning: a dynamic page path \"${originalPath}\" was passed to \"revalidatePath\", but the \"type\" parameter is missing. This has no effect by default, see more info here https://nextjs.org/docs/app/api-reference/functions/revalidatePath`\n    )\n  }\n  return revalidate([normalizedPath], `revalidatePath ${originalPath}`)\n}\n\nfunction revalidate(tags: string[], expression: string) {\n  const store = workAsyncStorage.getStore()\n  if (!store || !store.incrementalCache) {\n    throw new Error(\n      `Invariant: static generation store missing in ${expression}`\n    )\n  }\n\n  const workUnitStore = workUnitAsyncStorage.getStore()\n  if (workUnitStore) {\n    if (workUnitStore.type === 'cache') {\n      throw new Error(\n        `Route ${store.route} used \"${expression}\" inside a \"use cache\" which is unsupported. To ensure revalidation is performed consistently it must always happen outside of renders and cached functions. See more info here: https://nextjs.org/docs/app/building-your-application/rendering/static-and-dynamic#dynamic-rendering`\n      )\n    } else if (workUnitStore.type === 'unstable-cache') {\n      throw new Error(\n        `Route ${store.route} used \"${expression}\" inside a function cached with \"unstable_cache(...)\" which is unsupported. To ensure revalidation is performed consistently it must always happen outside of renders and cached functions. See more info here: https://nextjs.org/docs/app/building-your-application/rendering/static-and-dynamic#dynamic-rendering`\n      )\n    }\n    if (workUnitStore.phase === 'render') {\n      throw new Error(\n        `Route ${store.route} used \"${expression}\" during render which is unsupported. To ensure revalidation is performed consistently it must always happen outside of renders and cached functions. See more info here: https://nextjs.org/docs/app/building-your-application/rendering/static-and-dynamic#dynamic-rendering`\n      )\n    }\n\n    if (workUnitStore.type === 'prerender') {\n      // dynamicIO Prerender\n      const error = new Error(\n        `Route ${store.route} used ${expression} without first calling \\`await connection()\\`.`\n      )\n      abortAndThrowOnSynchronousRequestDataAccess(\n        store.route,\n        expression,\n        error,\n        workUnitStore\n      )\n    } else if (workUnitStore.type === 'prerender-ppr') {\n      // PPR Prerender\n      postponeWithTracking(\n        store.route,\n        expression,\n        workUnitStore.dynamicTracking\n      )\n    } else if (workUnitStore.type === 'prerender-legacy') {\n      // legacy Prerender\n      workUnitStore.revalidate = 0\n\n      const err = new DynamicServerError(\n        `Route ${store.route} couldn't be rendered statically because it used \\`${expression}\\`. See more info here: https://nextjs.org/docs/messages/dynamic-server-error`\n      )\n      store.dynamicUsageDescription = expression\n      store.dynamicUsageStack = err.stack\n\n      throw err\n    } else if (\n      process.env.NODE_ENV === 'development' &&\n      workUnitStore &&\n      workUnitStore.type === 'request'\n    ) {\n      workUnitStore.usedDynamic = true\n    }\n  }\n\n  if (!store.pendingRevalidatedTags) {\n    store.pendingRevalidatedTags = []\n  }\n\n  for (const tag of tags) {\n    if (!store.pendingRevalidatedTags.includes(tag)) {\n      store.pendingRevalidatedTags.push(tag)\n    }\n  }\n\n  // TODO: only revalidate if the path matches\n  store.pathWasRevalidated = true\n}\n","import { workAsyncStorage } from '../../app-render/work-async-storage.external'\nimport { workUnitAsyncStorage } from '../../app-render/work-unit-async-storage.external'\nimport { markCurrentScopeAsDynamic } from '../../app-render/dynamic-rendering'\n\n/**\n * This function can be used to declaratively opt out of static rendering and indicate a particular component should not be cached.\n *\n * It marks the current scope as dynamic.\n *\n * - In [non-PPR](https://nextjs.org/docs/app/api-reference/next-config-js/partial-prerendering) cases this will make a static render\n * halt and mark the page as dynamic.\n * - In PPR cases this will postpone the render at this location.\n *\n * If we are inside a cache scope then this function does nothing.\n *\n * @note It expects to be called within App Router and will error otherwise.\n *\n * Read more: [Next.js Docs: `unstable_noStore`](https://nextjs.org/docs/app/api-reference/functions/unstable_noStore)\n */\nexport function unstable_noStore() {\n  const callingExpression = 'unstable_noStore()'\n  const store = workAsyncStorage.getStore()\n  const workUnitStore = workUnitAsyncStorage.getStore()\n  if (!store) {\n    // This generally implies we are being called in Pages router. We should probably not support\n    // unstable_noStore in contexts outside of `react-server` condition but since we historically\n    // have not errored here previously, we maintain that behavior for now.\n    return\n  } else if (store.forceStatic) {\n    return\n  } else {\n    store.isUnstableNoStore = true\n    if (workUnitStore && workUnitStore.type === 'prerender') {\n      // unstable_noStore() is a noop in Dynamic I/O.\n    } else {\n      markCurrentScopeAsDynamic(store, workUnitStore, callingExpression)\n    }\n  }\n}\n","import { workAsyncStorage } from '../app-render/work-async-storage.external'\nimport { workUnitAsyncStorage } from '../app-render/work-unit-async-storage.external'\n\nexport type CacheLife = {\n  // How long the client can cache a value without checking with the server.\n  stale?: number\n  // How frequently you want the cache to refresh on the server.\n  // Stale values may be served while revalidating.\n  revalidate?: number\n  // In the worst case scenario, where you haven't had traffic in a while,\n  // how stale can a value be until you prefer deopting to dynamic.\n  // Must be longer than revalidate.\n  expire?: number\n}\n// The equivalent header is kind of like:\n// Cache-Control: max-age=[stale],s-max-age=[revalidate],stale-while-revalidate=[expire-revalidate],stale-if-error=[expire-revalidate]\n// Except that stale-while-revalidate/stale-if-error only applies to shared caches - not private caches.\n\n// The default revalidates relatively frequently but doesn't expire to ensure it's always\n// able to serve fast results but by default doesn't hang.\n\n// This gets overridden by the next-types-plugin\ntype CacheLifeProfiles =\n  | 'default'\n  | 'seconds'\n  | 'minutes'\n  | 'hours'\n  | 'days'\n  | 'weeks'\n  | 'max'\n  | (string & {})\n\nfunction validateCacheLife(profile: CacheLife) {\n  if (profile.stale !== undefined) {\n    if ((profile.stale as any) === false) {\n      throw new Error(\n        'Pass `Infinity` instead of `false` if you want to cache on the client forever ' +\n          'without checking with the server.'\n      )\n    } else if (typeof profile.stale !== 'number') {\n      throw new Error('The stale option must be a number of seconds.')\n    }\n  }\n  if (profile.revalidate !== undefined) {\n    if ((profile.revalidate as any) === false) {\n      throw new Error(\n        'Pass `Infinity` instead of `false` if you do not want to revalidate by time.'\n      )\n    } else if (typeof profile.revalidate !== 'number') {\n      throw new Error('The revalidate option must be a number of seconds.')\n    }\n  }\n  if (profile.expire !== undefined) {\n    if ((profile.expire as any) === false) {\n      throw new Error(\n        'Pass `Infinity` instead of `false` if you want to cache on the server forever ' +\n          'without checking with the origin.'\n      )\n    } else if (typeof profile.expire !== 'number') {\n      throw new Error('The expire option must be a number of seconds.')\n    }\n  }\n\n  if (profile.revalidate !== undefined && profile.expire !== undefined) {\n    if (profile.revalidate > profile.expire) {\n      throw new Error(\n        'If providing both the revalidate and expire options, ' +\n          'the expire option must be greater than the revalidate option. ' +\n          'The expire option indicates how many seconds from the start ' +\n          'until it can no longer be used.'\n      )\n    }\n  }\n\n  if (profile.stale !== undefined && profile.expire !== undefined) {\n    if (profile.stale > profile.expire) {\n      throw new Error(\n        'If providing both the stale and expire options, ' +\n          'the expire option must be greater than the stale option. ' +\n          'The expire option indicates how many seconds from the start ' +\n          'until it can no longer be used.'\n      )\n    }\n  }\n}\n\nexport function cacheLife(profile: CacheLifeProfiles | CacheLife): void {\n  if (!process.env.__NEXT_USE_CACHE) {\n    throw new Error(\n      'cacheLife() is only available with the experimental.useCache config.'\n    )\n  }\n\n  const workUnitStore = workUnitAsyncStorage.getStore()\n  if (!workUnitStore || workUnitStore.type !== 'cache') {\n    throw new Error(\n      'cacheLife() can only be called inside a \"use cache\" function.'\n    )\n  }\n\n  if (typeof profile === 'string') {\n    const workStore = workAsyncStorage.getStore()\n    if (!workStore) {\n      throw new Error(\n        'cacheLife() can only be called during App Router rendering at the moment.'\n      )\n    }\n    if (!workStore.cacheLifeProfiles) {\n      throw new Error(\n        'cacheLifeProfiles should always be provided. This is a bug in Next.js.'\n      )\n    }\n\n    // TODO: This should be globally available and not require an AsyncLocalStorage.\n    const configuredProfile = workStore.cacheLifeProfiles[profile]\n    if (configuredProfile === undefined) {\n      if (workStore.cacheLifeProfiles[profile.trim()]) {\n        throw new Error(\n          `Unknown cacheLife profile \"${profile}\" is not configured in next.config.js\\n` +\n            `Did you mean \"${profile.trim()}\" without the spaces?`\n        )\n      }\n      throw new Error(\n        `Unknown cacheLife profile \"${profile}\" is not configured in next.config.js\\n` +\n          'module.exports = {\\n' +\n          '  experimental: {\\n' +\n          '    cacheLife: {\\n' +\n          `      \"${profile}\": ...\\n` +\n          '    }\\n' +\n          '  }\\n' +\n          '}'\n      )\n    }\n    profile = configuredProfile\n  } else if (\n    typeof profile !== 'object' ||\n    profile === null ||\n    Array.isArray(profile)\n  ) {\n    throw new Error(\n      'Invalid cacheLife() option. Either pass a profile name or object.'\n    )\n  } else {\n    validateCacheLife(profile)\n  }\n\n  if (profile.revalidate !== undefined) {\n    // Track the explicit revalidate time.\n    if (\n      workUnitStore.explicitRevalidate === undefined ||\n      workUnitStore.explicitRevalidate > profile.revalidate\n    ) {\n      workUnitStore.explicitRevalidate = profile.revalidate\n    }\n  }\n  if (profile.expire !== undefined) {\n    // Track the explicit expire time.\n    if (\n      workUnitStore.explicitExpire === undefined ||\n      workUnitStore.explicitExpire > profile.expire\n    ) {\n      workUnitStore.explicitExpire = profile.expire\n    }\n  }\n  if (profile.stale !== undefined) {\n    // Track the explicit stale time.\n    if (\n      workUnitStore.explicitStale === undefined ||\n      workUnitStore.explicitStale > profile.stale\n    ) {\n      workUnitStore.explicitStale = profile.stale\n    }\n  }\n}\n","import { workUnitAsyncStorage } from '../app-render/work-unit-async-storage.external'\nimport { validateTags } from '../lib/patch-fetch'\n\nexport function cacheTag(...tags: string[]): void {\n  if (!process.env.__NEXT_USE_CACHE) {\n    throw new Error(\n      'cacheTag() is only available with the experimental.useCache config.'\n    )\n  }\n\n  const workUnitStore = workUnitAsyncStorage.getStore()\n  if (!workUnitStore || workUnitStore.type !== 'cache') {\n    throw new Error(\n      'cacheTag() can only be called inside a \"use cache\" function.'\n    )\n  }\n\n  const validTags = validateTags(tags, 'cacheTag()')\n\n  if (!workUnitStore.tags) {\n    workUnitStore.tags = validTags\n  } else {\n    workUnitStore.tags.push(...validTags)\n  }\n}\n","const cacheExports = {\n  unstable_cache: require('next/dist/server/web/spec-extension/unstable-cache')\n    .unstable_cache,\n\n  revalidateTag: require('next/dist/server/web/spec-extension/revalidate')\n    .revalidateTag,\n  revalidatePath: require('next/dist/server/web/spec-extension/revalidate')\n    .revalidatePath,\n\n  unstable_expireTag: require('next/dist/server/web/spec-extension/revalidate')\n    .unstable_expireTag,\n  unstable_expirePath: require('next/dist/server/web/spec-extension/revalidate')\n    .unstable_expirePath,\n\n  unstable_noStore:\n    require('next/dist/server/web/spec-extension/unstable-no-store')\n      .unstable_noStore,\n  unstable_cacheLife: require('next/dist/server/use-cache/cache-life')\n    .cacheLife,\n  unstable_cacheTag: require('next/dist/server/use-cache/cache-tag').cacheTag,\n}\n\n// https://nodejs.org/api/esm.html#commonjs-namespaces\n// When importing CommonJS modules, the module.exports object is provided as the default export\nmodule.exports = cacheExports\n\n// make import { xxx } from 'next/cache' work\nexports.unstable_cache = cacheExports.unstable_cache\nexports.revalidatePath = cacheExports.revalidatePath\nexports.revalidateTag = cacheExports.revalidateTag\nexports.unstable_expireTag = cacheExports.unstable_expireTag\nexports.unstable_expirePath = cacheExports.unstable_expirePath\nexports.unstable_noStore = cacheExports.unstable_noStore\nexports.unstable_cacheLife = cacheExports.unstable_cacheLife\nexports.unstable_cacheTag = cacheExports.unstable_cacheTag\n"],"names":["cloneResponse","original","body","body1","body2","tee","cloned1","Response","status","statusText","headers","Object","defineProperty","value","url","cloned2","createDedupeFetch","simpleCacheKey","generateCacheKey","request","JSON","stringify","method","Array","from","entries","mode","redirect","credentials","referrer","referrerPolicy","integrity","originalFetch","getCacheEntries","React","cache","dedupeFetch","resource","options","signal","cacheKey","URL","Request","keepalive","cacheEntries","i","j","length","key","promise","then","response","InvariantError","entry","push","CachedRouteKind","IncrementalCacheKind","Batcher","cacheKeyFn","schedulerFn","fn","pending","Map","create","batch","Promise","resolve","get","reject","DetachedPromise","set","result","err","delete","NEXT_REQUEST_META","addRequestMeta","getRequestMeta","removeRequestMeta","setRequestMeta","Symbol","for","req","meta","isNodeNextRequest","isNodeNextResponse","isWebNextRequest","isWebNextResponse","process","env","NEXT_RUNTIME","res","NextRequestAdapter","ResponseAborted","ResponseAbortedName","createAbortController","signalFromNodeResponse","Error","name","controller","AbortController","once","writableFinished","abort","errored","destroyed","AbortSignal","fromBaseNextRequest","fromNodeNextRequest","startsWith","base","NextRequest","fromNodeOutgoingHttpHeaders","duplex","aborted","fromWebNextRequest","getClientComponentLoaderMetrics","wrapClientComponentLoader","clientComponentLoadStart","clientComponentLoadTimes","clientComponentLoadCount","ComponentMod","globalThis","__next_app__","require","args","startTime","performance","now","loadChunk","finally","metrics","undefined","reset","isAbortError","pipeToNodeResponse","e","createWriterFromResponse","waitUntilForEnd","started","drained","onDrain","on","off","finished","WritableStream","write","chunk","NEXT_OTEL_PERFORMANCE_PREFIX","measure","start","end","flushHeaders","getTracer","trace","NextNodeServerSpan","startResponse","spanName","ok","flush","cause","destroy","close","readable","writer","pipeTo","RenderResult","fromStatic","metadata","constructor","contentType","waitUntil","assignMetadata","assign","isNull","isDynamic","toUnchunkedBuffer","stream","streamToBuffer","Buffer","toUnchunkedString","streamToString","isBuffer","streamFromBuffer","isArray","chainStreams","chain","responses","streamFromString","writable","preventClose","RouteKind","fromResponseCacheEntry","routeKindToIncrementalCacheKind","toResponseCacheEntry","cacheEntry","kind","PAGES","html","pageData","APP_PAGE","postponed","rscData","segmentData","isMiss","isStale","cacheControl","isFallback","routeKind","IMAGE","APP_ROUTE","ResponseCache","minimalMode","batcher","isOnDemandRevalidate","scheduleOnNextTick","minimalModeKey","responseGenerator","context","hasResolved","previousCacheEntry","incrementalCache","isRoutePPREnabled","previousCacheItem","expiresAt","Date","resolved","cachedResponse","isPrefetch","isRevalidating","resolveValue","newRevalidate","Math","min","max","revalidate","newExpire","expire","console","error","NEXT_PATCH_SYMBOL","createPatchedFetcher","patchFetch","validateRevalidate","validateTags","isEdgeRuntime","isFetchPatched","revalidateVal","route","normalizedRevalidate","INFINITE_CACHE","isNaN","message","includes","tags","description","validTags","invalidTags","tag","reason","NEXT_CACHE_TAG_MAX_LENGTH","NEXT_CACHE_TAG_MAX_ITEMS","warn","slice","join","log","trackFetchMetric","workStore","ctx","requestEndedState","ended","isDebugBuild","NEXT_DEBUG_BUILD","NEXT_SSG_FETCH_METRICS","isStaticGeneration","isDevelopment","NODE_ENV","fetchMetrics","timeOrigin","idx","nextFetchId","originFetch","workAsyncStorage","workUnitAsyncStorage","patched","input","init","username","password","fetchUrl","href","toUpperCase","isInternal","next","internal","hideSpan","NEXT_OTEL_FETCH_DISABLED","fetchStart","getStore","workUnitStore","cacheSignal","type","beginRead","internalFetch","AppRenderSpan","fetch","SpanKind","CLIENT","filter","Boolean","attributes","hostname","port","isDraftMode","isRequestInput","field","finalRevalidate","getNextField","currentFetchRevalidate","toString","revalidateStore","collectedTags","implicitTags","pageFetchCacheMode","fetchCache","isUsingNoStore","isUnstableNoStore","currentFetchCacheConfig","cacheReason","cacheWarning","isConflictingRevalidate","hasExplicitFetchCacheOptOut","noFetchConfigAndForceDynamic","forceDynamic","_headers","initHeaders","Headers","hasUnCacheableHeader","isUnCacheableMethod","toLowerCase","hasNoExplicitCacheConfig","autoNoCache","isPrerendering","endRead","makeHangingPromise","renderSignal","forceStatic","markCurrentScopeAsDynamic","isCacheableRevalidate","useCacheOrRequestStore","serverComponentsHmrCache","fetchIdx","handleUnlock","doOriginalFetch","cacheReasonOverride","requestInputFields","reqInput","reqOptions","_ogBody","otherInput","clonedInit","fetchType","cacheStatus","CACHE_ONE_YEAR","bodyBuffer","arrayBuffer","fetchedData","fromEntries","FETCH","data","catch","isForegroundRevalidate","isHmrRefreshCache","cachedFetchData","isHmrRefresh","lock","softTags","waitAtLeastOneReactRenderTask","isRevalidate","pendingRevalidates","pendingRevalidate","hasNextConfig","pendingRevalidateKey","revalidatedResult","pendingResponse","__nextPatched","__nextGetStaticStore","_nextOriginalFetch","unstable_cache","noStoreFetchIdx","cacheNewResult","cb","keyParts","fixedKey","cachedCb","maybeIncrementalCache","__incrementalCache","requestStore","pathname","searchParams","URLSearchParams","search","sortedSearchKeys","keys","sort","a","b","localeCompare","sortedSearch","map","invocationKey","innerCacheStore","phase","draftMode","getDraftModeProviderForCacheScope","isNestedUnstableCache","parse","run","getSortedRouteObjects","getSortedRoutes","UrlNode","insert","urlPath","_insert","split","smoosh","_smoosh","prefix","childrenPaths","children","slugName","splice","indexOf","restSlugName","optionalRestSlugName","routes","c","reduce","prev","curr","placeholder","r","unshift","urlPaths","slugNames","isCatchAll","nextSegment","endsWith","segmentName","isOptional","substring","handleSlug","previousSlug","nextSlug","forEach","slug","replace","has","normalizedPages","root","pagePath","objects","getter","indexes","pathnames","sorted","isDynamicRoute","TEST_ROUTE","TEST_STRICT_ROUTE","strict","isInterceptionRouteAppPath","extractInterceptionRouteInformation","interceptedRoute","test","revalidatePath","revalidateTag","unstable_expirePath","unstable_expireTag","originalPath","NEXT_CACHE_SOFT_TAG_MAX_LENGTH","normalizedPath","NEXT_CACHE_IMPLICIT_TAG_ID","expression","store","abortAndThrowOnSynchronousRequestDataAccess","postponeWithTracking","dynamicTracking","DynamicServerError","dynamicUsageDescription","dynamicUsageStack","stack","pendingRevalidatedTags","pathWasRevalidated","unstable_noStore","callingExpression","cacheLife","validateCacheLife","profile","stale","__NEXT_USE_CACHE","cacheLifeProfiles","configuredProfile","trim","explicitRevalidate","explicitExpire","explicitStale","cacheTag"],"mappings":"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","ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22]}