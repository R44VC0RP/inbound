module.exports={700409:a=>{"use strict";var{g:b,__dirname:c}=a;{a.s({SendBounceCommand:()=>b}),a.i(475631);var d=a.i(513837);a.i(186772);var e=a.i(215606);a.i(627697);var f=a.i(452950),g=a.i(628689),h=a.i(47002);class b extends f.Command.classBuilder().ep(g.commonParams).m(function(a,b,c,f){return[(0,e.getSerdePlugin)(c,this.serialize,this.deserialize),(0,d.getEndpointPlugin)(c,a.getEndpointParameterInstructions())]}).s("SimpleEmailService","SendBounce",{}).n("SESClient","SendBounceCommand").f(void 0,void 0).ser(h.se_SendBounceCommand).de(h.de_SendBounceCommand).build(){}}},81725:function(a){var{g:b,__dirname:c,m:d,e:e}=a;d.exports=a.x("@aws-sdk/client-s3",()=>require("@aws-sdk/client-s3"))},654129:function(a){var{g:b,__dirname:c,m:d,e:e}=a;d.exports=a.x("@aws-sdk/client-s3",()=>require("@aws-sdk/client-s3"))},620076:a=>{"use strict";var{g:b,__dirname:c}=a;{a.s({AWSSESEmailProcessor:()=>b,createEmailProcessor:()=>c,getEmailFromS3:()=>j,getEmailMetadata:()=>k,handleSESEvent:()=>i}),a.i(81725);var d=a.i(654129),e=a.i(589734),f=a.i(700409),g=a.i(225073),h=a.i(988668);class b{s3Client;sesClient;config;constructor(a={}){this.config={s3Region:process.env.AWS_REGION||"us-east-2",sesRegion:process.env.AWS_REGION||"us-east-2",allowedDomains:[],blockedSenders:[],maxAttachmentSize:0xa00000,enableSpamFilter:!0,enableVirusFilter:!0,serviceApiUrl:process.env.SERVICE_API_URL,serviceApiKey:process.env.SERVICE_API_KEY,...a},this.s3Client=new d.S3Client({region:this.config.s3Region}),this.sesClient=new e.SESClient({region:this.config.sesRegion})}async processEmailEvent(a){let b=[];for(let c of a.Records)try{if(!this.isEmailValid(c)){console.log(`Skipping invalid email: ${c.ses.mail.messageId}`);continue}if(!this.passesSecurityChecks(c.ses.receipt)){console.log(`Email failed security checks: ${c.ses.mail.messageId}`),await this.bounceEmail(c.ses.mail,"Email failed security validation");continue}for(let a of c.ses.receipt.recipients){let d=await this.processEmailForRecipient(c,a);d&&(b.push(d),await this.sendWebhookToAPI(d))}}catch(a){console.error(`Error processing email ${c.ses.mail.messageId}:`,a)}return b}async getEmailFromS3ForAPI(a,b){try{let c=await this.getEmailFromS3(a,b),d=await this.parseEmail(c);return{messageId:b.split("/").pop()||"unknown",from:(0,h.extractEmailAddress)(d.from),to:(0,h.extractEmailAddresses)(d.to),subject:d.subject||"No Subject",body:{text:d.text,html:d.html||void 0},attachments:this.processAttachments(d.attachments||[]),headers:this.extractHeaders(d),timestamp:d.date||new Date,recipient:(0,h.extractEmailAddress)(d.to),authResults:{spf:"UNKNOWN",dkim:"UNKNOWN",dmarc:"UNKNOWN",spam:"UNKNOWN",virus:"UNKNOWN"},s3Location:{bucket:a,key:b}}}catch(c){throw console.error(`Error retrieving email from S3: ${a}/${b}`,c),c}}async getEmailMetadata(a,b){try{let c=await this.getEmailFromS3ForAPI(a,b);return{messageId:c.messageId,from:c.from,to:c.to,subject:c.subject,timestamp:c.timestamp,recipient:c.recipient,hasAttachments:c.attachments.length>0,attachmentCount:c.attachments.length,bodyPreview:(c.body.text||c.body.html||"").substring(0,200),authResults:c.authResults,s3Location:c.s3Location,headers:c.headers}}catch(c){throw console.error(`Error getting email metadata: ${a}/${b}`,c),c}}async sendWebhookToAPI(a){if(!this.config.serviceApiUrl||!this.config.serviceApiKey)return void console.log("Service API URL or key not configured, skipping webhook");try{let b={type:"email_received",timestamp:a.timestamp.toISOString(),data:{messageId:a.messageId,from:a.from,to:a.to,recipient:a.recipient,subject:a.subject,bodyPreview:(a.body.text||a.body.html||"").substring(0,200),hasAttachments:a.attachments.length>0,attachmentCount:a.attachments.length,authResults:a.authResults,s3Location:a.s3Location,headers:{messageId:a.headers["message-id"],date:a.headers.date,replyTo:a.headers["reply-to"],inReplyTo:a.headers["in-reply-to"],references:a.headers.references}}},c=await fetch(`${this.config.serviceApiUrl}/api/webhooks/email-received`,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${this.config.serviceApiKey}`,"User-Agent":"AWS-Lambda-Email-Processor/1.0"},body:JSON.stringify(b)});if(!c.ok)throw Error(`Webhook failed: ${c.status} ${c.statusText}`);console.log(`Webhook sent successfully for email: ${a.messageId}`)}catch(b){console.error(`Failed to send webhook for email ${a.messageId}:`,b)}}async isRecipientManaged(a){if(!this.config.serviceApiUrl||!this.config.serviceApiKey){if(this.config.allowedDomains&&this.config.allowedDomains.length>0){let b=a.split("@")[1];return this.config.allowedDomains.includes(b)}return!0}try{let b=await fetch(`${this.config.serviceApiUrl}/api/emails/check-recipient`,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${this.config.serviceApiKey}`},body:JSON.stringify({recipient:a})});if(b.ok){let a=await b.json();return!0===a.isManaged}return!1}catch(b){if(console.error(`Error checking if recipient is managed: ${a}`,b),this.config.allowedDomains&&this.config.allowedDomains.length>0){let b=a.split("@")[1];return this.config.allowedDomains.includes(b)}return!1}}async processEmailForRecipient(a,b){try{if(!await this.isRecipientManaged(b))return console.log(`Recipient ${b} is not managed by the system, skipping`),null;let c=await this.getEmailFromS3(a.ses.receipt.action.bucketName,a.ses.receipt.action.objectKey),d=await this.parseEmail(c);return{messageId:a.ses.mail.messageId,from:a.ses.mail.source,to:a.ses.mail.destination,subject:a.ses.mail.commonHeaders.subject,body:{text:d.text,html:d.html||void 0},attachments:this.processAttachments(d.attachments||[]),headers:this.extractHeaders(d),timestamp:new Date(a.ses.mail.timestamp),recipient:b,authResults:{spf:a.ses.receipt.spfVerdict.status,dkim:a.ses.receipt.dkimVerdict.status,dmarc:a.ses.receipt.dmarcVerdict.status,spam:a.ses.receipt.spamVerdict.status,virus:a.ses.receipt.virusVerdict.status},s3Location:{bucket:a.ses.receipt.action.bucketName,key:a.ses.receipt.action.objectKey}}}catch(a){return console.error(`Error processing email for recipient ${b}:`,a),null}}async getEmailFromS3(a,b){try{let c=new d.GetObjectCommand({Bucket:a,Key:b}),e=await this.s3Client.send(c);if(!e.Body)throw Error("No email content found in S3 object");let f=[],g=e.Body.transformToWebStream().getReader();for(;;){let{done:a,value:b}=await g.read();if(a)break;f.push(b)}return Buffer.concat(f)}catch(c){throw console.error(`Error retrieving email from S3: ${a}/${b}`,c),c}}async parseEmail(a){try{return await (0,g.simpleParser)(a)}catch(a){throw console.error("Error parsing email:",a),a}}processAttachments(a){return a.filter(a=>a.filename&&a.size<=this.config.maxAttachmentSize&&!a.cid).map(a=>({filename:a.filename,contentType:a.contentType,size:a.size,content:a.content}))}extractHeaders(a){let b={};if(a.headers)for(let c of["message-id","date","from","to","cc","bcc","subject","reply-to","in-reply-to","references","x-mailer","x-originating-ip"]){let d=a.headers.get(c);d&&(b[c]=Array.isArray(d)?d.join(", "):d.toString())}return b}isEmailValid(a){let{mail:b,receipt:c}=a.ses;return!this.config.blockedSenders?.includes(b.source)||(console.log(`Blocked sender: ${b.source}`),!1)}passesSecurityChecks(a){return this.config.enableSpamFilter&&"FAIL"===a.spamVerdict.status?(console.log("Email failed spam check"),!1):!this.config.enableVirusFilter||"FAIL"!==a.virusVerdict.status||(console.log("Email failed virus check"),!1)}async bounceEmail(a,b){try{let c={OriginalMessageId:a.messageId,BounceSender:`mailer-daemon@${a.destination[0].split("@")[1]}`,MessageDsn:{ReportingMta:`dns; ${a.destination[0].split("@")[1]}`,ArrivalDate:new Date(a.timestamp),ExtensionFields:[]},BouncedRecipientInfoList:a.destination.map(a=>({Recipient:a,BounceType:"Permanent",RecipientArn:void 0,RecipientDsnFields:{FinalRecipient:a,Action:"failed",Status:"5.1.1",DiagnosticCode:b}}))},d=new f.SendBounceCommand(c);await this.sesClient.send(d),console.log(`Bounce sent for message: ${a.messageId}`)}catch(b){console.error(`Error sending bounce for message ${a.messageId}:`,b)}}static extractDomain(a){return a.split("@")[1]?.toLowerCase()||""}static isTrustedDomain(a,b){let c=this.extractDomain(a);return b.includes(c)}}let c=a=>new b(a),i=async(a,b)=>{let d=c(b);return await d.processEmailEvent(a)},j=async(a,b,d)=>{let e=c(d);return await e.getEmailFromS3ForAPI(a,b)},k=async(a,b,d)=>{let e=c(d);return await e.getEmailMetadata(a,b)}}}};

//# sourceMappingURL=%5Broot-of-the-server%5D__bf80f37d._.js.map