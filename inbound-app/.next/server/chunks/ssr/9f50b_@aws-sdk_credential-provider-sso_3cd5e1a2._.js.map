{"version":3,"sources":["turbopack:///[project]/node_modules/@aws-sdk/client-ses/node_modules/@aws-sdk/credential-provider-node/node_modules/@aws-sdk/credential-provider-sso/dist-es/isSsoProfile.js","turbopack:///[project]/node_modules/@aws-sdk/client-ses/node_modules/@aws-sdk/credential-provider-node/node_modules/@aws-sdk/credential-provider-sso/node_modules/@aws-sdk/token-providers/dist-es/constants.js","turbopack:///[project]/node_modules/@aws-sdk/client-ses/node_modules/@aws-sdk/credential-provider-node/node_modules/@aws-sdk/credential-provider-sso/node_modules/@aws-sdk/token-providers/dist-es/getSsoOidcClient.js","turbopack:///[project]/node_modules/@aws-sdk/client-ses/node_modules/@aws-sdk/credential-provider-node/node_modules/@aws-sdk/credential-provider-sso/node_modules/@aws-sdk/token-providers/dist-es/getNewSsoOidcToken.js","turbopack:///[project]/node_modules/@aws-sdk/client-ses/node_modules/@aws-sdk/credential-provider-node/node_modules/@aws-sdk/credential-provider-sso/node_modules/@aws-sdk/token-providers/dist-es/validateTokenExpiry.js","turbopack:///[project]/node_modules/@aws-sdk/client-ses/node_modules/@aws-sdk/credential-provider-node/node_modules/@aws-sdk/credential-provider-sso/node_modules/@aws-sdk/token-providers/dist-es/validateTokenKey.js","turbopack:///[project]/node_modules/@aws-sdk/client-ses/node_modules/@aws-sdk/credential-provider-node/node_modules/@aws-sdk/credential-provider-sso/node_modules/@aws-sdk/token-providers/dist-es/writeSSOTokenToFile.js","turbopack:///[project]/node_modules/@aws-sdk/client-ses/node_modules/@aws-sdk/credential-provider-node/node_modules/@aws-sdk/credential-provider-sso/node_modules/@aws-sdk/token-providers/dist-es/fromSso.js","turbopack:///[project]/node_modules/@aws-sdk/client-ses/node_modules/@aws-sdk/credential-provider-node/node_modules/@aws-sdk/credential-provider-sso/dist-es/resolveSSOCredentials.js","turbopack:///[project]/node_modules/@aws-sdk/client-ses/node_modules/@aws-sdk/credential-provider-node/node_modules/@aws-sdk/credential-provider-sso/dist-es/validateSsoProfile.js","turbopack:///[project]/node_modules/@aws-sdk/client-ses/node_modules/@aws-sdk/credential-provider-node/node_modules/@aws-sdk/credential-provider-sso/dist-es/fromSSO.js","turbopack:///[project]/node_modules/@aws-sdk/client-ses/node_modules/@aws-sdk/credential-provider-node/node_modules/@aws-sdk/credential-provider-sso/dist-es/index.js"],"sourcesContent":["export const isSsoProfile = (arg) => arg &&\n    (typeof arg.sso_start_url === \"string\" ||\n        typeof arg.sso_account_id === \"string\" ||\n        typeof arg.sso_session === \"string\" ||\n        typeof arg.sso_region === \"string\" ||\n        typeof arg.sso_role_name === \"string\");\n","export const EXPIRE_WINDOW_MS = 5 * 60 * 1000;\nexport const REFRESH_MESSAGE = `To refresh this SSO session run 'aws sso login' with the corresponding profile.`;\n","export const getSsoOidcClient = async (ssoRegion, init = {}) => {\n    const { SSOOIDCClient } = await import(\"@aws-sdk/nested-clients/sso-oidc\");\n    const ssoOidcClient = new SSOOIDCClient(Object.assign({}, init.clientConfig ?? {}, {\n        region: ssoRegion ?? init.clientConfig?.region,\n        logger: init.clientConfig?.logger ?? init.parentClientConfig?.logger,\n    }));\n    return ssoOidcClient;\n};\n","import { getSsoOidcClient } from \"./getSsoOidcClient\";\nexport const getNewSsoOidcToken = async (ssoToken, ssoRegion, init = {}) => {\n    const { CreateTokenCommand } = await import(\"@aws-sdk/nested-clients/sso-oidc\");\n    const ssoOidcClient = await getSsoOidcClient(ssoRegion, init);\n    return ssoOidcClient.send(new CreateTokenCommand({\n        clientId: ssoToken.clientId,\n        clientSecret: ssoToken.clientSecret,\n        refreshToken: ssoToken.refreshToken,\n        grantType: \"refresh_token\",\n    }));\n};\n","import { TokenProviderError } from \"@smithy/property-provider\";\nimport { REFRESH_MESSAGE } from \"./constants\";\nexport const validateTokenExpiry = (token) => {\n    if (token.expiration && token.expiration.getTime() < Date.now()) {\n        throw new TokenProviderError(`Token is expired. ${REFRESH_MESSAGE}`, false);\n    }\n};\n","import { TokenProviderError } from \"@smithy/property-provider\";\nimport { REFRESH_MESSAGE } from \"./constants\";\nexport const validateTokenKey = (key, value, forRefresh = false) => {\n    if (typeof value === \"undefined\") {\n        throw new TokenProviderError(`Value not present for '${key}' in SSO Token${forRefresh ? \". Cannot refresh\" : \"\"}. ${REFRESH_MESSAGE}`, false);\n    }\n};\n","import { getSSOTokenFilepath } from \"@smithy/shared-ini-file-loader\";\nimport { promises as fsPromises } from \"fs\";\nconst { writeFile } = fsPromises;\nexport const writeSSOTokenToFile = (id, ssoToken) => {\n    const tokenFilepath = getSSOTokenFilepath(id);\n    const tokenString = JSON.stringify(ssoToken, null, 2);\n    return writeFile(tokenFilepath, tokenString);\n};\n","import { TokenProviderError } from \"@smithy/property-provider\";\nimport { getProfileName, getSSOTokenFromFile, loadSsoSessionData, parseKnownFiles, } from \"@smithy/shared-ini-file-loader\";\nimport { EXPIRE_WINDOW_MS, REFRESH_MESSAGE } from \"./constants\";\nimport { getNewSsoOidcToken } from \"./getNewSsoOidcToken\";\nimport { validateTokenExpiry } from \"./validateTokenExpiry\";\nimport { validateTokenKey } from \"./validateTokenKey\";\nimport { writeSSOTokenToFile } from \"./writeSSOTokenToFile\";\nconst lastRefreshAttemptTime = new Date(0);\nexport const fromSso = (_init = {}) => async ({ callerClientConfig } = {}) => {\n    const init = {\n        ..._init,\n        parentClientConfig: {\n            ...callerClientConfig,\n            ..._init.parentClientConfig,\n        },\n    };\n    init.logger?.debug(\"@aws-sdk/token-providers - fromSso\");\n    const profiles = await parseKnownFiles(init);\n    const profileName = getProfileName({\n        profile: init.profile ?? callerClientConfig?.profile,\n    });\n    const profile = profiles[profileName];\n    if (!profile) {\n        throw new TokenProviderError(`Profile '${profileName}' could not be found in shared credentials file.`, false);\n    }\n    else if (!profile[\"sso_session\"]) {\n        throw new TokenProviderError(`Profile '${profileName}' is missing required property 'sso_session'.`);\n    }\n    const ssoSessionName = profile[\"sso_session\"];\n    const ssoSessions = await loadSsoSessionData(init);\n    const ssoSession = ssoSessions[ssoSessionName];\n    if (!ssoSession) {\n        throw new TokenProviderError(`Sso session '${ssoSessionName}' could not be found in shared credentials file.`, false);\n    }\n    for (const ssoSessionRequiredKey of [\"sso_start_url\", \"sso_region\"]) {\n        if (!ssoSession[ssoSessionRequiredKey]) {\n            throw new TokenProviderError(`Sso session '${ssoSessionName}' is missing required property '${ssoSessionRequiredKey}'.`, false);\n        }\n    }\n    const ssoStartUrl = ssoSession[\"sso_start_url\"];\n    const ssoRegion = ssoSession[\"sso_region\"];\n    let ssoToken;\n    try {\n        ssoToken = await getSSOTokenFromFile(ssoSessionName);\n    }\n    catch (e) {\n        throw new TokenProviderError(`The SSO session token associated with profile=${profileName} was not found or is invalid. ${REFRESH_MESSAGE}`, false);\n    }\n    validateTokenKey(\"accessToken\", ssoToken.accessToken);\n    validateTokenKey(\"expiresAt\", ssoToken.expiresAt);\n    const { accessToken, expiresAt } = ssoToken;\n    const existingToken = { token: accessToken, expiration: new Date(expiresAt) };\n    if (existingToken.expiration.getTime() - Date.now() > EXPIRE_WINDOW_MS) {\n        return existingToken;\n    }\n    if (Date.now() - lastRefreshAttemptTime.getTime() < 30 * 1000) {\n        validateTokenExpiry(existingToken);\n        return existingToken;\n    }\n    validateTokenKey(\"clientId\", ssoToken.clientId, true);\n    validateTokenKey(\"clientSecret\", ssoToken.clientSecret, true);\n    validateTokenKey(\"refreshToken\", ssoToken.refreshToken, true);\n    try {\n        lastRefreshAttemptTime.setTime(Date.now());\n        const newSsoOidcToken = await getNewSsoOidcToken(ssoToken, ssoRegion, init);\n        validateTokenKey(\"accessToken\", newSsoOidcToken.accessToken);\n        validateTokenKey(\"expiresIn\", newSsoOidcToken.expiresIn);\n        const newTokenExpiration = new Date(Date.now() + newSsoOidcToken.expiresIn * 1000);\n        try {\n            await writeSSOTokenToFile(ssoSessionName, {\n                ...ssoToken,\n                accessToken: newSsoOidcToken.accessToken,\n                expiresAt: newTokenExpiration.toISOString(),\n                refreshToken: newSsoOidcToken.refreshToken,\n            });\n        }\n        catch (error) {\n        }\n        return {\n            token: newSsoOidcToken.accessToken,\n            expiration: newTokenExpiration,\n        };\n    }\n    catch (error) {\n        validateTokenExpiry(existingToken);\n        return existingToken;\n    }\n};\n","import { setCredentialFeature } from \"@aws-sdk/core/client\";\nimport { fromSso as getSsoTokenProvider } from \"@aws-sdk/token-providers\";\nimport { CredentialsProviderError } from \"@smithy/property-provider\";\nimport { getSSOTokenFromFile } from \"@smithy/shared-ini-file-loader\";\nconst SHOULD_FAIL_CREDENTIAL_CHAIN = false;\nexport const resolveSSOCredentials = async ({ ssoStartUrl, ssoSession, ssoAccountId, ssoRegion, ssoRoleName, ssoClient, clientConfig, parentClientConfig, profile, logger, }) => {\n    let token;\n    const refreshMessage = `To refresh this SSO session run aws sso login with the corresponding profile.`;\n    if (ssoSession) {\n        try {\n            const _token = await getSsoTokenProvider({ profile })();\n            token = {\n                accessToken: _token.token,\n                expiresAt: new Date(_token.expiration).toISOString(),\n            };\n        }\n        catch (e) {\n            throw new CredentialsProviderError(e.message, {\n                tryNextLink: SHOULD_FAIL_CREDENTIAL_CHAIN,\n                logger,\n            });\n        }\n    }\n    else {\n        try {\n            token = await getSSOTokenFromFile(ssoStartUrl);\n        }\n        catch (e) {\n            throw new CredentialsProviderError(`The SSO session associated with this profile is invalid. ${refreshMessage}`, {\n                tryNextLink: SHOULD_FAIL_CREDENTIAL_CHAIN,\n                logger,\n            });\n        }\n    }\n    if (new Date(token.expiresAt).getTime() - Date.now() <= 0) {\n        throw new CredentialsProviderError(`The SSO session associated with this profile has expired. ${refreshMessage}`, {\n            tryNextLink: SHOULD_FAIL_CREDENTIAL_CHAIN,\n            logger,\n        });\n    }\n    const { accessToken } = token;\n    const { SSOClient, GetRoleCredentialsCommand } = await import(\"./loadSso\");\n    const sso = ssoClient ||\n        new SSOClient(Object.assign({}, clientConfig ?? {}, {\n            logger: clientConfig?.logger ?? parentClientConfig?.logger,\n            region: clientConfig?.region ?? ssoRegion,\n        }));\n    let ssoResp;\n    try {\n        ssoResp = await sso.send(new GetRoleCredentialsCommand({\n            accountId: ssoAccountId,\n            roleName: ssoRoleName,\n            accessToken,\n        }));\n    }\n    catch (e) {\n        throw new CredentialsProviderError(e, {\n            tryNextLink: SHOULD_FAIL_CREDENTIAL_CHAIN,\n            logger,\n        });\n    }\n    const { roleCredentials: { accessKeyId, secretAccessKey, sessionToken, expiration, credentialScope, accountId } = {}, } = ssoResp;\n    if (!accessKeyId || !secretAccessKey || !sessionToken || !expiration) {\n        throw new CredentialsProviderError(\"SSO returns an invalid temporary credential.\", {\n            tryNextLink: SHOULD_FAIL_CREDENTIAL_CHAIN,\n            logger,\n        });\n    }\n    const credentials = {\n        accessKeyId,\n        secretAccessKey,\n        sessionToken,\n        expiration: new Date(expiration),\n        ...(credentialScope && { credentialScope }),\n        ...(accountId && { accountId }),\n    };\n    if (ssoSession) {\n        setCredentialFeature(credentials, \"CREDENTIALS_SSO\", \"s\");\n    }\n    else {\n        setCredentialFeature(credentials, \"CREDENTIALS_SSO_LEGACY\", \"u\");\n    }\n    return credentials;\n};\n","import { CredentialsProviderError } from \"@smithy/property-provider\";\nexport const validateSsoProfile = (profile, logger) => {\n    const { sso_start_url, sso_account_id, sso_region, sso_role_name } = profile;\n    if (!sso_start_url || !sso_account_id || !sso_region || !sso_role_name) {\n        throw new CredentialsProviderError(`Profile is configured with invalid SSO credentials. Required parameters \"sso_account_id\", ` +\n            `\"sso_region\", \"sso_role_name\", \"sso_start_url\". Got ${Object.keys(profile).join(\", \")}\\nReference: https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-sso.html`, { tryNextLink: false, logger });\n    }\n    return profile;\n};\n","import { CredentialsProviderError } from \"@smithy/property-provider\";\nimport { getProfileName, loadSsoSessionData, parseKnownFiles } from \"@smithy/shared-ini-file-loader\";\nimport { isSsoProfile } from \"./isSsoProfile\";\nimport { resolveSSOCredentials } from \"./resolveSSOCredentials\";\nimport { validateSsoProfile } from \"./validateSsoProfile\";\nexport const fromSSO = (init = {}) => async ({ callerClientConfig } = {}) => {\n    init.logger?.debug(\"@aws-sdk/credential-provider-sso - fromSSO\");\n    const { ssoStartUrl, ssoAccountId, ssoRegion, ssoRoleName, ssoSession } = init;\n    const { ssoClient } = init;\n    const profileName = getProfileName({\n        profile: init.profile ?? callerClientConfig?.profile,\n    });\n    if (!ssoStartUrl && !ssoAccountId && !ssoRegion && !ssoRoleName && !ssoSession) {\n        const profiles = await parseKnownFiles(init);\n        const profile = profiles[profileName];\n        if (!profile) {\n            throw new CredentialsProviderError(`Profile ${profileName} was not found.`, { logger: init.logger });\n        }\n        if (!isSsoProfile(profile)) {\n            throw new CredentialsProviderError(`Profile ${profileName} is not configured with SSO credentials.`, {\n                logger: init.logger,\n            });\n        }\n        if (profile?.sso_session) {\n            const ssoSessions = await loadSsoSessionData(init);\n            const session = ssoSessions[profile.sso_session];\n            const conflictMsg = ` configurations in profile ${profileName} and sso-session ${profile.sso_session}`;\n            if (ssoRegion && ssoRegion !== session.sso_region) {\n                throw new CredentialsProviderError(`Conflicting SSO region` + conflictMsg, {\n                    tryNextLink: false,\n                    logger: init.logger,\n                });\n            }\n            if (ssoStartUrl && ssoStartUrl !== session.sso_start_url) {\n                throw new CredentialsProviderError(`Conflicting SSO start_url` + conflictMsg, {\n                    tryNextLink: false,\n                    logger: init.logger,\n                });\n            }\n            profile.sso_region = session.sso_region;\n            profile.sso_start_url = session.sso_start_url;\n        }\n        const { sso_start_url, sso_account_id, sso_region, sso_role_name, sso_session } = validateSsoProfile(profile, init.logger);\n        return resolveSSOCredentials({\n            ssoStartUrl: sso_start_url,\n            ssoSession: sso_session,\n            ssoAccountId: sso_account_id,\n            ssoRegion: sso_region,\n            ssoRoleName: sso_role_name,\n            ssoClient: ssoClient,\n            clientConfig: init.clientConfig,\n            parentClientConfig: init.parentClientConfig,\n            profile: profileName,\n        });\n    }\n    else if (!ssoStartUrl || !ssoAccountId || !ssoRegion || !ssoRoleName) {\n        throw new CredentialsProviderError(\"Incomplete configuration. The fromSSO() argument hash must include \" +\n            '\"ssoStartUrl\", \"ssoAccountId\", \"ssoRegion\", \"ssoRoleName\"', { tryNextLink: false, logger: init.logger });\n    }\n    else {\n        return resolveSSOCredentials({\n            ssoStartUrl,\n            ssoSession,\n            ssoAccountId,\n            ssoRegion,\n            ssoRoleName,\n            ssoClient,\n            clientConfig: init.clientConfig,\n            parentClientConfig: init.parentClientConfig,\n            profile: profileName,\n        });\n    }\n};\n","export * from \"./fromSSO\";\nexport * from \"./isSsoProfile\";\nexport * from \"./types\";\nexport * from \"./validateSsoProfile\";\n"],"names":[],"mappings":"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","ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11]}