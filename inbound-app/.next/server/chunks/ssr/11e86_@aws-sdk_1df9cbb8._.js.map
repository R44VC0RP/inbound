{"version":3,"sources":["turbopack:///[project]/node_modules/@aws-sdk/client-ses/node_modules/@aws-sdk/core/dist-es/submodules/protocols/json/parseJsonBody.js"],"sourcesContent":["import { collectBodyString } from \"../common\";\nexport const parseJsonBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {\n    if (encoded.length) {\n        try {\n            return JSON.parse(encoded);\n        }\n        catch (e) {\n            if (e?.name === \"SyntaxError\") {\n                Object.defineProperty(e, \"$responseBodyText\", {\n                    value: encoded,\n                });\n            }\n            throw e;\n        }\n    }\n    return {};\n});\nexport const parseJsonErrorBody = async (errorBody, context) => {\n    const value = await parseJsonBody(errorBody, context);\n    value.message = value.message ?? value.Message;\n    return value;\n};\nexport const loadRestJsonErrorCode = (output, data) => {\n    const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());\n    const sanitizeErrorCode = (rawValue) => {\n        let cleanValue = rawValue;\n        if (typeof cleanValue === \"number\") {\n            cleanValue = cleanValue.toString();\n        }\n        if (cleanValue.indexOf(\",\") >= 0) {\n            cleanValue = cleanValue.split(\",\")[0];\n        }\n        if (cleanValue.indexOf(\":\") >= 0) {\n            cleanValue = cleanValue.split(\":\")[0];\n        }\n        if (cleanValue.indexOf(\"#\") >= 0) {\n            cleanValue = cleanValue.split(\"#\")[1];\n        }\n        return cleanValue;\n    };\n    const headerKey = findKey(output.headers, \"x-amzn-errortype\");\n    if (headerKey !== undefined) {\n        return sanitizeErrorCode(output.headers[headerKey]);\n    }\n    if (data && typeof data === \"object\") {\n        const codeKey = findKey(data, \"code\");\n        if (codeKey && data[codeKey] !== undefined) {\n            return sanitizeErrorCode(data[codeKey]);\n        }\n        if (data[\"__type\"] !== undefined) {\n            return sanitizeErrorCode(data[\"__type\"]);\n        }\n    }\n};\n"],"names":[],"mappings":"gJAAA,IAAA,EAAA,EAAA,CAAA,CAAA,QACO,IAAM,EAAgB,CAAC,EAAY,IAAY,GAAA,EAAA,iBAAA,AAAgB,EAAE,EAAY,GAAS,IAAI,CAAC,AAAC,IAC/F,GAAI,CAD8C,CACtC,MAAM,CACd,CADgB,EACZ,CACA,OAAO,KAAK,KAAK,CAAC,EACtB,CACA,MAAO,EAAG,CAMN,MALI,GAAG,OAAS,eAAe,AAC3B,OAAO,cAAc,CAAC,EAAG,oBAAqB,CAC1C,MAAO,CACX,GAEE,CACV,CAEJ,MAAO,CAAC,CACZ,GACa,EAAqB,MAAO,EAAW,KAChD,IAAM,EAAQ,MAAM,EAAc,EAAW,GAE7C,OADA,EAAM,OAAO,CAAG,EAAM,OAAO,EAAI,EAAM,OAAO,CACvC,CACX,EACa,EAAwB,CAAC,EAAQ,KAC1C,IAAM,EAAU,CAAC,EAAQ,IAAQ,OAAO,IAAI,CAAC,GAAQ,IAAI,CAAC,AAAC,GAAM,EAAE,WAAW,KAAO,EAAI,WAAW,IAC9F,EAAoB,AAAC,IACvB,IAAI,EAAa,EAajB,MAZ0B,UAAtB,AAAgC,OAAzB,IACP,EAAa,EAAW,QAAQ,EAAA,EAEhC,EAAW,OAAO,CAAC,MAAQ,GAAG,AAC9B,GAAa,EAAW,KAAK,CAAC,IAAI,CAAC,EAAA,AAAE,EAErC,EAAW,OAAO,CAAC,MAAQ,GAAG,AAC9B,GAAa,EAAW,KAAK,CAAC,IAAI,CAAC,EAAA,AAAE,EAErC,EAAW,OAAO,CAAC,MAAQ,GAAG,CAC9B,EAAa,EAAW,KAAK,CAAC,IAAI,CAAC,EAAA,AAAE,EAElC,CACX,EACM,EAAY,EAAQ,EAAO,OAAO,CAAE,oBAC1C,QAAkB,IAAd,EACA,KADyB,EAClB,EAAkB,EAAO,OAAO,CAAC,EAAU,EAEtD,GAAI,GAAwB,UAAhB,OAAO,EAAmB,CAClC,IAAM,EAAU,EAAQ,EAAM,QAC9B,GAAI,QAA6B,IAAlB,CAAI,CAAC,EAAQ,CACxB,EADwC,KACjC,EAAkB,CAAI,CAAC,EAAQ,EAE1C,GAAI,AAAmB,IAAf,OAAC,AAAyB,MAAhB,CACd,OAAO,EAAkB,EAAK,EAAD,IAAU,CAE/C,CACJ","ignoreList":[0]}