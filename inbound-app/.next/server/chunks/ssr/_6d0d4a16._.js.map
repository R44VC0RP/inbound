{"version":3,"sources":["turbopack:///[project]/components/icons/arrow-up-right-2.tsx","turbopack:///[project]/app/actions/data:7339c6 <text/javascript>","turbopack:///[project]/features/emails/hooks/useEmailQuery.ts","turbopack:///[project]/app/actions/data:1c55ae <text/javascript>","turbopack:///[project]/features/emails/hooks/useMarkEmailAsReadMutation.ts","turbopack:///[project]/features/emails/hooks/useEmailAddressesV2Hooks.ts","turbopack:///[project]/features/emails/hooks/useMailV2Hooks.ts","turbopack:///[project]/app/actions/data:64b90e <text/javascript>","turbopack:///[project]/features/emails/hooks/useUserEmailLogsQuery.ts","turbopack:///[project]/app/actions/data:0b1a7d <text/javascript>","turbopack:///[project]/app/actions/data:8660ba <text/javascript>","turbopack:///[project]/app/actions/data:d5ee75 <text/javascript>","turbopack:///[project]/features/emails/hooks/index.ts"],"sourcesContent":["import React, {SVGProps} from 'react';\n\ntype IconProps = SVGProps<SVGSVGElement> & {\n\tsecondaryfill?: string;\n\tstrokewidth?: number;\n\ttitle?: string;\n}\n\nfunction ArrowUpRight2({fill = 'currentColor', secondaryfill, title = 'badge 13', ...props}: IconProps) {\n\tsecondaryfill = secondaryfill || fill;\n\n\treturn (\n\t\t<svg height=\"12\" width=\"12\" {...props} viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n\t<title>{title}</title>\n\t<g fill={fill}>\n\t\t<path d=\"m1.75,11c-.192,0-.384-.073-.53-.22-.293-.293-.293-.768,0-1.061L9.543,1.396c.293-.293.768-.293,1.061,0s.293.768,0,1.061L2.28,10.78c-.146.146-.338.22-.53.22Z\" fill={secondaryfill} strokeWidth=\"0\"/>\n\t\t<path d=\"m10.25,7.25c-.414,0-.75-.336-.75-.75V2.5h-4c-.414,0-.75-.336-.75-.75s.336-.75.75-.75h4.75c.414,0,.75.336.75.75v4.75c0,.414-.336.75-.75.75Z\" fill={fill} strokeWidth=\"0\"/>\n\t</g>\n</svg>\n\t);\n};\n\nexport default ArrowUpRight2;","/* __next_internal_action_entry_do_not_use__ [{\"40ccd8d8e26d5a0a7819f93603cecd1770ab9afb12\":\"getEmailDetails\"},\"app/actions/primary.ts\",\"\"] */\"use turbopack no side effects\";import{createServerReference,callServer,findSourceMapURL}from\"private-next-rsc-action-client-wrapper\";export var getEmailDetails=/*#__PURE__*/createServerReference(\"40ccd8d8e26d5a0a7819f93603cecd1770ab9afb12\",callServer,void 0,findSourceMapURL,\"getEmailDetails\");","'use client'\n\nimport { useQuery } from '@tanstack/react-query'\nimport { getEmailDetails } from '@/app/actions/primary'\n\nexport interface EmailDetails {\n  id: string\n  emailId: string\n  messageId: string | null\n  from: string\n  to: string\n  recipient: string\n  subject: string | null\n  receivedAt: Date | null\n  processedAt: Date | null\n  status: string\n  emailContent: {\n    htmlBody: string | null\n    textBody: string | null\n    attachments: Array<{\n      filename?: string\n      contentType?: string\n      size?: number\n      contentId?: string\n      contentDisposition?: string\n    }>\n    headers: Record<string, any>\n    rawContent: string | null\n  }\n  parsedData: {\n    fromData: {\n      text: string\n      addresses: Array<{\n        name: string | null\n        address: string | null\n      }>\n    } | null\n    toData: {\n      text: string\n      addresses: Array<{\n        name: string | null\n        address: string | null\n      }>\n    } | null\n    ccData: any\n    bccData: any\n    replyToData: any\n    inReplyTo: string | null\n    references: string[]\n    priority: string | null\n    parseSuccess: boolean | null\n    parseError: string | null\n  }\n  authResults: {\n    spf: string\n    dkim: string\n    dmarc: string\n    spam: string\n    virus: string\n  }\n  metadata: {\n    processingTime: number | null\n    timestamp: Date | null\n    receiptTimestamp: Date | null\n    actionType: string | null\n    s3Info: {\n      bucketName: string | null\n      objectKey: string | null\n      contentFetched: boolean | null\n      contentSize: number | null\n      error: string | null\n    }\n    commonHeaders: any\n  }\n  createdAt: Date | null\n  updatedAt: Date | null\n}\n\nexport const useEmailQuery = (emailId: string | null) => {\n  return useQuery({\n    queryKey: ['email', emailId],\n    queryFn: async () => {\n      if (!emailId) {\n        throw new Error('Email ID is required')\n      }\n      \n      const result = await getEmailDetails(emailId)\n      \n      if (result.error) {\n        throw new Error(result.error)\n      }\n      \n      return result.data as EmailDetails\n    },\n    enabled: !!emailId,\n    staleTime: 5 * 60 * 1000, // 5 minutes\n    gcTime: 10 * 60 * 1000, // 10 minutes\n    retry: (failureCount, error) => {\n      // Don't retry on 404 errors\n      if (error.message === 'Email not found') {\n        return false\n      }\n      return failureCount < 3\n    },\n  })\n} ","/* __next_internal_action_entry_do_not_use__ [{\"400e0c4e16c3c0c54c42073a20508c7d05f4dd64fa\":\"markEmailAsRead\"},\"app/actions/primary.ts\",\"\"] */\"use turbopack no side effects\";import{createServerReference,callServer,findSourceMapURL}from\"private-next-rsc-action-client-wrapper\";export var markEmailAsRead=/*#__PURE__*/createServerReference(\"400e0c4e16c3c0c54c42073a20508c7d05f4dd64fa\",callServer,void 0,findSourceMapURL,\"markEmailAsRead\");","'use client'\n\nimport { useMutation, useQueryClient } from '@tanstack/react-query'\nimport { markEmailAsRead } from '@/app/actions/primary'\nimport { toast } from 'sonner'\n\nexport const useMarkEmailAsReadMutation = () => {\n  const queryClient = useQueryClient()\n\n  return useMutation({\n    mutationFn: async (emailId: string) => {\n      const result = await markEmailAsRead(emailId)\n      \n      if (result.error) {\n        throw new Error(result.error)\n      }\n      \n      return result.data\n    },\n    onSuccess: (data, emailId) => {\n      // Invalidate and refetch email queries to update read status\n      queryClient.invalidateQueries({ queryKey: ['email', emailId] })\n      \n      // Also invalidate analytics/mail list queries that might show read status\n      queryClient.invalidateQueries({ queryKey: ['analytics'] })\n      queryClient.invalidateQueries({ queryKey: ['emails'] })\n      \n      // Optional: Show success toast\n      // toast.success('Email marked as read')\n    },\n    // Optimistic updates can be added here if needed\n    onMutate: async (emailId) => {\n      // Cancel any outgoing refetches (so they don't overwrite our optimistic update)\n      await queryClient.cancelQueries({ queryKey: ['email', emailId] })\n\n      // Snapshot the previous value\n      const previousEmail = queryClient.getQueryData(['email', emailId])\n\n      // Optimistically update to the new value\n      queryClient.setQueryData(['email', emailId], (old: any) => {\n        if (!old) return old\n        return {\n          ...old,\n          isRead: true,\n          readAt: new Date(),\n        }\n      })\n\n      // Return a context object with the snapshotted value\n      return { previousEmail }\n    },\n    onError: (err, emailId, context) => {\n      // If the mutation fails, use the context returned from onMutate to roll back\n      if (context?.previousEmail) {\n        queryClient.setQueryData(['email', emailId], context.previousEmail)\n      }\n      console.error('Failed to mark email as read:', err)\n      toast.error('Failed to mark email as read')\n    },\n    onSettled: (data, error, emailId) => {\n      // Always refetch after error or success to ensure we have the latest data\n      queryClient.invalidateQueries({ queryKey: ['email', emailId] })\n    },\n  })\n} ","import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query'\nimport type {\n    GetEmailAddressesResponse,\n    GetEmailAddressesRequest,\n    PostEmailAddressesRequest,\n    PostEmailAddressesResponse\n} from '@/app/api/v2/email-addresses/route'\nimport type {\n    GetEmailAddressByIdResponse,\n    PutEmailAddressByIdRequest,\n    PutEmailAddressByIdResponse,\n    DeleteEmailAddressByIdResponse\n} from '@/app/api/v2/email-addresses/[id]/route'\n\n// Query keys for v2 email addresses API\nexport const emailAddressesV2Keys = {\n    all: ['v2', 'email-addresses'] as const,\n    lists: () => [...emailAddressesV2Keys.all, 'list'] as const,\n    list: (params?: GetEmailAddressesRequest) => [...emailAddressesV2Keys.lists(), params] as const,\n    details: () => [...emailAddressesV2Keys.all, 'detail'] as const,\n    detail: (emailAddressId: string) => [...emailAddressesV2Keys.details(), emailAddressId] as const,\n}\n\n// Hook for listing email addresses\nexport const useEmailAddressesV2Query = (params?: GetEmailAddressesRequest) => {\n    return useQuery<GetEmailAddressesResponse>({\n        queryKey: emailAddressesV2Keys.list(params),\n        queryFn: async () => {\n            const searchParams = new URLSearchParams()\n            if (params?.limit) searchParams.set('limit', params.limit.toString())\n            if (params?.offset) searchParams.set('offset', params.offset.toString())\n            if (params?.domainId) searchParams.set('domainId', params.domainId)\n            if (params?.isActive) searchParams.set('isActive', params.isActive)\n            if (params?.isReceiptRuleConfigured) searchParams.set('isReceiptRuleConfigured', params.isReceiptRuleConfigured)\n\n            const response = await fetch(`/api/v2/email-addresses?${searchParams}`)\n            if (!response.ok) {\n                const error = await response.json()\n                throw new Error(error.error || `HTTP error! status: ${response.status}`)\n            }\n            return response.json()\n        },\n        staleTime: 2 * 60 * 1000, // 2 minutes\n        gcTime: 5 * 60 * 1000, // 5 minutes\n    })\n}\n\n// Hook for getting email address details\nexport const useEmailAddressV2Query = (emailAddressId: string) => {\n    return useQuery<GetEmailAddressByIdResponse>({\n        queryKey: emailAddressesV2Keys.detail(emailAddressId),\n        queryFn: async () => {\n            const response = await fetch(`/api/v2/email-addresses/${emailAddressId}`)\n            if (!response.ok) {\n                const error = await response.json()\n                throw new Error(error.error || `HTTP error! status: ${response.status}`)\n            }\n            return response.json()\n        },\n        enabled: !!emailAddressId,\n        staleTime: 2 * 60 * 1000, // 2 minutes\n        gcTime: 10 * 60 * 1000, // 10 minutes\n    })\n}\n\n// Hook for creating email address\nexport const useCreateEmailAddressV2Mutation = () => {\n    const queryClient = useQueryClient()\n\n    return useMutation<PostEmailAddressesResponse, Error, PostEmailAddressesRequest>({\n        mutationFn: async (data) => {\n            const response = await fetch('/api/v2/email-addresses', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(data),\n            })\n            if (!response.ok) {\n                const error = await response.json()\n                throw new Error(error.error || 'Failed to create email address')\n            }\n            return response.json()\n        },\n        onSuccess: (data) => {\n            // Invalidate email addresses lists\n            queryClient.invalidateQueries({ queryKey: emailAddressesV2Keys.lists() })\n            // Also invalidate domains queries since this affects domain stats\n            queryClient.invalidateQueries({ queryKey: ['v2', 'domains'] })\n        },\n    })\n}\n\n// Hook for updating email address\nexport const useUpdateEmailAddressV2Mutation = () => {\n    const queryClient = useQueryClient()\n\n    return useMutation<PutEmailAddressByIdResponse, Error, PutEmailAddressByIdRequest & { emailAddressId: string }>({\n        mutationFn: async ({ emailAddressId, ...data }) => {\n            const response = await fetch(`/api/v2/email-addresses/${emailAddressId}`, {\n                method: 'PUT',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(data),\n            })\n            if (!response.ok) {\n                const error = await response.json()\n                throw new Error(error.error || 'Failed to update email address')\n            }\n            return response.json()\n        },\n        onSuccess: (data, { emailAddressId }) => {\n            // Invalidate specific email address and lists\n            queryClient.invalidateQueries({ queryKey: emailAddressesV2Keys.detail(emailAddressId) })\n            queryClient.invalidateQueries({ queryKey: emailAddressesV2Keys.lists() })\n            // Also invalidate domains queries since this affects domain stats\n            queryClient.invalidateQueries({ queryKey: ['v2', 'domains'] })\n        },\n    })\n}\n\n// Hook for deleting email address\nexport const useDeleteEmailAddressV2Mutation = () => {\n    const queryClient = useQueryClient()\n\n    return useMutation<DeleteEmailAddressByIdResponse, Error, string>({\n        mutationFn: async (emailAddressId) => {\n            const response = await fetch(`/api/v2/email-addresses/${emailAddressId}`, {\n                method: 'DELETE',\n            })\n            if (!response.ok) {\n                const error = await response.json()\n                throw new Error(error.error || 'Failed to delete email address')\n            }\n            return response.json()\n        },\n        onSuccess: (_, emailAddressId) => {\n            // Remove from cache and invalidate lists\n            queryClient.removeQueries({ queryKey: emailAddressesV2Keys.detail(emailAddressId) })\n            queryClient.invalidateQueries({ queryKey: emailAddressesV2Keys.lists() })\n            // Also invalidate domains queries since this affects domain stats\n            queryClient.invalidateQueries({ queryKey: ['v2', 'domains'] })\n        },\n    })\n} ","import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query'\nimport type {\n    GetMailResponse,\n    GetMailRequest,\n    EmailItem\n} from '@/app/api/v2/mail/route'\nimport type {\n    GetMailByIdResponse,\n    PatchMailRequest,\n    PatchMailResponse\n} from '@/app/api/v2/mail/[id]/route'\nimport type {\n    GetEmailByIdResponse\n} from '@/app/api/v2/emails/[id]/route'\nimport type {\n    PostMailBulkRequest,\n    PostMailBulkResponse\n} from '@/app/api/v2/mail/bulk/route'\nimport type {\n    GetThreadResponse\n} from '@/app/api/v2/mail/[id]/thread/route'\n\n// Query keys for v2 mail API\nexport const mailV2Keys = {\n    all: ['v2', 'mail'] as const,\n    lists: () => [...mailV2Keys.all, 'list'] as const,\n    list: (params?: GetMailRequest) => [...mailV2Keys.lists(), params] as const,\n    details: () => [...mailV2Keys.all, 'detail'] as const,\n    detail: (emailId: string) => [...mailV2Keys.details(), emailId] as const,\n    outboundEmails: () => ['v2', 'emails'] as const,\n    outboundEmail: (emailId: string) => [...mailV2Keys.outboundEmails(), emailId] as const,\n}\n\n// Hook for listing emails (replacement for old email actions)\nexport const useMailV2Query = (params?: GetMailRequest) => {\n    return useQuery<GetMailResponse>({\n        queryKey: mailV2Keys.list(params),\n        queryFn: async () => {\n            const searchParams = new URLSearchParams()\n            if (params?.limit) searchParams.set('limit', params.limit.toString())\n            if (params?.offset) searchParams.set('offset', params.offset.toString())\n            if (params?.search) searchParams.set('search', params.search)\n            if (params?.status) searchParams.set('status', params.status)\n            if (params?.domain) searchParams.set('domain', params.domain)\n            if (params?.timeRange) searchParams.set('timeRange', params.timeRange)\n\n            const response = await fetch(`/api/v2/mail?${searchParams}`)\n            if (!response.ok) {\n                const error = await response.json()\n                throw new Error(error.error || `HTTP error! status: ${response.status}`)\n            }\n            return response.json()\n        },\n        staleTime: 30 * 1000, // 30 seconds\n        gcTime: 5 * 60 * 1000, // 5 minutes\n    })\n}\n\n// Hook for getting inbound email details by ID (replacement for old email details actions)\nexport const useMailDetailsV2Query = (emailId: string) => {\n    return useQuery<GetMailByIdResponse>({\n        queryKey: mailV2Keys.detail(emailId),\n        queryFn: async () => {\n            const response = await fetch(`/api/v2/mail/${emailId}`)\n            if (!response.ok) {\n                const error = await response.json()\n                throw new Error(error.error || `HTTP error! status: ${response.status}`)\n            }\n            return response.json()\n        },\n        enabled: !!emailId,\n        staleTime: 60 * 1000, // 1 minute\n        gcTime: 10 * 60 * 1000, // 10 minutes\n    })\n}\n\n// Hook for getting outbound email details by ID\nexport const useOutboundEmailDetailsV2Query = (emailId: string) => {\n    return useQuery<GetEmailByIdResponse>({\n        queryKey: mailV2Keys.outboundEmail(emailId),\n        queryFn: async () => {\n            const response = await fetch(`/api/v2/emails/${emailId}`)\n            if (!response.ok) {\n                const error = await response.json()\n                throw new Error(error.error || `HTTP error! status: ${response.status}`)\n            }\n            return response.json()\n        },\n        enabled: !!emailId,\n        staleTime: 60 * 1000, // 1 minute\n        gcTime: 10 * 60 * 1000, // 10 minutes\n    })\n}\n\n// Hook for updating a single email (archive, mark as read, etc.)\nexport const useUpdateEmailMutation = () => {\n    const queryClient = useQueryClient()\n    \n    return useMutation<\n        PatchMailResponse, \n        Error, \n        { emailId: string; updates: PatchMailRequest },\n        { previousEmailLists: [any, any][] }\n    >({\n        mutationFn: async ({ emailId, updates }) => {\n            const response = await fetch(`/api/v2/mail/${emailId}`, {\n                method: 'PATCH',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(updates),\n            })\n            \n            if (!response.ok) {\n                const error = await response.json()\n                throw new Error(error.error || `HTTP error! status: ${response.status}`)\n            }\n            \n            return response.json()\n        },\n        onMutate: async ({ emailId, updates }) => {\n            // Cancel any outgoing refetches\n            await queryClient.cancelQueries({ queryKey: mailV2Keys.lists() })\n\n            // Snapshot the previous value\n            const previousEmailLists = queryClient.getQueriesData({ queryKey: mailV2Keys.lists() })\n\n            // Optimistically update all email list queries\n            queryClient.setQueriesData({ queryKey: mailV2Keys.lists() }, (old: any) => {\n                if (!old?.emails) return old\n\n                return {\n                    ...old,\n                    emails: old.emails.map((email: any) => {\n                        if (email.id === emailId) {\n                            const updatedEmail = { ...email }\n                            \n                            if (updates.isRead !== undefined) {\n                                updatedEmail.isRead = updates.isRead\n                                updatedEmail.readAt = updates.isRead ? new Date().toISOString() : null\n                            }\n                            \n                            if (updates.isArchived !== undefined) {\n                                updatedEmail.isArchived = updates.isArchived\n                                updatedEmail.archivedAt = updates.isArchived ? new Date().toISOString() : null\n                            }\n                            \n                            return updatedEmail\n                        }\n                        return email\n                    })\n                }\n            })\n\n            // Return a context object with the snapshotted value\n            return { previousEmailLists }\n        },\n        onError: (err, variables, context) => {\n            // If the mutation fails, use the context returned from onMutate to roll back\n            if (context?.previousEmailLists) {\n                context.previousEmailLists.forEach(([queryKey, data]: [any, any]) => {\n                    queryClient.setQueryData(queryKey, data)\n                })\n            }\n        },\n        onSettled: () => {\n            // Always refetch after error or success to ensure we have the latest data\n            queryClient.invalidateQueries({ queryKey: mailV2Keys.lists() })\n        },\n    })\n}\n\n// Hook for bulk updating emails (archive, mark as read, etc.)\nexport const useBulkUpdateEmailsMutation = () => {\n    const queryClient = useQueryClient()\n    \n    return useMutation<\n        PostMailBulkResponse, \n        Error, \n        PostMailBulkRequest,\n        { previousEmailLists: [any, any][] }\n    >({\n        mutationFn: async (bulkRequest) => {\n            const response = await fetch('/api/v2/mail/bulk', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(bulkRequest),\n            })\n            \n            if (!response.ok) {\n                const error = await response.json()\n                throw new Error(error.error || `HTTP error! status: ${response.status}`)\n            }\n            \n            return response.json()\n        },\n        onMutate: async ({ emailIds, updates }) => {\n            // Cancel any outgoing refetches\n            await queryClient.cancelQueries({ queryKey: mailV2Keys.lists() })\n\n            // Snapshot the previous value\n            const previousEmailLists = queryClient.getQueriesData({ queryKey: mailV2Keys.lists() })\n\n            // Optimistically update all email list queries\n            queryClient.setQueriesData({ queryKey: mailV2Keys.lists() }, (old: any) => {\n                if (!old?.emails) return old\n\n                return {\n                    ...old,\n                    emails: old.emails.map((email: any) => {\n                        if (emailIds.includes(email.id)) {\n                            const updatedEmail = { ...email }\n                            \n                            if (updates.isRead !== undefined) {\n                                updatedEmail.isRead = updates.isRead\n                                updatedEmail.readAt = updates.isRead ? new Date().toISOString() : null\n                            }\n                            \n                            if (updates.isArchived !== undefined) {\n                                updatedEmail.isArchived = updates.isArchived\n                                updatedEmail.archivedAt = updates.isArchived ? new Date().toISOString() : null\n                            }\n                            \n                            return updatedEmail\n                        }\n                        return email\n                    }).filter((email: any) => {\n                        // If archiving emails, remove them from the list immediately\n                        if (updates.isArchived === true) {\n                            return !emailIds.includes(email.id)\n                        }\n                        return true\n                    })\n                }\n            })\n\n            // Return a context object with the snapshotted value\n            return { previousEmailLists }\n        },\n        onError: (err, variables, context) => {\n            // If the mutation fails, use the context returned from onMutate to roll back\n            if (context?.previousEmailLists) {\n                context.previousEmailLists.forEach(([queryKey, data]: [any, any]) => {\n                    queryClient.setQueryData(queryKey, data)\n                })\n            }\n        },\n        onSettled: () => {\n            // Always refetch after error or success to ensure we have the latest data\n            queryClient.invalidateQueries({ queryKey: mailV2Keys.lists() })\n        },\n    })\n}\n\n// Hook for marking email as read (if available in v2 API - placeholder)\nexport const useMarkEmailAsReadV2Mutation = () => {\n    const queryClient = useQueryClient()\n\n    return useMutation<any, Error, string>({\n        mutationFn: async (emailId) => {\n            // Note: This endpoint might not exist in v2 API yet\n            // For now, we'll need to use the old action or create a new endpoint\n            const response = await fetch(`/api/v2/mail/${emailId}/mark-read`, {\n                method: 'POST',\n            })\n            if (!response.ok) {\n                const error = await response.json()\n                throw new Error(error.error || 'Failed to mark email as read')\n            }\n            return response.json()\n        },\n        onSuccess: (_, emailId) => {\n            // Update the specific email in cache\n            queryClient.invalidateQueries({ queryKey: mailV2Keys.detail(emailId) })\n            // Also invalidate the mail lists to update read status\n            queryClient.invalidateQueries({ queryKey: mailV2Keys.lists() })\n        },\n    })\n}\n\n// Helper hook for user email logs (replacement for useUserEmailLogsQuery)\nexport const useUserEmailLogsV2Query = (options?: GetMailRequest) => {\n    // This is essentially the same as useMailV2Query but with specific filtering\n    return useMailV2Query({\n        ...options,\n        limit: options?.limit || 50,\n        offset: options?.offset || 0,\n    })\n}\n\n// Hook for replying to an email\nexport const useReplyToEmailV2Mutation = () => {\n    const queryClient = useQueryClient()\n\n    return useMutation<\n        { id: string },\n        Error,\n        {\n            emailId: string\n            from: string\n            to?: string | string[]\n            subject?: string\n            text?: string\n            html?: string\n            include_original?: boolean\n        }\n    >({\n        mutationFn: async ({ emailId, ...replyData }) => {\n            const response = await fetch(`/api/v2/emails/${emailId}/reply`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(replyData),\n            })\n            \n            if (!response.ok) {\n                const error = await response.json()\n                throw new Error(error.error || 'Failed to send reply')\n            }\n            \n            return response.json()\n        },\n        onSuccess: (_, { emailId }) => {\n            // Invalidate mail lists to show the sent reply\n            queryClient.invalidateQueries({ queryKey: mailV2Keys.lists() })\n            // Also invalidate the specific email detail\n            queryClient.invalidateQueries({ queryKey: mailV2Keys.detail(emailId) })\n        },\n    })\n} \n\n// Hook for getting email thread/conversation\nexport const useEmailThreadV2Query = (emailId: string) => {\n    return useQuery<GetThreadResponse>({\n        queryKey: [...mailV2Keys.detail(emailId), 'thread'],\n        queryFn: async () => {\n            const response = await fetch(`/api/v2/mail/${emailId}/thread`)\n            if (!response.ok) {\n                const error = await response.json()\n                throw new Error(error.error || `HTTP error! status: ${response.status}`)\n            }\n            return response.json()\n        },\n        enabled: !!emailId,\n        staleTime: 60 * 1000, // 1 minute\n        gcTime: 10 * 60 * 1000, // 10 minutes\n    })\n}\n\n// Hook for getting thread counts for multiple emails (for inbox listing)\nexport const useEmailThreadCountsV2Query = (emailIds: string[]) => {\n    return useQuery<{\n        success: boolean\n        data: Array<{\n            emailId: string\n            threadCount: number\n            hasThread: boolean\n        }>\n    }>({\n        queryKey: ['mail-v2', 'thread-counts', ...emailIds.sort()],\n        queryFn: async () => {\n            const response = await fetch('/api/v2/mail/thread-counts', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({ emailIds })\n            })\n            if (!response.ok) {\n                const error = await response.json()\n                throw new Error(error.error || `HTTP error! status: ${response.status}`)\n            }\n            return response.json()\n        },\n        enabled: emailIds.length > 0,\n        staleTime: 2 * 60 * 1000, // 2 minutes (thread counts don't change often)\n        gcTime: 10 * 60 * 1000, // 10 minutes\n    })\n} ","/* __next_internal_action_entry_do_not_use__ [{\"4036a927bdcc185c7cd5221062f42afb70733d159f\":\"getUserEmailLogs\"},\"app/actions/primary.ts\",\"\"] */\"use turbopack no side effects\";import{createServerReference,callServer,findSourceMapURL}from\"private-next-rsc-action-client-wrapper\";export var getUserEmailLogs=/*#__PURE__*/createServerReference(\"4036a927bdcc185c7cd5221062f42afb70733d159f\",callServer,void 0,findSourceMapURL,\"getUserEmailLogs\");","import { useQuery } from '@tanstack/react-query'\nimport { getUserEmailLogs } from '@/app/actions/primary'\nimport type { EmailLogsOptions, EmailLogsResponse } from '../types'\n\nexport function useUserEmailLogsQuery(options: EmailLogsOptions = {}) {\n  return useQuery({\n    queryKey: ['user-email-logs', options],\n    queryFn: async () => {\n      const result = await getUserEmailLogs(options)\n      if (!result.success) {\n        throw new Error(result.error)\n      }\n      return result.data as EmailLogsResponse\n    },\n    staleTime: 30 * 1000, // 30 seconds\n    gcTime: 5 * 60 * 1000, // 5 minutes\n  })\n} ","/* __next_internal_action_entry_do_not_use__ [{\"4062391b8b9fea3dab173568dc243176dcda35bc73\":\"getEmailsList\"},\"app/actions/primary.ts\",\"\"] */\"use turbopack no side effects\";import{createServerReference,callServer,findSourceMapURL}from\"private-next-rsc-action-client-wrapper\";export var getEmailsList=/*#__PURE__*/createServerReference(\"4062391b8b9fea3dab173568dc243176dcda35bc73\",callServer,void 0,findSourceMapURL,\"getEmailsList\");","/* __next_internal_action_entry_do_not_use__ [{\"40134f515b8fe5278d31a536a3a223c156ec6b61af\":\"getEmailDetailsFromParsed\"},\"app/actions/primary.ts\",\"\"] */\"use turbopack no side effects\";import{createServerReference,callServer,findSourceMapURL}from\"private-next-rsc-action-client-wrapper\";export var getEmailDetailsFromParsed=/*#__PURE__*/createServerReference(\"40134f515b8fe5278d31a536a3a223c156ec6b61af\",callServer,void 0,findSourceMapURL,\"getEmailDetailsFromParsed\");","/* __next_internal_action_entry_do_not_use__ [{\"40f4308e9524f900b328889cf8d5095aa19d019d23\":\"getUnifiedEmailLogs\"},\"app/actions/primary.ts\",\"\"] */\"use turbopack no side effects\";import{createServerReference,callServer,findSourceMapURL}from\"private-next-rsc-action-client-wrapper\";export var getUnifiedEmailLogs=/*#__PURE__*/createServerReference(\"40f4308e9524f900b328889cf8d5095aa19d019d23\",callServer,void 0,findSourceMapURL,\"getUnifiedEmailLogs\");","import { useMutation, useQuery, useQueryClient } from '@tanstack/react-query'\nimport { markEmailAsRead, getEmailsList, getEmailDetailsFromParsed, getUnifiedEmailLogs } from '@/app/actions/primary'\nimport type { EmailLogsOptions, EmailLogsResponse } from '../types'\n\n// Export the v2 hooks as primary exports\nexport {\n  useDomainsListV2Query,\n  useDomainDetailsV2Query,\n  useAddEmailAddressV2Mutation,\n  useUpdateEmailEndpointV2Mutation\n} from '@/features/domains/hooks/useDomainV2Hooks'\n\nexport { useEmailQuery } from './useEmailQuery'\nexport { useMarkEmailAsReadMutation } from './useMarkEmailAsReadMutation'\n\n// Export email address v2 hooks\nexport { useEmailAddressesV2Query, useEmailAddressV2Query } from './useEmailAddressesV2Hooks'\n\nexport {\n  useMailV2Query,\n  useMailDetailsV2Query,\n  useOutboundEmailDetailsV2Query,\n  useMarkEmailAsReadV2Mutation,\n  useUserEmailLogsV2Query,\n  useReplyToEmailV2Mutation,\n  useUpdateEmailMutation,\n  useBulkUpdateEmailsMutation,\n  useEmailThreadV2Query,\n  useEmailThreadCountsV2Query\n} from './useMailV2Hooks'\n\n// Legacy email logs hook (inbound only)\nexport { useUserEmailLogsQuery } from './useUserEmailLogsQuery'\n\n// New unified email logs hook (inbound + outbound)\nexport function useUnifiedEmailLogsQuery(options: EmailLogsOptions = {}) {\n  return useQuery({\n    queryKey: ['unified-email-logs', options],\n    queryFn: async () => {\n      const result = await getUnifiedEmailLogs(options)\n      if (!result.success) {\n        throw new Error(result.error)\n      }\n      return result.data as EmailLogsResponse\n    },\n    staleTime: 30 * 1000, // 30 seconds\n    gcTime: 5 * 60 * 1000, // 5 minutes\n  })\n}\n\n// Query keys\nexport const emailKeys = {\n  all: ['emails'] as const,\n  lists: () => [...emailKeys.all, 'list'] as const,\n  list: (filters: Record<string, any>) => [...emailKeys.lists(), filters] as const,\n  details: () => [...emailKeys.all, 'detail'] as const,\n  detail: (id: string) => [...emailKeys.details(), id] as const,\n}\n\n// Legacy hook for listing emails (kept for backward compatibility)\nexport function useEmailsListQuery(options?: {\n  limit?: number\n  offset?: number\n  searchQuery?: string\n  statusFilter?: string\n  domainFilter?: string\n}) {\n  return useQuery({\n    queryKey: emailKeys.list(options || {}),\n    queryFn: () => getEmailsList(options),\n    staleTime: 30 * 1000, // 30 seconds\n    gcTime: 5 * 60 * 1000, // 5 minutes\n  })\n}\n\n// Legacy hook for getting email details (kept for backward compatibility)\nexport function useEmailDetailsQuery(emailId: string, enabled = true) {\n  return useQuery({\n    queryKey: emailKeys.detail(emailId),\n    queryFn: () => getEmailDetailsFromParsed(emailId),\n    enabled: enabled && !!emailId,\n    staleTime: 60 * 1000, // 1 minute\n    gcTime: 10 * 60 * 1000, // 10 minutes\n  })\n} "],"names":[],"mappings":"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"}