module.exports={441498:a=>{"use strict";var{g:b,__dirname:c}=a;{a.s({isSsoProfile:()=>b});let b=a=>a&&("string"==typeof a.sso_start_url||"string"==typeof a.sso_account_id||"string"==typeof a.sso_session||"string"==typeof a.sso_region||"string"==typeof a.sso_role_name)}},186302:a=>{"use strict";var{g:b,__dirname:c}=a;{a.s({EXPIRE_WINDOW_MS:()=>b,REFRESH_MESSAGE:()=>c});let b=3e5,c="To refresh this SSO session run 'aws sso login' with the corresponding profile."}},952177:a=>{"use strict";var{g:b,__dirname:c}=a;{a.s({getSsoOidcClient:()=>b});let b=async(b,c={})=>{let{SSOOIDCClient:d}=await a.r(425323)(a.i);return new d(Object.assign({},c.clientConfig??{},{region:b??c.clientConfig?.region,logger:c.clientConfig?.logger??c.parentClientConfig?.logger}))}}},105402:a=>{"use strict";var{g:b,__dirname:c}=a;{a.s({getNewSsoOidcToken:()=>b});var d=a.i(952177);let b=async(b,c,e={})=>{let{CreateTokenCommand:f}=await a.r(425323)(a.i);return(await (0,d.getSsoOidcClient)(c,e)).send(new f({clientId:b.clientId,clientSecret:b.clientSecret,refreshToken:b.refreshToken,grantType:"refresh_token"}))}}},112459:a=>{"use strict";var{g:b,__dirname:c}=a;{a.s({validateTokenExpiry:()=>b}),a.i(175454);var d=a.i(686836),e=a.i(186302);let b=a=>{if(a.expiration&&a.expiration.getTime()<Date.now())throw new d.TokenProviderError(`Token is expired. ${e.REFRESH_MESSAGE}`,!1)}}},16712:a=>{"use strict";var{g:b,__dirname:c}=a;{a.s({validateTokenKey:()=>b}),a.i(175454);var d=a.i(686836),e=a.i(186302);let b=(a,b,c=!1)=>{if(void 0===b)throw new d.TokenProviderError(`Value not present for '${a}' in SSO Token${c?". Cannot refresh":""}. ${e.REFRESH_MESSAGE}`,!1)}}},589189:a=>{"use strict";var{g:b,__dirname:c}=a;{a.s({writeSSOTokenToFile:()=>c}),a.i(81041);var d=a.i(572336);let{writeFile:b}=a.i(683886).promises,c=(a,c)=>b((0,d.getSSOTokenFilepath)(a),JSON.stringify(c,null,2))}},153257:a=>{"use strict";var{g:b,__dirname:c}=a;{a.s({fromSso:()=>c}),a.i(175454);var d=a.i(686836);a.i(81041);var e=a.i(498204),f=a.i(317576),g=a.i(763398),h=a.i(44984),i=a.i(186302),j=a.i(105402),k=a.i(112459),l=a.i(16712),m=a.i(589189);let b=new Date(0),c=(a={})=>async({callerClientConfig:c}={})=>{let n,o={...a,parentClientConfig:{...c,...a.parentClientConfig}};o.logger?.debug("@aws-sdk/token-providers - fromSso");let p=await (0,h.parseKnownFiles)(o),q=(0,e.getProfileName)({profile:o.profile??c?.profile}),r=p[q];if(r){if(!r.sso_session)throw new d.TokenProviderError(`Profile '${q}' is missing required property 'sso_session'.`)}else throw new d.TokenProviderError(`Profile '${q}' could not be found in shared credentials file.`,!1);let s=r.sso_session,t=(await (0,g.loadSsoSessionData)(o))[s];if(!t)throw new d.TokenProviderError(`Sso session '${s}' could not be found in shared credentials file.`,!1);for(let a of["sso_start_url","sso_region"])if(!t[a])throw new d.TokenProviderError(`Sso session '${s}' is missing required property '${a}'.`,!1);t.sso_start_url;let u=t.sso_region;try{n=await (0,f.getSSOTokenFromFile)(s)}catch(a){throw new d.TokenProviderError(`The SSO session token associated with profile=${q} was not found or is invalid. ${i.REFRESH_MESSAGE}`,!1)}(0,l.validateTokenKey)("accessToken",n.accessToken),(0,l.validateTokenKey)("expiresAt",n.expiresAt);let{accessToken:v,expiresAt:w}=n,x={token:v,expiration:new Date(w)};if(x.expiration.getTime()-Date.now()>i.EXPIRE_WINDOW_MS)return x;if(Date.now()-b.getTime()<3e4)return(0,k.validateTokenExpiry)(x),x;(0,l.validateTokenKey)("clientId",n.clientId,!0),(0,l.validateTokenKey)("clientSecret",n.clientSecret,!0),(0,l.validateTokenKey)("refreshToken",n.refreshToken,!0);try{b.setTime(Date.now());let a=await (0,j.getNewSsoOidcToken)(n,u,o);(0,l.validateTokenKey)("accessToken",a.accessToken),(0,l.validateTokenKey)("expiresIn",a.expiresIn);let c=new Date(Date.now()+1e3*a.expiresIn);try{await (0,m.writeSSOTokenToFile)(s,{...n,accessToken:a.accessToken,expiresAt:c.toISOString(),refreshToken:a.refreshToken})}catch(a){}return{token:a.accessToken,expiration:c}}catch(a){return(0,k.validateTokenExpiry)(x),x}}}},85339:a=>{"use strict";var{g:b,__dirname:c}=a;{a.s({resolveSSOCredentials:()=>b});var d=a.i(204944),e=a.i(153257);a.i(175454);var f=a.i(9686);a.i(81041);var g=a.i(317576);let b=async({ssoStartUrl:b,ssoSession:c,ssoAccountId:h,ssoRegion:i,ssoRoleName:j,ssoClient:k,clientConfig:l,parentClientConfig:m,profile:n,logger:o})=>{let p,q,r="To refresh this SSO session run aws sso login with the corresponding profile.";if(c)try{let a=await (0,e.fromSso)({profile:n})();p={accessToken:a.token,expiresAt:new Date(a.expiration).toISOString()}}catch(a){throw new f.CredentialsProviderError(a.message,{tryNextLink:!1,logger:o})}else try{p=await (0,g.getSSOTokenFromFile)(b)}catch(a){throw new f.CredentialsProviderError(`The SSO session associated with this profile is invalid. ${r}`,{tryNextLink:!1,logger:o})}if(new Date(p.expiresAt).getTime()-Date.now()<=0)throw new f.CredentialsProviderError(`The SSO session associated with this profile has expired. ${r}`,{tryNextLink:!1,logger:o});let{accessToken:s}=p,{SSOClient:t,GetRoleCredentialsCommand:u}=await a.r(770987)(a.i),v=k||new t(Object.assign({},l??{},{logger:l?.logger??m?.logger,region:l?.region??i}));try{q=await v.send(new u({accountId:h,roleName:j,accessToken:s}))}catch(a){throw new f.CredentialsProviderError(a,{tryNextLink:!1,logger:o})}let{roleCredentials:{accessKeyId:w,secretAccessKey:x,sessionToken:y,expiration:z,credentialScope:A,accountId:B}={}}=q;if(!w||!x||!y||!z)throw new f.CredentialsProviderError("SSO returns an invalid temporary credential.",{tryNextLink:!1,logger:o});let C={accessKeyId:w,secretAccessKey:x,sessionToken:y,expiration:new Date(z),...A&&{credentialScope:A},...B&&{accountId:B}};return c?(0,d.setCredentialFeature)(C,"CREDENTIALS_SSO","s"):(0,d.setCredentialFeature)(C,"CREDENTIALS_SSO_LEGACY","u"),C}}},726507:a=>{"use strict";var{g:b,__dirname:c}=a;{a.s({validateSsoProfile:()=>b}),a.i(175454);var d=a.i(9686);let b=(a,b)=>{let{sso_start_url:c,sso_account_id:e,sso_region:f,sso_role_name:g}=a;if(!c||!e||!f||!g)throw new d.CredentialsProviderError(`Profile is configured with invalid SSO credentials. Required parameters "sso_account_id", "sso_region", "sso_role_name", "sso_start_url". Got ${Object.keys(a).join(", ")}
Reference: https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-sso.html`,{tryNextLink:!1,logger:b});return a}}},424050:a=>{"use strict";var{g:b,__dirname:c}=a;{a.s({fromSSO:()=>b}),a.i(175454);var d=a.i(9686);a.i(81041);var e=a.i(498204),f=a.i(763398),g=a.i(44984),h=a.i(441498),i=a.i(85339),j=a.i(726507);let b=(a={})=>async({callerClientConfig:b}={})=>{a.logger?.debug("@aws-sdk/credential-provider-sso - fromSSO");let{ssoStartUrl:c,ssoAccountId:k,ssoRegion:l,ssoRoleName:m,ssoSession:n}=a,{ssoClient:o}=a,p=(0,e.getProfileName)({profile:a.profile??b?.profile});if(c||k||l||m||n)if(c&&k&&l&&m)return(0,i.resolveSSOCredentials)({ssoStartUrl:c,ssoSession:n,ssoAccountId:k,ssoRegion:l,ssoRoleName:m,ssoClient:o,clientConfig:a.clientConfig,parentClientConfig:a.parentClientConfig,profile:p});else throw new d.CredentialsProviderError('Incomplete configuration. The fromSSO() argument hash must include "ssoStartUrl", "ssoAccountId", "ssoRegion", "ssoRoleName"',{tryNextLink:!1,logger:a.logger});{let b=(await (0,g.parseKnownFiles)(a))[p];if(!b)throw new d.CredentialsProviderError(`Profile ${p} was not found.`,{logger:a.logger});if(!(0,h.isSsoProfile)(b))throw new d.CredentialsProviderError(`Profile ${p} is not configured with SSO credentials.`,{logger:a.logger});if(b?.sso_session){let e=(await (0,f.loadSsoSessionData)(a))[b.sso_session],g=` configurations in profile ${p} and sso-session ${b.sso_session}`;if(l&&l!==e.sso_region)throw new d.CredentialsProviderError("Conflicting SSO region"+g,{tryNextLink:!1,logger:a.logger});if(c&&c!==e.sso_start_url)throw new d.CredentialsProviderError("Conflicting SSO start_url"+g,{tryNextLink:!1,logger:a.logger});b.sso_region=e.sso_region,b.sso_start_url=e.sso_start_url}let{sso_start_url:e,sso_account_id:k,sso_region:m,sso_role_name:n,sso_session:q}=(0,j.validateSsoProfile)(b,a.logger);return(0,i.resolveSSOCredentials)({ssoStartUrl:e,ssoSession:q,ssoAccountId:k,ssoRegion:m,ssoRoleName:n,ssoClient:o,clientConfig:a.clientConfig,parentClientConfig:a.parentClientConfig,profile:p})}}}},776279:a=>{"use strict";var{g:b,__dirname:c}=a;a.s({})},400151:a=>{"use strict";var{g:b,__dirname:c}=a;a.s({}),a.i(424050),a.i(441498),a.i(776279),a.i(726507)},889462:a=>{"use strict";var{g:b,__dirname:c}=a;a.s({}),a.i(424050),a.i(441498),a.i(776279),a.i(726507),a.i(400151)},555575:a=>{"use strict";var{g:b,__dirname:c}=a;a.s({fromSSO:()=>d.fromSSO,isSsoProfile:()=>e.isSsoProfile,validateSsoProfile:()=>f.validateSsoProfile});var d=a.i(424050),e=a.i(441498);a.i(776279);var f=a.i(726507);a.i(400151)},437897:a=>{"use strict";var{g:b,__dirname:c}=a;a.s({fromSSO:()=>d.fromSSO,isSsoProfile:()=>d.isSsoProfile,validateSsoProfile:()=>d.validateSsoProfile}),a.i(889462);var d=a.i(555575)},425323:a=>{var{g:b,__dirname:c}=a;a.v(b=>Promise.all(["server/chunks/ssr/11e86_@aws-sdk_b539a7ec._.js","server/chunks/ssr/34729_@aws-sdk_nested-clients_dist-es_submodules_sso-oidc_513ff36e._.js"].map(b=>a.l(b))).then(()=>b(884549)))},770987:a=>{var{g:b,__dirname:c}=a;a.v(b=>Promise.all(["server/chunks/ssr/11e86_@aws-sdk_1df9cbb8._.js","server/chunks/ssr/9f50b_@aws-sdk_credential-provider-sso_2aba46c0._.js"].map(b=>a.l(b))).then(()=>b(794319)))}};

//# sourceMappingURL=9f50b_%40aws-sdk_credential-provider-sso_1a4f8e15._.js.map