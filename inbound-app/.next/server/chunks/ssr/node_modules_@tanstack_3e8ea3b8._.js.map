{"version":3,"sources":["turbopack:///[project]/node_modules/@tanstack/react-query/src/QueryClientProvider.tsx","turbopack:///[project]/node_modules/@tanstack/query-core/src/utils.ts","turbopack:///[project]/node_modules/@tanstack/query-core/src/notifyManager.ts","turbopack:///[project]/node_modules/@tanstack/query-core/src/subscribable.ts","turbopack:///[project]/node_modules/@tanstack/query-core/src/focusManager.ts","turbopack:///[project]/node_modules/@tanstack/query-core/src/onlineManager.ts","turbopack:///[project]/node_modules/@tanstack/query-core/src/thenable.ts","turbopack:///[project]/node_modules/@tanstack/query-core/src/retryer.ts","turbopack:///[project]/node_modules/@tanstack/query-core/src/removable.ts","turbopack:///[project]/node_modules/@tanstack/query-core/src/query.ts","turbopack:///[project]/node_modules/@tanstack/query-core/src/mutation.ts"],"sourcesContent":["'use client'\nimport * as React from 'react'\n\nimport type { QueryClient } from '@tanstack/query-core'\n\nexport const QueryClientContext = React.createContext<QueryClient | undefined>(\n  undefined,\n)\n\nexport const useQueryClient = (queryClient?: QueryClient) => {\n  const client = React.useContext(QueryClientContext)\n\n  if (queryClient) {\n    return queryClient\n  }\n\n  if (!client) {\n    throw new Error('No QueryClient set, use QueryClientProvider to set one')\n  }\n\n  return client\n}\n\nexport type QueryClientProviderProps = {\n  client: QueryClient\n  children?: React.ReactNode\n}\n\nexport const QueryClientProvider = ({\n  client,\n  children,\n}: QueryClientProviderProps): React.JSX.Element => {\n  React.useEffect(() => {\n    client.mount()\n    return () => {\n      client.unmount()\n    }\n  }, [client])\n\n  return (\n    <QueryClientContext.Provider value={client}>\n      {children}\n    </QueryClientContext.Provider>\n  )\n}\n","import type {\n  DefaultError,\n  Enabled,\n  FetchStatus,\n  MutationKey,\n  MutationStatus,\n  QueryFunction,\n  QueryKey,\n  QueryOptions,\n  StaleTime,\n  StaleTimeFunction,\n} from './types'\nimport type { Mutation } from './mutation'\nimport type { FetchOptions, Query } from './query'\n\n// TYPES\n\nexport interface QueryFilters<TQueryKey extends QueryKey = QueryKey> {\n  /**\n   * Filter to active queries, inactive queries or all queries\n   */\n  type?: QueryTypeFilter\n  /**\n   * Match query key exactly\n   */\n  exact?: boolean\n  /**\n   * Include queries matching this predicate function\n   */\n  predicate?: (query: Query) => boolean\n  /**\n   * Include queries matching this query key\n   */\n  queryKey?: TQueryKey\n  /**\n   * Include or exclude stale queries\n   */\n  stale?: boolean\n  /**\n   * Include queries matching their fetchStatus\n   */\n  fetchStatus?: FetchStatus\n}\n\nexport interface MutationFilters<\n  TData = unknown,\n  TError = DefaultError,\n  TVariables = unknown,\n  TContext = unknown,\n> {\n  /**\n   * Match mutation key exactly\n   */\n  exact?: boolean\n  /**\n   * Include mutations matching this predicate function\n   */\n  predicate?: (\n    mutation: Mutation<TData, TError, TVariables, TContext>,\n  ) => boolean\n  /**\n   * Include mutations matching this mutation key\n   */\n  mutationKey?: MutationKey\n  /**\n   * Filter by mutation status\n   */\n  status?: MutationStatus\n}\n\nexport type Updater<TInput, TOutput> = TOutput | ((input: TInput) => TOutput)\n\nexport type QueryTypeFilter = 'all' | 'active' | 'inactive'\n\n// UTILS\n\nexport const isServer = typeof window === 'undefined' || 'Deno' in globalThis\n\nexport function noop(): void\nexport function noop(): undefined\nexport function noop() {}\n\nexport function functionalUpdate<TInput, TOutput>(\n  updater: Updater<TInput, TOutput>,\n  input: TInput,\n): TOutput {\n  return typeof updater === 'function'\n    ? (updater as (_: TInput) => TOutput)(input)\n    : updater\n}\n\nexport function isValidTimeout(value: unknown): value is number {\n  return typeof value === 'number' && value >= 0 && value !== Infinity\n}\n\nexport function timeUntilStale(updatedAt: number, staleTime?: number): number {\n  return Math.max(updatedAt + (staleTime || 0) - Date.now(), 0)\n}\n\nexport function resolveStaleTime<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  staleTime:\n    | undefined\n    | StaleTimeFunction<TQueryFnData, TError, TData, TQueryKey>,\n  query: Query<TQueryFnData, TError, TData, TQueryKey>,\n): StaleTime | undefined {\n  return typeof staleTime === 'function' ? staleTime(query) : staleTime\n}\n\nexport function resolveEnabled<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  enabled: undefined | Enabled<TQueryFnData, TError, TData, TQueryKey>,\n  query: Query<TQueryFnData, TError, TData, TQueryKey>,\n): boolean | undefined {\n  return typeof enabled === 'function' ? enabled(query) : enabled\n}\n\nexport function matchQuery(\n  filters: QueryFilters,\n  query: Query<any, any, any, any>,\n): boolean {\n  const {\n    type = 'all',\n    exact,\n    fetchStatus,\n    predicate,\n    queryKey,\n    stale,\n  } = filters\n\n  if (queryKey) {\n    if (exact) {\n      if (query.queryHash !== hashQueryKeyByOptions(queryKey, query.options)) {\n        return false\n      }\n    } else if (!partialMatchKey(query.queryKey, queryKey)) {\n      return false\n    }\n  }\n\n  if (type !== 'all') {\n    const isActive = query.isActive()\n    if (type === 'active' && !isActive) {\n      return false\n    }\n    if (type === 'inactive' && isActive) {\n      return false\n    }\n  }\n\n  if (typeof stale === 'boolean' && query.isStale() !== stale) {\n    return false\n  }\n\n  if (fetchStatus && fetchStatus !== query.state.fetchStatus) {\n    return false\n  }\n\n  if (predicate && !predicate(query)) {\n    return false\n  }\n\n  return true\n}\n\nexport function matchMutation(\n  filters: MutationFilters,\n  mutation: Mutation<any, any>,\n): boolean {\n  const { exact, status, predicate, mutationKey } = filters\n  if (mutationKey) {\n    if (!mutation.options.mutationKey) {\n      return false\n    }\n    if (exact) {\n      if (hashKey(mutation.options.mutationKey) !== hashKey(mutationKey)) {\n        return false\n      }\n    } else if (!partialMatchKey(mutation.options.mutationKey, mutationKey)) {\n      return false\n    }\n  }\n\n  if (status && mutation.state.status !== status) {\n    return false\n  }\n\n  if (predicate && !predicate(mutation)) {\n    return false\n  }\n\n  return true\n}\n\nexport function hashQueryKeyByOptions<TQueryKey extends QueryKey = QueryKey>(\n  queryKey: TQueryKey,\n  options?: Pick<QueryOptions<any, any, any, any>, 'queryKeyHashFn'>,\n): string {\n  const hashFn = options?.queryKeyHashFn || hashKey\n  return hashFn(queryKey)\n}\n\n/**\n * Default query & mutation keys hash function.\n * Hashes the value into a stable hash.\n */\nexport function hashKey(queryKey: QueryKey | MutationKey): string {\n  return JSON.stringify(queryKey, (_, val) =>\n    isPlainObject(val)\n      ? Object.keys(val)\n          .sort()\n          .reduce((result, key) => {\n            result[key] = val[key]\n            return result\n          }, {} as any)\n      : val,\n  )\n}\n\n/**\n * Checks if key `b` partially matches with key `a`.\n */\nexport function partialMatchKey(a: QueryKey, b: QueryKey): boolean\nexport function partialMatchKey(a: any, b: any): boolean {\n  if (a === b) {\n    return true\n  }\n\n  if (typeof a !== typeof b) {\n    return false\n  }\n\n  if (a && b && typeof a === 'object' && typeof b === 'object') {\n    return Object.keys(b).every((key) => partialMatchKey(a[key], b[key]))\n  }\n\n  return false\n}\n\n/**\n * This function returns `a` if `b` is deeply equal.\n * If not, it will replace any deeply equal children of `b` with those of `a`.\n * This can be used for structural sharing between JSON values for example.\n */\nexport function replaceEqualDeep<T>(a: unknown, b: T): T\nexport function replaceEqualDeep(a: any, b: any): any {\n  if (a === b) {\n    return a\n  }\n\n  const array = isPlainArray(a) && isPlainArray(b)\n\n  if (array || (isPlainObject(a) && isPlainObject(b))) {\n    const aItems = array ? a : Object.keys(a)\n    const aSize = aItems.length\n    const bItems = array ? b : Object.keys(b)\n    const bSize = bItems.length\n    const copy: any = array ? [] : {}\n    const aItemsSet = new Set(aItems)\n\n    let equalItems = 0\n\n    for (let i = 0; i < bSize; i++) {\n      const key = array ? i : bItems[i]\n      if (\n        ((!array && aItemsSet.has(key)) || array) &&\n        a[key] === undefined &&\n        b[key] === undefined\n      ) {\n        copy[key] = undefined\n        equalItems++\n      } else {\n        copy[key] = replaceEqualDeep(a[key], b[key])\n        if (copy[key] === a[key] && a[key] !== undefined) {\n          equalItems++\n        }\n      }\n    }\n\n    return aSize === bSize && equalItems === aSize ? a : copy\n  }\n\n  return b\n}\n\n/**\n * Shallow compare objects.\n */\nexport function shallowEqualObjects<T extends Record<string, any>>(\n  a: T,\n  b: T | undefined,\n): boolean {\n  if (!b || Object.keys(a).length !== Object.keys(b).length) {\n    return false\n  }\n\n  for (const key in a) {\n    if (a[key] !== b[key]) {\n      return false\n    }\n  }\n\n  return true\n}\n\nexport function isPlainArray(value: unknown) {\n  return Array.isArray(value) && value.length === Object.keys(value).length\n}\n\n// Copied from: https://github.com/jonschlinkert/is-plain-object\n// eslint-disable-next-line @typescript-eslint/no-wrapper-object-types\nexport function isPlainObject(o: any): o is Object {\n  if (!hasObjectPrototype(o)) {\n    return false\n  }\n\n  // If has no constructor\n  const ctor = o.constructor\n  if (ctor === undefined) {\n    return true\n  }\n\n  // If has modified prototype\n  const prot = ctor.prototype\n  if (!hasObjectPrototype(prot)) {\n    return false\n  }\n\n  // If constructor does not have an Object-specific method\n  if (!prot.hasOwnProperty('isPrototypeOf')) {\n    return false\n  }\n\n  // Handles Objects created by Object.create(<arbitrary prototype>)\n  if (Object.getPrototypeOf(o) !== Object.prototype) {\n    return false\n  }\n\n  // Most likely a plain Object\n  return true\n}\n\nfunction hasObjectPrototype(o: any): boolean {\n  return Object.prototype.toString.call(o) === '[object Object]'\n}\n\nexport function sleep(timeout: number): Promise<void> {\n  return new Promise((resolve) => {\n    setTimeout(resolve, timeout)\n  })\n}\n\nexport function replaceData<\n  TData,\n  TOptions extends QueryOptions<any, any, any, any>,\n>(prevData: TData | undefined, data: TData, options: TOptions): TData {\n  if (typeof options.structuralSharing === 'function') {\n    return options.structuralSharing(prevData, data) as TData\n  } else if (options.structuralSharing !== false) {\n    if (process.env.NODE_ENV !== 'production') {\n      try {\n        return replaceEqualDeep(prevData, data)\n      } catch (error) {\n        console.error(\n          `Structural sharing requires data to be JSON serializable. To fix this, turn off structuralSharing or return JSON-serializable data from your queryFn. [${options.queryHash}]: ${error}`,\n        )\n\n        // Prevent the replaceEqualDeep from being called again down below.\n        throw error\n      }\n    }\n    // Structurally share data between prev and new data if needed\n    return replaceEqualDeep(prevData, data)\n  }\n  return data\n}\n\nexport function keepPreviousData<T>(\n  previousData: T | undefined,\n): T | undefined {\n  return previousData\n}\n\nexport function addToEnd<T>(items: Array<T>, item: T, max = 0): Array<T> {\n  const newItems = [...items, item]\n  return max && newItems.length > max ? newItems.slice(1) : newItems\n}\n\nexport function addToStart<T>(items: Array<T>, item: T, max = 0): Array<T> {\n  const newItems = [item, ...items]\n  return max && newItems.length > max ? newItems.slice(0, -1) : newItems\n}\n\nexport const skipToken = Symbol()\nexport type SkipToken = typeof skipToken\n\nexport function ensureQueryFn<\n  TQueryFnData = unknown,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: {\n    queryFn?: QueryFunction<TQueryFnData, TQueryKey> | SkipToken\n    queryHash?: string\n  },\n  fetchOptions?: FetchOptions<TQueryFnData>,\n): QueryFunction<TQueryFnData, TQueryKey> {\n  if (process.env.NODE_ENV !== 'production') {\n    if (options.queryFn === skipToken) {\n      console.error(\n        `Attempted to invoke queryFn when set to skipToken. This is likely a configuration error. Query hash: '${options.queryHash}'`,\n      )\n    }\n  }\n\n  // if we attempt to retry a fetch that was triggered from an initialPromise\n  // when we don't have a queryFn yet, we can't retry, so we just return the already rejected initialPromise\n  // if an observer has already mounted, we will be able to retry with that queryFn\n  if (!options.queryFn && fetchOptions?.initialPromise) {\n    return () => fetchOptions.initialPromise!\n  }\n\n  if (!options.queryFn || options.queryFn === skipToken) {\n    return () =>\n      Promise.reject(new Error(`Missing queryFn: '${options.queryHash}'`))\n  }\n\n  return options.queryFn\n}\n\nexport function shouldThrowError<T extends (...args: Array<any>) => boolean>(\n  throwOnError: boolean | T | undefined,\n  params: Parameters<T>,\n): boolean {\n  // Allow throwOnError function to override throwing behavior on a per-error basis\n  if (typeof throwOnError === 'function') {\n    return throwOnError(...params)\n  }\n\n  return !!throwOnError\n}\n","// TYPES\n\ntype NotifyCallback = () => void\n\ntype NotifyFunction = (callback: () => void) => void\n\ntype BatchNotifyFunction = (callback: () => void) => void\n\ntype BatchCallsCallback<T extends Array<unknown>> = (...args: T) => void\n\ntype ScheduleFunction = (callback: () => void) => void\n\nexport const defaultScheduler: ScheduleFunction = (cb) => setTimeout(cb, 0)\n\nexport function createNotifyManager() {\n  let queue: Array<NotifyCallback> = []\n  let transactions = 0\n  let notifyFn: NotifyFunction = (callback) => {\n    callback()\n  }\n  let batchNotifyFn: BatchNotifyFunction = (callback: () => void) => {\n    callback()\n  }\n  let scheduleFn = defaultScheduler\n\n  const schedule = (callback: NotifyCallback): void => {\n    if (transactions) {\n      queue.push(callback)\n    } else {\n      scheduleFn(() => {\n        notifyFn(callback)\n      })\n    }\n  }\n  const flush = (): void => {\n    const originalQueue = queue\n    queue = []\n    if (originalQueue.length) {\n      scheduleFn(() => {\n        batchNotifyFn(() => {\n          originalQueue.forEach((callback) => {\n            notifyFn(callback)\n          })\n        })\n      })\n    }\n  }\n\n  return {\n    batch: <T>(callback: () => T): T => {\n      let result\n      transactions++\n      try {\n        result = callback()\n      } finally {\n        transactions--\n        if (!transactions) {\n          flush()\n        }\n      }\n      return result\n    },\n    /**\n     * All calls to the wrapped function will be batched.\n     */\n    batchCalls: <T extends Array<unknown>>(\n      callback: BatchCallsCallback<T>,\n    ): BatchCallsCallback<T> => {\n      return (...args) => {\n        schedule(() => {\n          callback(...args)\n        })\n      }\n    },\n    schedule,\n    /**\n     * Use this method to set a custom notify function.\n     * This can be used to for example wrap notifications with `React.act` while running tests.\n     */\n    setNotifyFunction: (fn: NotifyFunction) => {\n      notifyFn = fn\n    },\n    /**\n     * Use this method to set a custom function to batch notifications together into a single tick.\n     * By default React Query will use the batch function provided by ReactDOM or React Native.\n     */\n    setBatchNotifyFunction: (fn: BatchNotifyFunction) => {\n      batchNotifyFn = fn\n    },\n    setScheduler: (fn: ScheduleFunction) => {\n      scheduleFn = fn\n    },\n  } as const\n}\n\n// SINGLETON\nexport const notifyManager = createNotifyManager()\n","export class Subscribable<TListener extends Function> {\n  protected listeners = new Set<TListener>()\n\n  constructor() {\n    this.subscribe = this.subscribe.bind(this)\n  }\n\n  subscribe(listener: TListener): () => void {\n    this.listeners.add(listener)\n\n    this.onSubscribe()\n\n    return () => {\n      this.listeners.delete(listener)\n      this.onUnsubscribe()\n    }\n  }\n\n  hasListeners(): boolean {\n    return this.listeners.size > 0\n  }\n\n  protected onSubscribe(): void {\n    // Do nothing\n  }\n\n  protected onUnsubscribe(): void {\n    // Do nothing\n  }\n}\n","import { Subscribable } from './subscribable'\nimport { isServer } from './utils'\n\ntype Listener = (focused: boolean) => void\n\ntype SetupFn = (\n  setFocused: (focused?: boolean) => void,\n) => (() => void) | undefined\n\nexport class FocusManager extends Subscribable<Listener> {\n  #focused?: boolean\n  #cleanup?: () => void\n\n  #setup: SetupFn\n\n  constructor() {\n    super()\n    this.#setup = (onFocus) => {\n      // addEventListener does not exist in React Native, but window does\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (!isServer && window.addEventListener) {\n        const listener = () => onFocus()\n        // Listen to visibilitychange\n        window.addEventListener('visibilitychange', listener, false)\n\n        return () => {\n          // Be sure to unsubscribe if a new handler is set\n          window.removeEventListener('visibilitychange', listener)\n        }\n      }\n      return\n    }\n  }\n\n  protected onSubscribe(): void {\n    if (!this.#cleanup) {\n      this.setEventListener(this.#setup)\n    }\n  }\n\n  protected onUnsubscribe() {\n    if (!this.hasListeners()) {\n      this.#cleanup?.()\n      this.#cleanup = undefined\n    }\n  }\n\n  setEventListener(setup: SetupFn): void {\n    this.#setup = setup\n    this.#cleanup?.()\n    this.#cleanup = setup((focused) => {\n      if (typeof focused === 'boolean') {\n        this.setFocused(focused)\n      } else {\n        this.onFocus()\n      }\n    })\n  }\n\n  setFocused(focused?: boolean): void {\n    const changed = this.#focused !== focused\n    if (changed) {\n      this.#focused = focused\n      this.onFocus()\n    }\n  }\n\n  onFocus(): void {\n    const isFocused = this.isFocused()\n    this.listeners.forEach((listener) => {\n      listener(isFocused)\n    })\n  }\n\n  isFocused(): boolean {\n    if (typeof this.#focused === 'boolean') {\n      return this.#focused\n    }\n\n    // document global can be unavailable in react native\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    return globalThis.document?.visibilityState !== 'hidden'\n  }\n}\n\nexport const focusManager = new FocusManager()\n","import { Subscribable } from './subscribable'\nimport { isServer } from './utils'\n\ntype Listener = (online: boolean) => void\ntype SetupFn = (setOnline: Listener) => (() => void) | undefined\n\nexport class OnlineManager extends Subscribable<Listener> {\n  #online = true\n  #cleanup?: () => void\n\n  #setup: SetupFn\n\n  constructor() {\n    super()\n    this.#setup = (onOnline) => {\n      // addEventListener does not exist in React Native, but window does\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (!isServer && window.addEventListener) {\n        const onlineListener = () => onOnline(true)\n        const offlineListener = () => onOnline(false)\n        // Listen to online\n        window.addEventListener('online', onlineListener, false)\n        window.addEventListener('offline', offlineListener, false)\n\n        return () => {\n          // Be sure to unsubscribe if a new handler is set\n          window.removeEventListener('online', onlineListener)\n          window.removeEventListener('offline', offlineListener)\n        }\n      }\n\n      return\n    }\n  }\n\n  protected onSubscribe(): void {\n    if (!this.#cleanup) {\n      this.setEventListener(this.#setup)\n    }\n  }\n\n  protected onUnsubscribe() {\n    if (!this.hasListeners()) {\n      this.#cleanup?.()\n      this.#cleanup = undefined\n    }\n  }\n\n  setEventListener(setup: SetupFn): void {\n    this.#setup = setup\n    this.#cleanup?.()\n    this.#cleanup = setup(this.setOnline.bind(this))\n  }\n\n  setOnline(online: boolean): void {\n    const changed = this.#online !== online\n\n    if (changed) {\n      this.#online = online\n      this.listeners.forEach((listener) => {\n        listener(online)\n      })\n    }\n  }\n\n  isOnline(): boolean {\n    return this.#online\n  }\n}\n\nexport const onlineManager = new OnlineManager()\n","/**\n * Thenable types which matches React's types for promises\n *\n * React seemingly uses `.status`, `.value` and `.reason` properties on a promises to optimistically unwrap data from promises\n *\n * @see https://github.com/facebook/react/blob/main/packages/shared/ReactTypes.js#L112-L138\n * @see https://github.com/facebook/react/blob/4f604941569d2e8947ce1460a0b2997e835f37b9/packages/react-debug-tools/src/ReactDebugHooks.js#L224-L227\n */\n\nimport { noop } from './utils'\n\ninterface Fulfilled<T> {\n  status: 'fulfilled'\n  value: T\n}\ninterface Rejected {\n  status: 'rejected'\n  reason: unknown\n}\ninterface Pending<T> {\n  status: 'pending'\n\n  /**\n   * Resolve the promise with a value.\n   * Will remove the `resolve` and `reject` properties from the promise.\n   */\n  resolve: (value: T) => void\n  /**\n   * Reject the promise with a reason.\n   * Will remove the `resolve` and `reject` properties from the promise.\n   */\n  reject: (reason: unknown) => void\n}\n\nexport type FulfilledThenable<T> = Promise<T> & Fulfilled<T>\nexport type RejectedThenable<T> = Promise<T> & Rejected\nexport type PendingThenable<T> = Promise<T> & Pending<T>\n\nexport type Thenable<T> =\n  | FulfilledThenable<T>\n  | RejectedThenable<T>\n  | PendingThenable<T>\n\nexport function pendingThenable<T>(): PendingThenable<T> {\n  let resolve: Pending<T>['resolve']\n  let reject: Pending<T>['reject']\n  // this could use `Promise.withResolvers()` in the future\n  const thenable = new Promise((_resolve, _reject) => {\n    resolve = _resolve\n    reject = _reject\n  }) as PendingThenable<T>\n\n  thenable.status = 'pending'\n  thenable.catch(() => {\n    // prevent unhandled rejection errors\n  })\n\n  function finalize(data: Fulfilled<T> | Rejected) {\n    Object.assign(thenable, data)\n\n    // clear pending props props to avoid calling them twice\n    delete (thenable as Partial<PendingThenable<T>>).resolve\n    delete (thenable as Partial<PendingThenable<T>>).reject\n  }\n\n  thenable.resolve = (value) => {\n    finalize({\n      status: 'fulfilled',\n      value,\n    })\n\n    resolve(value)\n  }\n  thenable.reject = (reason) => {\n    finalize({\n      status: 'rejected',\n      reason,\n    })\n\n    reject(reason)\n  }\n\n  return thenable\n}\n\n/**\n * This function takes a Promise-like input and detects whether the data\n * is synchronously available or not.\n *\n * It does not inspect .status, .value or .reason properties of the promise,\n * as those are not always available, and the .status of React's promises\n * should not be considered part of the public API.\n */\nexport function tryResolveSync(promise: Promise<unknown> | Thenable<unknown>) {\n  let data: unknown\n\n  promise\n    .then((result) => {\n      data = result\n      return result\n    }, noop)\n    // .catch can be unavailable on certain kinds of thenable's\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    ?.catch(noop)\n\n  if (data !== undefined) {\n    return { data }\n  }\n\n  return undefined\n}\n","import { focusManager } from './focusManager'\nimport { onlineManager } from './onlineManager'\nimport { pendingThenable } from './thenable'\nimport { isServer, sleep } from './utils'\nimport type { CancelOptions, DefaultError, NetworkMode } from './types'\n\n// TYPES\n\ninterface RetryerConfig<TData = unknown, TError = DefaultError> {\n  fn: () => TData | Promise<TData>\n  initialPromise?: Promise<TData>\n  abort?: () => void\n  onError?: (error: TError) => void\n  onSuccess?: (data: TData) => void\n  onFail?: (failureCount: number, error: TError) => void\n  onPause?: () => void\n  onContinue?: () => void\n  retry?: RetryValue<TError>\n  retryDelay?: RetryDelayValue<TError>\n  networkMode: NetworkMode | undefined\n  canRun: () => boolean\n}\n\nexport interface Retryer<TData = unknown> {\n  promise: Promise<TData>\n  cancel: (cancelOptions?: CancelOptions) => void\n  continue: () => Promise<unknown>\n  cancelRetry: () => void\n  continueRetry: () => void\n  canStart: () => boolean\n  start: () => Promise<TData>\n}\n\nexport type RetryValue<TError> = boolean | number | ShouldRetryFunction<TError>\n\ntype ShouldRetryFunction<TError = DefaultError> = (\n  failureCount: number,\n  error: TError,\n) => boolean\n\nexport type RetryDelayValue<TError> = number | RetryDelayFunction<TError>\n\ntype RetryDelayFunction<TError = DefaultError> = (\n  failureCount: number,\n  error: TError,\n) => number\n\nfunction defaultRetryDelay(failureCount: number) {\n  return Math.min(1000 * 2 ** failureCount, 30000)\n}\n\nexport function canFetch(networkMode: NetworkMode | undefined): boolean {\n  return (networkMode ?? 'online') === 'online'\n    ? onlineManager.isOnline()\n    : true\n}\n\nexport class CancelledError extends Error {\n  revert?: boolean\n  silent?: boolean\n  constructor(options?: CancelOptions) {\n    super('CancelledError')\n    this.revert = options?.revert\n    this.silent = options?.silent\n  }\n}\n\nexport function isCancelledError(value: any): value is CancelledError {\n  return value instanceof CancelledError\n}\n\nexport function createRetryer<TData = unknown, TError = DefaultError>(\n  config: RetryerConfig<TData, TError>,\n): Retryer<TData> {\n  let isRetryCancelled = false\n  let failureCount = 0\n  let isResolved = false\n  let continueFn: ((value?: unknown) => void) | undefined\n\n  const thenable = pendingThenable<TData>()\n\n  const cancel = (cancelOptions?: CancelOptions): void => {\n    if (!isResolved) {\n      reject(new CancelledError(cancelOptions))\n\n      config.abort?.()\n    }\n  }\n  const cancelRetry = () => {\n    isRetryCancelled = true\n  }\n\n  const continueRetry = () => {\n    isRetryCancelled = false\n  }\n\n  const canContinue = () =>\n    focusManager.isFocused() &&\n    (config.networkMode === 'always' || onlineManager.isOnline()) &&\n    config.canRun()\n\n  const canStart = () => canFetch(config.networkMode) && config.canRun()\n\n  const resolve = (value: any) => {\n    if (!isResolved) {\n      isResolved = true\n      config.onSuccess?.(value)\n      continueFn?.()\n      thenable.resolve(value)\n    }\n  }\n\n  const reject = (value: any) => {\n    if (!isResolved) {\n      isResolved = true\n      config.onError?.(value)\n      continueFn?.()\n      thenable.reject(value)\n    }\n  }\n\n  const pause = () => {\n    return new Promise((continueResolve) => {\n      continueFn = (value) => {\n        if (isResolved || canContinue()) {\n          continueResolve(value)\n        }\n      }\n      config.onPause?.()\n    }).then(() => {\n      continueFn = undefined\n      if (!isResolved) {\n        config.onContinue?.()\n      }\n    })\n  }\n\n  // Create loop function\n  const run = () => {\n    // Do nothing if already resolved\n    if (isResolved) {\n      return\n    }\n\n    let promiseOrValue: any\n\n    // we can re-use config.initialPromise on the first call of run()\n    const initialPromise =\n      failureCount === 0 ? config.initialPromise : undefined\n\n    // Execute query\n    try {\n      promiseOrValue = initialPromise ?? config.fn()\n    } catch (error) {\n      promiseOrValue = Promise.reject(error)\n    }\n\n    Promise.resolve(promiseOrValue)\n      .then(resolve)\n      .catch((error) => {\n        // Stop if the fetch is already resolved\n        if (isResolved) {\n          return\n        }\n\n        // Do we need to retry the request?\n        const retry = config.retry ?? (isServer ? 0 : 3)\n        const retryDelay = config.retryDelay ?? defaultRetryDelay\n        const delay =\n          typeof retryDelay === 'function'\n            ? retryDelay(failureCount, error)\n            : retryDelay\n        const shouldRetry =\n          retry === true ||\n          (typeof retry === 'number' && failureCount < retry) ||\n          (typeof retry === 'function' && retry(failureCount, error))\n\n        if (isRetryCancelled || !shouldRetry) {\n          // We are done if the query does not need to be retried\n          reject(error)\n          return\n        }\n\n        failureCount++\n\n        // Notify on fail\n        config.onFail?.(failureCount, error)\n\n        // Delay\n        sleep(delay)\n          // Pause if the document is not visible or when the device is offline\n          .then(() => {\n            return canContinue() ? undefined : pause()\n          })\n          .then(() => {\n            if (isRetryCancelled) {\n              reject(error)\n            } else {\n              run()\n            }\n          })\n      })\n  }\n\n  return {\n    promise: thenable,\n    cancel,\n    continue: () => {\n      continueFn?.()\n      return thenable\n    },\n    cancelRetry,\n    continueRetry,\n    canStart,\n    start: () => {\n      // Start loop\n      if (canStart()) {\n        run()\n      } else {\n        pause().then(run)\n      }\n      return thenable\n    },\n  }\n}\n","import { isServer, isValidTimeout } from './utils'\n\nexport abstract class Removable {\n  gcTime!: number\n  #gcTimeout?: ReturnType<typeof setTimeout>\n\n  destroy(): void {\n    this.clearGcTimeout()\n  }\n\n  protected scheduleGc(): void {\n    this.clearGcTimeout()\n\n    if (isValidTimeout(this.gcTime)) {\n      this.#gcTimeout = setTimeout(() => {\n        this.optionalRemove()\n      }, this.gcTime)\n    }\n  }\n\n  protected updateGcTime(newGcTime: number | undefined): void {\n    // Default to 5 minutes (Infinity for server-side) if no gcTime is set\n    this.gcTime = Math.max(\n      this.gcTime || 0,\n      newGcTime ?? (isServer ? Infinity : 5 * 60 * 1000),\n    )\n  }\n\n  protected clearGcTimeout() {\n    if (this.#gcTimeout) {\n      clearTimeout(this.#gcTimeout)\n      this.#gcTimeout = undefined\n    }\n  }\n\n  protected abstract optionalRemove(): void\n}\n","import {\n  ensureQueryFn,\n  noop,\n  replaceData,\n  resolveEnabled,\n  resolveStaleTime,\n  skipToken,\n  timeUntilStale,\n} from './utils'\nimport { notifyManager } from './notifyManager'\nimport { canFetch, createRetryer, isCancelledError } from './retryer'\nimport { Removable } from './removable'\nimport type { QueryCache } from './queryCache'\nimport type { QueryClient } from './queryClient'\nimport type {\n  CancelOptions,\n  DefaultError,\n  FetchStatus,\n  InitialDataFunction,\n  OmitKeyof,\n  QueryFunctionContext,\n  QueryKey,\n  QueryMeta,\n  QueryOptions,\n  QueryStatus,\n  SetDataOptions,\n  StaleTime,\n} from './types'\nimport type { QueryObserver } from './queryObserver'\nimport type { Retryer } from './retryer'\n\n// TYPES\n\ninterface QueryConfig<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryKey extends QueryKey = QueryKey,\n> {\n  client: QueryClient\n  queryKey: TQueryKey\n  queryHash: string\n  options?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  defaultOptions?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  state?: QueryState<TData, TError>\n}\n\nexport interface QueryState<TData = unknown, TError = DefaultError> {\n  data: TData | undefined\n  dataUpdateCount: number\n  dataUpdatedAt: number\n  error: TError | null\n  errorUpdateCount: number\n  errorUpdatedAt: number\n  fetchFailureCount: number\n  fetchFailureReason: TError | null\n  fetchMeta: FetchMeta | null\n  isInvalidated: boolean\n  status: QueryStatus\n  fetchStatus: FetchStatus\n}\n\nexport interface FetchContext<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryKey extends QueryKey = QueryKey,\n> {\n  fetchFn: () => unknown | Promise<unknown>\n  fetchOptions?: FetchOptions\n  signal: AbortSignal\n  options: QueryOptions<TQueryFnData, TError, TData, any>\n  client: QueryClient\n  queryKey: TQueryKey\n  state: QueryState<TData, TError>\n}\n\nexport interface QueryBehavior<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> {\n  onFetch: (\n    context: FetchContext<TQueryFnData, TError, TData, TQueryKey>,\n    query: Query,\n  ) => void\n}\n\nexport type FetchDirection = 'forward' | 'backward'\n\nexport interface FetchMeta {\n  fetchMore?: { direction: FetchDirection }\n}\n\nexport interface FetchOptions<TData = unknown> {\n  cancelRefetch?: boolean\n  meta?: FetchMeta\n  initialPromise?: Promise<TData>\n}\n\ninterface FailedAction<TError> {\n  type: 'failed'\n  failureCount: number\n  error: TError\n}\n\ninterface FetchAction {\n  type: 'fetch'\n  meta?: FetchMeta\n}\n\ninterface SuccessAction<TData> {\n  data: TData | undefined\n  type: 'success'\n  dataUpdatedAt?: number\n  manual?: boolean\n}\n\ninterface ErrorAction<TError> {\n  type: 'error'\n  error: TError\n}\n\ninterface InvalidateAction {\n  type: 'invalidate'\n}\n\ninterface PauseAction {\n  type: 'pause'\n}\n\ninterface ContinueAction {\n  type: 'continue'\n}\n\ninterface SetStateAction<TData, TError> {\n  type: 'setState'\n  state: Partial<QueryState<TData, TError>>\n  setStateOptions?: SetStateOptions\n}\n\nexport type Action<TData, TError> =\n  | ContinueAction\n  | ErrorAction<TError>\n  | FailedAction<TError>\n  | FetchAction\n  | InvalidateAction\n  | PauseAction\n  | SetStateAction<TData, TError>\n  | SuccessAction<TData>\n\nexport interface SetStateOptions {\n  meta?: any\n}\n\n// CLASS\n\nexport class Query<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> extends Removable {\n  queryKey: TQueryKey\n  queryHash: string\n  options!: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  state: QueryState<TData, TError>\n\n  #initialState: QueryState<TData, TError>\n  #revertState?: QueryState<TData, TError>\n  #cache: QueryCache\n  #client: QueryClient\n  #retryer?: Retryer<TData>\n  observers: Array<QueryObserver<any, any, any, any, any>>\n  #defaultOptions?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  #abortSignalConsumed: boolean\n\n  constructor(config: QueryConfig<TQueryFnData, TError, TData, TQueryKey>) {\n    super()\n\n    this.#abortSignalConsumed = false\n    this.#defaultOptions = config.defaultOptions\n    this.setOptions(config.options)\n    this.observers = []\n    this.#client = config.client\n    this.#cache = this.#client.getQueryCache()\n    this.queryKey = config.queryKey\n    this.queryHash = config.queryHash\n    this.#initialState = getDefaultState(this.options)\n    this.state = config.state ?? this.#initialState\n    this.scheduleGc()\n  }\n  get meta(): QueryMeta | undefined {\n    return this.options.meta\n  }\n\n  get promise(): Promise<TData> | undefined {\n    return this.#retryer?.promise\n  }\n\n  setOptions(\n    options?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): void {\n    this.options = { ...this.#defaultOptions, ...options }\n\n    this.updateGcTime(this.options.gcTime)\n  }\n\n  protected optionalRemove() {\n    if (!this.observers.length && this.state.fetchStatus === 'idle') {\n      this.#cache.remove(this)\n    }\n  }\n\n  setData(\n    newData: TData,\n    options?: SetDataOptions & { manual: boolean },\n  ): TData {\n    const data = replaceData(this.state.data, newData, this.options)\n\n    // Set data and mark it as cached\n    this.#dispatch({\n      data,\n      type: 'success',\n      dataUpdatedAt: options?.updatedAt,\n      manual: options?.manual,\n    })\n\n    return data\n  }\n\n  setState(\n    state: Partial<QueryState<TData, TError>>,\n    setStateOptions?: SetStateOptions,\n  ): void {\n    this.#dispatch({ type: 'setState', state, setStateOptions })\n  }\n\n  cancel(options?: CancelOptions): Promise<void> {\n    const promise = this.#retryer?.promise\n    this.#retryer?.cancel(options)\n    return promise ? promise.then(noop).catch(noop) : Promise.resolve()\n  }\n\n  destroy(): void {\n    super.destroy()\n\n    this.cancel({ silent: true })\n  }\n\n  reset(): void {\n    this.destroy()\n    this.setState(this.#initialState)\n  }\n\n  isActive(): boolean {\n    return this.observers.some(\n      (observer) => resolveEnabled(observer.options.enabled, this) !== false,\n    )\n  }\n\n  isDisabled(): boolean {\n    if (this.getObserversCount() > 0) {\n      return !this.isActive()\n    }\n    // if a query has no observers, it should still be considered disabled if it never attempted a fetch\n    return (\n      this.options.queryFn === skipToken ||\n      this.state.dataUpdateCount + this.state.errorUpdateCount === 0\n    )\n  }\n\n  isStatic(): boolean {\n    if (this.getObserversCount() > 0) {\n      return this.observers.some(\n        (observer) =>\n          resolveStaleTime(observer.options.staleTime, this) === 'static',\n      )\n    }\n\n    return false\n  }\n\n  isStale(): boolean {\n    // check observers first, their `isStale` has the source of truth\n    // calculated with `isStaleByTime` and it takes `enabled` into account\n    if (this.getObserversCount() > 0) {\n      return this.observers.some(\n        (observer) => observer.getCurrentResult().isStale,\n      )\n    }\n\n    return this.state.data === undefined || this.state.isInvalidated\n  }\n\n  isStaleByTime(staleTime: StaleTime = 0): boolean {\n    // no data is always stale\n    if (this.state.data === undefined) {\n      return true\n    }\n    // static is never stale\n    if (staleTime === 'static') {\n      return false\n    }\n    // if the query is invalidated, it is stale\n    if (this.state.isInvalidated) {\n      return true\n    }\n\n    return !timeUntilStale(this.state.dataUpdatedAt, staleTime)\n  }\n\n  onFocus(): void {\n    const observer = this.observers.find((x) => x.shouldFetchOnWindowFocus())\n\n    observer?.refetch({ cancelRefetch: false })\n\n    // Continue fetch if currently paused\n    this.#retryer?.continue()\n  }\n\n  onOnline(): void {\n    const observer = this.observers.find((x) => x.shouldFetchOnReconnect())\n\n    observer?.refetch({ cancelRefetch: false })\n\n    // Continue fetch if currently paused\n    this.#retryer?.continue()\n  }\n\n  addObserver(observer: QueryObserver<any, any, any, any, any>): void {\n    if (!this.observers.includes(observer)) {\n      this.observers.push(observer)\n\n      // Stop the query from being garbage collected\n      this.clearGcTimeout()\n\n      this.#cache.notify({ type: 'observerAdded', query: this, observer })\n    }\n  }\n\n  removeObserver(observer: QueryObserver<any, any, any, any, any>): void {\n    if (this.observers.includes(observer)) {\n      this.observers = this.observers.filter((x) => x !== observer)\n\n      if (!this.observers.length) {\n        // If the transport layer does not support cancellation\n        // we'll let the query continue so the result can be cached\n        if (this.#retryer) {\n          if (this.#abortSignalConsumed) {\n            this.#retryer.cancel({ revert: true })\n          } else {\n            this.#retryer.cancelRetry()\n          }\n        }\n\n        this.scheduleGc()\n      }\n\n      this.#cache.notify({ type: 'observerRemoved', query: this, observer })\n    }\n  }\n\n  getObserversCount(): number {\n    return this.observers.length\n  }\n\n  invalidate(): void {\n    if (!this.state.isInvalidated) {\n      this.#dispatch({ type: 'invalidate' })\n    }\n  }\n\n  fetch(\n    options?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    fetchOptions?: FetchOptions<TQueryFnData>,\n  ): Promise<TData> {\n    if (this.state.fetchStatus !== 'idle') {\n      if (this.state.data !== undefined && fetchOptions?.cancelRefetch) {\n        // Silently cancel current fetch if the user wants to cancel refetch\n        this.cancel({ silent: true })\n      } else if (this.#retryer) {\n        // make sure that retries that were potentially cancelled due to unmounts can continue\n        this.#retryer.continueRetry()\n        // Return current promise if we are already fetching\n        return this.#retryer.promise\n      }\n    }\n\n    // Update config if passed, otherwise the config from the last execution is used\n    if (options) {\n      this.setOptions(options)\n    }\n\n    // Use the options from the first observer with a query function if no function is found.\n    // This can happen when the query is hydrated or created with setQueryData.\n    if (!this.options.queryFn) {\n      const observer = this.observers.find((x) => x.options.queryFn)\n      if (observer) {\n        this.setOptions(observer.options)\n      }\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (!Array.isArray(this.options.queryKey)) {\n        console.error(\n          `As of v4, queryKey needs to be an Array. If you are using a string like 'repoData', please change it to an Array, e.g. ['repoData']`,\n        )\n      }\n    }\n\n    const abortController = new AbortController()\n\n    // Adds an enumerable signal property to the object that\n    // which sets abortSignalConsumed to true when the signal\n    // is read.\n    const addSignalProperty = (object: unknown) => {\n      Object.defineProperty(object, 'signal', {\n        enumerable: true,\n        get: () => {\n          this.#abortSignalConsumed = true\n          return abortController.signal\n        },\n      })\n    }\n\n    // Create fetch function\n    const fetchFn = () => {\n      const queryFn = ensureQueryFn(this.options, fetchOptions)\n\n      // Create query function context\n      const createQueryFnContext = (): QueryFunctionContext<TQueryKey> => {\n        const queryFnContext: OmitKeyof<\n          QueryFunctionContext<TQueryKey>,\n          'signal'\n        > = {\n          client: this.#client,\n          queryKey: this.queryKey,\n          meta: this.meta,\n        }\n        addSignalProperty(queryFnContext)\n        return queryFnContext as QueryFunctionContext<TQueryKey>\n      }\n\n      const queryFnContext = createQueryFnContext()\n\n      this.#abortSignalConsumed = false\n      if (this.options.persister) {\n        return this.options.persister(\n          queryFn,\n          queryFnContext,\n          this as unknown as Query,\n        )\n      }\n\n      return queryFn(queryFnContext)\n    }\n\n    // Trigger behavior hook\n    const createFetchContext = (): FetchContext<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryKey\n    > => {\n      const context: OmitKeyof<\n        FetchContext<TQueryFnData, TError, TData, TQueryKey>,\n        'signal'\n      > = {\n        fetchOptions,\n        options: this.options,\n        queryKey: this.queryKey,\n        client: this.#client,\n        state: this.state,\n        fetchFn,\n      }\n\n      addSignalProperty(context)\n      return context as FetchContext<TQueryFnData, TError, TData, TQueryKey>\n    }\n\n    const context = createFetchContext()\n\n    this.options.behavior?.onFetch(context, this as unknown as Query)\n\n    // Store state in case the current fetch needs to be reverted\n    this.#revertState = this.state\n\n    // Set to fetching state if not already in it\n    if (\n      this.state.fetchStatus === 'idle' ||\n      this.state.fetchMeta !== context.fetchOptions?.meta\n    ) {\n      this.#dispatch({ type: 'fetch', meta: context.fetchOptions?.meta })\n    }\n\n    const onError = (error: TError | { silent?: boolean }) => {\n      // Optimistically update state if needed\n      if (!(isCancelledError(error) && error.silent)) {\n        this.#dispatch({\n          type: 'error',\n          error: error as TError,\n        })\n      }\n\n      if (!isCancelledError(error)) {\n        // Notify cache callback\n        this.#cache.config.onError?.(\n          error as any,\n          this as Query<any, any, any, any>,\n        )\n        this.#cache.config.onSettled?.(\n          this.state.data,\n          error as any,\n          this as Query<any, any, any, any>,\n        )\n      }\n\n      // Schedule query gc after fetching\n      this.scheduleGc()\n    }\n\n    // Try to fetch the data\n    this.#retryer = createRetryer({\n      initialPromise: fetchOptions?.initialPromise as\n        | Promise<TData>\n        | undefined,\n      fn: context.fetchFn as () => Promise<TData>,\n      abort: abortController.abort.bind(abortController),\n      onSuccess: (data) => {\n        if (data === undefined) {\n          if (process.env.NODE_ENV !== 'production') {\n            console.error(\n              `Query data cannot be undefined. Please make sure to return a value other than undefined from your query function. Affected query key: ${this.queryHash}`,\n            )\n          }\n          onError(new Error(`${this.queryHash} data is undefined`) as any)\n          return\n        }\n\n        try {\n          this.setData(data)\n        } catch (error) {\n          onError(error as TError)\n          return\n        }\n\n        // Notify cache callback\n        this.#cache.config.onSuccess?.(data, this as Query<any, any, any, any>)\n        this.#cache.config.onSettled?.(\n          data,\n          this.state.error as any,\n          this as Query<any, any, any, any>,\n        )\n\n        // Schedule query gc after fetching\n        this.scheduleGc()\n      },\n      onError,\n      onFail: (failureCount, error) => {\n        this.#dispatch({ type: 'failed', failureCount, error })\n      },\n      onPause: () => {\n        this.#dispatch({ type: 'pause' })\n      },\n      onContinue: () => {\n        this.#dispatch({ type: 'continue' })\n      },\n      retry: context.options.retry,\n      retryDelay: context.options.retryDelay,\n      networkMode: context.options.networkMode,\n      canRun: () => true,\n    })\n\n    return this.#retryer.start()\n  }\n\n  #dispatch(action: Action<TData, TError>): void {\n    const reducer = (\n      state: QueryState<TData, TError>,\n    ): QueryState<TData, TError> => {\n      switch (action.type) {\n        case 'failed':\n          return {\n            ...state,\n            fetchFailureCount: action.failureCount,\n            fetchFailureReason: action.error,\n          }\n        case 'pause':\n          return {\n            ...state,\n            fetchStatus: 'paused',\n          }\n        case 'continue':\n          return {\n            ...state,\n            fetchStatus: 'fetching',\n          }\n        case 'fetch':\n          return {\n            ...state,\n            ...fetchState(state.data, this.options),\n            fetchMeta: action.meta ?? null,\n          }\n        case 'success':\n          return {\n            ...state,\n            data: action.data,\n            dataUpdateCount: state.dataUpdateCount + 1,\n            dataUpdatedAt: action.dataUpdatedAt ?? Date.now(),\n            error: null,\n            isInvalidated: false,\n            status: 'success',\n            ...(!action.manual && {\n              fetchStatus: 'idle',\n              fetchFailureCount: 0,\n              fetchFailureReason: null,\n            }),\n          }\n        case 'error':\n          const error = action.error\n\n          if (isCancelledError(error) && error.revert && this.#revertState) {\n            return { ...this.#revertState, fetchStatus: 'idle' }\n          }\n\n          return {\n            ...state,\n            error,\n            errorUpdateCount: state.errorUpdateCount + 1,\n            errorUpdatedAt: Date.now(),\n            fetchFailureCount: state.fetchFailureCount + 1,\n            fetchFailureReason: error,\n            fetchStatus: 'idle',\n            status: 'error',\n          }\n        case 'invalidate':\n          return {\n            ...state,\n            isInvalidated: true,\n          }\n        case 'setState':\n          return {\n            ...state,\n            ...action.state,\n          }\n      }\n    }\n\n    this.state = reducer(this.state)\n\n    notifyManager.batch(() => {\n      this.observers.forEach((observer) => {\n        observer.onQueryUpdate()\n      })\n\n      this.#cache.notify({ query: this, type: 'updated', action })\n    })\n  }\n}\n\nexport function fetchState<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryKey extends QueryKey,\n>(\n  data: TData | undefined,\n  options: QueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n) {\n  return {\n    fetchFailureCount: 0,\n    fetchFailureReason: null,\n    fetchStatus: canFetch(options.networkMode) ? 'fetching' : 'paused',\n    ...(data === undefined &&\n      ({\n        error: null,\n        status: 'pending',\n      } as const)),\n  } as const\n}\n\nfunction getDefaultState<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryKey extends QueryKey,\n>(\n  options: QueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n): QueryState<TData, TError> {\n  const data =\n    typeof options.initialData === 'function'\n      ? (options.initialData as InitialDataFunction<TData>)()\n      : options.initialData\n\n  const hasData = data !== undefined\n\n  const initialDataUpdatedAt = hasData\n    ? typeof options.initialDataUpdatedAt === 'function'\n      ? (options.initialDataUpdatedAt as () => number | undefined)()\n      : options.initialDataUpdatedAt\n    : 0\n\n  return {\n    data,\n    dataUpdateCount: 0,\n    dataUpdatedAt: hasData ? (initialDataUpdatedAt ?? Date.now()) : 0,\n    error: null,\n    errorUpdateCount: 0,\n    errorUpdatedAt: 0,\n    fetchFailureCount: 0,\n    fetchFailureReason: null,\n    fetchMeta: null,\n    isInvalidated: false,\n    status: hasData ? 'success' : 'pending',\n    fetchStatus: 'idle',\n  }\n}\n","import { notifyManager } from './notifyManager'\nimport { Removable } from './removable'\nimport { createRetryer } from './retryer'\nimport type {\n  DefaultError,\n  MutationMeta,\n  MutationOptions,\n  MutationStatus,\n} from './types'\nimport type { MutationCache } from './mutationCache'\nimport type { MutationObserver } from './mutationObserver'\nimport type { Retryer } from './retryer'\n\n// TYPES\n\ninterface MutationConfig<TData, TError, TVariables, TContext> {\n  mutationId: number\n  mutationCache: MutationCache\n  options: MutationOptions<TData, TError, TVariables, TContext>\n  state?: MutationState<TData, TError, TVariables, TContext>\n}\n\nexport interface MutationState<\n  TData = unknown,\n  TError = DefaultError,\n  TVariables = unknown,\n  TContext = unknown,\n> {\n  context: TContext | undefined\n  data: TData | undefined\n  error: TError | null\n  failureCount: number\n  failureReason: TError | null\n  isPaused: boolean\n  status: MutationStatus\n  variables: TVariables | undefined\n  submittedAt: number\n}\n\ninterface FailedAction<TError> {\n  type: 'failed'\n  failureCount: number\n  error: TError | null\n}\n\ninterface PendingAction<TVariables, TContext> {\n  type: 'pending'\n  isPaused: boolean\n  variables?: TVariables\n  context?: TContext\n}\n\ninterface SuccessAction<TData> {\n  type: 'success'\n  data: TData\n}\n\ninterface ErrorAction<TError> {\n  type: 'error'\n  error: TError\n}\n\ninterface PauseAction {\n  type: 'pause'\n}\n\ninterface ContinueAction {\n  type: 'continue'\n}\n\nexport type Action<TData, TError, TVariables, TContext> =\n  | ContinueAction\n  | ErrorAction<TError>\n  | FailedAction<TError>\n  | PendingAction<TVariables, TContext>\n  | PauseAction\n  | SuccessAction<TData>\n\n// CLASS\n\nexport class Mutation<\n  TData = unknown,\n  TError = DefaultError,\n  TVariables = unknown,\n  TContext = unknown,\n> extends Removable {\n  state: MutationState<TData, TError, TVariables, TContext>\n  options!: MutationOptions<TData, TError, TVariables, TContext>\n  readonly mutationId: number\n\n  #observers: Array<MutationObserver<TData, TError, TVariables, TContext>>\n  #mutationCache: MutationCache\n  #retryer?: Retryer<TData>\n\n  constructor(config: MutationConfig<TData, TError, TVariables, TContext>) {\n    super()\n\n    this.mutationId = config.mutationId\n    this.#mutationCache = config.mutationCache\n    this.#observers = []\n    this.state = config.state || getDefaultState()\n\n    this.setOptions(config.options)\n    this.scheduleGc()\n  }\n\n  setOptions(\n    options: MutationOptions<TData, TError, TVariables, TContext>,\n  ): void {\n    this.options = options\n\n    this.updateGcTime(this.options.gcTime)\n  }\n\n  get meta(): MutationMeta | undefined {\n    return this.options.meta\n  }\n\n  addObserver(observer: MutationObserver<any, any, any, any>): void {\n    if (!this.#observers.includes(observer)) {\n      this.#observers.push(observer)\n\n      // Stop the mutation from being garbage collected\n      this.clearGcTimeout()\n\n      this.#mutationCache.notify({\n        type: 'observerAdded',\n        mutation: this,\n        observer,\n      })\n    }\n  }\n\n  removeObserver(observer: MutationObserver<any, any, any, any>): void {\n    this.#observers = this.#observers.filter((x) => x !== observer)\n\n    this.scheduleGc()\n\n    this.#mutationCache.notify({\n      type: 'observerRemoved',\n      mutation: this,\n      observer,\n    })\n  }\n\n  protected optionalRemove() {\n    if (!this.#observers.length) {\n      if (this.state.status === 'pending') {\n        this.scheduleGc()\n      } else {\n        this.#mutationCache.remove(this)\n      }\n    }\n  }\n\n  continue(): Promise<unknown> {\n    return (\n      this.#retryer?.continue() ??\n      // continuing a mutation assumes that variables are set, mutation must have been dehydrated before\n      this.execute(this.state.variables!)\n    )\n  }\n\n  async execute(variables: TVariables): Promise<TData> {\n    const onContinue = () => {\n      this.#dispatch({ type: 'continue' })\n    }\n\n    this.#retryer = createRetryer({\n      fn: () => {\n        if (!this.options.mutationFn) {\n          return Promise.reject(new Error('No mutationFn found'))\n        }\n        return this.options.mutationFn(variables)\n      },\n      onFail: (failureCount, error) => {\n        this.#dispatch({ type: 'failed', failureCount, error })\n      },\n      onPause: () => {\n        this.#dispatch({ type: 'pause' })\n      },\n      onContinue,\n      retry: this.options.retry ?? 0,\n      retryDelay: this.options.retryDelay,\n      networkMode: this.options.networkMode,\n      canRun: () => this.#mutationCache.canRun(this),\n    })\n\n    const restored = this.state.status === 'pending'\n    const isPaused = !this.#retryer.canStart()\n\n    try {\n      if (restored) {\n        // Dispatch continue action to unpause restored mutation\n        onContinue()\n      } else {\n        this.#dispatch({ type: 'pending', variables, isPaused })\n        // Notify cache callback\n        await this.#mutationCache.config.onMutate?.(\n          variables,\n          this as Mutation<unknown, unknown, unknown, unknown>,\n        )\n        const context = await this.options.onMutate?.(variables)\n        if (context !== this.state.context) {\n          this.#dispatch({\n            type: 'pending',\n            context,\n            variables,\n            isPaused,\n          })\n        }\n      }\n      const data = await this.#retryer.start()\n\n      // Notify cache callback\n      await this.#mutationCache.config.onSuccess?.(\n        data,\n        variables,\n        this.state.context,\n        this as Mutation<unknown, unknown, unknown, unknown>,\n      )\n\n      await this.options.onSuccess?.(data, variables, this.state.context!)\n\n      // Notify cache callback\n      await this.#mutationCache.config.onSettled?.(\n        data,\n        null,\n        this.state.variables,\n        this.state.context,\n        this as Mutation<unknown, unknown, unknown, unknown>,\n      )\n\n      await this.options.onSettled?.(data, null, variables, this.state.context)\n\n      this.#dispatch({ type: 'success', data })\n      return data\n    } catch (error) {\n      try {\n        // Notify cache callback\n        await this.#mutationCache.config.onError?.(\n          error as any,\n          variables,\n          this.state.context,\n          this as Mutation<unknown, unknown, unknown, unknown>,\n        )\n\n        await this.options.onError?.(\n          error as TError,\n          variables,\n          this.state.context,\n        )\n\n        // Notify cache callback\n        await this.#mutationCache.config.onSettled?.(\n          undefined,\n          error as any,\n          this.state.variables,\n          this.state.context,\n          this as Mutation<unknown, unknown, unknown, unknown>,\n        )\n\n        await this.options.onSettled?.(\n          undefined,\n          error as TError,\n          variables,\n          this.state.context,\n        )\n        throw error\n      } finally {\n        this.#dispatch({ type: 'error', error: error as TError })\n      }\n    } finally {\n      this.#mutationCache.runNext(this)\n    }\n  }\n\n  #dispatch(action: Action<TData, TError, TVariables, TContext>): void {\n    const reducer = (\n      state: MutationState<TData, TError, TVariables, TContext>,\n    ): MutationState<TData, TError, TVariables, TContext> => {\n      switch (action.type) {\n        case 'failed':\n          return {\n            ...state,\n            failureCount: action.failureCount,\n            failureReason: action.error,\n          }\n        case 'pause':\n          return {\n            ...state,\n            isPaused: true,\n          }\n        case 'continue':\n          return {\n            ...state,\n            isPaused: false,\n          }\n        case 'pending':\n          return {\n            ...state,\n            context: action.context,\n            data: undefined,\n            failureCount: 0,\n            failureReason: null,\n            error: null,\n            isPaused: action.isPaused,\n            status: 'pending',\n            variables: action.variables,\n            submittedAt: Date.now(),\n          }\n        case 'success':\n          return {\n            ...state,\n            data: action.data,\n            failureCount: 0,\n            failureReason: null,\n            error: null,\n            status: 'success',\n            isPaused: false,\n          }\n        case 'error':\n          return {\n            ...state,\n            data: undefined,\n            error: action.error,\n            failureCount: state.failureCount + 1,\n            failureReason: action.error,\n            isPaused: false,\n            status: 'error',\n          }\n      }\n    }\n    this.state = reducer(this.state)\n\n    notifyManager.batch(() => {\n      this.#observers.forEach((observer) => {\n        observer.onMutationUpdate(action)\n      })\n      this.#mutationCache.notify({\n        mutation: this,\n        type: 'updated',\n        action,\n      })\n    })\n  }\n}\n\nexport function getDefaultState<\n  TData,\n  TError,\n  TVariables,\n  TContext,\n>(): MutationState<TData, TError, TVariables, TContext> {\n  return {\n    context: undefined,\n    data: undefined,\n    error: null,\n    failureCount: 0,\n    failureReason: null,\n    isPaused: false,\n    status: 'idle',\n    variables: undefined,\n    submittedAt: 0,\n  }\n}\n"],"names":["queryFnContext","context"],"mappings":"8IACA,IAAA,EAAuB,EAAA,CAAA,CAAA,EAAX,MAuCR,EAAA,EAAA,CAAA,AAvCmB,CAuCnB,QAnCS,EAAA,CAAA,EAAA,EAA2B,aAAA,EACtC,KAAA,GAGW,EAAiB,AAAC,IAC7B,IAAM,EAAA,CAAe,EAAA,EAAA,CADsC,SACtC,EAAW,GAEhC,GAAI,EACF,OAAO,EAGT,CANkD,CAEjC,CAIb,CAAC,EACH,MADW,AACL,AAAI,MAAM,wDAAwD,EAG1E,OAAO,CACT,EAOa,EAAsB,CAAC,QAClC,CAAA,CACA,UAAA,CACF,KAAmD,IAC3C,SAAA,EAAU,KACd,CADoB,CACb,KAAA,CAAM,EACN,KACL,CADW,CACJ,OAAA,CAAQ,CACjB,GACC,CAAC,EAAO,EAGT,CAAA,CAHQ,CAGR,EAAA,GAAA,EAAC,EAAmB,QAAA,CAAnB,CAA4B,MAAO,WACjC,CAAA,CACH,CAFA,2gBCoCG,IAAM,EAA6B,aAAlB,OAAO,QAA0B,SAAU,WAI5D,SAAS,IAAQ,CAEjB,EAFgB,OAEP,EACd,CAAA,CACA,CAAA,EACS,AACT,MAAO,AAAmB,mBAAZ,EACT,EAAmC,GACpC,CACN,CAF+C,AAIxC,SAAS,EAAe,CAAA,EAAiC,AAC9D,MAAwB,UAAjB,OAAO,GAAsB,GAAS,GAAK,IAAU,GAC9D,CAEO,SAAS,EAAe,CAAA,CAAmB,CAAA,EAA4B,AAC5E,OAAO,KAAK,GAAA,CAAI,GAAa,IAAa,CAAA,CAAK,GAA/B,EAAoC,GAAA,CAAI,EAAG,CAAC,CAC9D,CAEO,SAAS,EAMd,CAAA,CAGA,CAAA,EACuB,AACvB,MAA4B,YAArB,OAAO,EAA2B,EAAU,GAAS,CAC9D,CAEO,AAHmD,SAG1C,EAMd,CAAA,CACA,CAAA,EACqB,AACrB,MAA0B,YAAnB,OAAO,EAAyB,EAAQ,GAAS,CAC1D,CADsD,AAG/C,SAAS,EACd,CAAA,CACA,CAAA,EACS,AACT,GAAM,MACJ,EAAO,KAAA,CACP,OAAA,aACA,CAAA,WACA,CAAA,UACA,CAAA,OACA,CAAA,CACF,CAAI,EAEJ,GAAI,GACF,GAAI,GACF,CAFU,EAEN,CADK,CACC,SAAA,GAAc,EAAsB,EAAU,EAAM,OAAO,EACnE,CADsE,MAC/D,CACT,MACF,GAAW,CAAC,EAAgB,EAAM,QAAA,CAAU,GAC1C,KADkD,EAC3C,CACT,AAFuD,CAKzD,GAAI,AAAS,UAAO,CAClB,IAAM,EAAW,EAAM,QAAA,CAAS,EAChC,GAAa,WAAT,GAAqB,CAAC,GAGb,OAHuB,MAGhC,GAAuB,EAFzB,OAAO,CAE4B,AAGvC,OAEI,CAAiB,kBAAV,GAAuB,EAAM,OAAA,CAAQ,IAAM,CAAA,GAAO,EAIzD,GAAe,IAAgB,EAAM,KAAA,CAAM,WAAA,EAAa,GAIxD,IAAa,CAAC,EAAU,EAAK,CAKnC,CAEO,CAP+B,QAOtB,EACd,CAAA,CACA,CAAA,EACS,AACT,GAAM,OAAE,CAAA,QAAO,CAAA,WAAQ,CAAA,aAAW,CAAA,CAAY,CAAI,EAClD,GAAI,EAAa,CACf,GAAI,CAAC,EAAS,OAAA,CAAQ,WAAA,CACpB,CADiC,MAC1B,EAET,GAAI,GACF,GAAI,CADK,CACG,EAAS,OAAA,CAAQ,WAAW,IAAM,EAAQ,GACpD,MAAO,EADwD,AAEjE,GAFoE,GAGtE,GAAW,CAAC,EAAgB,EAAS,OAAA,CAAQ,WAAA,CAAa,GACxD,OAAO,CAD4D,AAGvE,GAH0E,MAKtE,GAAU,EAAS,KAAA,CAAM,MAAA,GAAW,CAAA,GAAQ,EAI5C,IAAa,CAAC,EAAU,EAAQ,CAKtC,CAEO,CAPkC,QAOzB,EACd,CAAA,CACA,CAAA,EAGA,AAFQ,MAED,CADQ,GAAS,gBAAkB,CAAA,EAC5B,EAChB,CAMO,KAPiB,IAOR,EAAQ,CAAA,EAA0C,AAChE,OAAO,KAAK,SAAA,CAAU,EAAU,CAAC,EAAG,IAClC,EAAc,GAAG,AACb,OAAO,IAAA,CAAK,GAAG,AACZ,IAAA,CAAK,EACL,MAAA,CAAO,CAAC,EAAQ,KACf,CAAA,CAAO,CADgB,CACb,CAAA,AAAI,CAAA,CAAI,EAAG,CAAA,AACd,GACN,CAAC,CAAQ,EACd,EAER,CAMO,SAAS,EAAgB,CAAA,CAAQ,CAAA,EAAiB,OACnD,AAAJ,IAAU,GAAG,AAIT,OAAO,GAAM,OAAO,GAAG,EAIvB,KAAK,GAAkB,UAAb,OAAO,GAA+B,UAAb,AAAuB,OAAhB,GACrC,OAAO,IAAA,CAAK,CAAC,EAAE,KAAA,CAAO,AAAD,GAAS,EAAgB,CAAA,CAAE,EAAG,CAAA,AAAG,CAAA,CAAE,EAAI,CAAD,AAAE,CAIxE,CAQO,SAAS,EAAiB,CAAA,CAAQ,CAAA,EAAa,AACpD,GAAI,IAAM,EACR,CADW,MACJ,EAGT,IAAM,EAAQ,EAAa,CAAC,GAAK,EAAa,CAAC,EAE/C,GAAI,GAAU,EAAc,CAAC,GAAK,EAAc,CAAC,EAAI,CACnD,IAAM,EAAS,EAAQ,EAAI,OAAO,IAAA,CAAK,CAAC,EAClC,EAAQ,EAAO,MAAA,CACf,EAAS,EAAQ,EAAI,OAAO,IAAA,CAAK,CAAC,EAClC,EAAQ,EAAO,MAAA,CACf,EAAY,EAAQ,CAAC,CAAA,CAAI,CAAC,EAC1B,EAAY,IAAI,IAAI,GAEtB,EAAa,CAFe,CAIhC,IAAA,IAAS,EAAI,EAAG,EAAI,EAAO,IAAK,CAC9B,IAAM,EAAM,EAAQ,EAAI,CAAA,CAAO,CAAC,CAAA,AAChC,EACI,CAAC,GAAS,EAAU,GAAA,CAAI,GAAG,CAAM,CAAA,CAAA,EACxB,KAAA,IAAX,CAAA,CAAE,EAAG,CAAA,CACM,KAAA,GACX,CADA,CAAA,CAAE,EAAG,CAAA,CAEL,CAAA,CAAK,EAAG,CAAA,AAAI,KAAA,EACZ,MAEA,CAAA,CAAK,EAAG,CAAI,AAAJ,EAAqB,CAAA,CAAE,EAAG,CAAG,AAAH,CAAG,CAAE,EAAI,CAAD,CACtC,CAAA,CAAK,EAAG,CAAA,EAAM,CAAA,CAAE,EAAG,CAAA,CAAgB,KAAA,GAAW,CAAtB,CAAA,CAAE,EAAG,CAAA,CAC/B,IAGN,CAEA,OAAO,IAAU,GAAS,IAAe,EAAQ,EAAI,CACvD,CAEA,OAAO,CACT,CAKO,SAAS,EACd,CAAA,CACA,CAAA,EACS,AACT,GAAI,CAAC,GAAK,OAAO,IAAA,CAAK,CAAC,EAAE,MAAA,GAAW,OAAO,IAAA,CAAK,CAAC,EAAE,MAAA,CACjD,CADyD,MAClD,EAGT,IAAA,IAAW,KAAO,EAChB,AADmB,GACf,CAAA,CAAE,EAAG,CAAA,EAAM,CAAA,CAAE,EAAG,CAAA,AAClB,CADqB,MACd,EAIX,OAAO,CACT,CAEO,SAAS,EAAa,CAAA,EAAgB,AAC3C,OAAO,MAAM,OAAA,CAAQ,IAAU,CAAL,CAAW,MAAA,GAAW,OAAO,IAAA,CAAK,GAAO,EAAF,IAAE,AACrE,CAIO,SAAS,EAAc,CAAA,EAAqB,AACjD,GAAI,CAAC,EAAmB,CAAC,EACvB,CAD0B,MACnB,EAIT,IAAM,EAAO,EAAE,WAAA,CACf,GAAa,KAAA,GAAW,CAApB,EACF,OAAO,EAIT,IAAM,EAAO,EAAK,SAAA,QACd,CAAC,EAAmB,IAAI,CAKxB,CAAC,CAL0B,CAKrB,cAAA,CAAe,eAAe,GAAG,AAKvC,OAAO,cAAA,CAAe,CAAC,IAAM,OAAO,SAAA,AAM1C,CAEA,CARqD,QAQ5C,EAAmB,CAAA,EAAiB,AAC3C,MAAO,AAAsC,2BAA/B,SAAA,CAAU,QAAA,CAAS,IAAA,CAAK,CAAC,CACzC,CAEO,SAAS,EAAM,CAAA,EAAgC,AACpD,OAAO,IAAI,QAAQ,AAAC,IAClB,QAD8B,GACnB,EAAS,EACtB,CAAC,CACH,CAEO,EAJwB,OAIf,EAGd,CAAA,CAA6B,CAAA,CAAa,CAAA,EAA0B,MAC3B,AAAzC,YAAqD,AAAjD,OAAO,EAAQ,iBAAA,CACV,EAAQ,iBAAA,CAAkB,EAAU,GAClC,CADsC,AACR,MAAtB,CAA6B,gBAA7B,CAcV,EAAiB,EAAU,GAE7B,CAFiC,AAG1C,CAEO,SAAS,EACd,CAAA,EACe,AACf,OAAO,CACT,CAEO,SAAS,EAAY,CAAA,CAAiB,CAAA,CAAS,EAAM,CAAA,EAAa,AACvE,IAAM,EAAW,CAAC,GAAG,EAAO,EAAI,CAChC,CADgC,MACzB,GAAO,EAAS,MAAA,CAAS,EAAM,EAAS,KAAA,CAAM,CAAC,EAAI,CAC5D,CAEO,SAAS,EAAc,CAAA,CAAiB,CAAA,CAAS,EAAM,CAAA,EAAa,AACzE,IAAM,EAAW,CAAC,KAAS,CAAH,CAAQ,CAChC,EADgC,KACzB,GAAO,EAAS,MAAA,CAAS,EAAM,EAAS,KAAA,CAAM,EAAG,CAAA,CAAE,EAAI,CAChE,CAEO,IAAM,EAAY,OAAO,EAGzB,SAAS,EAId,CAAA,CAIA,CAAA,EACwC,MAYxC,AAAI,CAAC,EAAQ,OAAA,EAAW,GAAc,eAC7B,CAD6C,GACvC,EAAa,cAAA,CAGxB,AAAC,EAAQ,OAAA,EAAW,EAAQ,OAAA,GAAY,EAKrC,EAAQ,OALwC,AAKxC,CAJN,IACL,QAAQ,MAAA,CAAW,AAAJ,MAAU,CAAA,kBAAA,EAAqB,EAAQ,SAAS,CAAA,CAAA,CAAG,CAAC,CAIzE,CAEO,SAAS,EACd,CAAA,CACA,CAAA,EACS,MAEL,AAAJ,AAA4B,YAAY,OAA7B,EACF,KAAgB,GAGlB,CAAC,CAAC,CAHsB,AAIjC,EAJwB,4HC/ajB,IAAM,EAAqC,AAAC,GAAO,WAAW,EAAI,CAAC,EAEnE,SAAS,IACd,IAAI,EAA+B,CAAC,CAAA,CAChC,EAAe,EACf,EAA2B,AAAC,GAHI,CAIlC,GACF,EACI,EAAqC,AAAC,EAHG,AAClC,EAGT,GACF,EACI,EAAa,EAHkD,AACxD,AAIL,EAAW,AAAC,IACZ,EACF,EAAM,IAAA,CAAK,AAFsC,GAIjD,EAAW,AAHK,GACG,EAGjB,CADe,CACN,EACX,CAAC,CAEL,EACM,EAJiB,AAIT,KACZ,CADwB,GAClB,EAAgB,EACtB,EAAQ,CAAC,CAAA,CACL,EAAc,MAAA,EAAQ,AACxB,EAAW,KACT,CADe,CACD,KACZ,CADkB,CACJ,OAAA,CAAQ,AAAC,IACrB,EAAS,EACX,CAAC,CACH,CAAC,CACH,CAJwC,AAIvC,CAHsB,AAK3B,EAEA,MAAO,CACL,MAAO,AAAI,IACT,IAAI,EACJ,GAFkC,CAGlC,GAAI,CACF,EAAS,GACX,MADoB,EAClB,CAEI,EAAC,GACH,GAEJ,CACA,EAHU,KADW,AAId,CACT,EAIA,WAAY,AACV,GAEO,CAAA,GAAI,KACT,CAFwB,CAEf,EADS,GAEhB,CADa,IACD,EACd,CAAC,CADU,AAAO,AAEpB,WAEF,EAKA,kBAAmB,AAAC,IAClB,EAAW,CAD8B,AAE3C,EAKA,uBAAwB,AAAC,IACvB,EAAgB,CADmC,AAErD,EACA,aAAe,AAAD,IACZ,EAAa,CACf,AAFwC,CAG1C,CACF,CAGO,IAAM,EAAgB,oBAAoB,0DChG1C,IAAM,EAAN,MAA+C,AAGpD,aAAc,CAFd,IAAA,CAAU,SAAA,CAAY,EAAA,EAAI,IAAe,AAGvC,IAAA,CAAK,EAHe,OAGf,CAAY,IAAA,CAAK,SAAA,CAAU,IAAA,CAAK,IAAI,CAC3C,CAEA,UAAU,CAAA,CAAiC,CAKzC,OAJA,IAAA,CAAK,SAAA,CAAU,GAAA,CAAI,GAEnB,IAAA,CAAK,AAFsB,WAEtB,CAAY,EAEV,KACL,CADW,GACX,CAAK,SAAA,CAAU,MAAA,CAAO,GACtB,IAAA,CAD8B,AACzB,aAAA,CAAc,CACrB,CACF,CAEA,cAAwB,CACtB,OAAO,IAAA,CAAK,SAAA,CAAU,IAAA,CAAO,CAC/B,CAEU,aAAoB,CAE9B,CAEU,eAAsB,CAEhC,CACF,+FC7BA,IAAA,EAA6B,EAAA,CAApB,AAAoB,CAAA,QAC7B,EAAyB,EAAA,CAAhB,AAAgB,CAAA,KADI,CAShB,EAAN,OARkB,OAQlB,EAA2B,YAAA,CAAuB,EACvD,GACA,GAEA,AAEA,cAAc,CACZ,KAAA,CAAM,EACN,IAAA,CAAA,CAAA,CAAK,CAAS,AAAC,IAGb,GAAI,CAAA,EAAC,EAHoB,MAGpB,EAAY,OAAO,gBAAA,CAAkB,CACxC,IAAM,EAAW,IAAM,IAIvB,IAJ+B,GAE/B,OAAO,gBAAA,CAAiB,mBAAoB,GAAU,GAE/C,EAFoD,GAIzD,CAFW,MAEJ,mBAAA,CAAoB,mBAAoB,EACjD,CACF,CAEF,CACF,CAEU,EAPqD,WAOjC,CACxB,AAAC,IAAA,CAAA,CAAA,CAAK,EAAU,AAClB,IAAA,CAAK,gBAAA,CAAiB,IAAA,CAAA,CAAA,CAAK,AAAM,CAErC,CAEU,eAAgB,CACnB,IAAA,CAAK,YAAA,CAAa,GAAG,CACxB,IAAA,CAAA,CAAA,CAAK,GAAW,EAChB,IAAA,CAAA,CAAA,CAAK,CAAW,KAAA,EAEpB,CAEA,iBAAiB,CAAA,CAAsB,CACrC,IAAA,CAAA,CAAA,CAAK,CAAS,EACd,IAAA,CAAA,CAAA,CAAK,GAAW,EAChB,IAAA,CAAA,CAAA,CAAK,CAAW,EAAM,AAAC,IACE,QADU,GAC7B,AAA8B,OAAvB,EACT,IAAA,CAAK,UAAA,CAAW,GAEhB,IAFuB,AAEvB,CAAK,OAAA,CAAQ,CAEjB,CAAC,CACH,CAEA,WAAW,CAAA,CAAyB,CAClB,IAAA,CAAA,CAAA,CAAK,GAAa,IAEhC,IAAA,CAAA,CAAA,CAAK,CAAW,EAChB,IAAA,CAAK,OAAA,CAAQ,EAEjB,CAEA,SAAgB,CACd,IAAM,EAAY,IAAA,CAAK,SAAA,CAAU,EACjC,IAAA,CAAK,SAAA,CAAU,OAAA,CAAQ,AAAC,IACtB,EAAS,EACX,CAAC,CACH,CAEA,EALuC,EACjB,OAID,OACnB,AAA6B,WAAzB,AAAoC,OAA7B,IAAA,CAAA,CAAA,CAAK,CACP,IAAA,CAAA,CAAA,CAAK,CAKP,WAAW,QAAA,EAAU,kBAAoB,QAClD,CACF,EAEa,EAAe,IAAI,aAAa,oFCrF7C,IAAA,EAA6B,EAAA,CAApB,AAAoB,CAAA,QAC7B,EAAyB,EAAA,CAAhB,AAAgB,CAAA,KADI,CAMhB,EAAN,OALkB,OAKlB,EAA4B,YAAA,CAAuB,EACxD,EAAU,CAAA,GACV,GAIA,AAFA,cAEc,CACZ,KAAA,CAAM,EACN,IAAA,CAAA,CAAA,AAAK,CAAA,CAAS,AAAC,IAGb,GAAI,CAAA,EAAC,GAHqB,KAGrB,EAAY,OAAO,gBAAA,CAAkB,CACxC,IAAM,EAAiB,IAAM,GAAS,GAChC,CADoC,CAClB,IAAM,GAAS,GAKvC,EAL4C,KAE5C,OAAO,gBAAA,CAAiB,SAAU,GAAgB,GAClD,EADuD,KAChD,gBAAA,CAAiB,UAAW,GAAiB,GAE7C,EAFkD,GAIvD,CAFW,MAEJ,mBAAA,CAAoB,SAAU,GACrC,OAAO,IAD4C,eAC5C,CAAoB,UAAW,EACxC,CACF,CAGF,CACF,CAEU,SARmD,IAQ/B,CACxB,AAAC,IAAA,CAAA,CAAA,AAAK,CAAA,EAAU,AAClB,IAAA,CAAK,gBAAA,CAAiB,IAAA,CAAA,CAAA,CAAK,AAAM,CAErC,CAEU,eAAgB,CACnB,IAAA,CAAK,YAAA,CAAa,GAAG,CACxB,IAAA,CAAA,CAAA,CAAK,GAAW,EAChB,IAAA,CAAA,CAAA,CAAK,CAAW,KAAA,EAEpB,CAEA,iBAAiB,CAAA,CAAsB,CACrC,IAAA,CAAA,CAAA,CAAK,CAAS,EACd,IAAA,CAAA,CAAA,CAAK,GAAW,EAChB,IAAA,CAAA,CAAA,CAAK,CAAW,EAAM,IAAA,CAAK,SAAA,CAAU,IAAA,CAAK,IAAI,CAAC,CACjD,CAEA,UAAU,CAAA,CAAuB,CACf,IAAA,CAAA,CAAA,CAAK,GAAY,IAG/B,IAAA,CAAA,CAAA,CAAK,CAAU,EACf,IAAA,CAAK,SAAA,CAAU,OAAA,CAAQ,AAAC,IACtB,EAAS,EACX,CAAC,EAEL,CAHqB,AAKrB,CANyC,SAMrB,CAClB,OAAO,IAAA,CAAA,CAAA,CAAK,AACd,CACF,EAEa,EAAgB,IAAI,cAAc,sFC7D/C,IAAA,EAAqB,EAAA,CAAZ,AAAY,CAAA,MAkCd,KAlCc,IAkCL,IAId,IAHI,EACA,EAEE,EAAW,IAJsC,AAIlC,QAAQ,CAAC,EAAU,KACtC,EAAU,EACV,EAAS,CACX,AAHoD,CAGnD,EAOD,SAAS,EAAS,CAAA,EAA+B,AAC/C,OAAO,MAAA,CAAO,EAAU,GAGxB,CAH4B,MAGpB,EAAyC,OAAA,CACjD,OAAQ,EAAyC,MAAA,AACnD,CAmBA,OA9BA,EAAS,MAAA,CAAS,UAClB,EAAS,KAAA,CAAM,KAEf,CAAC,AAFoB,EAYrB,EAAS,OAAA,CAAU,AAAC,IAClB,EAAS,CACP,GAF0B,IAElB,YACR,OACF,CAAC,EAED,EAAQ,EACV,EACA,CAFe,CAEN,MAAA,CAAS,AAAC,IACjB,EAAS,CACP,IAF0B,GAElB,WACR,QACF,CAAC,EAED,EAAO,EACT,EAEO,CACT,CAUO,AAdU,SAcD,EAAe,CAAA,EAA+C,AAC5E,IAAI,EAWJ,GATA,EACG,IAAA,CAAK,AAAC,IACL,EAAO,EACA,GAFS,AAGlB,EAAG,IAAI,GAGL,MAAA,EAAM,IAAI,EAED,KAAA,GAAW,CAApB,EACF,MAAO,MAAE,CAAK,CAIlB,wIC9GA,IAAA,EAA6B,EAAA,CAApB,AAAoB,CAAA,QAC7B,EAA8B,EAAA,CAArB,AAAqB,CAAA,KADD,GAE7B,EAAgC,EAAA,CAAvB,AAAuB,CAAA,MADF,EAE9B,EAAgC,EAAA,CAAA,AAAvB,CAAuB,MA4ChC,EA7CgC,CACb,MA4CV,EAAkB,CAAA,EAAsB,AAC/C,EA7C8B,KA6CvB,KAAK,GAAA,CAAI,IAAO,GAAK,EAAc,GAAK,CACjD,CAEO,SAAS,EAAS,CAAA,EAA+C,AACtE,MAAA,CAAQ,GAAe,QAAA,CAAA,GAAc,UAAA,EACjC,aAAA,CAAc,QAAA,CAAS,CAE7B,CAEO,EAHD,EAGO,EAAN,cAA6B,MAAM,AAGxC,YAAY,CAAA,CAAyB,CACnC,KAAA,CAAM,gBAAgB,EACtB,IAAA,CAAK,MAAA,CAAS,GAAS,OACvB,IAAA,CAAK,MAAA,CAAS,GAAS,MACzB,CACF,EAEO,SAAS,EAAiB,CAAA,EAAqC,AACpE,OAAO,aAAiB,CAC1B,CAEO,SAAS,EACd,CAAA,EACgB,AAChB,IAGI,EAHA,GAAmB,EACnB,EAAe,EACf,EAAa,GAGX,EAAA,CAAA,EAAA,EAAW,eAAA,CAAuB,GAiBlC,EAAc,IAClB,EAAA,YAAA,CAAa,SAAA,CAAU,IACC,AAAvB,CADsB,YACf,WAAA,EAAgB,EAAY,aAAA,CAAc,QAAA,EAAS,CAAA,EAC3D,EAAO,MAAA,CAAO,EAEV,EAAW,IAAM,EAAS,EAAO,WAAW,GAAK,EAAO,MAAA,CAAO,EAE/D,EAAU,AAAC,IACV,IACH,EAF4B,CAEf,EACb,EAAO,CAFQ,QAER,GAAY,GACnB,EADwB,IAExB,EAAS,KADI,EACJ,CAAQ,GAErB,EAF0B,AAIpB,EAAS,AAAC,IACT,IACH,EAF2B,CAEd,EACb,EAAO,CAFQ,MAER,GAAU,GACjB,EADsB,IAEtB,EAAS,KADI,CACJ,CAAO,GAEpB,EAEM,AAJmB,EAIX,IACL,EADW,EACP,QAAQ,AAAC,IAClB,EAAa,AAAC,KACR,GAAc,EADI,CACQ,GAAG,AAC/B,AAHkC,EAGlB,EAEpB,EACA,CAHyB,CAGlB,OAAA,GAAU,CACnB,CAAC,EAAE,IAAA,CAAK,KACN,CADY,CACC,KAAA,EACT,AAAC,GACH,EAAO,OADQ,GACR,GAAa,CAExB,CAAC,EAIG,EAAM,MAAM,GAMZ,EAJJ,GAAI,EACF,OAMF,GAPgB,CAOV,EACa,IAAjB,EAAqB,EAAO,cAAA,CAAiB,KAAA,EAG/C,GAAI,CACF,EAAiB,GAAkB,EAAO,EAAA,CAAG,CAC/C,CAAA,MAAS,EAAO,CACd,EAAiB,QAAQ,MAAA,CAAO,EAClC,CAEA,EAHuC,MAG/B,OAAA,CAAQ,GACb,IAAA,CAAK,GACL,GAF2B,CACf,CACZ,CAAM,AAAC,IAEN,GAAI,EACF,CAHc,MAOhB,GALgB,CAKV,EAAQ,EAAO,KAAA,EAAA,AAAyB,CAAA,CAAzB,CAAA,EAAU,QAAA,CACzB,EADoC,AACvB,EAAO,UAAA,EAAc,EAClC,EACkB,YAAtB,OAAO,EACH,EAAW,EAAc,GACzB,EAD8B,AAE9B,GACM,IAAV,GACkB,UAAjB,OAAO,GAAsB,EAAe,GAC3B,YAAjB,OAAO,GAAwB,EAAM,EAAc,GAEtD,EAF2D,CAEvD,GAAoB,CAAC,EAAa,YAEpC,EAAO,GAIT,EAJc,EAOd,EAAO,MAAA,GAAS,EAAc,GAG9B,CAAA,CAHmC,CAGnC,EAAA,KAAA,EAAM,GAEH,EAFQ,EAER,CAAK,IACG,EADG,EACa,KAAA,EAAY,CAAhB,IAHvB,AAKG,CAF0C,GAE1C,CAAK,KACA,CADM,CAER,EAAO,GAEP,EAFY,CAIhB,CAFQ,AAEP,CACL,CAAC,CACL,EAEA,EATgC,IASzB,CACL,QAAS,EACT,OA7Ha,AAAC,IACT,IACH,EAAO,IAAI,EADI,AACW,EAF0B,EAIpD,EAAO,KAAA,EAFgC,CAAC,AAEzB,EAEnB,EAwHE,SAAU,KACR,CADc,KAEP,GAET,IAHe,QAxHG,KAClB,CADwB,EACL,CACrB,EA0HE,cAxHoB,KACpB,CAD0B,EACP,CACrB,WAuHE,EACA,MAAO,KAED,CAFO,GAGT,IAAI,AAEJ,CAHW,GAGH,AAHM,EAGR,EAAE,CAAK,GAAG,AAEX,EAEX,CACF,yEChOA,IAAA,EAAyC,EAAA,CAAhC,AAAgC,CAAA,MAEnB,EAAf,CAFY,KAEa,EAE9B,CAEA,SAAgB,CACd,IAPqC,AAOrC,CAAK,cAAA,CAAe,CACtB,CAEU,YAAmB,CAC3B,IAAA,CAAK,cAAA,CAAe,EAEpB,CAAA,EAAA,EAAI,cAAA,EAAe,IAAA,CAAK,MAAM,GAAG,CAC/B,IAAA,CAAA,CAAA,CAAK,CAAa,WAAW,KAC3B,CADiC,GACjC,CAAK,cAAA,CAAe,CACtB,EAAG,IAAA,CAAK,OAAM,CAElB,CAEU,aAAa,CAAA,CAAqC,CAE1D,IAAA,CAAK,MAAA,CAAS,KAAK,GAAA,CACjB,IAAA,CAAK,MAAA,EAAU,EACf,GAAA,CAAA,EAAc,OAAd,CAAc,CAAW,IAAW,GAAS,CAAL,AAAK,CAEjD,CAEU,GAJuC,aAItB,CACrB,IAAA,CAAA,CAAA,CAAK,EAAY,CACnB,aAAa,IAAA,CAAA,CAAA,CAAK,AAAU,EAC5B,IAAA,CAAA,CAAA,CAAK,CAAa,KAAA,EAEtB,CAGF,qFCpCA,IAAA,EAAA,EAAA,CAAA,CAAA,MASA,EAA8B,EAAA,CAArB,AAAqB,CAAA,QAC9B,EAAkC,EAAwB,CAAjD,AAAiD,CAAA,MAD5B,EAE9B,AAD0D,CAAvC,CACO,EAAA,CAAA,AAAjB,CAAiB,QAmJb,EAAN,AApJ2B,MACR,QAmJnB,EAKG,SAAA,CAAU,EAMlB,GACA,GACA,GACA,GACA,EAEA,CAAA,GACA,AAEA,aAAY,CAAA,CAA6D,CACvE,KAAA,CAAM,EAEN,IAAA,CAAA,CAAA,CAAK,EAAuB,EAC5B,IAAA,CAAA,CAAA,CAAK,CAAkB,EAAO,cAAA,CAC9B,IAAA,CAAK,UAAA,CAAW,EAAO,OAAO,EAC9B,IAAA,CAAK,SAAA,CAAY,CAAC,CAAA,CAClB,IAAA,CAAA,CAAA,CAAK,CAAU,EAAO,MAAA,CACtB,IAAA,EAAK,CAAA,CAAS,IAAA,CAAA,CAAA,CAAK,CAAQ,aAAA,CAAc,EACzC,IAAA,CAAK,QAAA,CAAW,EAAO,QAAA,CACvB,IAAA,CAAK,SAAA,CAAY,EAAO,SAAA,CACxB,IAAA,CAAA,CAAA,AAAK,CAAA,CAAgB,AA8ezB,SAAS,AAMP,CAAA,EAC2B,AAC3B,IAAM,EAC2B,YAA/B,OAAO,EAAQ,WAAA,CACV,EAAQ,WAAA,CAA2C,EACpD,EAAQ,WAAA,CAER,EAAmB,KAAA,IAAT,EAEV,EAAuB,EACe,YAAxC,OAAO,EAAQ,oBAAA,CACZ,EAAQ,oBAAA,CAAkD,EAC3D,EAAQ,oBAAA,CACV,EAEJ,MAAO,CACL,OACA,gBAAiB,EACjB,cAAe,EAAW,GAAwB,KAAK,GAAA,CAAI,EAAK,EAChE,MAAO,KACP,iBAAkB,EAClB,eAAgB,EAChB,kBAAmB,EACnB,mBAAoB,KACpB,UAAW,KACX,eAAe,EACf,OAAQ,EAAU,UAAY,UAC9B,YAAa,MACf,CACF,EAjhByC,IAAA,CAAK,OAAO,EACjD,IAAA,CAAK,KAAA,CAAQ,EAAO,KAAA,EAAS,IAAA,EAAK,CAAA,CAClC,IAAA,CAAK,UAAA,CAAW,CAClB,CACA,IAAI,MAA8B,CAChC,OAAO,IAAA,CAAK,OAAA,CAAQ,IAAA,AACtB,CAEA,IAAI,SAAsC,CACxC,OAAO,IAAA,CAAA,CAAA,CAAK,EAAU,OACxB,CAEA,WACE,CAAA,CACM,CACN,IAAA,CAAK,OAAA,CAAU,CAAE,GAAG,IAAA,CAAA,CAAA,CAAK,CAAiB,GAAG,CAAA,AAAQ,EAErD,IAAA,CAAK,YAAA,CAAa,IAAA,CAAK,OAAA,CAAQ,MAAM,CACvC,CAEU,gBAAiB,CACrB,AAAC,IAAA,CAAK,SAAA,CAAU,MAAA,EAAqC,QAAQ,CAAnC,IAAA,CAAK,KAAA,CAAM,WAAA,EACvC,IAAA,CAAA,CAAA,AAAK,CAAA,CAAO,MAAA,CAAO,IAAI,CAE3B,CAEA,QACE,CAAA,CACA,CAAA,CACO,CACP,IAAM,EAAA,CAAA,EAAA,EAAO,WAAA,EAAY,IAAA,CAAK,KAAA,CAAM,IAAA,CAAM,EAAS,IAAA,CAAK,OAAO,EAU/D,OAPA,IAAA,CAAA,CAAA,CAAK,CAAU,MACb,EACA,KAAM,UACN,cAAe,GAAS,UACxB,OAAQ,GAAS,MACnB,CAAC,EAEM,CACT,CAEA,SACE,CAAA,CACA,CAAA,CACM,CACN,IAAA,CAAA,CAAA,CAAK,CAAU,CAAE,KAAM,iBAAY,kBAAO,CAAgB,CAAC,CAC7D,CAEA,OAAO,CAAA,CAAwC,CAC7C,IAAM,EAAU,IAAA,CAAA,CAAA,AAAK,CAAA,EAAU,QAE/B,OADA,IAAA,CAAA,CAAA,CAAK,EAAU,OAAO,GACf,EAAU,EADY,AACJ,IAAA,CAAA,EAAK,IAAI,EAAE,KAAA,CAAA,EAAM,IAAI,EAAI,QAAQ,OAAA,CAAQ,CACpE,CAEA,SAAgB,CACd,KAAA,CAAM,QAAQ,EAEd,IAAA,CAAK,MAAA,CAAO,CAAE,QAAQ,CAAK,CAAC,CAC9B,CAEA,OAAc,CACZ,IAAA,CAAK,OAAA,CAAQ,EACb,IAAA,CAAK,QAAA,CAAS,IAAA,CAAA,CAAA,CAAK,AAAa,CAClC,CAEA,UAAoB,CAClB,OAAO,IAAA,CAAK,SAAA,CAAU,IAAA,CACpB,AAAC,IAAgE,IAAnD,CAAA,EAAA,EAAA,cAAA,EAAe,EAAS,OAAA,CAAQ,OAAA,CAAS,IAAI,EAE/D,CAEA,YAAsB,QACpB,AAAI,IAAA,CAAK,iBAAA,CAAkB,EAAI,EACtB,CADyB,AACxB,IAAA,CAAK,QAAA,CAAS,EAItB,IAAA,CAAK,OAAA,CAAQ,OAAA,GAAA,EAAY,SAAA,EACzB,IAAA,CAAK,KAAA,CAAM,eAAA,CAAkB,IAAA,CAAK,KAAA,CAAM,gBAAA,GAAqB,CAEjE,CAEA,UAAoB,QAClB,AAAI,IAAA,CAAK,iBAAA,CAAkB,EAAI,GACtB,AADyB,IACzB,CAAK,SAAA,CAAU,IAAA,CACpB,AAAC,GACwD,AADxD,WAAA,CAAA,EAAA,EACC,gBAAA,EAAiB,EAAS,OAAA,CAAQ,SAAA,CAAW,IAAI,EAKzD,CAEA,SAAmB,QAGjB,AAAI,IAAA,CAAK,iBAAA,CAAkB,EAAI,EACtB,CADyB,GACzB,CAAK,SAAA,CAAU,IAAA,CACpB,AAAC,GAAa,EAAS,gBAAA,CAAiB,EAAE,OAAA,EAIvC,AAAoB,KAAA,QAApB,CAAK,KAAA,CAAM,IAAA,EAAsB,IAAA,CAAK,KAAA,CAAM,aAAA,AACrD,CAEA,cAAc,EAAuB,CAAA,CAAY,QAE/C,AAAwB,KAAA,GAAW,CAA/B,IAAA,CAAK,KAAA,CAAM,IAAA,EAIG,UAAU,CAAxB,MAIA,IAAA,CAAK,KAAA,CAAM,aAAA,EAAe,AAIvB,CAAA,CAAA,EAAA,EAAC,cAAA,EAAe,IAAA,CAAK,KAAA,CAAM,aAAA,CAAe,GACnD,CAEA,KAH4D,IAG5C,CACd,IAAM,EAAW,IAAA,CAAK,SAAA,CAAU,IAAA,CAAM,AAAD,GAAO,EAAE,wBAAA,CAAyB,CAAC,EAExE,GAAU,QAAQ,CAAE,eAAe,CAAM,CAAC,EAG1C,IAAA,CAAA,CAAA,CAAK,EAAU,SAAS,CAC1B,CAEA,UAAiB,CACf,IAAM,EAAW,IAAA,CAAK,SAAA,CAAU,IAAA,CAAK,AAAC,GAAM,EAAE,sBAAA,CAAuB,CAAC,EAEtE,GAAU,QAAQ,CAAE,eAAe,CAAM,CAAC,EAG1C,IAAA,CAAA,CAAA,CAAK,EAAU,SAAS,CAC1B,CAEA,YAAY,CAAA,CAAwD,CAC7D,IAAA,CAAK,SAAA,CAAU,QAAA,CAAS,KAC3B,GADmC,CACnC,CAAK,CADiC,QACjC,CAAU,IAAA,CAAK,GAGpB,IAAA,CAH4B,AAGvB,cAAA,CAAe,EAEpB,IAAA,CAAA,CAAA,CAAK,CAAO,MAAA,CAAO,CAAE,KAAM,gBAAiB,MAAO,IAAA,UAAM,CAAS,CAAC,EAEvE,CAEA,eAAe,CAAA,CAAwD,CACjE,IAAA,CAAK,SAAA,CAAU,QAAA,CAAS,KAC1B,GADkC,CAClC,CAAK,CADgC,QAChC,CAAY,IAAA,CAAK,SAAA,CAAU,MAAA,CAAO,AAAC,GAAM,IAAM,GAE/C,IAAA,CAFuD,AAElD,SAAA,CAAU,MAAA,EAAQ,CAGtB,IAAA,CAAA,CAAA,CAAK,EAAU,CACb,IAAA,CAAA,CAAA,CAAK,CACP,CAD6B,GAC7B,CAAA,CAAA,AAAK,CAAA,CAAS,MAAA,CAAO,CAAE,QAAQ,CAAK,CAAC,EAErC,IAAA,CAAA,CAAA,CAAK,CAAS,WAAA,CAAY,GAI9B,IAAA,CAAK,UAAA,CAAW,GAGlB,IAAA,CAAA,CAAA,CAAK,CAAO,MAAA,CAAO,CAAE,KAAM,kBAAmB,MAAO,IAAA,CAAM,UAAS,CAAC,EAEzE,CAEA,mBAA4B,CAC1B,OAAO,IAAA,CAAK,SAAA,CAAU,MAAA,AACxB,CAEA,YAAmB,CACb,AAAC,IAAA,CAAK,KAAA,CAAM,aAAA,EAAe,AAC7B,IAAA,CAAA,CAAA,CAAK,CAAU,CAAE,KAAM,YAAa,CAAC,CAEzC,CAEA,MACE,CAAA,CACA,CAAA,CACgB,CAChB,GAA+B,QAAQ,CAAnC,IAAA,CAAK,KAAA,CAAM,WAAA,EACb,GAAI,AAAoB,KAAA,QAApB,CAAK,KAAA,CAAM,IAAA,EAAsB,GAAc,cAEjD,CAFgE,GAEhE,CAAK,MAAA,CAAO,CAAE,QAAQ,CAAK,CAAC,OAC9B,GAAW,IAAA,CAAA,CAAA,CAAK,CAId,CAJwB,MAExB,IAAA,CAAA,CAAA,CAAK,CAAS,aAAA,CAAc,EAErB,IAAA,CAAA,CAAA,CAAK,CAAS,OAAA,AACvB,CAUF,GANI,GACF,IAAA,CAAK,CADM,SACN,CAAW,GAKd,CAAC,GALoB,CAKpB,CAAK,OAAA,CAAQ,OAAA,CAAS,CACzB,IAAM,EAAW,IAAA,CAAK,SAAA,CAAU,IAAA,CAAM,AAAD,GAAO,EAAE,OAAA,CAAQ,OAAO,EACzD,GACF,IAAA,CAAK,EADO,QACP,CAAW,EAAS,OAAO,CAEpC,CAUA,IAAM,EAAkB,IAAI,gBAAgB,AAKtC,EAAoB,AAAC,IACzB,OAD6C,AACtC,cAAA,CAAe,EAAQ,SAAU,CACtC,YAAY,EACZ,IAAK,KACH,CADS,GACT,CAAA,CAAA,CAAK,EAAuB,EACrB,EAAgB,MAAA,CAE3B,CAAC,CACH,EAGM,EAAU,KACd,CADoB,GACd,EAAA,CAAA,EAAA,EAAU,aAAA,EAAc,IAAA,CAAK,OAAA,CAAS,GAgBtC,EAAiB,CAbM,KAC3B,CAJsD,AAGY,GAC5DA,EAGF,CACF,OAAQ,CAQgC,GARhC,CAAA,CAAA,CAAK,CACb,SAAU,IAAA,CAAK,QAAA,CACf,KAAM,IAAA,CAAK,IACb,AADa,EAGb,OADA,EAAkBA,GACXA,EACT,UAFkC,AAOlC,CADA,IAAA,CAAA,CAAA,CAAK,EAAuB,EACxB,IAAA,CAAK,OAAA,CAAQ,SAAA,EAAW,AACnB,IAAA,CAAK,OAAA,CAAQ,SAAA,CAClB,EACA,EACA,IAAA,EAIG,EAAQ,EACjB,EAyBM,EAAU,CAtBW,KAMzB,CADG,CAT0B,EAUvBC,EAGF,OAa6B,OAZ/B,EACA,QAAS,IAAA,CAAK,OAAA,CACd,SAAU,IAAA,CAAK,QAAA,CACf,OAAQ,IAAA,CAAA,CAAA,CAAK,CACb,MAAO,IAAA,CAAK,KAAA,SACZ,CACF,EAGA,OADA,EAAkBA,GACXA,EACT,GAF2B,CAM3B,IAAA,CAAK,OAAA,CAAQ,QAAA,EAAU,QAAQ,EAAS,IAAwB,EAGhE,IAAA,CAAA,CAAA,CAAK,CAAe,IAAA,CAAK,KAAA,EAIvB,AAA2B,aAA3B,CAAK,KAAA,CAAM,WAAA,EACX,IAAA,CAAK,KAAA,CAAM,SAAA,GAAc,EAAQ,YAAA,EAAc,IAAA,GAC/C,AACA,IAAA,CAAA,CAAA,CAAK,CAAU,CAAE,KAAM,QAAS,KAAM,EAAQ,YAAA,EAAc,IAAK,CAAC,EAGpE,IAAM,EAAU,AAAC,IAEX,CAAA,EAAE,EAAA,CAFkD,eAElD,EAAiB,IAAU,CAAL,CAAW,MAAA,EACrC,CAD8C,GAC9C,CAAA,CAAA,CAAK,CAAU,CACb,KAAM,cACN,CACF,CAAC,EAGC,CAAA,EAAA,EAAC,gBAAA,EAAiB,KAAK,AAEzB,GAF4B,CAE5B,CAAA,CAAA,CAAK,CAAO,MAAA,CAAO,OAAA,GACjB,EACA,IAAA,EAEF,IAAA,CAAA,CAAA,CAAK,CAAO,MAAA,CAAO,SAAA,GACjB,IAAA,CAAK,KAAA,CAAM,IAAA,CACX,EACA,IAAA,GAKJ,IAAA,CAAK,UAAA,CAAW,CAClB,EAsDA,OAnDA,IAAA,CAAA,CAAA,CAAK,CAAA,CAAA,EAAA,EAAW,aAAA,EAAc,CAC5B,eAAgB,GAAc,eAG9B,GAAI,EAAQ,OAAA,CACZ,MAAO,EAAgB,KAAA,CAAM,IAAA,CAAK,GAClC,UAAW,AAAC,EADqC,EAE/C,GAAa,EADM,GACN,IAAT,EAAoB,YAMtB,EAAQ,AAAI,MAAM,CAAA,EAAG,IAAA,CAAK,SAAS,CAAA,kBAAA,CAAoB,CAAQ,EAIjE,GAAI,CACF,IAAA,CAAK,OAAA,CAAQ,EACf,CAAA,CADmB,KACV,EAAO,CACd,EAAQ,GACR,EADuB,IAEzB,CAGA,IAAA,CAAA,CAAA,CAAK,CAAO,MAAA,CAAO,SAAA,GAAY,EAAM,IAAiC,EACtE,IAAA,CAAA,CAAA,CAAK,CAAO,MAAA,CAAO,SAAA,GACjB,EACA,IAAA,CAAK,KAAA,CAAM,KAAA,CACX,IAAA,EAIF,IAAA,CAAK,UAAA,CAAW,CAClB,UACA,EACA,OAAQ,CAAC,EAAc,KACrB,IAAA,CAD+B,AAC/B,CAAA,CAAK,CAAU,CAAE,KAAM,sBAAU,QAAc,CAAM,CAAC,CACxD,EACA,QAAS,KACP,CADa,GACb,CAAA,CAAA,CAAK,CAAU,CAAE,KAAM,OAAQ,CAAC,CAClC,EACA,WAAY,KACV,CADgB,GAChB,CAAA,CAAA,CAAK,CAAU,CAAE,KAAM,UAAW,CAAC,CACrC,EACA,MAAO,EAAQ,OAAA,CAAQ,KAAA,CACvB,WAAY,EAAQ,OAAA,CAAQ,UAAA,CAC5B,YAAa,EAAQ,OAAA,CAAQ,WAAA,CAC7B,OAAQ,KAAM,CAChB,CAAC,EAEM,IAAA,CAAA,CAAA,CAAK,CAAS,KAAA,CAAM,CAC7B,GAEA,CAAU,CAAA,EAwER,AAxE6C,IAwE7C,CAAK,KAAA,CAAQ,CAvEG,AACd,IAEA,MAD8B,CACtB,EAAO,IAAA,EACb,AADmB,IACd,SACH,MAAO,CACL,GAAG,CAAA,CACH,kBAAmB,EAAO,YAAA,CAC1B,mBAAoB,EAAO,KAAA,AAC7B,CACF,KAAK,QACH,MAAO,CACL,GAAG,CAAA,CACH,YAAa,QACf,CACF,KAAK,WACH,MAAO,CACL,GAAG,CAAA,CACH,YAAa,UACf,CACF,KAAK,QACH,MAAO,CACL,GAAG,CAAA,CACH,GAAG,EAAW,EAAM,IAAA,CAAM,IAAA,CAAK,OAAO,CAAA,CACtC,UAAW,EAAO,IAAA,EAAQ,IAC5B,CACF,KAAK,UACH,MAAO,CACL,GAAG,CAAA,CACH,KAAM,EAAO,IAAA,CACb,gBAAiB,EAAM,eAAA,CAAkB,EACzC,cAAe,EAAO,aAAA,EAAiB,KAAK,GAAA,CAAI,EAChD,MAAO,KACP,eAAe,EACf,OAAQ,UACR,GAAI,CAAC,EAAO,MAAA,EAAU,CACpB,YAAa,OACb,kBAAmB,EACnB,mBAAoB,IACtB,CAAA,AACF,CACF,KAAK,QACH,IAAM,EAAQ,EAAO,KAAA,CAErB,GAAA,CAAA,EAAA,EAAI,gBAAA,EAAiB,IAAU,CAAL,CAAW,MAAA,EAAU,IAAA,EAAK,CAAA,CAClD,CADgE,KACzD,CAAE,GAAG,IAAA,CAAA,CAAA,CAAK,CAAc,YAAa,MAAO,EAGrD,MAAO,CACL,GAAG,CAAA,OACH,EACA,iBAAkB,EAAM,gBAAA,CAAmB,EAC3C,eAAgB,KAAK,GAAA,CAAI,EACzB,kBAAmB,EAAM,iBAAA,CAAoB,EAC7C,mBAAoB,EACpB,YAAa,OACb,OAAQ,OACV,CACF,KAAK,aACH,MAAO,CACL,GAAG,CAAA,CACH,eAAe,CACjB,CACF,KAAK,WACH,MAAO,CACL,GAAG,CAAA,CACH,GAAG,EAAO,KAAA,AACZ,CACJ,CACF,GAEqB,IAAA,CAAK,KAAK,EAE/B,EAAA,aAAA,CAAc,KAAA,CAAM,KAClB,CADwB,GACxB,CAAK,OADP,EACO,CAAU,OAAA,CAAQ,AAAC,IACtB,EAAS,OAD0B,MAC1B,CAAc,CACzB,CAAC,EAED,IAAA,CAAA,CAAA,CAAK,CAAO,MAAA,CAAO,CAAE,MAAO,IAAA,CAAM,KAAM,iBAAW,CAAO,CAAC,CAC7D,CAAC,CACH,CACF,EAEO,SAAS,EAMd,CAAA,CACA,CAAA,EACA,AACA,MAAO,CACL,kBAAmB,EACnB,mBAAoB,KACpB,YAAA,CAAA,EAAA,EAAa,QAAA,EAAS,EAAQ,WAAW,EAAI,WAAa,SAC1D,GAAa,KAAA,IAAT,GACD,CACC,MAAO,KACP,OAAQ,SACV,CAAA,AACJ,CACF,8FCzqBA,IAAA,EAA8B,EAAA,CAArB,AAAqB,CAAA,QAC9B,EAA0B,EAAA,CAAjB,AAAiB,CAAA,MADI,EAE9B,EAA8B,EAAA,CAAA,AAArB,CAAqB,EADJ,MA+Eb,EAAN,UA9EuB,IA8EvB,EAKG,SAAA,CAAU,EAKlB,GACA,GACA,AAEA,aAAY,CAAA,CAA6D,CACvE,KAAA,CAAM,EAEN,IAAA,CAAK,UAAA,CAAa,EAAO,UAAA,CACzB,IAAA,CAAA,CAAA,CAAK,CAAiB,EAAO,aAAA,CAC7B,IAAA,EAAK,CAAA,CAAa,CAAC,CAAA,CACnB,IAAA,CAAK,KAAA,CAAQ,EAAO,KAAA,EAAS,IAE7B,IAAA,CAAK,OAFwC,GAExC,CAAW,EAAO,OAAO,EAC9B,IAAA,CAAK,UAAA,CAAW,CAClB,CAEA,WACE,CAAA,CACM,CACN,IAAA,CAAK,OAAA,CAAU,EAEf,IAAA,CAAK,YAAA,CAAa,IAAA,CAAK,OAAA,CAAQ,MAAM,CACvC,CAEA,IAAI,MAAiC,CACnC,OAAO,IAAA,CAAK,OAAA,CAAQ,IAAA,AACtB,CAEA,YAAY,CAAA,CAAsD,CAC3D,IAAA,CAAA,CAAA,AAAK,CAAA,CAAW,QAAA,CAAS,KAC5B,GADoC,CACpC,CAAA,CADuC,AACvC,CAAK,CAAW,IAAA,CAAK,GAGrB,IAAA,CAH6B,AAGxB,cAAA,CAAe,EAEpB,IAAA,CAAA,CAAA,CAAK,CAAe,MAAA,CAAO,CACzB,KAAM,gBACN,SAAU,IAAA,UACV,CACF,CAAC,EAEL,CAEA,eAAe,CAAA,CAAsD,CACnE,IAAA,CAAK,EAAA,CAAa,IAAA,CAAA,CAAA,CAAK,CAAW,MAAA,CAAQ,AAAD,GAAO,IAAM,GAEtD,IAAA,CAF8D,AAEzD,UAAA,CAAW,EAEhB,IAAA,CAAA,CAAA,CAAK,CAAe,MAAA,CAAO,CACzB,KAAM,kBACN,SAAU,IAAA,UACV,CACF,CAAC,CACH,CAEU,gBAAiB,CACpB,IAAA,EAAK,CAAA,CAAW,MAAA,EAAQ,CACD,WAAW,CAAjC,IAAA,CAAK,KAAA,CAAM,MAAA,CACb,IAAA,CAAK,UAAA,CAAW,EAEhB,IAAA,EAAK,CAAA,CAAe,MAAA,CAAO,IAAI,EAGrC,CAEA,UAA6B,CAC3B,OACE,IAAA,CAAA,CAAA,AAAK,CAAA,EAAU,SAAS,GAExB,EAFwB,EAExB,CAAK,OAAA,CAAQ,IAAA,CAAK,KAAA,CAAM,SAAU,CAEtC,CAEA,MAAM,QAAQ,CAAA,CAAuC,CACnD,IAAM,EAAa,KACjB,CADuB,GACvB,CAAA,CAAA,CAAK,CAAU,CAAE,KAAM,UAAW,CAAC,CACrC,EAEA,IAAA,CAAA,CAAA,CAAK,CAAA,CAAW,AAXU,EAWV,EAAA,aAAA,EAAc,CAC5B,GAAI,IACF,AAAK,EADG,EACJ,AAAC,CAAK,OAAA,CAAQ,UAAA,CAGX,CAHuB,GAGvB,CAAK,OAAA,CAAQ,UAAA,CAAW,GAFtB,MAE+B,EAFvB,MAAA,CAAO,AAAI,MAAM,qBAAqB,CAAC,EAI1D,OAAQ,CAAC,EAAc,KACrB,IAAA,CAD+B,AAC/B,CAAA,CAAK,CAAU,CAAE,KAAM,sBAAU,QAAc,CAAM,CAAC,CACxD,EACA,QAAS,KACP,CADa,GACb,CAAA,CAAA,CAAK,CAAU,CAAE,KAAM,OAAQ,CAAC,CAClC,aACA,EACA,MAAO,IAAA,CAAK,OAAA,CAAQ,KAAA,EAAS,EAC7B,WAAY,IAAA,CAAK,OAAA,CAAQ,UAAA,CACzB,YAAa,IAAA,CAAK,OAAA,CAAQ,WAAA,CAC1B,OAAQ,IAAM,IAAA,CAAA,CAAA,CAAK,CAAe,MAAA,CAAO,IAAI,CAC/C,CAAC,EAED,IAAM,EAAiC,YAAtB,IAAA,CAAK,KAAA,CAAM,MAAA,CACtB,EAAW,CAAC,IAAA,CAAA,CAAA,CAAK,CAAS,QAAA,CAAS,EAEzC,GAAI,CACF,GAAI,EAEF,QAFY,AAGP,CACL,EAFW,EAEX,CAAA,CAAA,CAAK,CAAU,CAAE,KAAM,oBAAW,WAAW,CAAS,CAAC,EAEvD,MAAM,IAAA,CAAA,CAAA,CAAK,CAAe,MAAA,CAAO,QAAA,GAC/B,EACA,IAAA,EAEF,IAAM,EAAU,MAAM,IAAA,CAAK,OAAA,CAAQ,QAAA,GAAW,GAC1C,IAAY,EADuC,EACvC,CAAK,KAAA,CAAM,OAAA,EAAS,AAClC,IAAA,CAAA,CAAA,CAAK,CAAU,CACb,KAAM,UACN,oBACA,WACA,CACF,CAAC,CAEL,CACA,IAAM,EAAO,MAAM,IAAA,CAAA,CAAA,CAAK,CAAS,KAAA,CAAM,EAwBvC,OArBA,MAAM,IAAA,CAAA,CAAA,CAAK,CAAe,MAAA,CAAO,SAAA,GAC/B,EACA,EACA,IAAA,CAAK,KAAA,CAAM,OAAA,CACX,IAAA,EAGF,MAAM,IAAA,CAAK,OAAA,CAAQ,SAAA,GAAY,EAAM,EAAW,IAAA,CAAK,KAAA,CAAM,OAAQ,EAGnE,MAAM,IAAA,CAAA,CAAA,CAAK,CAAe,MAAA,CAAO,SAAA,GAC/B,EACA,KACA,IAAA,CAAK,KAAA,CAAM,SAAA,CACX,IAAA,CAAK,KAAA,CAAM,OAAA,CACX,IAAA,EAGF,MAAM,IAAA,CAAK,OAAA,CAAQ,SAAA,GAAY,EAAM,KAAM,EAAW,IAAA,CAAK,KAAA,CAAM,OAAO,EAExE,IAAA,CAAA,CAAA,CAAK,CAAU,CAAE,KAAM,UAAW,MAAK,CAAC,EACjC,CACT,CAAA,MAAS,EAAO,CACd,GAAI,CA8BF,MA5BA,MAAM,IAAA,EAAK,CAAA,CAAe,MAAA,CAAO,OAAA,GAC/B,EACA,EACA,IAAA,CAAK,KAAA,CAAM,OAAA,CACX,IAAA,EAGF,MAAM,IAAA,CAAK,OAAA,CAAQ,OAAA,GACjB,EACA,EACA,IAAA,CAAK,KAAA,CAAM,OAAA,EAIb,MAAM,IAAA,CAAA,CAAA,CAAK,CAAe,MAAA,CAAO,SAAA,GAC/B,KAAA,EACA,EACA,IAAA,CAAK,KAAA,CAAM,SAAA,CACX,IAAA,CAAK,KAAA,CAAM,OAAA,CACX,IAAA,EAGF,MAAM,IAAA,CAAK,OAAA,CAAQ,SAAA,GACjB,KAAA,EACA,EACA,EACA,IAAA,CAAK,KAAA,CAAM,OAAA,EAEP,CACR,QAAE,CACA,IAAA,CAAA,CAAA,CAAK,CAAU,CAAE,KAAM,cAAS,CAAuB,CAAC,CAC1D,CACF,QAAE,CACA,IAAA,CAAA,CAAA,CAAK,CAAe,OAAA,CAAQ,IAAI,CAClC,CACF,EAEA,CAAA,CAAU,CAAA,EAA2D,AAwDnE,IAAA,CAAK,KAAA,CAAQ,CAvDG,AACd,IAEA,MADuD,CAC/C,EAAO,IAAA,EACb,AADmB,IACd,SACH,MAAO,CACL,GAAG,CAAA,CACH,aAAc,EAAO,YAAA,CACrB,cAAe,EAAO,KACxB,AADwB,CAE1B,KAAK,QACH,MAAO,CACL,GAAG,CAAA,CACH,UAAU,CACZ,CACF,KAAK,WACH,MAAO,CACL,GAAG,CAAA,CACH,UAAU,CACZ,CACF,KAAK,UACH,MAAO,CACL,GAAG,CAAA,CACH,QAAS,EAAO,OAAA,CAChB,KAAM,KAAA,EACN,aAAc,EACd,cAAe,KACf,MAAO,KACP,SAAU,EAAO,QAAA,CACjB,OAAQ,UACR,UAAW,EAAO,SAAA,CAClB,YAAa,KAAK,GAAA,CAAI,CACxB,CACF,KAAK,UACH,MAAO,CACL,GAAG,CAAA,CACH,KAAM,EAAO,IAAA,CACb,aAAc,EACd,cAAe,KACf,MAAO,KACP,OAAQ,UACR,UAAU,CACZ,CACF,KAAK,QACH,MAAO,CACL,GAAG,CAAA,CACH,KAAM,KAAA,EACN,MAAO,EAAO,KAAA,CACd,aAAc,EAAM,YAAA,CAAe,EACnC,cAAe,EAAO,KAAA,CACtB,UAAU,EACV,OAAQ,OACV,CACJ,EACF,EACqB,IAAA,CAAK,KAAK,EAE/B,EAAA,aAAA,CAAc,KAAA,CAAM,KAClB,CADwB,GACxB,CAAA,CAAA,CAAK,CAAW,IADlB,GACkB,CAAQ,AAAC,IACvB,EAAS,OAD2B,SAC3B,CAAiB,EAC5B,CAAC,EACD,CAFkC,GAElC,CAAA,CAAA,CAAK,CAAe,MAAA,CAAO,CACzB,SAAU,IAAA,CACV,KAAM,iBACN,CACF,CAAC,CACH,CAAC,CACH,CACF,EAEO,SAAS,IAMd,MAAO,CACL,OAFoD,CAE3C,KAAA,EACT,KAAM,KAAA,EACN,MAAO,KACP,aAAc,EACd,cAAe,KACf,UAAU,EACV,OAAQ,OACR,UAAW,KAAA,EACX,YAAa,CACf,CACF","ignoreList":[0,1,2,3,4,5,6,7,8,9,10]}