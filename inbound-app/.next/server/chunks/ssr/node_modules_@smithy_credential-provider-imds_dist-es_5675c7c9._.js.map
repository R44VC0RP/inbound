{"version":3,"sources":["turbopack:///[project]/node_modules/@smithy/credential-provider-imds/dist-es/remoteProvider/httpRequest.js","turbopack:///[project]/node_modules/@smithy/credential-provider-imds/dist-es/remoteProvider/ImdsCredentials.js","turbopack:///[project]/node_modules/@smithy/credential-provider-imds/dist-es/remoteProvider/RemoteProviderInit.js","turbopack:///[project]/node_modules/@smithy/credential-provider-imds/dist-es/remoteProvider/retry.js","turbopack:///[project]/node_modules/@smithy/credential-provider-imds/dist-es/fromContainerMetadata.js","turbopack:///[project]/node_modules/@smithy/credential-provider-imds/dist-es/error/InstanceMetadataV1FallbackError.js","turbopack:///[project]/node_modules/@smithy/credential-provider-imds/dist-es/config/Endpoint.js","turbopack:///[project]/node_modules/@smithy/credential-provider-imds/dist-es/config/EndpointConfigOptions.js","turbopack:///[project]/node_modules/@smithy/credential-provider-imds/dist-es/config/EndpointMode.js","turbopack:///[project]/node_modules/@smithy/credential-provider-imds/dist-es/config/EndpointModeConfigOptions.js","turbopack:///[project]/node_modules/@smithy/credential-provider-imds/dist-es/utils/getInstanceMetadataEndpoint.js","turbopack:///[project]/node_modules/@smithy/credential-provider-imds/dist-es/utils/getExtendedInstanceMetadataCredentials.js","turbopack:///[project]/node_modules/@smithy/credential-provider-imds/dist-es/utils/staticStabilityProvider.js","turbopack:///[project]/node_modules/@smithy/credential-provider-imds/dist-es/fromInstanceMetadata.js","turbopack:///[project]/node_modules/@smithy/credential-provider-imds/dist-es/index.js"],"sourcesContent":["import { ProviderError } from \"@smithy/property-provider\";\nimport { Buffer } from \"buffer\";\nimport { request } from \"http\";\nexport function httpRequest(options) {\n    return new Promise((resolve, reject) => {\n        const req = request({\n            method: \"GET\",\n            ...options,\n            hostname: options.hostname?.replace(/^\\[(.+)\\]$/, \"$1\"),\n        });\n        req.on(\"error\", (err) => {\n            reject(Object.assign(new ProviderError(\"Unable to connect to instance metadata service\"), err));\n            req.destroy();\n        });\n        req.on(\"timeout\", () => {\n            reject(new ProviderError(\"TimeoutError from instance metadata service\"));\n            req.destroy();\n        });\n        req.on(\"response\", (res) => {\n            const { statusCode = 400 } = res;\n            if (statusCode < 200 || 300 <= statusCode) {\n                reject(Object.assign(new ProviderError(\"Error response received from instance metadata service\"), { statusCode }));\n                req.destroy();\n            }\n            const chunks = [];\n            res.on(\"data\", (chunk) => {\n                chunks.push(chunk);\n            });\n            res.on(\"end\", () => {\n                resolve(Buffer.concat(chunks));\n                req.destroy();\n            });\n        });\n        req.end();\n    });\n}\n","export const isImdsCredentials = (arg) => Boolean(arg) &&\n    typeof arg === \"object\" &&\n    typeof arg.AccessKeyId === \"string\" &&\n    typeof arg.SecretAccessKey === \"string\" &&\n    typeof arg.Token === \"string\" &&\n    typeof arg.Expiration === \"string\";\nexport const fromImdsCredentials = (creds) => ({\n    accessKeyId: creds.AccessKeyId,\n    secretAccessKey: creds.SecretAccessKey,\n    sessionToken: creds.Token,\n    expiration: new Date(creds.Expiration),\n    ...(creds.AccountId && { accountId: creds.AccountId }),\n});\n","export const DEFAULT_TIMEOUT = 1000;\nexport const DEFAULT_MAX_RETRIES = 0;\nexport const providerConfigFromInit = ({ maxRetries = DEFAULT_MAX_RETRIES, timeout = DEFAULT_TIMEOUT, }) => ({ maxRetries, timeout });\n","export const retry = (toRetry, maxRetries) => {\n    let promise = toRetry();\n    for (let i = 0; i < maxRetries; i++) {\n        promise = promise.catch(toRetry);\n    }\n    return promise;\n};\n","import { CredentialsProviderError } from \"@smithy/property-provider\";\nimport { parse } from \"url\";\nimport { httpRequest } from \"./remoteProvider/httpRequest\";\nimport { fromImdsCredentials, isImdsCredentials } from \"./remoteProvider/ImdsCredentials\";\nimport { providerConfigFromInit } from \"./remoteProvider/RemoteProviderInit\";\nimport { retry } from \"./remoteProvider/retry\";\nexport const ENV_CMDS_FULL_URI = \"AWS_CONTAINER_CREDENTIALS_FULL_URI\";\nexport const ENV_CMDS_RELATIVE_URI = \"AWS_CONTAINER_CREDENTIALS_RELATIVE_URI\";\nexport const ENV_CMDS_AUTH_TOKEN = \"AWS_CONTAINER_AUTHORIZATION_TOKEN\";\nexport const fromContainerMetadata = (init = {}) => {\n    const { timeout, maxRetries } = providerConfigFromInit(init);\n    return () => retry(async () => {\n        const requestOptions = await getCmdsUri({ logger: init.logger });\n        const credsResponse = JSON.parse(await requestFromEcsImds(timeout, requestOptions));\n        if (!isImdsCredentials(credsResponse)) {\n            throw new CredentialsProviderError(\"Invalid response received from instance metadata service.\", {\n                logger: init.logger,\n            });\n        }\n        return fromImdsCredentials(credsResponse);\n    }, maxRetries);\n};\nconst requestFromEcsImds = async (timeout, options) => {\n    if (process.env[ENV_CMDS_AUTH_TOKEN]) {\n        options.headers = {\n            ...options.headers,\n            Authorization: process.env[ENV_CMDS_AUTH_TOKEN],\n        };\n    }\n    const buffer = await httpRequest({\n        ...options,\n        timeout,\n    });\n    return buffer.toString();\n};\nconst CMDS_IP = \"169.254.170.2\";\nconst GREENGRASS_HOSTS = {\n    localhost: true,\n    \"127.0.0.1\": true,\n};\nconst GREENGRASS_PROTOCOLS = {\n    \"http:\": true,\n    \"https:\": true,\n};\nconst getCmdsUri = async ({ logger }) => {\n    if (process.env[ENV_CMDS_RELATIVE_URI]) {\n        return {\n            hostname: CMDS_IP,\n            path: process.env[ENV_CMDS_RELATIVE_URI],\n        };\n    }\n    if (process.env[ENV_CMDS_FULL_URI]) {\n        const parsed = parse(process.env[ENV_CMDS_FULL_URI]);\n        if (!parsed.hostname || !(parsed.hostname in GREENGRASS_HOSTS)) {\n            throw new CredentialsProviderError(`${parsed.hostname} is not a valid container metadata service hostname`, {\n                tryNextLink: false,\n                logger,\n            });\n        }\n        if (!parsed.protocol || !(parsed.protocol in GREENGRASS_PROTOCOLS)) {\n            throw new CredentialsProviderError(`${parsed.protocol} is not a valid container metadata service protocol`, {\n                tryNextLink: false,\n                logger,\n            });\n        }\n        return {\n            ...parsed,\n            port: parsed.port ? parseInt(parsed.port, 10) : undefined,\n        };\n    }\n    throw new CredentialsProviderError(\"The container metadata credential provider cannot be used unless\" +\n        ` the ${ENV_CMDS_RELATIVE_URI} or ${ENV_CMDS_FULL_URI} environment` +\n        \" variable is set\", {\n        tryNextLink: false,\n        logger,\n    });\n};\n","import { CredentialsProviderError } from \"@smithy/property-provider\";\nexport class InstanceMetadataV1FallbackError extends CredentialsProviderError {\n    constructor(message, tryNextLink = true) {\n        super(message, tryNextLink);\n        this.tryNextLink = tryNextLink;\n        this.name = \"InstanceMetadataV1FallbackError\";\n        Object.setPrototypeOf(this, InstanceMetadataV1FallbackError.prototype);\n    }\n}\n","export var Endpoint;\n(function (Endpoint) {\n    Endpoint[\"IPv4\"] = \"http://169.254.169.254\";\n    Endpoint[\"IPv6\"] = \"http://[fd00:ec2::254]\";\n})(Endpoint || (Endpoint = {}));\n","export const ENV_ENDPOINT_NAME = \"AWS_EC2_METADATA_SERVICE_ENDPOINT\";\nexport const CONFIG_ENDPOINT_NAME = \"ec2_metadata_service_endpoint\";\nexport const ENDPOINT_CONFIG_OPTIONS = {\n    environmentVariableSelector: (env) => env[ENV_ENDPOINT_NAME],\n    configFileSelector: (profile) => profile[CONFIG_ENDPOINT_NAME],\n    default: undefined,\n};\n","export var EndpointMode;\n(function (EndpointMode) {\n    EndpointMode[\"IPv4\"] = \"IPv4\";\n    EndpointMode[\"IPv6\"] = \"IPv6\";\n})(EndpointMode || (EndpointMode = {}));\n","import { EndpointMode } from \"./EndpointMode\";\nexport const ENV_ENDPOINT_MODE_NAME = \"AWS_EC2_METADATA_SERVICE_ENDPOINT_MODE\";\nexport const CONFIG_ENDPOINT_MODE_NAME = \"ec2_metadata_service_endpoint_mode\";\nexport const ENDPOINT_MODE_CONFIG_OPTIONS = {\n    environmentVariableSelector: (env) => env[ENV_ENDPOINT_MODE_NAME],\n    configFileSelector: (profile) => profile[CONFIG_ENDPOINT_MODE_NAME],\n    default: EndpointMode.IPv4,\n};\n","import { loadConfig } from \"@smithy/node-config-provider\";\nimport { parseUrl } from \"@smithy/url-parser\";\nimport { Endpoint as InstanceMetadataEndpoint } from \"../config/Endpoint\";\nimport { ENDPOINT_CONFIG_OPTIONS } from \"../config/EndpointConfigOptions\";\nimport { EndpointMode } from \"../config/EndpointMode\";\nimport { ENDPOINT_MODE_CONFIG_OPTIONS, } from \"../config/EndpointModeConfigOptions\";\nexport const getInstanceMetadataEndpoint = async () => parseUrl((await getFromEndpointConfig()) || (await getFromEndpointModeConfig()));\nconst getFromEndpointConfig = async () => loadConfig(ENDPOINT_CONFIG_OPTIONS)();\nconst getFromEndpointModeConfig = async () => {\n    const endpointMode = await loadConfig(ENDPOINT_MODE_CONFIG_OPTIONS)();\n    switch (endpointMode) {\n        case EndpointMode.IPv4:\n            return InstanceMetadataEndpoint.IPv4;\n        case EndpointMode.IPv6:\n            return InstanceMetadataEndpoint.IPv6;\n        default:\n            throw new Error(`Unsupported endpoint mode: ${endpointMode}.` + ` Select from ${Object.values(EndpointMode)}`);\n    }\n};\n","const STATIC_STABILITY_REFRESH_INTERVAL_SECONDS = 5 * 60;\nconst STATIC_STABILITY_REFRESH_INTERVAL_JITTER_WINDOW_SECONDS = 5 * 60;\nconst STATIC_STABILITY_DOC_URL = \"https://docs.aws.amazon.com/sdkref/latest/guide/feature-static-credentials.html\";\nexport const getExtendedInstanceMetadataCredentials = (credentials, logger) => {\n    const refreshInterval = STATIC_STABILITY_REFRESH_INTERVAL_SECONDS +\n        Math.floor(Math.random() * STATIC_STABILITY_REFRESH_INTERVAL_JITTER_WINDOW_SECONDS);\n    const newExpiration = new Date(Date.now() + refreshInterval * 1000);\n    logger.warn(\"Attempting credential expiration extension due to a credential service availability issue. A refresh of these \" +\n        `credentials will be attempted after ${new Date(newExpiration)}.\\nFor more information, please visit: ` +\n        STATIC_STABILITY_DOC_URL);\n    const originalExpiration = credentials.originalExpiration ?? credentials.expiration;\n    return {\n        ...credentials,\n        ...(originalExpiration ? { originalExpiration } : {}),\n        expiration: newExpiration,\n    };\n};\n","import { getExtendedInstanceMetadataCredentials } from \"./getExtendedInstanceMetadataCredentials\";\nexport const staticStabilityProvider = (provider, options = {}) => {\n    const logger = options?.logger || console;\n    let pastCredentials;\n    return async () => {\n        let credentials;\n        try {\n            credentials = await provider();\n            if (credentials.expiration && credentials.expiration.getTime() < Date.now()) {\n                credentials = getExtendedInstanceMetadataCredentials(credentials, logger);\n            }\n        }\n        catch (e) {\n            if (pastCredentials) {\n                logger.warn(\"Credential renew failed: \", e);\n                credentials = getExtendedInstanceMetadataCredentials(pastCredentials, logger);\n            }\n            else {\n                throw e;\n            }\n        }\n        pastCredentials = credentials;\n        return credentials;\n    };\n};\n","import { loadConfig } from \"@smithy/node-config-provider\";\nimport { CredentialsProviderError } from \"@smithy/property-provider\";\nimport { InstanceMetadataV1FallbackError } from \"./error/InstanceMetadataV1FallbackError\";\nimport { httpRequest } from \"./remoteProvider/httpRequest\";\nimport { fromImdsCredentials, isImdsCredentials } from \"./remoteProvider/ImdsCredentials\";\nimport { providerConfigFromInit } from \"./remoteProvider/RemoteProviderInit\";\nimport { retry } from \"./remoteProvider/retry\";\nimport { getInstanceMetadataEndpoint } from \"./utils/getInstanceMetadataEndpoint\";\nimport { staticStabilityProvider } from \"./utils/staticStabilityProvider\";\nconst IMDS_PATH = \"/latest/meta-data/iam/security-credentials/\";\nconst IMDS_TOKEN_PATH = \"/latest/api/token\";\nconst AWS_EC2_METADATA_V1_DISABLED = \"AWS_EC2_METADATA_V1_DISABLED\";\nconst PROFILE_AWS_EC2_METADATA_V1_DISABLED = \"ec2_metadata_v1_disabled\";\nconst X_AWS_EC2_METADATA_TOKEN = \"x-aws-ec2-metadata-token\";\nexport const fromInstanceMetadata = (init = {}) => staticStabilityProvider(getInstanceMetadataProvider(init), { logger: init.logger });\nconst getInstanceMetadataProvider = (init = {}) => {\n    let disableFetchToken = false;\n    const { logger, profile } = init;\n    const { timeout, maxRetries } = providerConfigFromInit(init);\n    const getCredentials = async (maxRetries, options) => {\n        const isImdsV1Fallback = disableFetchToken || options.headers?.[X_AWS_EC2_METADATA_TOKEN] == null;\n        if (isImdsV1Fallback) {\n            let fallbackBlockedFromProfile = false;\n            let fallbackBlockedFromProcessEnv = false;\n            const configValue = await loadConfig({\n                environmentVariableSelector: (env) => {\n                    const envValue = env[AWS_EC2_METADATA_V1_DISABLED];\n                    fallbackBlockedFromProcessEnv = !!envValue && envValue !== \"false\";\n                    if (envValue === undefined) {\n                        throw new CredentialsProviderError(`${AWS_EC2_METADATA_V1_DISABLED} not set in env, checking config file next.`, { logger: init.logger });\n                    }\n                    return fallbackBlockedFromProcessEnv;\n                },\n                configFileSelector: (profile) => {\n                    const profileValue = profile[PROFILE_AWS_EC2_METADATA_V1_DISABLED];\n                    fallbackBlockedFromProfile = !!profileValue && profileValue !== \"false\";\n                    return fallbackBlockedFromProfile;\n                },\n                default: false,\n            }, {\n                profile,\n            })();\n            if (init.ec2MetadataV1Disabled || configValue) {\n                const causes = [];\n                if (init.ec2MetadataV1Disabled)\n                    causes.push(\"credential provider initialization (runtime option ec2MetadataV1Disabled)\");\n                if (fallbackBlockedFromProfile)\n                    causes.push(`config file profile (${PROFILE_AWS_EC2_METADATA_V1_DISABLED})`);\n                if (fallbackBlockedFromProcessEnv)\n                    causes.push(`process environment variable (${AWS_EC2_METADATA_V1_DISABLED})`);\n                throw new InstanceMetadataV1FallbackError(`AWS EC2 Metadata v1 fallback has been blocked by AWS SDK configuration in the following: [${causes.join(\", \")}].`);\n            }\n        }\n        const imdsProfile = (await retry(async () => {\n            let profile;\n            try {\n                profile = await getProfile(options);\n            }\n            catch (err) {\n                if (err.statusCode === 401) {\n                    disableFetchToken = false;\n                }\n                throw err;\n            }\n            return profile;\n        }, maxRetries)).trim();\n        return retry(async () => {\n            let creds;\n            try {\n                creds = await getCredentialsFromProfile(imdsProfile, options, init);\n            }\n            catch (err) {\n                if (err.statusCode === 401) {\n                    disableFetchToken = false;\n                }\n                throw err;\n            }\n            return creds;\n        }, maxRetries);\n    };\n    return async () => {\n        const endpoint = await getInstanceMetadataEndpoint();\n        if (disableFetchToken) {\n            logger?.debug(\"AWS SDK Instance Metadata\", \"using v1 fallback (no token fetch)\");\n            return getCredentials(maxRetries, { ...endpoint, timeout });\n        }\n        else {\n            let token;\n            try {\n                token = (await getMetadataToken({ ...endpoint, timeout })).toString();\n            }\n            catch (error) {\n                if (error?.statusCode === 400) {\n                    throw Object.assign(error, {\n                        message: \"EC2 Metadata token request returned error\",\n                    });\n                }\n                else if (error.message === \"TimeoutError\" || [403, 404, 405].includes(error.statusCode)) {\n                    disableFetchToken = true;\n                }\n                logger?.debug(\"AWS SDK Instance Metadata\", \"using v1 fallback (initial)\");\n                return getCredentials(maxRetries, { ...endpoint, timeout });\n            }\n            return getCredentials(maxRetries, {\n                ...endpoint,\n                headers: {\n                    [X_AWS_EC2_METADATA_TOKEN]: token,\n                },\n                timeout,\n            });\n        }\n    };\n};\nconst getMetadataToken = async (options) => httpRequest({\n    ...options,\n    path: IMDS_TOKEN_PATH,\n    method: \"PUT\",\n    headers: {\n        \"x-aws-ec2-metadata-token-ttl-seconds\": \"21600\",\n    },\n});\nconst getProfile = async (options) => (await httpRequest({ ...options, path: IMDS_PATH })).toString();\nconst getCredentialsFromProfile = async (profile, options, init) => {\n    const credentialsResponse = JSON.parse((await httpRequest({\n        ...options,\n        path: IMDS_PATH + profile,\n    })).toString());\n    if (!isImdsCredentials(credentialsResponse)) {\n        throw new CredentialsProviderError(\"Invalid response received from instance metadata service.\", {\n            logger: init.logger,\n        });\n    }\n    return fromImdsCredentials(credentialsResponse);\n};\n","export * from \"./fromContainerMetadata\";\nexport * from \"./fromInstanceMetadata\";\nexport * from \"./remoteProvider/RemoteProviderInit\";\nexport * from \"./types\";\nexport { httpRequest } from \"./remoteProvider/httpRequest\";\nexport { getInstanceMetadataEndpoint } from \"./utils/getInstanceMetadataEndpoint\";\nexport { Endpoint } from \"./config/Endpoint\";\n"],"names":[],"mappings":"wFAAA,EAAA,CAAA,CAAA,QAAA,IAAA,EAAA,EAAA,CAAA,CAAA,QACA,EAAA,EAAA,CAAA,CAAA,QACA,EAAA,EAAA,CAAA,CAAA,OACO,SAAS,EAAY,CAAO,EAC/B,OAAO,IAAI,QAAQ,CAAC,EAAS,KACzB,IAAM,EAAM,CAAA,EAAA,EAAA,OAAA,AAAM,EAAE,CAChB,OAAQ,MACR,GAAG,CAAO,CACV,QAHQ,CAGE,EAAQ,QAAQ,EAAE,QAAQ,aAAc,KACtD,GACA,EAAI,EAAE,CAAC,QAAS,AAAC,IACb,EAAO,OAAO,MAAM,CAAC,IAAI,EAAA,aAAa,CAAC,uBAAd,2BAAiE,IAC1F,EAAI,OAAO,EACf,GACA,EAAI,EAAE,CAAC,UAAW,KACd,EAAO,IAAI,EAAA,aAAa,CAAC,uBAAd,yBACX,EAAI,OAAO,EACf,GACA,EAAI,EAAE,CAAC,WAAY,AAAC,IAChB,GAAM,YAAE,EAAa,GAAG,CAAE,CAAG,GACzB,EAAa,KAAO,KAAO,CAAA,GAAY,CACvC,EAAO,OAAO,MAAM,CAAC,IAAI,EAAA,aAAa,CAAC,uBAAd,mCAAyE,YAAE,CAAW,IAC/G,EAAI,OAAO,IAEf,IAAM,EAAS,EAAE,CACjB,EAAI,EAAE,CAAC,OAAQ,AAAC,IACZ,EAAO,IAAI,CAAC,EAChB,GACA,EAAI,EAAE,CAAC,MAAO,KACV,EAAQ,EAAA,MAAM,CAAC,MAAM,CAAC,IACtB,EAAI,OAAO,EACf,EACJ,GACA,EAAI,CAJY,EAIT,EACX,EACJ,0GCnCO,IAAM,EAAoB,AAAC,GAAQ,EAAQ,GAC/B,UAAf,OAAO,GACoB,UAA3B,OAAO,EAAI,WAAW,EACS,UAA/B,OAAO,EAAI,eAAe,EACL,UAArB,OAAO,EAAI,KAAK,EACU,UAA1B,OAAO,EAAI,UAAU,CACZ,EAAsB,AAAC,IAAW,CAC3C,GAD0C,SAC7B,EAAM,WAAW,CAC9B,gBAAiB,EAAM,eAAe,CACtC,aAAc,EAAM,KAAK,CACzB,WAAY,IAAI,KAAK,EAAM,UAAU,EACrC,GAAI,EAAM,SAAS,EAAI,CAAE,UAAW,EAAM,SAAS,AAAC,CAAC,CACzD,CAAC,uICZM,IAAM,EAAkB,IAClB,EAAsB,EACtB,EAAyB,CAAC,YAAE,EAAa,CAAmB,SAAE,EAAU,CAAe,CAAG,GAAK,CAAC,YAAE,EAAY,UAAQ,CAAC,sECF7H,IAAM,EAAQ,CAAC,EAAS,KAC3B,IAAI,EAAU,IACd,IAAK,IAAI,EAAI,EAAG,EAAI,EAAY,IAAK,AACjC,EAAU,EAAQ,KAAK,CAAC,GAE5B,OAAO,CACX,mKCNA,EAAA,CAAA,CAAA,QAAA,IAAA,EAAA,EAAA,CAAA,CAAA,OACA,EAAA,EAAA,CAAA,CAAA,QACA,EAAA,EAAA,CAAA,CAAA,QACA,EAAA,EAAA,CAAA,CAAA,MACA,EAAA,EAAA,CAAA,CAAA,QACA,EAAA,EAAA,CAAA,CAAA,QACO,IAAM,EAAoB,qCACpB,EAAwB,yCACxB,EAAsB,oCACtB,EAAwB,CAAC,EAAO,CAAC,CAAC,IAC3C,GAAM,SAAE,CAAO,YAAE,CAAU,CAAE,CAAG,CAAA,EAAA,EAAA,sBAAqB,AAArB,EAAuB,GACvD,MAAO,IAAM,AADmB,CACnB,EAAA,EAAA,KAAA,AAAI,EAAE,UACf,IAAM,EAAiB,MAAM,EAAW,CAAE,KADjC,EACyC,EAAK,MAAM,AAAC,GACxD,EAAgB,KAAK,KAAK,CAAC,MAAM,EAAmB,EAAS,IACnE,GAAI,CAAC,CAAA,EAAA,EAAA,iBAAgB,AAAhB,EAAkB,GACnB,MAAM,IAAI,EAAA,CADyB,AAAlC,uBACiC,CAAC,WAAzB,iDAAsF,CAC5F,OAAQ,EAAK,MAAM,AACvB,GAEJ,MAAO,CAAA,EAAA,EAAA,mBAAA,AAAkB,EAAE,EAC/B,EAAG,EACP,EACM,EAAqB,IAHZ,EAGmB,EAAS,KACnC,QAAQ,GAAG,CAAC,EAAoB,EAAE,CAClC,EAAQ,OAAO,CAAG,CACd,GAAG,EAAQ,OAAO,CAClB,cAAe,QAAQ,GAAG,CAAC,EAAoB,AACnD,GAMG,CAJQ,MAAM,CAAA,EAAA,EAAA,WAAA,AAAU,EAAE,CAC7B,GAAG,CAAO,SACV,CACJ,EAAA,EACc,KAJO,GAIC,IAGpB,EAAmB,CACrB,WAAW,EACX,aAAa,CACjB,EACM,EAAuB,CACzB,QAAS,GACT,SAAU,EACd,EACM,EAAa,MAAO,QAAE,CAAM,CAAE,IAChC,GAAI,QAAQ,GAAG,CAAC,EAAsB,CAClC,CADoC,KAC7B,CACH,SAZI,CAYM,eACV,KAAM,QAAQ,GAAG,CAAC,EAAsB,AAC5C,EAEJ,GAAI,QAAQ,GAAG,CAAC,EAAkB,CAAE,CAChC,IAAM,EAAS,CAAA,EAAA,EAAA,KAAA,AAAI,EAAE,QAAQ,GAAG,CAAC,EAAkB,EACnD,GAAI,CAAC,EAAO,QADG,AACK,EAAI,CAAC,CAAC,EAAO,QAAQ,IAAI,CAAA,CAAgB,CACzD,EAD4D,IACtD,IAAI,EAAA,wBAAwB,CAAC,CAAA,EAAG,EAAO,MAAnC,EAA2C,CAAC,mDAAmD,CAAC,CAAE,CACxG,aAAa,EACb,QACJ,GAEJ,GAAI,CAAC,EAAO,QAAQ,EAAI,CAAC,CAAC,EAAO,QAAQ,IAAI,CAAA,CAAoB,CAC7D,EADgE,IAC1D,IAAI,EAAA,wBAAwB,CAAC,CAAA,EAAG,EAAO,MAAnC,EAA2C,CAAC,mDAAmD,CAAC,CAAE,CACxG,YAAa,UACb,CACJ,GAEJ,MAAO,CACH,GAAG,CAAM,CACT,KAAM,EAAO,IAAI,CAAG,SAAS,EAAO,IAAI,CAAE,SAAM,CACpD,CACJ,CACA,MAAM,IAAI,EAAA,wBAAwB,CAAC,AAC/B,CAAC,UADK,2DACA,EAAE,EAAsB,IAAI,EAAE,EAAkB,4BAAY,CAAC,CAC/C,CACpB,CADA,YACa,SACb,CACJ,EACJ,iGC5EA,EAAA,CAAA,CAAA,QAAA,IAAA,EAAA,EAAA,CAAA,CAAA,MACO,OAAM,UAAwC,EAAA,wBAAwB,CACzE,WADiD,CACrC,CAAO,CAAE,GAAc,CAAI,CAAE,CACrC,KAAK,CAAC,EAAS,GACf,IAAI,CAAC,WAAW,CAAG,EACnB,IAAI,CAAC,IAAI,CAAG,kCACZ,OAAO,cAAc,CAAC,IAAI,CAAE,EAAgC,SAAS,CACzE,CACJ,gCCRW,4CACV,AAAD,SAAW,CAAQ,EACf,EAAS,IAAO,CAAG,CAAX,wBACR,EAAS,IAAO,CAAG,CAAX,uBACZ,CAAC,CAAE,IAAa,EAAW,EAAC,CAAC,GAAd,wICJR,IAAM,EAAoB,oCACpB,EAAuB,gCACvB,EAA0B,CACnC,4BAA6B,AAAC,GAAQ,CAAG,CAAC,EAAkB,CAC5D,mBAAoB,AAAC,GAAY,CAAO,CAAC,EAAqB,CAC9D,aAAS,CACb,gCCNW,gDACX,AAAC,SAAU,CAAY,EACnB,EAAa,IAAO,CAAG,KAAX,EACZ,EAAa,IAAO,CAAG,KAAX,CAChB,CAAC,CAAE,IAAiB,EAAe,EAAC,CAAC,OAAlB,mJCJnB,IAAA,EAAA,EAAA,CAAA,CAAA,QACO,IAAM,EAAyB,yCACzB,EAA4B,qCAC5B,EAA+B,CACxC,4BAA6B,AAAC,GAAQ,CAAG,CAAC,EAAuB,CACjE,mBAAoB,AAAC,GAAY,CAAO,CAAC,EAA0B,CACnE,QAAS,EAAA,YAAY,CAAC,IAAI,AAC9B,oBADa,yECNb,EAAA,CAAA,CAAA,OAAA,IAAA,EAAA,EAAA,CAAA,CAAA,QACA,EAAA,EAAA,CAAA,CAAA,QACA,EAAA,EAAA,CAAA,CAAA,QACA,EAAA,EAAA,CAAA,CAAA,QACA,EAAA,EAAA,CAAA,CAAA,QACA,EAAA,EAAA,CAAA,CAAA,QACO,IAAM,EAA8B,SAAY,CAAA,EAAA,EAAA,QAAO,AAAP,EAAU,MAAM,KAA6B,MAAM,KACpG,EAAwB,GADyB,MACb,CAAA,EAAA,EAAA,UAAA,AAAS,EAAE,EAAA,uBAAX,AAAkC,IACtE,EAA4B,QADmB,EAEjD,IAAM,EAAe,MAAM,CAAA,EAAA,EAAA,UAAA,AAAS,EAAE,EAAA,uBAAX,KAAuC,IAClE,KADsC,EAC9B,GACJ,KAAK,EAAA,YAAY,CAAC,IAAI,CAClB,OAAO,EAAA,QAAwB,CAAC,CAD/B,GACmC,AACxC,MAAK,EAAA,YAAY,CAAC,GADP,CACW,CAClB,OAAO,EAAA,QAAwB,CAAC,CAD/B,GACmC,AACxC,SACI,MAAM,AAAI,MAAM,CAAC,EAFV,yBAEqC,EAAE,EAAmB,WAAN,CAAC,EAAkB,EAAE,OAAO,MAAM,CAAC,EAAA,YAAY,EAAA,CAA7C,AAAgD,CACrH,CACJ,CAF4E,mBAA8B,oFCbnG,IAAM,EAAyC,CAAC,EAAa,KAChE,IAAM,EAJwC,AAItB,IAJ0B,AAK9C,KAAK,KAAK,CAJ8C,IAI7C,AAJiD,KAI5C,MAAM,IACpB,CADyB,CACT,IAAI,KAAK,KAAK,GAAG,GAAK,AAAkB,OAC9D,EAAO,IAAI,CAAC,AACR,CAAC,kJAAoC,EAAE,IAAI,KAAK,GAAe;AAAA,mHAAuC,CAAC,EAE3G,CADI,GACE,EAAqB,EAAY,kBAAkB,EAAI,EAAY,UAAU,CACnF,MAAO,CACH,GAAG,CAAW,CACd,GAAI,EAAqB,CAAE,oBAAmB,EAAI,CAAC,CAAC,CACpD,WAAY,CAChB,CACJ,yFChBA,IAAA,EAAA,EAAA,CAAA,CAAA,QACO,IAAM,EAA0B,CAAC,EAAU,EAAU,CAAC,CAAC,IAC1D,IACI,EADE,EAAS,GAAS,QAAU,QAElC,OAAO,UACH,IAAI,EACJ,GAAI,CAEI,CADJ,EAAc,MAAM,GAAA,EACJ,UAAU,EAAI,EAAY,UAAU,CAAC,OAAO,GAAK,KAAK,GAAG,IAAI,CACzE,EAAc,CAAA,EAAA,EAAA,qCAAA,CAAA,AAAqC,EAAE,EAAa,EAAA,CAE1E,CACA,MAAO,EAAG,CACN,GAAI,EACA,EAAO,IAAI,CAAC,QADK,oBACwB,GACzC,EAAc,CAAA,EAAA,EAAA,qCAAA,CAAA,AAAqC,EAAE,EAAiB,QAGtE,MAAM,CAEd,CAEA,OADA,EAAkB,EACX,CACX,CACJ,sFCxBA,EAAA,CAAA,CAAA,OAAA,IAAA,EAAA,EAAA,CAAA,CAAA,QACA,EAAA,CAAA,CAAA,QAAA,IAAA,EAAA,EAAA,CAAA,CAAA,OACA,EAAA,EAAA,CAAA,CAAA,QACA,EAAA,EAAA,CAAA,CAAA,QACA,EAAA,EAAA,CAAA,CAAA,MACA,EAAA,EAAA,CAAA,CAAA,QACA,EAAA,EAAA,CAAA,CAAA,QACA,EAAA,EAAA,CAAA,CAAA,QACA,EAAA,EAAA,CAAA,CAAA,QACA,IAAM,EAAY,8CAEZ,EAA+B,+BAC/B,EAAuC,2BACvC,EAA2B,2BACpB,EAAuB,CAAC,EAAO,CAAC,CAAC,GAAK,CAAA,EAAA,EAAA,uBAAsB,AAAtB,EAAwB,EAA4B,GAAO,CAAE,MAA7D,CAAqE,EAAK,MAAM,AAAC,GAC9H,EAA8B,CAAC,EAAO,CAAC,CAAC,IAC1C,IAAI,GAAoB,EAClB,QAAE,CAAM,SAAE,CAAO,CAAE,CAAG,EACtB,SAAE,CAAO,YAAE,CAAU,CAAE,CAAG,CAAA,EAAA,EAAA,sBAAA,AAAqB,EAAE,GACjD,EAAiB,MAAO,EAAY,AADV,KAG5B,GADyB,CACrB,EAD0C,EAAQ,OAAO,EAAE,CAAC,EAAyB,EAAI,KACvE,CAClB,IAAI,GAA6B,EAC7B,GAAgC,EAC9B,EAAc,MAAM,CAAA,EAAA,EAAA,UAAA,AAAS,EAAE,CACjC,wBADsB,IACO,AAAC,IAC1B,IAAM,EAAW,CAAG,CAAC,EAA6B,CAElD,GADA,EAAgC,CAAC,CAAC,GAAY,AAAa,iBAC1C,IAAb,EACA,KADwB,CAClB,IAAI,EAAA,wBAAwB,CAAC,CAAA,EAAG,EAA6B,MAAzD,qCAAoG,CAAC,CAAE,CAAE,OAAQ,EAAK,MAAM,AAAC,GAE3I,OAAO,CACX,EACA,mBAAoB,AAAC,IACjB,IAAM,EAAe,CAAO,CAAC,EAAqC,CAElE,OADA,AACO,EADsB,CAAC,CAAC,GAAiC,UAAjB,CAEnD,EACA,SAAS,CACb,EAAG,SACC,CACJ,KACA,GAAI,EAAK,qBAAqB,EAAI,EAAa,CAC3C,IAAM,EAAS,EAAE,AAOjB,OANI,EAAK,qBAAqB,EAC1B,EAAO,IAAI,CAAC,6EACZ,GACA,EAAO,IAAI,CAAC,CAAC,qBAAqB,EAAE,EAAqC,CAAC,CAAC,EAC3E,GACA,EAAO,IAAI,CAAC,CAAC,8BAA8B,EAAE,EAA6B,CAAC,CAAC,EAC1E,IAAI,EAAA,+BAA+B,CAAC,CAAC,IAAjC,sFAA2H,EAAE,EAAO,IAAI,CAAC,MAAM,EAAE,CAAC,CAChK,CACJ,CACA,IAAM,EAAc,CAAC,MAAM,CAAA,EAAA,EAAA,KAAA,AAAI,EAAE,UAC7B,IAAI,EACJ,GAAI,CACA,EAAU,MAAM,EAAW,AAHR,EAIvB,CACA,MAAO,EAAK,CAIR,MAHuB,KAAK,CAAxB,EAAI,UAAU,EACd,IAAoB,CAAA,EAElB,CACV,CACA,OAAO,CACX,EAAG,EAAA,CAAW,CAAE,IAAI,GACpB,MAAO,CAAA,EAAA,EAAA,KAAA,AAAI,EAAE,UACT,IAAI,EACJ,GAAI,CACA,EAAQ,MAAM,EAA0B,AAHzC,EAGsD,EAAS,EAClE,CACA,MAAO,EAAK,CAIR,MAHuB,KAAK,CAAxB,EAAI,UAAU,GACd,GAAoB,CAAA,EAElB,CACV,CACA,OAAO,CACX,EAAG,EACP,EACA,OAAO,UACH,IAAM,EAAW,MAAM,GAAA,EAAA,2BAAA,AAA0B,IACjD,GAAI,EAEA,CAHmB,MAEnB,GAAQ,MAAM,CADK,2BACwB,sCACpC,EAAe,EAAY,CAAE,GAAG,CAAQ,SAAE,CAAQ,EAExD,EACD,IAAI,EACJ,GAAI,CACA,EAAQ,CAAC,MAAM,EAAiB,CAAE,GAAG,CAAQ,SAAE,CAAQ,EAAA,CAAE,CAAE,QAAQ,EACvE,CACA,MAAO,EAAO,CACV,GAAI,GAAO,aAAe,IACtB,CAD2B,KACrB,OAAO,MAAM,CAAC,EAAO,CACvB,QAAS,2CACb,GAMJ,OAJ2B,iBAAlB,EAAM,OAAO,EAAuB,CAAC,IAAK,IAAK,IAAI,CAAC,QAAQ,CAAC,EAAM,WAAU,GAAG,CACrF,GAAoB,CAAA,EAExB,GAAQ,MAAM,4BAA6B,+BACpC,EAAe,EAAY,CAAE,GAAG,CAAQ,SAAE,CAAQ,EAC7D,CACA,OAAO,EAAe,EAAY,CAC9B,GAAG,CAAQ,CACX,QAAS,CACL,CAAC,EAAyB,CAAE,CAChC,EACA,SACJ,EACJ,CACJ,CACJ,EACM,EAAmB,MAAO,GAAY,CAAA,EAAA,EAAA,WAAA,AAAU,EAAE,CACpD,GAAG,CAAO,CACV,KAzGoB,CAyGd,YAFkC,OAGxC,OAAQ,MACR,QAAS,CACL,uCAAwC,OAC5C,CACJ,GACM,EAAa,MAAO,GAAY,CAAC,MAAM,CAAA,EAAA,EAAA,WAAA,AAAU,EAAE,CAAE,GAAG,CAAO,CAAE,KAAM,CAAU,EAAA,CAAE,CAAE,QAAQ,AAAtD,GACvC,EAA4B,MAAO,EAAS,EAAS,KACvD,IAAM,EAAsB,KAAK,KAAK,CAAC,CAAC,MAAM,CAAA,EAAA,EAAA,WAAA,AAAU,EAAE,CACtD,GAAG,CAAO,CACV,KAAM,EAAY,CACtB,EAAA,CAAE,CAAE,MAH0C,EAGlC,IACZ,GAAI,CAAC,CAAA,EAAA,EAAA,iBAAA,AAAgB,EAAE,GACnB,MAAM,IAAI,EAAA,CADT,MAAwC,iBACP,CAAC,WAAzB,iDAAsF,CAC5F,OAAQ,EAAK,MAAM,AACvB,GAEJ,MAAO,CAAA,EAAA,EAAA,mBAAA,AAAkB,EAAE,EAC/B,YADW,uGCpIX,EAAA,CAAA,CAAA,MACA,EAAA,CAAA,CAAA,QACA,EAAA,CAAA,CAAA,QACA,EAAA,CAAA,CAAA,QACA,EAAA,CAAA,CAAA,QACA,EAAA,CAAA,CAAA,QACA,EAAA,CAAA,CAAA","ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14]}