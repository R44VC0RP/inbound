module.exports={783287:e=>{"use strict";var{g:t,__dirname:r}=e;e.s({bulkUpdateEmails:()=>p,getAllEmails:()=>m,getEmail:()=>n,replyToEmail:()=>o,updateEmail:()=>E});var s=e.i(387063);e.i(762291);var a=e.i(557440);e.i(468686);var d=e.i(55379),i=e.i(176825),c=e.i(367027),u=e.i(460009),l=e.i(374460);async function m(e,t){try{let{limit:r=50,offset:s=0,searchQuery:l="",statusFilter:m="all",domainFilter:n="all",timeRange:o="30d",includeArchived:E=!1}=t||{},p=[(0,i.eq)(d.structuredEmails.userId,e)];if(E||p.push((0,i.eq)(d.structuredEmails.isArchived,!1)),"failed"===m?p.push((0,i.eq)(d.structuredEmails.parseSuccess,!1)):"processed"===m&&p.push((0,i.eq)(d.structuredEmails.parseSuccess,!0)),"90d"!==o){let e,t=new Date;switch(o){case"24h":e=new Date(t.getTime()-864e5);break;case"7d":e=new Date(t.getTime()-6048e5);break;default:e=new Date(t.getTime()-2592e6)}p.push((0,i.gte)(d.structuredEmails.createdAt,e))}if("all"!==n&&p.push(c.sql`${d.structuredEmails.toData}::jsonb->'addresses'->0->>'address' LIKE ${`%@${n}`}`),l.trim()){let e=`%${l.trim()}%`;p.push(c.sql`(${d.structuredEmails.subject} ILIKE ${e} OR ${d.structuredEmails.fromData}::text ILIKE ${e} OR ${d.structuredEmails.toData}::text ILIKE ${e})`)}let[{count:h}]=await a.db.select({count:c.sql`count(*)`}).from(d.structuredEmails).where((0,i.and)(...p)),f=(await a.db.select({id:d.structuredEmails.id,emailId:d.structuredEmails.emailId,messageId:d.structuredEmails.messageId,subject:d.structuredEmails.subject,date:d.structuredEmails.date,fromData:d.structuredEmails.fromData,toData:d.structuredEmails.toData,textBody:d.structuredEmails.textBody,htmlBody:d.structuredEmails.htmlBody,attachments:d.structuredEmails.attachments,parseSuccess:d.structuredEmails.parseSuccess,parseError:d.structuredEmails.parseError,isRead:d.structuredEmails.isRead,readAt:d.structuredEmails.readAt,isArchived:d.structuredEmails.isArchived,archivedAt:d.structuredEmails.archivedAt,createdAt:d.structuredEmails.createdAt}).from(d.structuredEmails).where((0,i.and)(...p)).orderBy((0,u.desc)(d.structuredEmails.createdAt)).limit(r).offset(s)).map(e=>{let t=null;if(e.fromData)try{t=JSON.parse(e.fromData)}catch(e){console.error("Failed to parse fromData:",e)}let r=null;if(e.toData)try{r=JSON.parse(e.toData)}catch(e){console.error("Failed to parse toData:",e)}let s=[];if(e.attachments)try{s=JSON.parse(e.attachments)}catch(e){console.error("Failed to parse attachments:",e)}let a="";return e.textBody?a=e.textBody.substring(0,200):e.htmlBody&&(a=e.htmlBody.replace(/<[^>]*>/g,"").substring(0,200)),{id:e.id,emailId:e.emailId,messageId:e.messageId,subject:e.subject||"No Subject",from:t?.addresses?.[0]?.address||"unknown",fromName:t?.addresses?.[0]?.name||null,recipient:r?.addresses?.[0]?.address||"unknown",preview:a,receivedAt:e.date||e.createdAt,isRead:e.isRead||!1,readAt:e.readAt,isArchived:e.isArchived||!1,archivedAt:e.archivedAt,hasAttachments:s.length>0,attachmentCount:s.length,parseSuccess:e.parseSuccess,parseError:e.parseError,createdAt:e.createdAt}}),y=(await a.db.select({domain:c.sql`DISTINCT SPLIT_PART((${d.structuredEmails.toData}::jsonb->'addresses'->0->>'address'), '@', 2)`}).from(d.structuredEmails).where((0,i.and)((0,i.eq)(d.structuredEmails.userId,e),c.sql`${d.structuredEmails.toData}::jsonb->'addresses'->0->>'address' IS NOT NULL`))).map(e=>e.domain).filter(e=>e&&""!==e.trim());return{success:!0,data:{emails:f,pagination:{total:h,limit:r,offset:s,hasMore:s+r<h},filters:{uniqueDomains:y}}}}catch(e){return console.error("Error fetching emails:",e),{error:"Failed to fetch emails"}}}async function n(e,t){try{if(!t)return{error:"Email ID is required"};let r=await a.db.select({id:d.structuredEmails.id,emailId:d.structuredEmails.emailId,messageId:d.structuredEmails.messageId,subject:d.structuredEmails.subject,date:d.structuredEmails.date,fromData:d.structuredEmails.fromData,toData:d.structuredEmails.toData,ccData:d.structuredEmails.ccData,bccData:d.structuredEmails.bccData,replyToData:d.structuredEmails.replyToData,inReplyTo:d.structuredEmails.inReplyTo,references:d.structuredEmails.references,textBody:d.structuredEmails.textBody,htmlBody:d.structuredEmails.htmlBody,rawContent:d.structuredEmails.rawContent,attachments:d.structuredEmails.attachments,headers:d.structuredEmails.headers,priority:d.structuredEmails.priority,parseSuccess:d.structuredEmails.parseSuccess,parseError:d.structuredEmails.parseError,isRead:d.structuredEmails.isRead,readAt:d.structuredEmails.readAt,userId:d.structuredEmails.userId,sesEventId:d.structuredEmails.sesEventId,createdAt:d.structuredEmails.createdAt,updatedAt:d.structuredEmails.updatedAt,emailContent:d.sesEvents.emailContent,spamVerdict:d.sesEvents.spamVerdict,virusVerdict:d.sesEvents.virusVerdict,spfVerdict:d.sesEvents.spfVerdict,dkimVerdict:d.sesEvents.dkimVerdict,dmarcVerdict:d.sesEvents.dmarcVerdict,actionType:d.sesEvents.actionType,s3BucketName:d.sesEvents.s3BucketName,s3ObjectKey:d.sesEvents.s3ObjectKey,s3ContentFetched:d.sesEvents.s3ContentFetched,s3ContentSize:d.sesEvents.s3ContentSize,s3Error:d.sesEvents.s3Error,commonHeaders:d.sesEvents.commonHeaders,processingTimeMillis:d.sesEvents.processingTimeMillis,timestamp:d.sesEvents.timestamp,receiptTimestamp:d.sesEvents.receiptTimestamp}).from(d.structuredEmails).leftJoin(d.sesEvents,(0,i.eq)(d.structuredEmails.sesEventId,d.sesEvents.id)).where((0,i.and)((0,i.eq)(d.structuredEmails.id,t),(0,i.eq)(d.structuredEmails.userId,e))).limit(1);if(0===r.length)return{error:"Email not found"};let s=r[0],c=e=>{if(!e)return null;try{return JSON.parse(e)}catch(e){return console.error("Failed to parse JSON field:",e),null}},u=c(s.fromData),m=c(s.toData),n=c(s.ccData),o=c(s.bccData),E=c(s.replyToData),p=c(s.attachments)||[],h=c(s.headers)||{},f=c(s.references)||[],y=c(s.commonHeaders),v=s.htmlBody?(0,l.sanitizeHtml)(s.htmlBody):null,b=m?.addresses?.[0]?.address||"unknown",A=u?.addresses?.[0]?.address||"unknown";s.isRead||await a.db.update(d.structuredEmails).set({isRead:!0,readAt:new Date,updatedAt:new Date}).where((0,i.eq)(d.structuredEmails.id,t));let g={id:s.id,emailId:s.emailId,messageId:s.messageId,subject:s.subject,from:A,fromName:u?.addresses?.[0]?.name||null,to:m?.text||"",cc:n?.text||null,bcc:o?.text||null,replyTo:E?.text||null,recipient:b,receivedAt:s.date,isRead:!0,readAt:s.readAt||new Date,content:{textBody:s.textBody,htmlBody:v,rawContent:s.rawContent,attachments:p,headers:h},addresses:{from:u,to:m,cc:n,bcc:o,replyTo:E},metadata:{inReplyTo:s.inReplyTo,references:f,priority:s.priority,parseSuccess:s.parseSuccess,parseError:s.parseError,hasAttachments:p.length>0,attachmentCount:p.length,hasTextBody:!!s.textBody,hasHtmlBody:!!s.htmlBody},security:{spf:s.spfVerdict||"UNKNOWN",dkim:s.dkimVerdict||"UNKNOWN",dmarc:s.dmarcVerdict||"UNKNOWN",spam:s.spamVerdict||"UNKNOWN",virus:s.virusVerdict||"UNKNOWN"},processing:{processingTimeMs:s.processingTimeMillis,timestamp:s.timestamp,receiptTimestamp:s.receiptTimestamp,actionType:s.actionType,s3Info:{bucketName:s.s3BucketName,objectKey:s.s3ObjectKey,contentFetched:s.s3ContentFetched,contentSize:s.s3ContentSize,error:s.s3Error},commonHeaders:y},createdAt:s.createdAt,updatedAt:s.updatedAt};return{success:!0,data:g}}catch(e){return console.error("Error fetching email:",e),{error:"Failed to fetch email"}}}async function o(e,t,r){try{if(!t)return{error:"Email ID is required"};let s=await a.db.select({id:d.structuredEmails.id,messageId:d.structuredEmails.messageId,subject:d.structuredEmails.subject,fromData:d.structuredEmails.fromData,toData:d.structuredEmails.toData}).from(d.structuredEmails).where((0,i.and)((0,i.eq)(d.structuredEmails.id,t),(0,i.eq)(d.structuredEmails.userId,e))).limit(1);if(0===s.length)return{error:"Original email not found"};return{success:!0,data:{message:"Reply functionality is not yet implemented",originalEmailId:t,replyData:{to:r.to,subject:r.subject,hasTextBody:!!r.textBody,hasHtmlBody:!!r.htmlBody,attachmentCount:r.attachments?.length||0},status:"pending_implementation"}}}catch(e){return console.error("Error replying to email:",e),{error:"Failed to reply to email"}}}async function E(e,t,r){try{console.log("üìù updateEmail - Updating email:",t,"for user:",e,"with updates:",r);let s={updatedAt:new Date};void 0!==r.isRead&&(s.isRead=r.isRead,s.readAt=r.isRead?new Date:null),void 0!==r.isArchived&&(s.isArchived=r.isArchived,s.archivedAt=r.isArchived?new Date:null);let[c]=await a.db.update(d.structuredEmails).set(s).where((0,i.and)((0,i.eq)(d.structuredEmails.id,t),(0,i.eq)(d.structuredEmails.userId,e))).returning({id:d.structuredEmails.id,isRead:d.structuredEmails.isRead,isArchived:d.structuredEmails.isArchived,readAt:d.structuredEmails.readAt,archivedAt:d.structuredEmails.archivedAt});if(!c)return{error:"Email not found or access denied"};return console.log("‚úÖ updateEmail - Successfully updated email:",t),{success:!0,data:c}}catch(e){return console.error("‚ùå updateEmail - Error updating email:",e),{error:"Failed to update email"}}}async function p(e,t,r){try{if(console.log("üìù bulkUpdateEmails - Updating",t.length,"emails for user:",e,"with updates:",r),0===t.length)return{error:"No email IDs provided"};if(t.length>100)return{error:"Cannot update more than 100 emails at once"};let s={updatedAt:new Date};void 0!==r.isRead&&(s.isRead=r.isRead,s.readAt=r.isRead?new Date:null),void 0!==r.isArchived&&(s.isArchived=r.isArchived,s.archivedAt=r.isArchived?new Date:null);let c=await a.db.update(d.structuredEmails).set(s).where((0,i.and)((0,i.eq)(d.structuredEmails.userId,e),(0,i.inArray)(d.structuredEmails.id,t))).returning({id:d.structuredEmails.id,isRead:d.structuredEmails.isRead,isArchived:d.structuredEmails.isArchived});return console.log("‚úÖ bulkUpdateEmails - Successfully updated",c.length,"emails"),{success:!0,data:{updatedCount:c.length,emails:c}}}catch(e){return console.error("‚ùå bulkUpdateEmails - Error updating emails:",e),{error:"Failed to update emails"}}}(0,e.i(877351).ensureServerEntryExports)([m,n,o,E,p]),(0,s.registerServerReference)(m,"60500f8b70cf04f62db9a88b3d5e3706d12d7d8b19",null),(0,s.registerServerReference)(n,"600c628dc584194c1d7e979d20f4bbe3ad41448405",null),(0,s.registerServerReference)(o,"70ffda4cd41d7d7986c2b133cc58e0cf1bb393b9e7",null),(0,s.registerServerReference)(E,"70490bbe4011ed10a8b6abc60924b711afbe3b06c1",null),(0,s.registerServerReference)(p,"70ad87b7eb56ba50a58c5609677f3b32a84786dc12",null)}};

//# sourceMappingURL=functions_mail_primary_ts_aeb0a04a._.js.map