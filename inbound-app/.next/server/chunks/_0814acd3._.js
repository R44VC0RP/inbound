module.exports={343021:e=>{"use strict";var{g:o,__dirname:t}=e;{e.s({DELETE:()=>h,GET:()=>p,PUT:()=>g});var i=e.i(125427),n=e.i(494642),a=e.i(557440);e.i(468686);var s=e.i(55379),l=e.i(176825),d=e.i(91890),r=e.i(807204),c=e.i(719797),m=e.i(877465),u=e.i(562454);let o=process.env.AWS_REGION||"us-east-2",t=process.env.AWS_ACCESS_KEY_ID,f=process.env.AWS_SECRET_ACCESS_KEY,A=null;async function p(e,{params:o}){let{id:t}=await o;console.log("üåê GET /api/v2/domains/{id} - Starting request for domain:",t);try{console.log("üîê Validating request authentication");let{userId:o,error:r}=await (0,n.validateRequest)(e);if(!o)return console.log("‚ùå Authentication failed:",r),i.NextResponse.json({error:r},{status:401});console.log("‚úÖ Authentication successful for userId:",o);let{searchParams:m}=new URL(e.url),p="true"===m.get("check");p&&console.log("üîç Check parameter detected - will perform verification check"),console.log("üîç Querying domain from database");let g=await a.db.select().from(s.emailDomains).where((0,l.and)((0,l.eq)(s.emailDomains.id,t),(0,l.eq)(s.emailDomains.userId,o))).limit(1);if(!g[0])return console.log("‚ùå Domain not found for user:",o,"domain:",t),i.NextResponse.json({error:"Domain not found"},{status:404});let h=g[0];console.log("‚úÖ Found domain:",h.domain,"status:",h.status),console.log("üìä Calculating domain statistics");let f=await a.db.select({count:(0,d.count)()}).from(s.emailAddresses).where((0,l.eq)(s.emailAddresses.domainId,t)),E=f[0]?.count||0,S=await a.db.select({count:(0,d.count)()}).from(s.emailAddresses).where((0,l.and)((0,l.eq)(s.emailAddresses.domainId,t),(0,l.eq)(s.emailAddresses.isActive,!0))),w=S[0]?.count||0,v=null;h.catchAllEndpointId&&(console.log("üîç Getting catch-all endpoint information"),v=(await a.db.select({id:s.endpoints.id,name:s.endpoints.name,type:s.endpoints.type,isActive:s.endpoints.isActive}).from(s.endpoints).where((0,l.eq)(s.endpoints.id,h.catchAllEndpointId)).limit(1))[0]||null),console.log("‚úÖ Successfully retrieved domain details");let D={id:h.id,domain:h.domain,status:h.status,canReceiveEmails:h.canReceiveEmails||!1,hasMxRecords:h.hasMxRecords||!1,domainProvider:h.domainProvider,providerConfidence:h.providerConfidence,lastDnsCheck:h.lastDnsCheck,lastSesCheck:h.lastSesCheck,isCatchAllEnabled:h.isCatchAllEnabled||!1,catchAllEndpointId:h.catchAllEndpointId,createdAt:h.createdAt||new Date,updatedAt:h.updatedAt||new Date,userId:h.userId,stats:{totalEmailAddresses:E,activeEmailAddresses:w,emailsLast24h:0,emailsLast7d:0,emailsLast30d:0},catchAllEndpoint:v?{...v,isActive:v.isActive||!1}:null};if(p){console.log(`üîç Performing verification check for domain: ${h.domain}`);try{let e=await a.db.select().from(s.domainDnsRecords).where((0,l.eq)(s.domainDnsRecords.domainId,h.id)),o=[];if(e.length>0){console.log(`üîç Verifying ${e.length} DNS records`);let t=await (0,c.verifyDnsRecords)(e.map(e=>({type:e.recordType,name:e.name,value:e.value})));o=t.map((e,o)=>({type:e.type,name:e.name,value:e.expectedValue,isVerified:e.isVerified,error:e.error})),await Promise.all(e.map(async(e,o)=>{let i=t[o];await a.db.update(s.domainDnsRecords).set({isVerified:i.isVerified,lastChecked:new Date}).where((0,l.eq)(s.domainDnsRecords.id,e.id))}))}let t="Unknown";if(A)try{console.log(`üîç Checking SES verification status`);let e=new u.GetIdentityVerificationAttributesCommand({Identities:[h.domain]}),o=await A.send(e),i=o.VerificationAttributes?.[h.domain];t=i?.VerificationStatus||"NotFound","Success"===t&&"verified"!==h.status?(await a.db.update(s.emailDomains).set({status:"verified",lastSesCheck:new Date,updatedAt:new Date}).where((0,l.eq)(s.emailDomains.id,h.id)),D.status="verified"):"Failed"===t&&"failed"!==h.status?(await a.db.update(s.emailDomains).set({status:"failed",lastSesCheck:new Date,updatedAt:new Date}).where((0,l.eq)(s.emailDomains.id,h.id)),D.status="failed"):await a.db.update(s.emailDomains).set({lastSesCheck:new Date}).where((0,l.eq)(s.emailDomains.id,h.id))}catch(e){console.error(`‚ùå SES verification check failed:`,e),t="Error"}let i=o.length>0&&o.every(e=>e.isVerified),n=i&&"Success"===t;D.verificationCheck={dnsRecords:o,sesStatus:t,isFullyVerified:n,lastChecked:new Date},console.log(`‚úÖ Verification check complete for ${h.domain}:`,{dnsVerified:i,sesStatus:t,isFullyVerified:n})}catch(e){console.error(`‚ùå Verification check failed for ${h.domain}:`,e),D.verificationCheck={dnsRecords:[],sesStatus:"Error",isFullyVerified:!1,lastChecked:new Date}}}return i.NextResponse.json(D)}catch(e){return console.error("‚ùå GET /api/v2/domains/{id} - Error:",e),i.NextResponse.json({error:"Failed to fetch domain details",details:e instanceof Error?e.message:"Unknown error"},{status:500})}}async function g(e,{params:o}){let{id:t}=await o;console.log("‚úèÔ∏è PUT /api/v2/domains/{id} - Starting update for domain:",t);try{console.log("üîê Validating request authentication");let{userId:o,error:d}=await (0,n.validateRequest)(e);if(!o)return console.log("‚ùå Authentication failed:",d),i.NextResponse.json({error:d},{status:401});console.log("‚úÖ Authentication successful for userId:",o);let c=await e.json();console.log("üìù Update data received:",{isCatchAllEnabled:c.isCatchAllEnabled,catchAllEndpointId:c.catchAllEndpointId}),console.log("üîç Checking if domain exists and belongs to user");let m=await a.db.select().from(s.emailDomains).where((0,l.and)((0,l.eq)(s.emailDomains.id,t),(0,l.eq)(s.emailDomains.userId,o))).limit(1);if(!m[0])return console.log("‚ùå Domain not found for user:",o,"domain:",t),i.NextResponse.json({error:"Domain not found"},{status:404});if(console.log("‚úÖ Found existing domain:",m[0].domain),"verified"!==m[0].status)return console.log("‚ùå Domain not verified:",m[0].status),i.NextResponse.json({error:"Domain must be verified before configuring catch-all"},{status:400});if(c.isCatchAllEnabled&&c.catchAllEndpointId){console.log("üîç Validating endpoint");let e=await a.db.select().from(s.endpoints).where((0,l.and)((0,l.eq)(s.endpoints.id,c.catchAllEndpointId),(0,l.eq)(s.endpoints.userId,o))).limit(1);if(!e[0])return console.log("‚ùå Endpoint not found:",c.catchAllEndpointId),i.NextResponse.json({error:"Endpoint not found or does not belong to user"},{status:400});if(!e[0].isActive)return console.log("‚ùå Endpoint is inactive:",c.catchAllEndpointId),i.NextResponse.json({error:"Selected endpoint is not active"},{status:400})}let u=null,p=null;if(c.isCatchAllEnabled&&c.catchAllEndpointId)try{console.log("üîß Configuring AWS SES catch-all for domain:",m[0].domain);let e=new r.AWSSESReceiptRuleManager,o=process.env.AWS_REGION||"us-east-2",t=process.env.LAMBDA_FUNCTION_NAME||"email-processor",i=process.env.S3_BUCKET_NAME,n=process.env.AWS_ACCOUNT_ID;if(i&&n){let a=r.AWSSESReceiptRuleManager.getLambdaFunctionArn(t,n,o),s=await e.configureCatchAllDomain({domain:m[0].domain,webhookId:c.catchAllEndpointId,lambdaFunctionArn:a,s3BucketName:i});"created"===s.status||"updated"===s.status?(u=s.ruleName,console.log("‚úÖ AWS SES catch-all configured successfully")):(p=`SES catch-all configuration failed: ${s.error}`,console.warn("‚ö†Ô∏è SES catch-all configuration failed"))}else p="AWS configuration incomplete. Missing S3_BUCKET_NAME or AWS_ACCOUNT_ID",console.warn("‚ö†Ô∏è AWS configuration incomplete")}catch(e){console.error("‚ùå AWS SES configuration error:",e),p=`AWS SES configuration error: ${e instanceof Error?e.message:"Unknown error"}`}else try{console.log("üîß Removing AWS SES catch-all for domain:",m[0].domain);let e=new r.AWSSESReceiptRuleManager;await e.removeCatchAllDomain(m[0].domain)?console.log("‚úÖ AWS SES catch-all removed successfully"):console.warn("‚ö†Ô∏è Failed to remove AWS SES catch-all rule")}catch(e){console.error("‚ùå AWS SES removal error:",e)}console.log("üíæ Updating domain in database");let[g]=await a.db.update(s.emailDomains).set({isCatchAllEnabled:c.isCatchAllEnabled,catchAllEndpointId:c.isCatchAllEnabled?c.catchAllEndpointId:null,catchAllReceiptRuleName:u,updatedAt:new Date}).where((0,l.eq)(s.emailDomains.id,t)).returning(),h=null;if(g.catchAllEndpointId){let e=(await a.db.select({id:s.endpoints.id,name:s.endpoints.name,type:s.endpoints.type,isActive:s.endpoints.isActive}).from(s.endpoints).where((0,l.eq)(s.endpoints.id,g.catchAllEndpointId)).limit(1))[0];e&&(h={id:e.id,name:e.name,type:e.type,isActive:e.isActive||!1})}console.log("‚úÖ Successfully updated domain catch-all settings");let f={id:g.id,domain:g.domain,status:g.status,isCatchAllEnabled:g.isCatchAllEnabled||!1,catchAllEndpointId:g.catchAllEndpointId,catchAllEndpoint:h,receiptRuleName:u,updatedAt:g.updatedAt||new Date};return p&&(f.awsConfigurationWarning=p),i.NextResponse.json(f)}catch(e){return console.error("‚ùå PUT /api/v2/domains/{id} - Error:",e),i.NextResponse.json({error:"Failed to update domain",details:e instanceof Error?e.message:"Unknown error"},{status:500})}}async function h(o,{params:t}){let{id:d}=await t;console.log("üóëÔ∏è DELETE /api/v2/domains/{id} - Starting deletion for domain:",d);try{console.log("üîê Validating request authentication");let{userId:t,error:c}=await (0,n.validateRequest)(o);if(!t)return console.log("‚ùå Authentication failed:",c),i.NextResponse.json({error:c},{status:401});console.log("‚úÖ Authentication successful for userId:",t),console.log("üîç Fetching domain details");let m=await a.db.select().from(s.emailDomains).where((0,l.and)((0,l.eq)(s.emailDomains.id,d),(0,l.eq)(s.emailDomains.userId,t))).limit(1);if(!m[0])return console.log("‚ùå Domain not found for user:",t,"domain:",d),i.NextResponse.json({error:"Domain not found"},{status:404});let u=m[0];console.log("‚úÖ Found domain:",u.domain,"status:",u.status);let p={domain:u.domain,emailAddresses:0,dnsRecords:0,blockedEmails:0,sesIdentity:!1,sesReceiptRules:!1};if(u.domain)try{console.log("üîß Removing AWS SES receipt rules");let e=new r.AWSSESReceiptRuleManager;(u.isCatchAllEnabled||u.catchAllReceiptRuleName)&&(console.log("üîß Removing catch-all receipt rule"),await e.removeCatchAllDomain(u.domain)&&(p.sesReceiptRules=!0,console.log("‚úÖ Catch-all receipt rule removed"))),console.log("üîß Removing individual email receipt rule"),await e.removeEmailReceiving(u.domain)&&(p.sesReceiptRules=!0,console.log("‚úÖ Individual email receipt rule removed"))}catch(e){console.error("‚ö†Ô∏è Failed to remove SES receipt rules:",e)}if(u.domain)try{console.log("üîß Deleting AWS SES identity");let{deleteDomainFromSES:o}=await e.r(20973)(e.i),t=await o(u.domain);p.sesIdentity=t.success,t.success?console.log("‚úÖ SES identity deleted"):console.warn("‚ö†Ô∏è Failed to delete SES identity:",t.error)}catch(e){console.error("‚ö†Ô∏è Failed to delete SES identity:",e)}try{console.log("üîß Deleting blocked emails");let{blockedEmails:o}=await e.r(491517)(e.i),t=await a.db.delete(o).where((0,l.eq)(o.domainId,d)).returning({id:o.id});p.blockedEmails=t.length,console.log(`‚úÖ Deleted ${t.length} blocked emails`)}catch(e){console.error("‚ö†Ô∏è Failed to delete blocked emails:",e)}try{console.log("üîß Deleting email addresses");let e=await a.db.delete(s.emailAddresses).where((0,l.eq)(s.emailAddresses.domainId,d)).returning({id:s.emailAddresses.id});p.emailAddresses=e.length,console.log(`‚úÖ Deleted ${e.length} email addresses`)}catch(e){return console.error("‚ùå Failed to delete email addresses:",e),i.NextResponse.json({error:"Failed to delete email addresses",details:e instanceof Error?e.message:"Unknown error"},{status:500})}try{console.log("üîß Deleting DNS records");let e=await a.db.delete(s.domainDnsRecords).where((0,l.eq)(s.domainDnsRecords.domainId,d)).returning({id:s.domainDnsRecords.id});p.dnsRecords=e.length,console.log(`‚úÖ Deleted ${e.length} DNS records`)}catch(e){return console.error("‚ùå Failed to delete DNS records:",e),i.NextResponse.json({error:"Failed to delete DNS records",details:e instanceof Error?e.message:"Unknown error"},{status:500})}try{console.log("üîß Deleting domain record"),await a.db.delete(s.emailDomains).where((0,l.eq)(s.emailDomains.id,d)),console.log("‚úÖ Domain record deleted")}catch(e){return console.error("‚ùå Failed to delete domain:",e),i.NextResponse.json({error:"Failed to delete domain",details:e instanceof Error?e.message:"Unknown error"},{status:500})}console.log("‚úÖ Successfully deleted domain and all associated resources");let g={success:!0,message:`Successfully deleted domain ${u.domain} and all associated resources`,deletedResources:p};return i.NextResponse.json(g)}catch(e){return console.error("‚ùå DELETE /api/v2/domains/{id} - Error:",e),i.NextResponse.json({error:"Failed to delete domain",details:e instanceof Error?e.message:"Unknown error"},{status:500})}}t&&f&&(A=new m.SESClient({region:o,credentials:{accessKeyId:t,secretAccessKey:f}}))}},913953:e=>{"use strict";var{g:o,__dirname:t}=e;{e.s({patchFetch:()=>l,routeModule:()=>o,serverHooks:()=>r,workAsyncStorage:()=>t,workUnitAsyncStorage:()=>d});var i=e.i(854885),n=e.i(814689),a=e.i(25402),s=e.i(343021);let o=new i.AppRouteRouteModule({definition:{kind:n.RouteKind.APP_ROUTE,page:"/api/v2/domains/[id]/route",pathname:"/api/v2/domains/[id]",filename:"route",bundlePath:""},resolvedPagePath:"[project]/app/api/v2/domains/[id]/route.ts",nextConfigOutput:"",userland:s}),{workAsyncStorage:t,workUnitAsyncStorage:d,serverHooks:r}=o;function l(){return(0,a.patchFetch)({workAsyncStorage:t,workUnitAsyncStorage:d})}}}};

//# sourceMappingURL=_0814acd3._.js.map