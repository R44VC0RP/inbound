{"version":3,"sources":["turbopack:///[project]/node_modules/@aws-sdk/client-ses/node_modules/@aws-sdk/credential-provider-node/node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveCredentialSource.js","turbopack:///[project]/node_modules/@aws-sdk/client-ses/node_modules/@aws-sdk/credential-provider-node/node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveAssumeRoleCredentials.js","turbopack:///[project]/node_modules/@aws-sdk/client-ses/node_modules/@aws-sdk/credential-provider-node/node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveProcessCredentials.js","turbopack:///[project]/node_modules/@aws-sdk/client-ses/node_modules/@aws-sdk/credential-provider-node/node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveSsoCredentials.js","turbopack:///[project]/node_modules/@aws-sdk/client-ses/node_modules/@aws-sdk/credential-provider-node/node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveStaticCredentials.js","turbopack:///[project]/node_modules/@aws-sdk/client-ses/node_modules/@aws-sdk/credential-provider-node/node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveWebIdentityCredentials.js","turbopack:///[project]/node_modules/@aws-sdk/client-ses/node_modules/@aws-sdk/credential-provider-node/node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveProfileData.js","turbopack:///[project]/node_modules/@aws-sdk/client-ses/node_modules/@aws-sdk/credential-provider-node/node_modules/@aws-sdk/credential-provider-ini/dist-es/fromIni.js","turbopack:///[project]/node_modules/@aws-sdk/client-ses/node_modules/@aws-sdk/credential-provider-node/node_modules/@aws-sdk/credential-provider-ini/dist-es/index.js"],"sourcesContent":["import { setCredentialFeature } from \"@aws-sdk/core/client\";\nimport { chain, CredentialsProviderError } from \"@smithy/property-provider\";\nexport const resolveCredentialSource = (credentialSource, profileName, logger) => {\n    const sourceProvidersMap = {\n        EcsContainer: async (options) => {\n            const { fromHttp } = await import(\"@aws-sdk/credential-provider-http\");\n            const { fromContainerMetadata } = await import(\"@smithy/credential-provider-imds\");\n            logger?.debug(\"@aws-sdk/credential-provider-ini - credential_source is EcsContainer\");\n            return async () => chain(fromHttp(options ?? {}), fromContainerMetadata(options))().then(setNamedProvider);\n        },\n        Ec2InstanceMetadata: async (options) => {\n            logger?.debug(\"@aws-sdk/credential-provider-ini - credential_source is Ec2InstanceMetadata\");\n            const { fromInstanceMetadata } = await import(\"@smithy/credential-provider-imds\");\n            return async () => fromInstanceMetadata(options)().then(setNamedProvider);\n        },\n        Environment: async (options) => {\n            logger?.debug(\"@aws-sdk/credential-provider-ini - credential_source is Environment\");\n            const { fromEnv } = await import(\"@aws-sdk/credential-provider-env\");\n            return async () => fromEnv(options)().then(setNamedProvider);\n        },\n    };\n    if (credentialSource in sourceProvidersMap) {\n        return sourceProvidersMap[credentialSource];\n    }\n    else {\n        throw new CredentialsProviderError(`Unsupported credential source in profile ${profileName}. Got ${credentialSource}, ` +\n            `expected EcsContainer or Ec2InstanceMetadata or Environment.`, { logger });\n    }\n};\nconst setNamedProvider = (creds) => setCredentialFeature(creds, \"CREDENTIALS_PROFILE_NAMED_PROVIDER\", \"p\");\n","import { setCredentialFeature } from \"@aws-sdk/core/client\";\nimport { CredentialsProviderError } from \"@smithy/property-provider\";\nimport { getProfileName } from \"@smithy/shared-ini-file-loader\";\nimport { resolveCredentialSource } from \"./resolveCredentialSource\";\nimport { resolveProfileData } from \"./resolveProfileData\";\nexport const isAssumeRoleProfile = (arg, { profile = \"default\", logger } = {}) => {\n    return (Boolean(arg) &&\n        typeof arg === \"object\" &&\n        typeof arg.role_arn === \"string\" &&\n        [\"undefined\", \"string\"].indexOf(typeof arg.role_session_name) > -1 &&\n        [\"undefined\", \"string\"].indexOf(typeof arg.external_id) > -1 &&\n        [\"undefined\", \"string\"].indexOf(typeof arg.mfa_serial) > -1 &&\n        (isAssumeRoleWithSourceProfile(arg, { profile, logger }) || isCredentialSourceProfile(arg, { profile, logger })));\n};\nconst isAssumeRoleWithSourceProfile = (arg, { profile, logger }) => {\n    const withSourceProfile = typeof arg.source_profile === \"string\" && typeof arg.credential_source === \"undefined\";\n    if (withSourceProfile) {\n        logger?.debug?.(`    ${profile} isAssumeRoleWithSourceProfile source_profile=${arg.source_profile}`);\n    }\n    return withSourceProfile;\n};\nconst isCredentialSourceProfile = (arg, { profile, logger }) => {\n    const withProviderProfile = typeof arg.credential_source === \"string\" && typeof arg.source_profile === \"undefined\";\n    if (withProviderProfile) {\n        logger?.debug?.(`    ${profile} isCredentialSourceProfile credential_source=${arg.credential_source}`);\n    }\n    return withProviderProfile;\n};\nexport const resolveAssumeRoleCredentials = async (profileName, profiles, options, visitedProfiles = {}) => {\n    options.logger?.debug(\"@aws-sdk/credential-provider-ini - resolveAssumeRoleCredentials (STS)\");\n    const profileData = profiles[profileName];\n    const { source_profile, region } = profileData;\n    if (!options.roleAssumer) {\n        const { getDefaultRoleAssumer } = await import(\"@aws-sdk/nested-clients/sts\");\n        options.roleAssumer = getDefaultRoleAssumer({\n            ...options.clientConfig,\n            credentialProviderLogger: options.logger,\n            parentClientConfig: {\n                ...options?.parentClientConfig,\n                region: region ?? options?.parentClientConfig?.region,\n            },\n        }, options.clientPlugins);\n    }\n    if (source_profile && source_profile in visitedProfiles) {\n        throw new CredentialsProviderError(`Detected a cycle attempting to resolve credentials for profile` +\n            ` ${getProfileName(options)}. Profiles visited: ` +\n            Object.keys(visitedProfiles).join(\", \"), { logger: options.logger });\n    }\n    options.logger?.debug(`@aws-sdk/credential-provider-ini - finding credential resolver using ${source_profile ? `source_profile=[${source_profile}]` : `profile=[${profileName}]`}`);\n    const sourceCredsProvider = source_profile\n        ? resolveProfileData(source_profile, profiles, options, {\n            ...visitedProfiles,\n            [source_profile]: true,\n        }, isCredentialSourceWithoutRoleArn(profiles[source_profile] ?? {}))\n        : (await resolveCredentialSource(profileData.credential_source, profileName, options.logger)(options))();\n    if (isCredentialSourceWithoutRoleArn(profileData)) {\n        return sourceCredsProvider.then((creds) => setCredentialFeature(creds, \"CREDENTIALS_PROFILE_SOURCE_PROFILE\", \"o\"));\n    }\n    else {\n        const params = {\n            RoleArn: profileData.role_arn,\n            RoleSessionName: profileData.role_session_name || `aws-sdk-js-${Date.now()}`,\n            ExternalId: profileData.external_id,\n            DurationSeconds: parseInt(profileData.duration_seconds || \"3600\", 10),\n        };\n        const { mfa_serial } = profileData;\n        if (mfa_serial) {\n            if (!options.mfaCodeProvider) {\n                throw new CredentialsProviderError(`Profile ${profileName} requires multi-factor authentication, but no MFA code callback was provided.`, { logger: options.logger, tryNextLink: false });\n            }\n            params.SerialNumber = mfa_serial;\n            params.TokenCode = await options.mfaCodeProvider(mfa_serial);\n        }\n        const sourceCreds = await sourceCredsProvider;\n        return options.roleAssumer(sourceCreds, params).then((creds) => setCredentialFeature(creds, \"CREDENTIALS_PROFILE_SOURCE_PROFILE\", \"o\"));\n    }\n};\nconst isCredentialSourceWithoutRoleArn = (section) => {\n    return !section.role_arn && !!section.credential_source;\n};\n","import { setCredentialFeature } from \"@aws-sdk/core/client\";\nexport const isProcessProfile = (arg) => Boolean(arg) && typeof arg === \"object\" && typeof arg.credential_process === \"string\";\nexport const resolveProcessCredentials = async (options, profile) => import(\"@aws-sdk/credential-provider-process\").then(({ fromProcess }) => fromProcess({\n    ...options,\n    profile,\n})().then((creds) => setCredentialFeature(creds, \"CREDENTIALS_PROFILE_PROCESS\", \"v\")));\n","import { setCredentialFeature } from \"@aws-sdk/core/client\";\nexport const resolveSsoCredentials = async (profile, profileData, options = {}) => {\n    const { fromSSO } = await import(\"@aws-sdk/credential-provider-sso\");\n    return fromSSO({\n        profile,\n        logger: options.logger,\n        parentClientConfig: options.parentClientConfig,\n        clientConfig: options.clientConfig,\n    })().then((creds) => {\n        if (profileData.sso_session) {\n            return setCredentialFeature(creds, \"CREDENTIALS_PROFILE_SSO\", \"r\");\n        }\n        else {\n            return setCredentialFeature(creds, \"CREDENTIALS_PROFILE_SSO_LEGACY\", \"t\");\n        }\n    });\n};\nexport const isSsoProfile = (arg) => arg &&\n    (typeof arg.sso_start_url === \"string\" ||\n        typeof arg.sso_account_id === \"string\" ||\n        typeof arg.sso_session === \"string\" ||\n        typeof arg.sso_region === \"string\" ||\n        typeof arg.sso_role_name === \"string\");\n","import { setCredentialFeature } from \"@aws-sdk/core/client\";\nexport const isStaticCredsProfile = (arg) => Boolean(arg) &&\n    typeof arg === \"object\" &&\n    typeof arg.aws_access_key_id === \"string\" &&\n    typeof arg.aws_secret_access_key === \"string\" &&\n    [\"undefined\", \"string\"].indexOf(typeof arg.aws_session_token) > -1 &&\n    [\"undefined\", \"string\"].indexOf(typeof arg.aws_account_id) > -1;\nexport const resolveStaticCredentials = async (profile, options) => {\n    options?.logger?.debug(\"@aws-sdk/credential-provider-ini - resolveStaticCredentials\");\n    const credentials = {\n        accessKeyId: profile.aws_access_key_id,\n        secretAccessKey: profile.aws_secret_access_key,\n        sessionToken: profile.aws_session_token,\n        ...(profile.aws_credential_scope && { credentialScope: profile.aws_credential_scope }),\n        ...(profile.aws_account_id && { accountId: profile.aws_account_id }),\n    };\n    return setCredentialFeature(credentials, \"CREDENTIALS_PROFILE\", \"n\");\n};\n","import { setCredentialFeature } from \"@aws-sdk/core/client\";\nexport const isWebIdentityProfile = (arg) => Boolean(arg) &&\n    typeof arg === \"object\" &&\n    typeof arg.web_identity_token_file === \"string\" &&\n    typeof arg.role_arn === \"string\" &&\n    [\"undefined\", \"string\"].indexOf(typeof arg.role_session_name) > -1;\nexport const resolveWebIdentityCredentials = async (profile, options) => import(\"@aws-sdk/credential-provider-web-identity\").then(({ fromTokenFile }) => fromTokenFile({\n    webIdentityTokenFile: profile.web_identity_token_file,\n    roleArn: profile.role_arn,\n    roleSessionName: profile.role_session_name,\n    roleAssumerWithWebIdentity: options.roleAssumerWithWebIdentity,\n    logger: options.logger,\n    parentClientConfig: options.parentClientConfig,\n})().then((creds) => setCredentialFeature(creds, \"CREDENTIALS_PROFILE_STS_WEB_ID_TOKEN\", \"q\")));\n","import { CredentialsProviderError } from \"@smithy/property-provider\";\nimport { isAssumeRoleProfile, resolveAssumeRoleCredentials } from \"./resolveAssumeRoleCredentials\";\nimport { isProcessProfile, resolveProcessCredentials } from \"./resolveProcessCredentials\";\nimport { isSsoProfile, resolveSsoCredentials } from \"./resolveSsoCredentials\";\nimport { isStaticCredsProfile, resolveStaticCredentials } from \"./resolveStaticCredentials\";\nimport { isWebIdentityProfile, resolveWebIdentityCredentials } from \"./resolveWebIdentityCredentials\";\nexport const resolveProfileData = async (profileName, profiles, options, visitedProfiles = {}, isAssumeRoleRecursiveCall = false) => {\n    const data = profiles[profileName];\n    if (Object.keys(visitedProfiles).length > 0 && isStaticCredsProfile(data)) {\n        return resolveStaticCredentials(data, options);\n    }\n    if (isAssumeRoleRecursiveCall || isAssumeRoleProfile(data, { profile: profileName, logger: options.logger })) {\n        return resolveAssumeRoleCredentials(profileName, profiles, options, visitedProfiles);\n    }\n    if (isStaticCredsProfile(data)) {\n        return resolveStaticCredentials(data, options);\n    }\n    if (isWebIdentityProfile(data)) {\n        return resolveWebIdentityCredentials(data, options);\n    }\n    if (isProcessProfile(data)) {\n        return resolveProcessCredentials(options, profileName);\n    }\n    if (isSsoProfile(data)) {\n        return await resolveSsoCredentials(profileName, data, options);\n    }\n    throw new CredentialsProviderError(`Could not resolve credentials using profile: [${profileName}] in configuration/credentials file(s).`, { logger: options.logger });\n};\n","import { getProfileName, parseKnownFiles } from \"@smithy/shared-ini-file-loader\";\nimport { resolveProfileData } from \"./resolveProfileData\";\nexport const fromIni = (_init = {}) => async ({ callerClientConfig } = {}) => {\n    const init = {\n        ..._init,\n        parentClientConfig: {\n            ...callerClientConfig,\n            ..._init.parentClientConfig,\n        },\n    };\n    init.logger?.debug(\"@aws-sdk/credential-provider-ini - fromIni\");\n    const profiles = await parseKnownFiles(init);\n    return resolveProfileData(getProfileName({\n        profile: _init.profile ?? callerClientConfig?.profile,\n    }), profiles, init);\n};\n","export * from \"./fromIni\";\n"],"names":[],"mappings":"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","ignoreList":[0,1,2,3,4,5,6,7,8]}