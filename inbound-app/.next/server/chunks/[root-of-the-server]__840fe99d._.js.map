{"version":3,"sources":["turbopack:///[project]/app/api/v1/lib/auth.ts","turbopack:///[project]/app/api/v1.1/endpoints/route.ts","turbopack:///[project]/node_modules/next/dist/src/build/templates/app-route.ts"],"sourcesContent":["import { NextRequest } from 'next/server'\nimport { auth } from '@/lib/auth/auth'\n\nexport interface ApiKeyValidationResult {\n  valid: boolean\n  user?: {\n    id: string\n    email: string\n    name: string | null\n  }\n  error?: string\n}\n\n/**\n * Validates an API key from the Authorization header\n * Expected format: \"Bearer <api_key>\" or just \"<api_key>\"\n */\nexport async function validateApiKey(request: NextRequest): Promise<ApiKeyValidationResult> {\n  try {\n    // Get the Authorization header\n    const authHeader = request.headers.get('Authorization')\n    \n    if (!authHeader) {\n      return {\n        valid: false,\n        error: 'Missing Authorization header'\n      }\n    }\n\n    // Extract the API key (support both \"Bearer <key>\" and just \"<key>\")\n    let apiKey: string\n    if (authHeader.startsWith('Bearer ')) {\n      apiKey = authHeader.substring(7)\n    } else {\n      apiKey = authHeader\n    }\n\n    console.log(\"API KEY: \" + apiKey)\n\n    if (!apiKey) {\n      return {\n        valid: false,\n        error: 'Invalid Authorization header format'\n      }\n    }\n\n    // Verify the API key using Better Auth\n    const { valid, error, key } = await auth.api.verifyApiKey({\n      body: {\n        key: apiKey\n      }\n    })\n\n    console.log(\"VALID: \" + valid)\n    console.log(\"ERROR: \" + error)\n    console.log(\"KEY: \" + key?.userId)\n\n    if (!valid || error || !key) {\n      return {\n        valid: false,\n        error: error?.message || 'Invalid API key'\n      }\n    }\n\n    // Check if the API key is enabled\n    if (!key.enabled) {\n      return {\n        valid: false,\n        error: 'API key is disabled'\n      }\n    }\n\n    // Check if the API key has expired\n    if (key.expiresAt && new Date(key.expiresAt) < new Date()) {\n      return {\n        valid: false,\n        error: 'API key has expired'\n      }\n    }\n\n    // Use the userId from the API key directly\n    return {\n      valid: true,\n      user: {\n        id: key.userId,\n        email: key.userId, // We don't have email from API key, use userId as fallback\n        name: null // We don't have name from API key\n      }\n    }\n  } catch (error) {\n    console.error('API key validation error:', error)\n    return {\n      valid: false,\n      error: 'Internal server error during API key validation'\n    }\n  }\n}\n\n/**\n * Middleware function to validate API key and return standardized error responses\n */\nexport function createApiKeyMiddleware() {\n  return async (request: NextRequest) => {\n    const validation = await validateApiKey(request)\n    \n    if (!validation.valid) {\n      return {\n        error: validation.error,\n        status: 401\n      }\n    }\n\n    return {\n      user: validation.user!\n    }\n  }\n} ","import { NextRequest, NextResponse } from 'next/server'\nimport { validateApiKey } from '@/app/api/v1/lib/auth'\nimport { db } from '@/lib/db'\nimport { endpoints, emailGroups, endpointDeliveries } from '@/lib/db/schema'\nimport { eq, and, desc, count } from 'drizzle-orm'\nimport { nanoid } from 'nanoid'\nimport type { CreateEndpointData } from '@/features/endpoints/types'\n\nexport async function GET(request: NextRequest) {\n  try {\n    console.log('üìã GET /api/v1.1/endpoints - Fetching user endpoints')\n    \n    const validation = await validateApiKey(request)\n    if ('error' in validation) {\n      return NextResponse.json({ error: validation.error }, { status: 401 })\n    }\n\n    const userId = validation.user?.id\n    if (!userId) {\n      return NextResponse.json({ error: 'User not found' }, { status: 401 })\n    }\n\n    const { searchParams } = new URL(request.url)\n    const type = searchParams.get('type')\n    const active = searchParams.get('active')\n    const limit = Math.min(parseInt(searchParams.get('limit') || '50'), 100)\n    const offset = parseInt(searchParams.get('offset') || '0')\n\n    // Build where conditions\n    const conditions = [eq(endpoints.userId, userId)]\n\n    if (type && ['webhook', 'email', 'email_group'].includes(type)) {\n      conditions.push(eq(endpoints.type, type))\n    }\n\n    if (active !== null) {\n      const isActive = active === 'true'\n      conditions.push(eq(endpoints.isActive, isActive))\n    }\n\n    const whereConditions = conditions.length > 1 ? and(...conditions) : conditions[0]\n\n    const query = db\n      .select({\n        id: endpoints.id,\n        name: endpoints.name,\n        type: endpoints.type,\n        config: endpoints.config,\n        isActive: endpoints.isActive,\n        description: endpoints.description,\n        userId: endpoints.userId,\n        createdAt: endpoints.createdAt,\n        updatedAt: endpoints.updatedAt,\n      })\n      .from(endpoints)\n      .where(whereConditions)\n\n    const userEndpoints = await query\n      .orderBy(desc(endpoints.createdAt))\n      .limit(limit)\n      .offset(offset)\n\n    // Get total count for pagination (using same filters as main query)\n    const totalCountResult = await db\n      .select({ count: count() })\n      .from(endpoints)\n      .where(whereConditions)\n    \n    const totalCount = totalCountResult[0]?.count || 0\n\n    // For email_group endpoints, also fetch the group emails and delivery stats\n    const endpointsWithEnhancedData = await Promise.all(\n      userEndpoints.map(async (endpoint: any) => {\n        const enhancedEndpoint = {\n          ...endpoint,\n          config: JSON.parse(endpoint.config),\n          groupEmails: null as string[] | null,\n          deliveryStats: {\n            total: 0,\n            successful: 0,\n            failed: 0,\n            lastDelivery: null as string | null\n          }\n        }\n\n        // Add group emails for email_group endpoints\n        if (endpoint.type === 'email_group') {\n          const groupEmails = await db\n            .select({ emailAddress: emailGroups.emailAddress })\n            .from(emailGroups)\n            .where(eq(emailGroups.endpointId, endpoint.id))\n            .orderBy(emailGroups.createdAt)\n\n          enhancedEndpoint.groupEmails = groupEmails.map(g => g.emailAddress)\n        }\n\n        // Add delivery statistics\n        const deliveryStats = await db\n          .select({\n            total: count(),\n            status: endpointDeliveries.status,\n          })\n          .from(endpointDeliveries)\n          .where(eq(endpointDeliveries.endpointId, endpoint.id))\n          .groupBy(endpointDeliveries.status)\n\n        let totalDeliveries = 0\n        let successfulDeliveries = 0\n        let failedDeliveries = 0\n\n        for (const stat of deliveryStats) {\n          totalDeliveries += stat.total\n          if (stat.status === 'success') successfulDeliveries += stat.total\n          if (stat.status === 'failed') failedDeliveries += stat.total\n        }\n\n        // Get the most recent delivery date separately\n        const lastDeliveryResult = await db\n          .select({ lastDelivery: endpointDeliveries.lastAttemptAt })\n          .from(endpointDeliveries)\n          .where(eq(endpointDeliveries.endpointId, endpoint.id))\n          .orderBy(desc(endpointDeliveries.lastAttemptAt))\n          .limit(1)\n\n        const lastDeliveryDate = lastDeliveryResult[0]?.lastDelivery?.toISOString() || null\n\n        enhancedEndpoint.deliveryStats = {\n          total: totalDeliveries,\n          successful: successfulDeliveries,\n          failed: failedDeliveries,\n          lastDelivery: lastDeliveryDate\n        }\n\n        return enhancedEndpoint\n      })\n    )\n\n    console.log(`‚úÖ GET /api/v1.1/endpoints - Retrieved ${userEndpoints.length} endpoints for user ${userId}`)\n\n    return NextResponse.json({ \n      success: true,\n      data: endpointsWithEnhancedData,\n      pagination: {\n        limit,\n        offset,\n        total: totalCount,\n        hasMore: offset + limit < totalCount\n      },\n      meta: {\n        totalCount,\n        activeCount: endpointsWithEnhancedData.filter((e: any) => e.isActive).length,\n        typeBreakdown: {\n          webhook: endpointsWithEnhancedData.filter((e: any) => e.type === 'webhook').length,\n          email: endpointsWithEnhancedData.filter((e: any) => e.type === 'email').length,\n          email_group: endpointsWithEnhancedData.filter((e: any) => e.type === 'email_group').length\n        }\n      }\n    })\n\n  } catch (error) {\n    console.error('‚ùå GET /api/v1.1/endpoints - Error:', error)\n    return NextResponse.json(\n      { \n        success: false,\n        error: 'Failed to fetch endpoints',\n        details: error instanceof Error ? error.message : 'Unknown error'\n      },\n      { status: 500 }\n    )\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    console.log('üìù POST /api/v1.1/endpoints - Creating new endpoint')\n    \n    const validation = await validateApiKey(request)\n    if ('error' in validation) {\n      return NextResponse.json({ error: validation.error }, { status: 401 })\n    }\n\n    const userId = validation.user?.id\n    if (!userId) {\n      return NextResponse.json({ error: 'User not found' }, { status: 401 })\n    }\n\n    const data: CreateEndpointData = await request.json()\n    \n    // Validate required fields\n    if (!data.name || !data.type || !data.config) {\n      return NextResponse.json(\n        { \n          success: false,\n          error: 'Missing required fields',\n          required: ['name', 'type', 'config']\n        },\n        { status: 400 }\n      )\n    }\n\n    // Validate endpoint type\n    if (!['webhook', 'email', 'email_group'].includes(data.type)) {\n      return NextResponse.json(\n        { \n          success: false,\n          error: 'Invalid endpoint type',\n          validTypes: ['webhook', 'email', 'email_group']\n        },\n        { status: 400 }\n      )\n    }\n\n    // Validate config based on type\n    const validationResult = validateEndpointConfig(data.type, data.config)\n    if (!validationResult.valid) {\n      return NextResponse.json(\n        { \n          success: false,\n          error: 'Invalid configuration',\n          details: validationResult.error,\n          configRequirements: getConfigRequirements(data.type)\n        },\n        { status: 400 }\n      )\n    }\n\n    console.log(`üìù POST /api/v1.1/endpoints - Creating ${data.type} endpoint: ${data.name}`)\n\n    const newEndpoint = {\n      id: nanoid(),\n      name: data.name,\n      type: data.type,\n      config: JSON.stringify(data.config),\n      description: data.description || null,\n      userId: userId,\n      isActive: true,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    }\n\n    const [createdEndpoint] = await db.insert(endpoints).values(newEndpoint).returning()\n    \n    // If it's an email group, create the group entries\n    if (data.type === 'email_group' && 'emails' in data.config) {\n      const groupEntries = data.config.emails.map(email => ({\n        id: nanoid(),\n        endpointId: createdEndpoint.id,\n        emailAddress: email,\n        createdAt: new Date()\n      }))\n      \n      if (groupEntries.length > 0) {\n        await db.insert(emailGroups).values(groupEntries)\n        console.log(`üìÆ POST /api/v1.1/endpoints - Created ${groupEntries.length} email group entries`)\n      }\n    }\n\n    // Return enhanced response with parsed config\n    const response = {\n      ...createdEndpoint,\n      config: JSON.parse(createdEndpoint.config),\n      groupEmails: data.type === 'email_group' && 'emails' in data.config ? data.config.emails : null,\n      deliveryStats: {\n        total: 0,\n        successful: 0,\n        failed: 0,\n        lastDelivery: null\n      }\n    }\n\n    console.log(`‚úÖ POST /api/v1.1/endpoints - Successfully created endpoint ${createdEndpoint.id}`)\n\n    return NextResponse.json({ \n      success: true,\n      data: response,\n      message: `${data.type} endpoint created successfully`\n    }, { status: 201 })\n\n  } catch (error) {\n    console.error('‚ùå POST /api/v1.1/endpoints - Error:', error)\n    return NextResponse.json(\n      { \n        success: false,\n        error: 'Failed to create endpoint',\n        details: error instanceof Error ? error.message : 'Unknown error'\n      },\n      { status: 500 }\n    )\n  }\n}\n\n/**\n * Validate endpoint configuration based on type\n */\nfunction validateEndpointConfig(type: string, config: any): { valid: boolean; error?: string } {\n  try {\n    switch (type) {\n      case 'webhook':\n        if (!config.url) {\n          return { valid: false, error: 'Webhook URL is required' }\n        }\n        if (typeof config.url !== 'string') {\n          return { valid: false, error: 'Webhook URL must be a string' }\n        }\n        // Basic URL validation\n        try {\n          new URL(config.url)\n        } catch {\n          return { valid: false, error: 'Invalid webhook URL format' }\n        }\n        // Validate optional fields\n        if (config.timeout && (typeof config.timeout !== 'number' || config.timeout < 1 || config.timeout > 300)) {\n          return { valid: false, error: 'Timeout must be a number between 1 and 300 seconds' }\n        }\n        if (config.retryAttempts && (typeof config.retryAttempts !== 'number' || config.retryAttempts < 0 || config.retryAttempts > 10)) {\n          return { valid: false, error: 'Retry attempts must be a number between 0 and 10' }\n        }\n        break\n\n      case 'email':\n        if (!config.forwardTo) {\n          return { valid: false, error: 'Forward-to email address is required' }\n        }\n        if (typeof config.forwardTo !== 'string') {\n          return { valid: false, error: 'Forward-to email must be a string' }\n        }\n        // Basic email validation\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/\n        if (!emailRegex.test(config.forwardTo)) {\n          return { valid: false, error: 'Invalid forward-to email address format' }\n        }\n        break\n\n      case 'email_group':\n        if (!config.emails || !Array.isArray(config.emails)) {\n          return { valid: false, error: 'Email group must have an emails array' }\n        }\n        if (config.emails.length === 0) {\n          return { valid: false, error: 'Email group must have at least one email address' }\n        }\n        if (config.emails.length > 50) {\n          return { valid: false, error: 'Email group cannot have more than 50 email addresses' }\n        }\n        // Validate each email in the group\n        const emailRegexGroup = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/\n        for (const email of config.emails) {\n          if (typeof email !== 'string' || !emailRegexGroup.test(email)) {\n            return { valid: false, error: `Invalid email address in group: ${email}` }\n          }\n        }\n        // Check for duplicates\n        const uniqueEmails = new Set(config.emails)\n        if (uniqueEmails.size !== config.emails.length) {\n          return { valid: false, error: 'Email group contains duplicate email addresses' }\n        }\n        break\n\n      default:\n        return { valid: false, error: 'Unknown endpoint type' }\n    }\n\n    return { valid: true }\n  } catch (error) {\n    return { valid: false, error: 'Configuration validation failed' }\n  }\n}\n\n/**\n * Get configuration requirements for endpoint type\n */\nfunction getConfigRequirements(type: string) {\n  switch (type) {\n    case 'webhook':\n      return {\n        required: ['url'],\n        optional: ['secret', 'headers', 'timeout', 'retryAttempts'],\n        description: 'Webhook endpoint that receives HTTP POST requests with email data'\n      }\n    case 'email':\n      return {\n        required: ['forwardTo'],\n        optional: ['includeAttachments', 'subjectPrefix', 'fromAddress'],\n        description: 'Forward emails to a single email address'\n      }\n    case 'email_group':\n      return {\n        required: ['emails'],\n        optional: ['includeAttachments', 'subjectPrefix', 'fromAddress'],\n        description: 'Forward emails to multiple email addresses (max 50)'\n      }\n    default:\n      return { required: [], optional: [], description: 'Unknown endpoint type' }\n  }\n}","import {\n  AppRouteRouteModule,\n  type AppRouteRouteModuleOptions,\n} from '../../server/route-modules/app-route/module.compiled'\nimport { RouteKind } from '../../server/route-kind'\nimport { patchFetch as _patchFetch } from '../../server/lib/patch-fetch'\n\nimport * as userland from 'VAR_USERLAND'\n\n// These are injected by the loader afterwards. This is injected as a variable\n// instead of a replacement because this could also be `undefined` instead of\n// an empty string.\ndeclare const nextConfigOutput: AppRouteRouteModuleOptions['nextConfigOutput']\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\n// INJECT:nextConfigOutput\n\nconst routeModule = new AppRouteRouteModule({\n  definition: {\n    kind: RouteKind.APP_ROUTE,\n    page: 'VAR_DEFINITION_PAGE',\n    pathname: 'VAR_DEFINITION_PATHNAME',\n    filename: 'VAR_DEFINITION_FILENAME',\n    bundlePath: 'VAR_DEFINITION_BUNDLE_PATH',\n  },\n  resolvedPagePath: 'VAR_RESOLVED_PAGE_PATH',\n  nextConfigOutput,\n  userland,\n})\n\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule\n\nfunction patchFetch() {\n  return _patchFetch({\n    workAsyncStorage,\n    workUnitAsyncStorage,\n  })\n}\n\nexport {\n  routeModule,\n  workAsyncStorage,\n  workUnitAsyncStorage,\n  serverHooks,\n  patchFetch,\n}\n"],"names":["AppRouteRouteModule","RouteKind","patchFetch","_patchFetch","userland","routeModule","definition","kind","APP_ROUTE","page","pathname","filename","bundlePath","resolvedPagePath","nextConfigOutput","workAsyncStorage","workUnitAsyncStorage","serverHooks"],"mappings":"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","ignoreList":[2]}