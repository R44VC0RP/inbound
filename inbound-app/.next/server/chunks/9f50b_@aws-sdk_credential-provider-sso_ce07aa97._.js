module.exports={900455:e=>{"use strict";var{g:r,__dirname:i}=e;{e.s({isSsoProfile:()=>r});let r=e=>e&&("string"==typeof e.sso_start_url||"string"==typeof e.sso_account_id||"string"==typeof e.sso_session||"string"==typeof e.sso_region||"string"==typeof e.sso_role_name)}},760924:e=>{"use strict";var{g:r,__dirname:i}=e;{e.s({EXPIRE_WINDOW_MS:()=>r,REFRESH_MESSAGE:()=>i});let r=3e5,i="To refresh this SSO session run 'aws sso login' with the corresponding profile."}},399195:e=>{"use strict";var{g:r,__dirname:i}=e;{e.s({getSsoOidcClient:()=>r});let r=async(r,i={})=>{let{SSOOIDCClient:s}=await e.r(100173)(e.i);return new s(Object.assign({},i.clientConfig??{},{region:r??i.clientConfig?.region,logger:i.clientConfig?.logger??i.parentClientConfig?.logger}))}}},980860:e=>{"use strict";var{g:r,__dirname:i}=e;{e.s({getNewSsoOidcToken:()=>r});var s=e.i(399195);let r=async(r,i,o={})=>{let{CreateTokenCommand:t}=await e.r(100173)(e.i);return(await (0,s.getSsoOidcClient)(i,o)).send(new t({clientId:r.clientId,clientSecret:r.clientSecret,refreshToken:r.refreshToken,grantType:"refresh_token"}))}}},261196:e=>{"use strict";var{g:r,__dirname:i}=e;{e.s({validateTokenExpiry:()=>r}),e.i(749573);var s=e.i(351450),o=e.i(760924);let r=e=>{if(e.expiration&&e.expiration.getTime()<Date.now())throw new s.TokenProviderError(`Token is expired. ${o.REFRESH_MESSAGE}`,!1)}}},710970:e=>{"use strict";var{g:r,__dirname:i}=e;{e.s({validateTokenKey:()=>r}),e.i(749573);var s=e.i(351450),o=e.i(760924);let r=(e,r,i=!1)=>{if(void 0===r)throw new s.TokenProviderError(`Value not present for '${e}' in SSO Token${i?". Cannot refresh":""}. ${o.REFRESH_MESSAGE}`,!1)}}},23398:e=>{"use strict";var{g:r,__dirname:i}=e;{e.s({writeSSOTokenToFile:()=>i}),e.i(408256);var s=e.i(297972);let{writeFile:r}=e.i(683886).promises,i=(e,i)=>r((0,s.getSSOTokenFilepath)(e),JSON.stringify(i,null,2))}},460007:e=>{"use strict";var{g:r,__dirname:i}=e;{e.s({fromSso:()=>i}),e.i(749573);var s=e.i(351450);e.i(408256);var o=e.i(798412),t=e.i(977874),n=e.i(453534),a=e.i(369985),l=e.i(760924),g=e.i(980860),d=e.i(261196),c=e.i(710970),f=e.i(23398);let r=new Date(0),i=(e={})=>async({callerClientConfig:i}={})=>{let S,w={...e,parentClientConfig:{...i,...e.parentClientConfig}};w.logger?.debug("@aws-sdk/token-providers - fromSso");let v=await (0,a.parseKnownFiles)(w),u=(0,o.getProfileName)({profile:w.profile??i?.profile}),p=v[u];if(p){if(!p.sso_session)throw new s.TokenProviderError(`Profile '${u}' is missing required property 'sso_session'.`)}else throw new s.TokenProviderError(`Profile '${u}' could not be found in shared credentials file.`,!1);let k=p.sso_session,_=(await (0,n.loadSsoSessionData)(w))[k];if(!_)throw new s.TokenProviderError(`Sso session '${k}' could not be found in shared credentials file.`,!1);for(let e of["sso_start_url","sso_region"])if(!_[e])throw new s.TokenProviderError(`Sso session '${k}' is missing required property '${e}'.`,!1);_.sso_start_url;let h=_.sso_region;try{S=await (0,t.getSSOTokenFromFile)(k)}catch(e){throw new s.TokenProviderError(`The SSO session token associated with profile=${u} was not found or is invalid. ${l.REFRESH_MESSAGE}`,!1)}(0,c.validateTokenKey)("accessToken",S.accessToken),(0,c.validateTokenKey)("expiresAt",S.expiresAt);let{accessToken:T,expiresAt:C}=S,E={token:T,expiration:new Date(C)};if(E.expiration.getTime()-Date.now()>l.EXPIRE_WINDOW_MS)return E;if(Date.now()-r.getTime()<3e4)return(0,d.validateTokenExpiry)(E),E;(0,c.validateTokenKey)("clientId",S.clientId,!0),(0,c.validateTokenKey)("clientSecret",S.clientSecret,!0),(0,c.validateTokenKey)("refreshToken",S.refreshToken,!0);try{r.setTime(Date.now());let e=await (0,g.getNewSsoOidcToken)(S,h,w);(0,c.validateTokenKey)("accessToken",e.accessToken),(0,c.validateTokenKey)("expiresIn",e.expiresIn);let i=new Date(Date.now()+1e3*e.expiresIn);try{await (0,f.writeSSOTokenToFile)(k,{...S,accessToken:e.accessToken,expiresAt:i.toISOString(),refreshToken:e.refreshToken})}catch(e){}return{token:e.accessToken,expiration:i}}catch(e){return(0,d.validateTokenExpiry)(E),E}}}},37669:e=>{"use strict";var{g:r,__dirname:i}=e;{e.s({resolveSSOCredentials:()=>r});var s=e.i(451395),o=e.i(460007);e.i(749573);var t=e.i(818270);e.i(408256);var n=e.i(977874);let r=async({ssoStartUrl:r,ssoSession:i,ssoAccountId:a,ssoRegion:l,ssoRoleName:g,ssoClient:d,clientConfig:c,parentClientConfig:f,profile:S,logger:w})=>{let v,u,p="To refresh this SSO session run aws sso login with the corresponding profile.";if(i)try{let e=await (0,o.fromSso)({profile:S})();v={accessToken:e.token,expiresAt:new Date(e.expiration).toISOString()}}catch(e){throw new t.CredentialsProviderError(e.message,{tryNextLink:!1,logger:w})}else try{v=await (0,n.getSSOTokenFromFile)(r)}catch(e){throw new t.CredentialsProviderError(`The SSO session associated with this profile is invalid. ${p}`,{tryNextLink:!1,logger:w})}if(new Date(v.expiresAt).getTime()-Date.now()<=0)throw new t.CredentialsProviderError(`The SSO session associated with this profile has expired. ${p}`,{tryNextLink:!1,logger:w});let{accessToken:k}=v,{SSOClient:_,GetRoleCredentialsCommand:h}=await e.r(720159)(e.i),T=d||new _(Object.assign({},c??{},{logger:c?.logger??f?.logger,region:c?.region??l}));try{u=await T.send(new h({accountId:a,roleName:g,accessToken:k}))}catch(e){throw new t.CredentialsProviderError(e,{tryNextLink:!1,logger:w})}let{roleCredentials:{accessKeyId:C,secretAccessKey:E,sessionToken:m,expiration:y,credentialScope:P,accountId:O}={}}=u;if(!C||!E||!m||!y)throw new t.CredentialsProviderError("SSO returns an invalid temporary credential.",{tryNextLink:!1,logger:w});let x={accessKeyId:C,secretAccessKey:E,sessionToken:m,expiration:new Date(y),...P&&{credentialScope:P},...O&&{accountId:O}};return i?(0,s.setCredentialFeature)(x,"CREDENTIALS_SSO","s"):(0,s.setCredentialFeature)(x,"CREDENTIALS_SSO_LEGACY","u"),x}}},616071:e=>{"use strict";var{g:r,__dirname:i}=e;{e.s({validateSsoProfile:()=>r}),e.i(749573);var s=e.i(818270);let r=(e,r)=>{let{sso_start_url:i,sso_account_id:o,sso_region:t,sso_role_name:n}=e;if(!i||!o||!t||!n)throw new s.CredentialsProviderError(`Profile is configured with invalid SSO credentials. Required parameters "sso_account_id", "sso_region", "sso_role_name", "sso_start_url". Got ${Object.keys(e).join(", ")}
Reference: https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-sso.html`,{tryNextLink:!1,logger:r});return e}}},65337:e=>{"use strict";var{g:r,__dirname:i}=e;{e.s({fromSSO:()=>r}),e.i(749573);var s=e.i(818270);e.i(408256);var o=e.i(798412),t=e.i(453534),n=e.i(369985),a=e.i(900455),l=e.i(37669),g=e.i(616071);let r=(e={})=>async({callerClientConfig:r}={})=>{e.logger?.debug("@aws-sdk/credential-provider-sso - fromSSO");let{ssoStartUrl:i,ssoAccountId:d,ssoRegion:c,ssoRoleName:f,ssoSession:S}=e,{ssoClient:w}=e,v=(0,o.getProfileName)({profile:e.profile??r?.profile});if(i||d||c||f||S)if(i&&d&&c&&f)return(0,l.resolveSSOCredentials)({ssoStartUrl:i,ssoSession:S,ssoAccountId:d,ssoRegion:c,ssoRoleName:f,ssoClient:w,clientConfig:e.clientConfig,parentClientConfig:e.parentClientConfig,profile:v});else throw new s.CredentialsProviderError('Incomplete configuration. The fromSSO() argument hash must include "ssoStartUrl", "ssoAccountId", "ssoRegion", "ssoRoleName"',{tryNextLink:!1,logger:e.logger});{let r=(await (0,n.parseKnownFiles)(e))[v];if(!r)throw new s.CredentialsProviderError(`Profile ${v} was not found.`,{logger:e.logger});if(!(0,a.isSsoProfile)(r))throw new s.CredentialsProviderError(`Profile ${v} is not configured with SSO credentials.`,{logger:e.logger});if(r?.sso_session){let o=(await (0,t.loadSsoSessionData)(e))[r.sso_session],n=` configurations in profile ${v} and sso-session ${r.sso_session}`;if(c&&c!==o.sso_region)throw new s.CredentialsProviderError("Conflicting SSO region"+n,{tryNextLink:!1,logger:e.logger});if(i&&i!==o.sso_start_url)throw new s.CredentialsProviderError("Conflicting SSO start_url"+n,{tryNextLink:!1,logger:e.logger});r.sso_region=o.sso_region,r.sso_start_url=o.sso_start_url}let{sso_start_url:o,sso_account_id:d,sso_region:f,sso_role_name:S,sso_session:u}=(0,g.validateSsoProfile)(r,e.logger);return(0,l.resolveSSOCredentials)({ssoStartUrl:o,ssoSession:u,ssoAccountId:d,ssoRegion:f,ssoRoleName:S,ssoClient:w,clientConfig:e.clientConfig,parentClientConfig:e.parentClientConfig,profile:v})}}}},471255:e=>{"use strict";var{g:r,__dirname:i}=e;e.s({})},390245:e=>{"use strict";var{g:r,__dirname:i}=e;e.s({}),e.i(65337),e.i(900455),e.i(471255),e.i(616071)},254375:e=>{"use strict";var{g:r,__dirname:i}=e;e.s({}),e.i(65337),e.i(900455),e.i(471255),e.i(616071),e.i(390245)},58224:e=>{"use strict";var{g:r,__dirname:i}=e;e.s({fromSSO:()=>s.fromSSO,isSsoProfile:()=>o.isSsoProfile,validateSsoProfile:()=>t.validateSsoProfile});var s=e.i(65337),o=e.i(900455);e.i(471255);var t=e.i(616071);e.i(390245)},695705:e=>{"use strict";var{g:r,__dirname:i}=e;e.s({fromSSO:()=>s.fromSSO,isSsoProfile:()=>s.isSsoProfile,validateSsoProfile:()=>s.validateSsoProfile}),e.i(254375);var s=e.i(58224)},100173:e=>{var{g:r,__dirname:i}=e;e.v(r=>Promise.all(["server/chunks/11e86_@aws-sdk_b99f065d._.js","server/chunks/34729_@aws-sdk_nested-clients_dist-es_submodules_sso-oidc_ce90a5b7._.js"].map(r=>e.l(r))).then(()=>r(697805)))},720159:e=>{var{g:r,__dirname:i}=e;e.v(r=>Promise.all(["server/chunks/11e86_@aws-sdk_f735935f._.js","server/chunks/9f50b_@aws-sdk_credential-provider-sso_21677f84._.js"].map(r=>e.l(r))).then(()=>r(320296)))}};

//# sourceMappingURL=9f50b_%40aws-sdk_credential-provider-sso_ce07aa97._.js.map