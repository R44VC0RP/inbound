{"version":3,"sources":["turbopack:///[project]/lib/db/domains.ts","turbopack:///[project]/node_modules/deepmerge/dist/cjs.js","turbopack:///[project]/node_modules/next/src/server/route-modules/app-page/vendored/rsc/react-jsx-runtime.ts","turbopack:///[project]/emails/domain-verified.tsx","turbopack:///[project]/lib/email-management/email-notifications.ts","turbopack:///[project]/app/api/inbound/health/route.ts","turbopack:///[project]/node_modules/next/dist/src/build/templates/app-route.ts"],"sourcesContent":["import { db } from './index'\nimport { emailDomains, domainDnsRecords, emailAddresses, type EmailDomain, type NewEmailDomain, type DomainDnsRecord, type NewDomainDnsRecord, type EmailAddress, type NewEmailAddress } from './schema'\nimport { eq, and } from 'drizzle-orm'\nimport { nanoid } from 'nanoid'\n\nexport interface DomainWithRecords extends EmailDomain {\n  dnsRecords: DomainDnsRecord[]\n  emailAddresses?: EmailAddress[]\n}\n\n/**\n * Create a new domain verification record\n */\nexport async function createDomainVerification(\n  domain: string,\n  userId: string,\n  dnsCheckResult: {\n    canReceiveEmails: boolean\n    hasMxRecords: boolean\n    provider?: {\n      name: string\n      confidence: 'high' | 'medium' | 'low'\n    }\n  }\n): Promise<EmailDomain> {\n  const domainRecord: NewEmailDomain = {\n    id: `indm_${nanoid()}`,\n    domain,\n    userId,\n    status: 'pending',\n    canReceiveEmails: dnsCheckResult.canReceiveEmails,\n    hasMxRecords: dnsCheckResult.hasMxRecords,\n    domainProvider: dnsCheckResult.provider?.name,\n    providerConfidence: dnsCheckResult.provider?.confidence,\n    lastDnsCheck: new Date(),\n    updatedAt: new Date(),\n  }\n\n  const [created] = await db.insert(emailDomains).values(domainRecord).returning()\n  return created\n}\n\n/**\n * Update domain with SES verification information\n */\nexport async function updateDomainSesVerification(\n  domainId: string,\n  verificationToken: string,\n  sesStatus: string,\n  dnsRecords: Array<{ type: string; name: string; value: string }>\n): Promise<EmailDomain> {\n  // Update the domain record\n  const [updated] = await db\n    .update(emailDomains)\n    .set({\n      verificationToken,\n      status: sesStatus === 'Success' ? 'verified' : 'pending',\n      lastSesCheck: new Date(),\n      updatedAt: new Date(),\n    })\n    .where(eq(emailDomains.id, domainId))\n    .returning()\n\n  // Insert or update DNS records\n  for (const record of dnsRecords) {\n    const dnsRecord: NewDomainDnsRecord = {\n      id: `dns_${nanoid()}`,\n      domainId,\n      recordType: record.type,\n      name: record.name,\n      value: record.value,\n      isRequired: true,\n      isVerified: false,\n    }\n\n    await db.insert(domainDnsRecords).values(dnsRecord).onConflictDoNothing()\n  }\n\n  return updated\n}\n\n/**\n * Get domain with DNS records by domain name and user ID\n */\nexport async function getDomainWithRecords(domain: string, userId: string): Promise<DomainWithRecords | null> {\n  const domainRecord = await db\n    .select()\n    .from(emailDomains)\n    .where(and(eq(emailDomains.domain, domain), eq(emailDomains.userId, userId)))\n    .limit(1)\n\n  if (!domainRecord[0]) return null\n\n  const dnsRecords = await db\n    .select()\n    .from(domainDnsRecords)\n    .where(eq(domainDnsRecords.domainId, domainRecord[0].id))\n\n  return {\n    ...domainRecord[0],\n    dnsRecords,\n  }\n}\n\n/**\n * Update DNS record verification status\n */\nexport async function updateDnsRecordVerification(\n  domainId: string,\n  recordType: string,\n  name: string,\n  isVerified: boolean\n): Promise<void> {\n  await db\n    .update(domainDnsRecords)\n    .set({\n      isVerified,\n      lastChecked: new Date(),\n    })\n    .where(\n      and(\n        eq(domainDnsRecords.domainId, domainId),\n        eq(domainDnsRecords.recordType, recordType),\n        eq(domainDnsRecords.name, name)\n      )\n    )\n}\n\n/**\n * Check if all required DNS records are verified\n */\nexport async function areAllDnsRecordsVerified(domainId: string): Promise<boolean> {\n  const records = await db\n    .select()\n    .from(domainDnsRecords)\n    .where(and(eq(domainDnsRecords.domainId, domainId), eq(domainDnsRecords.isRequired, true)))\n\n  return records.length > 0 && records.every(record => record.isVerified)\n}\n\n/**\n * Update domain status based on verification progress\n */\nexport async function updateDomainStatus(domainId: string, status: string): Promise<EmailDomain> {\n  const [updated] = await db\n    .update(emailDomains)\n    .set({\n      status,\n      updatedAt: new Date(),\n    })\n    .where(eq(emailDomains.id, domainId))\n    .returning()\n\n  return updated\n}\n\n/**\n * Create a new email address for a domain\n */\nexport async function createEmailAddress(\n  address: string,\n  domainId: string,\n  userId: string\n): Promise<EmailAddress> {\n  const emailRecord: NewEmailAddress = {\n    id: `email_${nanoid()}`,\n    address,\n    domainId,\n    userId,\n    isActive: true,\n    isReceiptRuleConfigured: false,\n    updatedAt: new Date(),\n  }\n\n  const [created] = await db.insert(emailAddresses).values(emailRecord).returning()\n  return created\n}\n\n/**\n * Get email addresses for a domain\n */\nexport async function getEmailAddressesForDomain(domainId: string): Promise<EmailAddress[]> {\n  return db\n    .select()\n    .from(emailAddresses)\n    .where(eq(emailAddresses.domainId, domainId))\n}\n\n/**\n * Update email address receipt rule status\n */\nexport async function updateEmailAddressReceiptRule(\n  emailId: string,\n  isConfigured: boolean,\n  ruleName?: string\n): Promise<EmailAddress> {\n  const [updated] = await db\n    .update(emailAddresses)\n    .set({\n      isReceiptRuleConfigured: isConfigured,\n      receiptRuleName: ruleName,\n      updatedAt: new Date(),\n    })\n    .where(eq(emailAddresses.id, emailId))\n    .returning()\n\n  return updated\n}\n\n/**\n * Get domain with DNS records and email addresses\n */\nexport async function getDomainWithRecordsAndEmails(domain: string, userId: string): Promise<DomainWithRecords | null> {\n  const domainRecord = await db\n    .select()\n    .from(emailDomains)\n    .where(and(eq(emailDomains.domain, domain), eq(emailDomains.userId, userId)))\n    .limit(1)\n\n  if (!domainRecord[0]) return null\n\n  const dnsRecords = await db\n    .select()\n    .from(domainDnsRecords)\n    .where(eq(domainDnsRecords.domainId, domainRecord[0].id))\n\n  const emailAddressList = await db\n    .select()\n    .from(emailAddresses)\n    .where(eq(emailAddresses.domainId, domainRecord[0].id))\n\n  return {\n    ...domainRecord[0],\n    dnsRecords,\n    emailAddresses: emailAddressList,\n  }\n}\n\n/**\n * Delete a domain and all its related records from the database\n */\nexport async function deleteDomainFromDatabase(domainId: string, userId: string): Promise<{ success: boolean; error?: string }> {\n  try {\n    // Verify the domain belongs to the user\n    const domainRecord = await db\n      .select()\n      .from(emailDomains)\n      .where(and(eq(emailDomains.id, domainId), eq(emailDomains.userId, userId)))\n      .limit(1)\n\n    if (!domainRecord[0]) {\n      return {\n        success: false,\n        error: 'Domain not found or access denied'\n      }\n    }\n\n    console.log(`üóëÔ∏è Deleting domain from database: ${domainRecord[0].domain}`)\n\n    // Delete all email addresses for this domain\n    await db\n      .delete(emailAddresses)\n      .where(eq(emailAddresses.domainId, domainId))\n\n    // Delete all DNS records for this domain\n    await db\n      .delete(domainDnsRecords)\n      .where(eq(domainDnsRecords.domainId, domainId))\n\n    // Delete the domain record\n    await db\n      .delete(emailDomains)\n      .where(eq(emailDomains.id, domainId))\n\n    console.log(`‚úÖ Successfully deleted domain from database: ${domainRecord[0].domain}`)\n\n    return { success: true }\n\n  } catch (error) {\n    console.error('Database domain deletion error:', error)\n    return {\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to delete domain from database'\n    }\n  }\n}\n\n/**\n * Enable catch-all for a domain\n */\nexport async function enableDomainCatchAll(\n  domainId: string,\n  webhookId: string,\n  receiptRuleName: string\n): Promise<EmailDomain> {\n  const [updated] = await db\n    .update(emailDomains)\n    .set({\n      isCatchAllEnabled: true,\n      catchAllWebhookId: webhookId,\n      catchAllReceiptRuleName: receiptRuleName,\n      updatedAt: new Date(),\n    })\n    .where(eq(emailDomains.id, domainId))\n    .returning()\n\n  if (!updated) {\n    throw new Error('Domain not found')\n  }\n\n  return updated\n}\n\n/**\n * Disable catch-all for a domain\n */\nexport async function disableDomainCatchAll(domainId: string): Promise<EmailDomain> {\n  const [updated] = await db\n    .update(emailDomains)\n    .set({\n      isCatchAllEnabled: false,\n      catchAllWebhookId: null,\n      catchAllReceiptRuleName: null,\n      updatedAt: new Date(),\n    })\n    .where(eq(emailDomains.id, domainId))\n    .returning()\n\n  if (!updated) {\n    throw new Error('Domain not found')\n  }\n\n  return updated\n}\n\n/**\n * Get domain with catch-all configuration\n */\nexport async function getDomainWithCatchAll(domain: string, userId: string): Promise<EmailDomain | null> {\n  const [domainRecord] = await db\n    .select()\n    .from(emailDomains)\n    .where(and(eq(emailDomains.domain, domain), eq(emailDomains.userId, userId)))\n    .limit(1)\n\n  return domainRecord || null\n}\n\n/**\n * Check if domain has catch-all enabled\n */\nexport async function isDomainCatchAllEnabled(domainId: string): Promise<boolean> {\n  const [domain] = await db\n    .select({ isCatchAllEnabled: emailDomains.isCatchAllEnabled })\n    .from(emailDomains)\n    .where(eq(emailDomains.id, domainId))\n    .limit(1)\n\n  return domain?.isCatchAllEnabled || false\n}\n\n/**\n * Get domain owner information by domain name\n * Returns the user details for the domain owner to send notifications\n */\nexport async function getDomainOwnerByDomain(domain: string): Promise<{ userId: string; userEmail: string; userName: string | null } | null> {\n  try {\n    // Import user table from auth schema\n    const { user } = await import('./auth-schema')\n    \n    const result = await db\n      .select({\n        userId: emailDomains.userId,\n        userEmail: user.email,\n        userName: user.name,\n      })\n      .from(emailDomains)\n      .innerJoin(user, eq(emailDomains.userId, user.id))\n      .where(eq(emailDomains.domain, domain))\n      .limit(1)\n\n    if (!result[0]) {\n      console.log(`‚ùå getDomainOwnerByDomain - No owner found for domain: ${domain}`)\n      return null\n    }\n\n    console.log(`‚úÖ getDomainOwnerByDomain - Found owner for domain ${domain}: ${result[0].userEmail}`)\n    return result[0]\n  } catch (error) {\n    console.error('‚ùå getDomainOwnerByDomain - Error looking up domain owner:', error)\n    return null\n  }\n}\n\n/**\n * Update domain status to verified\n */\nexport async function markDomainAsVerified(domain: string): Promise<EmailDomain | null> {\n  try {\n    const [updated] = await db\n      .update(emailDomains)\n      .set({\n        status: 'verified',\n        lastSesCheck: new Date(),\n        updatedAt: new Date(),\n      })\n      .where(eq(emailDomains.domain, domain))\n      .returning()\n\n    if (updated) {\n      console.log(`‚úÖ markDomainAsVerified - Domain ${domain} marked as verified`)\n    }\n\n    return updated || null\n  } catch (error) {\n    console.error('‚ùå markDomainAsVerified - Error updating domain status:', error)\n    return null\n  }\n} ","'use strict';\n\nvar isMergeableObject = function isMergeableObject(value) {\n\treturn isNonNullObject(value)\n\t\t&& !isSpecial(value)\n};\n\nfunction isNonNullObject(value) {\n\treturn !!value && typeof value === 'object'\n}\n\nfunction isSpecial(value) {\n\tvar stringValue = Object.prototype.toString.call(value);\n\n\treturn stringValue === '[object RegExp]'\n\t\t|| stringValue === '[object Date]'\n\t\t|| isReactElement(value)\n}\n\n// see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25\nvar canUseSymbol = typeof Symbol === 'function' && Symbol.for;\nvar REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for('react.element') : 0xeac7;\n\nfunction isReactElement(value) {\n\treturn value.$$typeof === REACT_ELEMENT_TYPE\n}\n\nfunction emptyTarget(val) {\n\treturn Array.isArray(val) ? [] : {}\n}\n\nfunction cloneUnlessOtherwiseSpecified(value, options) {\n\treturn (options.clone !== false && options.isMergeableObject(value))\n\t\t? deepmerge(emptyTarget(value), value, options)\n\t\t: value\n}\n\nfunction defaultArrayMerge(target, source, options) {\n\treturn target.concat(source).map(function(element) {\n\t\treturn cloneUnlessOtherwiseSpecified(element, options)\n\t})\n}\n\nfunction getMergeFunction(key, options) {\n\tif (!options.customMerge) {\n\t\treturn deepmerge\n\t}\n\tvar customMerge = options.customMerge(key);\n\treturn typeof customMerge === 'function' ? customMerge : deepmerge\n}\n\nfunction getEnumerableOwnPropertySymbols(target) {\n\treturn Object.getOwnPropertySymbols\n\t\t? Object.getOwnPropertySymbols(target).filter(function(symbol) {\n\t\t\treturn Object.propertyIsEnumerable.call(target, symbol)\n\t\t})\n\t\t: []\n}\n\nfunction getKeys(target) {\n\treturn Object.keys(target).concat(getEnumerableOwnPropertySymbols(target))\n}\n\nfunction propertyIsOnObject(object, property) {\n\ttry {\n\t\treturn property in object\n\t} catch(_) {\n\t\treturn false\n\t}\n}\n\n// Protects from prototype poisoning and unexpected merging up the prototype chain.\nfunction propertyIsUnsafe(target, key) {\n\treturn propertyIsOnObject(target, key) // Properties are safe to merge if they don't exist in the target yet,\n\t\t&& !(Object.hasOwnProperty.call(target, key) // unsafe if they exist up the prototype chain,\n\t\t\t&& Object.propertyIsEnumerable.call(target, key)) // and also unsafe if they're nonenumerable.\n}\n\nfunction mergeObject(target, source, options) {\n\tvar destination = {};\n\tif (options.isMergeableObject(target)) {\n\t\tgetKeys(target).forEach(function(key) {\n\t\t\tdestination[key] = cloneUnlessOtherwiseSpecified(target[key], options);\n\t\t});\n\t}\n\tgetKeys(source).forEach(function(key) {\n\t\tif (propertyIsUnsafe(target, key)) {\n\t\t\treturn\n\t\t}\n\n\t\tif (propertyIsOnObject(target, key) && options.isMergeableObject(source[key])) {\n\t\t\tdestination[key] = getMergeFunction(key, options)(target[key], source[key], options);\n\t\t} else {\n\t\t\tdestination[key] = cloneUnlessOtherwiseSpecified(source[key], options);\n\t\t}\n\t});\n\treturn destination\n}\n\nfunction deepmerge(target, source, options) {\n\toptions = options || {};\n\toptions.arrayMerge = options.arrayMerge || defaultArrayMerge;\n\toptions.isMergeableObject = options.isMergeableObject || isMergeableObject;\n\t// cloneUnlessOtherwiseSpecified is added to `options` so that custom arrayMerge()\n\t// implementations can use it. The caller may not replace it.\n\toptions.cloneUnlessOtherwiseSpecified = cloneUnlessOtherwiseSpecified;\n\n\tvar sourceIsArray = Array.isArray(source);\n\tvar targetIsArray = Array.isArray(target);\n\tvar sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;\n\n\tif (!sourceAndTargetTypesMatch) {\n\t\treturn cloneUnlessOtherwiseSpecified(source, options)\n\t} else if (sourceIsArray) {\n\t\treturn options.arrayMerge(target, source, options)\n\t} else {\n\t\treturn mergeObject(target, source, options)\n\t}\n}\n\ndeepmerge.all = function deepmergeAll(array, options) {\n\tif (!Array.isArray(array)) {\n\t\tthrow new Error('first argument should be an array')\n\t}\n\n\treturn array.reduce(function(prev, next) {\n\t\treturn deepmerge(prev, next, options)\n\t}, {})\n};\n\nvar deepmerge_1 = deepmerge;\n\nmodule.exports = deepmerge_1;\n","module.exports = require('../../module.compiled').vendored[\n  'react-rsc'\n].ReactJsxRuntime\n","import {\n  Body,\n  Button,\n  Container,\n  Head,\n  Heading,\n  Html,\n  Img,\n  Link,\n  Preview,\n  Section,\n  Text,\n} from '@react-email/components';\nimport * as React from 'react';\n\ninterface DomainVerifiedEmailProps {\n  userFirstname?: string;\n  domain?: string;\n  verifiedAt?: string;\n}\n\nexport const DomainVerifiedEmail = ({\n  userFirstname = 'User',\n  domain = 'example.com',\n  verifiedAt = new Date().toLocaleDateString(),\n}: DomainVerifiedEmailProps) => (\n  <Html>\n    <Head />\n    <Preview>üéâ {domain} is verified and ready - inbound</Preview>\n    <Body style={main}>\n      <Container style={container}>\n        {/* Header */}\n        <Section style={headerSection}>\n          <div style={logoContainer}>\n            <Img\n              src=\"https://inbound.new/inbound-wordmark.png\"\n              alt=\"inbound\"\n              width=\"200\"\n              height=\"60\"\n              style={wordmarkStyle}\n            />\n          </div>\n        </Section>\n        \n        <Text style={text}>\n          Hi {userFirstname},\n        </Text>\n        \n        <Text style={text}>\n          üéâ Your domain <strong>{domain}</strong> is now verified and ready to receive emails through inbound.\n        </Text>\n\n        <Section style={detailsSection}>\n          <Text style={detailText}>\n            ‚úÖ Verified on {verifiedAt}<br/>\n            ‚úÖ Email receiving active<br/>\n            ‚úÖ AWS SES configured\n          </Text>\n        </Section>\n\n        <Section style={buttonSection}>\n          <Button style={button} href=\"https://inbound.new/dashboard\">\n            open dashboard\n          </Button>\n        </Section>\n\n        \n        \n        <Text style={text}>\n          reply to this email if you have any questions, we read every email \n          <br/>\n          <br/>\n          - ryan\n        </Text>\n\n        <Section style={footerSection}>\n          <Text style={footerText}>\n            <Link href=\"https://inbound.new/docs\" style={link}>docs</Link> ‚Ä¢ <Link href=\"https://inbound.new/support\" style={link}>support</Link>\n          </Text>\n        </Section>\n      </Container>\n    </Body>\n  </Html>\n);\n\nexport default DomainVerifiedEmail;\n\n// Styles\nconst main = {\n  backgroundColor: '#f8fafc',\n  fontFamily: 'Outfit, Arial, sans-serif',\n};\n\nconst container = {\n  backgroundColor: '#ffffff',\n  margin: '0 auto',\n  padding: '20px 0 48px',\n  marginBottom: '64px',\n  borderRadius: '12px',\n  boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1)',\n};\n\nconst headerSection = {\n  textAlign: 'center' as const,\n  padding: '32px 0 24px',\n  borderBottom: '1px solid #e2e8f0',\n  marginBottom: '32px',\n};\n\nconst logoContainer = {\n  textAlign: 'center' as const,\n  marginBottom: '0',\n};\n\nconst wordmarkStyle = {\n  maxWidth: '100%',\n  height: 'auto',\n};\n\nconst detailsSection = {\n  backgroundColor: '#f8fafc',\n  padding: '20px 24px',\n};\n\nconst detailText = {\n  color: '#334155',\n  fontSize: '14px',\n  lineHeight: '22px',\n  margin: '0',\n  fontFamily: 'Outfit, Arial, sans-serif',\n  wordBreak: 'break-word' as const,\n};\n\nconst buttonSection = {\n  textAlign: 'center' as const,\n  margin: '32px 0',\n};\n\nconst footerSection = {\n  textAlign: 'center' as const,\n  marginTop: '40px',\n  paddingTop: '20px',\n  borderTop: '1px solid #e2e8f0',\n};\n\nconst text = {\n  color: '#334155',\n  fontSize: '16px',\n  lineHeight: '24px',\n  margin: '16px 24px',\n  fontFamily: 'Outfit, Arial, sans-serif',\n};\n\nconst button = {\n  backgroundColor: '#6C47FF',\n  borderRadius: '8px',\n  color: '#ffffff',\n  fontSize: '16px',\n  fontWeight: 'medium',\n  textDecoration: 'none',\n  textAlign: 'center' as const,\n  display: 'inline-block',\n  padding: '14px 32px',\n  border: 'none',\n  cursor: 'pointer',\n  boxShadow: '0 4px 6px -1px rgba(108, 71, 255, 0.3)',\n  fontFamily: 'Outfit, Arial, sans-serif',\n};\n\nconst footerText = {\n  color: '#64748b',\n  fontSize: '14px',\n  lineHeight: '24px',\n  margin: '0',\n  fontFamily: 'Outfit, Arial, sans-serif',\n  textAlign: 'center' as const,\n};\n\nconst link = {\n  color: '#6C47FF',\n  textDecoration: 'underline',\n  fontWeight: '500',\n}; ","import { Resend } from 'resend';\nimport { render } from '@react-email/render';\nimport DomainVerifiedEmail from '@/emails/domain-verified';\n\n// Initialize Resend client\nconst resend = new Resend(process.env.RESEND_API_KEY);\n\nexport interface DomainVerificationNotificationData {\n  userEmail: string;\n  userName: string | null;\n  domain: string;\n  verifiedAt: Date;\n}\n\n/**\n * Send domain verification notification email to the domain owner\n */\nexport async function sendDomainVerificationNotification(\n  data: DomainVerificationNotificationData\n): Promise<{ success: boolean; messageId?: string; error?: string }> {\n  try {\n    console.log(`üìß sendDomainVerificationNotification - Sending notification for domain: ${data.domain} to ${data.userEmail}`);\n\n    // Validate required environment variable\n    if (!process.env.RESEND_API_KEY) {\n      console.error('‚ùå sendDomainVerificationNotification - RESEND_API_KEY not configured');\n      return {\n        success: false,\n        error: 'Email service not configured'\n      };\n    }\n\n    // Prepare email template props\n    const templateProps = {\n      userFirstname: data.userName?.split(' ')[0] || 'User',\n      domain: data.domain,\n      verifiedAt: data.verifiedAt.toLocaleDateString('en-US', {\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric',\n        hour: '2-digit',\n        minute: '2-digit',\n        timeZoneName: 'short'\n      })\n    };\n\n    // Render the email template\n    const html = await render(DomainVerifiedEmail(templateProps));\n\n    // Determine the from address\n    // Use a verified domain if available, otherwise use the default\n    const fromEmail = process.env.RESEND_FROM_EMAIL || 'notifications@inbound.new';\n    \n    // Format sender with name - Resend accepts \"Name <email@domain.com>\" format\n    const fromWithName = `inbound support <${fromEmail}>`;\n\n    // Send the email\n    const response = await resend.emails.send({\n      from: fromWithName,\n      to: data.userEmail,\n      subject: `üéâ ${data.domain} has been successfully verified - inbound`,\n      html: html,\n      tags: [\n        { name: 'type', value: 'domain-verification' },\n        { name: 'domain', value: data.domain.replace(/[^a-zA-Z0-9_-]/g, '_') }\n      ]\n    });\n\n    if (response.error) {\n      console.error('‚ùå sendDomainVerificationNotification - Resend API error:', response.error);\n      return {\n        success: false,\n        error: `Email sending failed: ${response.error.message}`\n      };\n    }\n\n    console.log(`‚úÖ sendDomainVerificationNotification - Email sent successfully to ${data.userEmail}`);\n    console.log(`   üìß Message ID: ${response.data?.id}`);\n\n    return {\n      success: true,\n      messageId: response.data?.id\n    };\n\n  } catch (error) {\n    console.error('‚ùå sendDomainVerificationNotification - Unexpected error:', error);\n    return {\n      success: false,\n      error: error instanceof Error ? error.message : 'Unknown error occurred'\n    };\n  }\n}\n\n/**\n * Send a test domain verification email (for testing purposes)\n */\nexport async function sendTestDomainVerificationEmail(\n  testEmail: string,\n  testDomain: string = 'example.com'\n): Promise<{ success: boolean; messageId?: string; error?: string }> {\n  return sendDomainVerificationNotification({\n    userEmail: testEmail,\n    userName: 'Test User',\n    domain: testDomain,\n    verifiedAt: new Date()\n  });\n} ","import { NextRequest, NextResponse } from 'next/server';\nimport { getDomainOwnerByDomain, markDomainAsVerified } from '@/lib/db/domains';\nimport { sendDomainVerificationNotification } from '@/lib/email-management/email-notifications';\n\n// Types for AWS SNS notifications\ninterface SNSNotification {\n  Type: 'Notification' | 'SubscriptionConfirmation' | 'UnsubscribeConfirmation';\n  MessageId: string;\n  TopicArn: string;\n  Message: string;\n  Timestamp: string;\n  SignatureVersion: string;\n  Signature: string;\n  SigningCertURL: string;\n  UnsubscribeURL?: string;\n  SubscribeURL?: string;\n  Token?: string;\n}\n\ninterface AWSHealthEvent {\n  version: string;\n  id: string;\n  'detail-type': string;\n  source: string;\n  account: string;\n  time: string;\n  region: string;\n  resources: string[];\n  detail: {\n    eventArn: string;\n    service: string;\n    eventTypeCode: string;\n    eventTypeCategory: string;\n    eventScopeCode: string;\n    communicationId: string;\n    startTime: string;\n    endTime: string;\n    lastUpdatedTime: string;\n    statusCode: string;\n    eventRegion: string;\n    eventDescription: Array<{\n      language: string;\n      latestDescription: string;\n    }>;\n    eventMetadata: Record<string, string>;\n    affectedEntities: Array<{\n      entityValue: string;\n      status: string;\n      lastUpdatedTime: string;\n    }>;\n    affectedAccount: string;\n    page: string;\n    totalPages: string;\n  };\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    // Get the request body\n    const body = await request.json() as SNSNotification;\n    \n    // Parse the SNS notification\n    const parsedNotification = parseSNSNotification(body);\n    \n    // Log the parsed notification\n    console.log('=== AWS SNS Health Notification ===');\n    console.log('Timestamp:', new Date().toISOString());\n    console.log('SNS Message Type:', parsedNotification.messageType);\n    console.log('Topic ARN:', parsedNotification.topicArn);\n    \n    if (parsedNotification.healthEvent) {\n      console.log('--- AWS Health Event Details ---');\n      console.log('Service:', parsedNotification.healthEvent.detail.service);\n      console.log('Event Type:', parsedNotification.healthEvent.detail.eventTypeCode);\n      console.log('Status:', parsedNotification.healthEvent.detail.statusCode);\n      console.log('Region:', parsedNotification.healthEvent.detail.eventRegion);\n      console.log('Affected Resources:', parsedNotification.healthEvent.resources);\n      console.log('Description:', parsedNotification.healthEvent.detail.eventDescription[0]?.latestDescription);\n      console.log('Affected Entities:', parsedNotification.healthEvent.detail.affectedEntities);\n      console.log('Event Metadata:', parsedNotification.healthEvent.detail.eventMetadata);\n\n      // Handle domain verification events\n      await handleDomainVerificationEvent(parsedNotification.healthEvent);\n    }\n    \n    // Log raw data for debugging\n    console.log('--- Raw SNS Data ---');\n    console.log(JSON.stringify(parsedNotification, null, 2));\n\n    // Return success response\n    return NextResponse.json({ \n      status: 'healthy',\n      timestamp: new Date().toISOString(),\n      message: 'Health notification processed successfully',\n      messageType: parsedNotification.messageType,\n      eventType: parsedNotification.healthEvent?.detail?.eventTypeCode || 'unknown'\n    });\n  } catch (error) {\n    console.error('Error processing health notification:', error);\n    \n    return NextResponse.json(\n      { \n        status: 'error',\n        timestamp: new Date().toISOString(),\n        message: 'Health notification processing failed',\n        error: error instanceof Error ? error.message : 'Unknown error'\n      },\n      { status: 500 }\n    );\n  }\n}\n\nfunction parseSNSNotification(snsData: SNSNotification) {\n  const result = {\n    messageType: snsData.Type,\n    messageId: snsData.MessageId,\n    topicArn: snsData.TopicArn,\n    timestamp: snsData.Timestamp,\n    healthEvent: null as AWSHealthEvent | null\n  };\n\n  // Parse the Message field if it's a Notification\n  if (snsData.Type === 'Notification' && snsData.Message) {\n    try {\n      result.healthEvent = JSON.parse(snsData.Message) as AWSHealthEvent;\n    } catch (error) {\n      console.error('Failed to parse SNS Message field:', error);\n    }\n  }\n\n  return result;\n}\n\n/**\n * Handle domain verification events from AWS Health\n */\nasync function handleDomainVerificationEvent(healthEvent: AWSHealthEvent) {\n  try {\n    const { service, eventTypeCode, statusCode } = healthEvent.detail;\n    \n    // Only handle SES domain verification success events\n    if (service !== 'SES' || eventTypeCode !== 'AWS_SES_VERIFICATION_PENDING_TO_SUCCESS' || statusCode !== 'closed') {\n      console.log(`‚è≠Ô∏è handleDomainVerificationEvent - Skipping non-domain-verification event: ${eventTypeCode}`);\n      return;\n    }\n\n    // Extract domain from affected resources\n    const affectedDomains = healthEvent.resources || [];\n    \n    if (affectedDomains.length === 0) {\n      console.log('‚ö†Ô∏è handleDomainVerificationEvent - No affected domains found in health event');\n      return;\n    }\n\n    // Process each affected domain\n    for (const domain of affectedDomains) {\n      console.log(`üîç handleDomainVerificationEvent - Processing domain verification: ${domain}`);\n\n      try {\n        // Look up domain owner\n        const domainOwner = await getDomainOwnerByDomain(domain);\n        \n        if (!domainOwner) {\n          console.log(`‚ö†Ô∏è handleDomainVerificationEvent - No owner found for domain: ${domain}`);\n          continue;\n        }\n\n        // Update domain status to verified\n        const updatedDomain = await markDomainAsVerified(domain);\n        \n        if (!updatedDomain) {\n          console.log(`‚ö†Ô∏è handleDomainVerificationEvent - Failed to update domain status: ${domain}`);\n          continue;\n        }\n\n        // Send verification notification email\n        const emailResult = await sendDomainVerificationNotification({\n          userEmail: domainOwner.userEmail,\n          userName: domainOwner.userName,\n          domain: domain,\n          verifiedAt: new Date()\n        });\n\n        if (emailResult.success) {\n          console.log(`‚úÖ handleDomainVerificationEvent - Notification sent for domain: ${domain}`);\n          console.log(`   üìß Email sent to: ${domainOwner.userEmail}`);\n          console.log(`   üìß Message ID: ${emailResult.messageId}`);\n        } else {\n          console.error(`‚ùå handleDomainVerificationEvent - Failed to send notification for domain: ${domain}`);\n          console.error(`   Error: ${emailResult.error}`);\n        }\n\n      } catch (error) {\n        console.error(`‚ùå handleDomainVerificationEvent - Error processing domain ${domain}:`, error);\n        // Continue processing other domains\n      }\n    }\n\n  } catch (error) {\n    console.error('‚ùå handleDomainVerificationEvent - Unexpected error:', error);\n  }\n}\n\n// Optional: Add GET method for basic health checks\nexport async function GET() {\n  console.log('GET request to /api/inbound/health:', {\n    timestamp: new Date().toISOString(),\n    message: 'Health check via GET'\n  });\n\n  return NextResponse.json({ \n    status: 'healthy',\n    timestamp: new Date().toISOString(),\n    message: 'Health check successful (GET)'\n  });\n} ","import {\n  AppRouteRouteModule,\n  type AppRouteRouteModuleOptions,\n} from '../../server/route-modules/app-route/module.compiled'\nimport { RouteKind } from '../../server/route-kind'\nimport { patchFetch as _patchFetch } from '../../server/lib/patch-fetch'\n\nimport * as userland from 'VAR_USERLAND'\n\n// These are injected by the loader afterwards. This is injected as a variable\n// instead of a replacement because this could also be `undefined` instead of\n// an empty string.\ndeclare const nextConfigOutput: AppRouteRouteModuleOptions['nextConfigOutput']\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\n// INJECT:nextConfigOutput\n\nconst routeModule = new AppRouteRouteModule({\n  definition: {\n    kind: RouteKind.APP_ROUTE,\n    page: 'VAR_DEFINITION_PAGE',\n    pathname: 'VAR_DEFINITION_PATHNAME',\n    filename: 'VAR_DEFINITION_FILENAME',\n    bundlePath: 'VAR_DEFINITION_BUNDLE_PATH',\n  },\n  resolvedPagePath: 'VAR_RESOLVED_PAGE_PATH',\n  nextConfigOutput,\n  userland,\n})\n\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule\n\nfunction patchFetch() {\n  return _patchFetch({\n    workAsyncStorage,\n    workUnitAsyncStorage,\n  })\n}\n\nexport {\n  routeModule,\n  workAsyncStorage,\n  workUnitAsyncStorage,\n  serverHooks,\n  patchFetch,\n}\n"],"names":["module","exports","require","vendored","ReactJsxRuntime","AppRouteRouteModule","RouteKind","patchFetch","_patchFetch","userland","routeModule","definition","kind","APP_ROUTE","page","pathname","filename","bundlePath","resolvedPagePath","nextConfigOutput","workAsyncStorage","workUnitAsyncStorage","serverHooks"],"mappings":"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","ignoreList":[1,2,6]}