{"version":3,"sources":["turbopack:///[project]/node_modules/better-auth/dist/integrations/next-js.mjs","turbopack:///[project]/app/api/auth/[...all]/route.ts","turbopack:///[project]/node_modules/next/dist/src/build/templates/app-route.ts"],"sourcesContent":["import '../shared/better-auth.8zoxzg-F.mjs';\nimport '@better-auth/utils/base64';\nimport '@better-auth/utils/hmac';\nimport { parseSetCookieHeader } from '../cookies/index.mjs';\nimport 'better-call';\nimport 'zod';\nimport { c as createAuthMiddleware } from '../shared/better-auth.Dvh-YFwT.mjs';\nimport '../shared/better-auth.Cc72UxUH.mjs';\nimport '../shared/better-auth.B5gC5Szw.mjs';\nimport '../plugins/organization/access/index.mjs';\nimport '../shared/better-auth.B4Qoxdgc.mjs';\nimport '../shared/better-auth.Cqykj82J.mjs';\nimport 'defu';\nimport '@better-auth/utils/hash';\nimport '@noble/ciphers/chacha';\nimport '@noble/ciphers/utils';\nimport '@noble/ciphers/webcrypto';\nimport 'jose';\nimport '@noble/hashes/scrypt';\nimport '@better-auth/utils';\nimport '@better-auth/utils/hex';\nimport '@noble/hashes/utils';\nimport '@better-auth/utils/otp';\nimport '../plugins/admin/access/index.mjs';\nimport '@better-fetch/fetch';\nimport '@better-auth/utils/random';\nimport '../shared/better-auth.fsvwNeUx.mjs';\nimport 'kysely';\nimport '../shared/better-auth.DdzSJf-n.mjs';\nimport '../shared/better-auth.CW6D9eSx.mjs';\nimport '../shared/better-auth.tB5eU6EY.mjs';\nimport '../shared/better-auth.VTXNLFMT.mjs';\nimport '../social-providers/index.mjs';\nimport '../shared/better-auth.DufyW0qf.mjs';\nimport '../shared/better-auth.dn8_oqOu.mjs';\nimport '../shared/better-auth.BUPPRXfK.mjs';\nimport '../shared/better-auth.DDEbWX-S.mjs';\nimport 'jose/errors';\nimport '@better-auth/utils/binary';\nimport '../shared/better-auth.ffWeg50w.mjs';\nimport '../shared/better-auth.OuYYTHC7.mjs';\nimport '../plugins/access/index.mjs';\n\nfunction toNextJsHandler(auth) {\n  const handler = async (request) => {\n    return \"handler\" in auth ? auth.handler(request) : auth(request);\n  };\n  return {\n    GET: handler,\n    POST: handler\n  };\n}\nconst nextCookies = () => {\n  return {\n    id: \"next-cookies\",\n    hooks: {\n      after: [\n        {\n          matcher(ctx) {\n            return true;\n          },\n          handler: createAuthMiddleware(async (ctx) => {\n            const returned = ctx.context.responseHeaders;\n            if (\"_flag\" in ctx && ctx._flag === \"router\") {\n              return;\n            }\n            if (returned instanceof Headers) {\n              const setCookies = returned?.get(\"set-cookie\");\n              if (!setCookies) return;\n              const parsed = parseSetCookieHeader(setCookies);\n              const { cookies } = await import('next/headers');\n              const cookieHelper = await cookies();\n              parsed.forEach((value, key) => {\n                if (!key) return;\n                const opts = {\n                  sameSite: value.samesite,\n                  secure: value.secure,\n                  maxAge: value[\"max-age\"],\n                  httpOnly: value.httponly,\n                  domain: value.domain,\n                  path: value.path\n                };\n                try {\n                  cookieHelper.set(key, decodeURIComponent(value.value), opts);\n                } catch (e) {\n                }\n              });\n              return;\n            }\n          })\n        }\n      ]\n    }\n  };\n};\n\nexport { nextCookies, toNextJsHandler };\n","import { auth } from \"@/lib/auth/auth\";\nimport { toNextJsHandler } from \"better-auth/next-js\";\n \nexport const { POST, GET } = toNextJsHandler(auth);","import {\n  AppRouteRouteModule,\n  type AppRouteRouteModuleOptions,\n} from '../../server/route-modules/app-route/module.compiled'\nimport { RouteKind } from '../../server/route-kind'\nimport { patchFetch as _patchFetch } from '../../server/lib/patch-fetch'\n\nimport * as userland from 'VAR_USERLAND'\n\n// These are injected by the loader afterwards. This is injected as a variable\n// instead of a replacement because this could also be `undefined` instead of\n// an empty string.\ndeclare const nextConfigOutput: AppRouteRouteModuleOptions['nextConfigOutput']\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\n// INJECT:nextConfigOutput\n\nconst routeModule = new AppRouteRouteModule({\n  definition: {\n    kind: RouteKind.APP_ROUTE,\n    page: 'VAR_DEFINITION_PAGE',\n    pathname: 'VAR_DEFINITION_PATHNAME',\n    filename: 'VAR_DEFINITION_FILENAME',\n    bundlePath: 'VAR_DEFINITION_BUNDLE_PATH',\n  },\n  resolvedPagePath: 'VAR_RESOLVED_PAGE_PATH',\n  nextConfigOutput,\n  userland,\n})\n\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule\n\nfunction patchFetch() {\n  return _patchFetch({\n    workAsyncStorage,\n    workUnitAsyncStorage,\n  })\n}\n\nexport {\n  routeModule,\n  workAsyncStorage,\n  workUnitAsyncStorage,\n  serverHooks,\n  patchFetch,\n}\n"],"names":["AppRouteRouteModule","RouteKind","patchFetch","_patchFetch","userland","routeModule","definition","kind","APP_ROUTE","page","pathname","filename","bundlePath","resolvedPagePath","nextConfigOutput","workAsyncStorage","workUnitAsyncStorage","serverHooks"],"mappings":"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","ignoreList":[0,2]}