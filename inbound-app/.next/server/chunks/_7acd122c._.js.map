{"version":3,"sources":["turbopack:///[project]/node_modules/@aws-sdk/client-ses/dist-es/commands/CreateReceiptRuleSetCommand.js","turbopack:///[project]/node_modules/@aws-sdk/client-ses/dist-es/commands/CreateReceiptRuleCommand.js","turbopack:///[project]/node_modules/@aws-sdk/client-ses/dist-es/commands/UpdateReceiptRuleCommand.js","turbopack:///[project]/node_modules/@aws-sdk/client-ses/dist-es/commands/DeleteReceiptRuleCommand.js","turbopack:///[project]/node_modules/@aws-sdk/client-ses/dist-es/commands/DescribeReceiptRuleSetCommand.js","turbopack:///[project]/node_modules/@aws-sdk/client-ses/dist-es/commands/SetActiveReceiptRuleSetCommand.js","turbopack:///[project]/lib/aws-ses/aws-ses-rules.ts"],"sourcesContent":["import { getEndpointPlugin } from \"@smithy/middleware-endpoint\";\nimport { getSerdePlugin } from \"@smithy/middleware-serde\";\nimport { Command as $Command } from \"@smithy/smithy-client\";\nimport { commonParams } from \"../endpoint/EndpointParameters\";\nimport { de_CreateReceiptRuleSetCommand, se_CreateReceiptRuleSetCommand } from \"../protocols/Aws_query\";\nexport { $Command };\nexport class CreateReceiptRuleSetCommand extends $Command\n    .classBuilder()\n    .ep(commonParams)\n    .m(function (Command, cs, config, o) {\n    return [\n        getSerdePlugin(config, this.serialize, this.deserialize),\n        getEndpointPlugin(config, Command.getEndpointParameterInstructions()),\n    ];\n})\n    .s(\"SimpleEmailService\", \"CreateReceiptRuleSet\", {})\n    .n(\"SESClient\", \"CreateReceiptRuleSetCommand\")\n    .f(void 0, void 0)\n    .ser(se_CreateReceiptRuleSetCommand)\n    .de(de_CreateReceiptRuleSetCommand)\n    .build() {\n}\n","import { getEndpointPlugin } from \"@smithy/middleware-endpoint\";\nimport { getSerdePlugin } from \"@smithy/middleware-serde\";\nimport { Command as $Command } from \"@smithy/smithy-client\";\nimport { commonParams } from \"../endpoint/EndpointParameters\";\nimport { de_CreateReceiptRuleCommand, se_CreateReceiptRuleCommand } from \"../protocols/Aws_query\";\nexport { $Command };\nexport class CreateReceiptRuleCommand extends $Command\n    .classBuilder()\n    .ep(commonParams)\n    .m(function (Command, cs, config, o) {\n    return [\n        getSerdePlugin(config, this.serialize, this.deserialize),\n        getEndpointPlugin(config, Command.getEndpointParameterInstructions()),\n    ];\n})\n    .s(\"SimpleEmailService\", \"CreateReceiptRule\", {})\n    .n(\"SESClient\", \"CreateReceiptRuleCommand\")\n    .f(void 0, void 0)\n    .ser(se_CreateReceiptRuleCommand)\n    .de(de_CreateReceiptRuleCommand)\n    .build() {\n}\n","import { getEndpointPlugin } from \"@smithy/middleware-endpoint\";\nimport { getSerdePlugin } from \"@smithy/middleware-serde\";\nimport { Command as $Command } from \"@smithy/smithy-client\";\nimport { commonParams } from \"../endpoint/EndpointParameters\";\nimport { de_UpdateReceiptRuleCommand, se_UpdateReceiptRuleCommand } from \"../protocols/Aws_query\";\nexport { $Command };\nexport class UpdateReceiptRuleCommand extends $Command\n    .classBuilder()\n    .ep(commonParams)\n    .m(function (Command, cs, config, o) {\n    return [\n        getSerdePlugin(config, this.serialize, this.deserialize),\n        getEndpointPlugin(config, Command.getEndpointParameterInstructions()),\n    ];\n})\n    .s(\"SimpleEmailService\", \"UpdateReceiptRule\", {})\n    .n(\"SESClient\", \"UpdateReceiptRuleCommand\")\n    .f(void 0, void 0)\n    .ser(se_UpdateReceiptRuleCommand)\n    .de(de_UpdateReceiptRuleCommand)\n    .build() {\n}\n","import { getEndpointPlugin } from \"@smithy/middleware-endpoint\";\nimport { getSerdePlugin } from \"@smithy/middleware-serde\";\nimport { Command as $Command } from \"@smithy/smithy-client\";\nimport { commonParams } from \"../endpoint/EndpointParameters\";\nimport { de_DeleteReceiptRuleCommand, se_DeleteReceiptRuleCommand } from \"../protocols/Aws_query\";\nexport { $Command };\nexport class DeleteReceiptRuleCommand extends $Command\n    .classBuilder()\n    .ep(commonParams)\n    .m(function (Command, cs, config, o) {\n    return [\n        getSerdePlugin(config, this.serialize, this.deserialize),\n        getEndpointPlugin(config, Command.getEndpointParameterInstructions()),\n    ];\n})\n    .s(\"SimpleEmailService\", \"DeleteReceiptRule\", {})\n    .n(\"SESClient\", \"DeleteReceiptRuleCommand\")\n    .f(void 0, void 0)\n    .ser(se_DeleteReceiptRuleCommand)\n    .de(de_DeleteReceiptRuleCommand)\n    .build() {\n}\n","import { getEndpointPlugin } from \"@smithy/middleware-endpoint\";\nimport { getSerdePlugin } from \"@smithy/middleware-serde\";\nimport { Command as $Command } from \"@smithy/smithy-client\";\nimport { commonParams } from \"../endpoint/EndpointParameters\";\nimport { de_DescribeReceiptRuleSetCommand, se_DescribeReceiptRuleSetCommand } from \"../protocols/Aws_query\";\nexport { $Command };\nexport class DescribeReceiptRuleSetCommand extends $Command\n    .classBuilder()\n    .ep(commonParams)\n    .m(function (Command, cs, config, o) {\n    return [\n        getSerdePlugin(config, this.serialize, this.deserialize),\n        getEndpointPlugin(config, Command.getEndpointParameterInstructions()),\n    ];\n})\n    .s(\"SimpleEmailService\", \"DescribeReceiptRuleSet\", {})\n    .n(\"SESClient\", \"DescribeReceiptRuleSetCommand\")\n    .f(void 0, void 0)\n    .ser(se_DescribeReceiptRuleSetCommand)\n    .de(de_DescribeReceiptRuleSetCommand)\n    .build() {\n}\n","import { getEndpointPlugin } from \"@smithy/middleware-endpoint\";\nimport { getSerdePlugin } from \"@smithy/middleware-serde\";\nimport { Command as $Command } from \"@smithy/smithy-client\";\nimport { commonParams } from \"../endpoint/EndpointParameters\";\nimport { de_SetActiveReceiptRuleSetCommand, se_SetActiveReceiptRuleSetCommand } from \"../protocols/Aws_query\";\nexport { $Command };\nexport class SetActiveReceiptRuleSetCommand extends $Command\n    .classBuilder()\n    .ep(commonParams)\n    .m(function (Command, cs, config, o) {\n    return [\n        getSerdePlugin(config, this.serialize, this.deserialize),\n        getEndpointPlugin(config, Command.getEndpointParameterInstructions()),\n    ];\n})\n    .s(\"SimpleEmailService\", \"SetActiveReceiptRuleSet\", {})\n    .n(\"SESClient\", \"SetActiveReceiptRuleSetCommand\")\n    .f(void 0, void 0)\n    .ser(se_SetActiveReceiptRuleSetCommand)\n    .de(de_SetActiveReceiptRuleSetCommand)\n    .build() {\n}\n","import { \n  SESClient, \n  CreateReceiptRuleSetCommand,\n  CreateReceiptRuleCommand,\n  UpdateReceiptRuleCommand,\n  DeleteReceiptRuleCommand,\n  DescribeReceiptRuleSetCommand,\n  SetActiveReceiptRuleSetCommand,\n  ReceiptRule,\n  ReceiptAction\n} from '@aws-sdk/client-ses'\n\nexport interface EmailReceiptConfig {\n  domain: string\n  emailAddresses: string[]\n  lambdaFunctionArn: string\n  s3BucketName: string\n  ruleSetName?: string\n  // Catch-all configuration\n  isCatchAll?: boolean\n  catchAllWebhookId?: string\n}\n\nexport interface ReceiptRuleResult {\n  ruleName: string\n  domain: string\n  emailAddresses: string[]\n  status: 'created' | 'updated' | 'failed'\n  error?: string\n  isCatchAll?: boolean\n  catchAllWebhookId?: string\n}\n\nexport interface CatchAllConfig {\n  domain: string\n  webhookId: string\n  lambdaFunctionArn: string\n  s3BucketName: string\n  ruleSetName?: string\n}\n\nexport class AWSSESReceiptRuleManager {\n  private sesClient: SESClient\n  private region: string\n\n  constructor(region: string = 'us-east-2') {\n    this.region = region\n    this.sesClient = new SESClient({ region })\n  }\n\n  /**\n   * Create or update receipt rules for a domain\n   */\n  async configureEmailReceiving(config: EmailReceiptConfig): Promise<ReceiptRuleResult> {\n    const ruleSetName = config.ruleSetName || 'inbound-email-rules'\n    const ruleName = `${config.domain}-rule`\n\n    try {\n      console.log(`🔧 SES Rules - Configuring email receiving for domain: ${config.domain}`)\n      console.log(`📧 SES Rules - Email addresses: ${config.emailAddresses.join(', ')}`)\n      \n      // Ensure rule set exists\n      await this.ensureRuleSetExists(ruleSetName)\n\n      // Check if rule already exists\n      const existingRule = await this.getRuleIfExists(ruleSetName, ruleName)\n      \n      // Merge existing recipients with new ones if rule exists\n      let recipients = config.emailAddresses.length > 0 ? config.emailAddresses : [config.domain]\n      \n      if (existingRule && existingRule.Recipients) {\n        // Get existing recipients\n        const existingRecipients = existingRule.Recipients || []\n        console.log(`📋 SES Rules - Existing recipients: ${existingRecipients.join(', ')}`)\n        \n        // Merge with new recipients (avoiding duplicates)\n        const recipientSet = new Set([...existingRecipients, ...recipients])\n        recipients = Array.from(recipientSet)\n        console.log(`🔀 SES Rules - Merged recipients: ${recipients.join(', ')}`)\n      }\n      \n      // Create receipt rule for the domain\n      const rule: ReceiptRule = {\n        Name: ruleName,\n        Enabled: true,\n        Recipients: recipients,\n        Actions: [\n          // Store email in S3\n          {\n            S3Action: {\n              BucketName: config.s3BucketName,\n              ObjectKeyPrefix: `emails/${config.domain}/`,\n              TopicArn: undefined // Optional: SNS topic for notifications\n            }\n          },\n          // Invoke Lambda function\n          {\n            LambdaAction: {\n              FunctionArn: config.lambdaFunctionArn,\n              InvocationType: 'Event' // Async invocation\n            }\n          }\n        ]\n      }\n\n      let status: 'created' | 'updated' | 'failed' = 'created'\n\n      if (existingRule) {\n        console.log(`🔄 SES Rules - Updating existing rule: ${ruleName}`)\n        // Update existing rule\n        const updateCommand = new UpdateReceiptRuleCommand({\n          RuleSetName: ruleSetName,\n          Rule: rule\n        })\n        await this.sesClient.send(updateCommand)\n        status = 'updated'\n      } else {\n        console.log(`➕ SES Rules - Creating new rule: ${ruleName}`)\n        // Create new rule\n        const createCommand = new CreateReceiptRuleCommand({\n          RuleSetName: ruleSetName,\n          Rule: rule\n        })\n        await this.sesClient.send(createCommand)\n        status = 'created'\n      }\n\n      // Set as active rule set\n      await this.setActiveRuleSet(ruleSetName)\n\n      console.log(`✅ SES Rules - Successfully ${status} rule for ${config.domain}`)\n\n      return {\n        ruleName,\n        domain: config.domain,\n        emailAddresses: recipients,\n        status,\n        isCatchAll: config.isCatchAll,\n        catchAllWebhookId: config.catchAllWebhookId\n      }\n    } catch (error) {\n      console.error('💥 SES Rules - Failed to configure email receiving:', error)\n      return {\n        ruleName,\n        domain: config.domain,\n        emailAddresses: config.emailAddresses,\n        status: 'failed',\n        error: error instanceof Error ? error.message : 'Unknown error',\n        isCatchAll: config.isCatchAll,\n        catchAllWebhookId: config.catchAllWebhookId\n      }\n    }\n  }\n\n  /**\n   * Remove receipt rule for a domain\n   */\n  async removeEmailReceiving(domain: string, ruleSetName: string = 'inbound-email-rules'): Promise<boolean> {\n    try {\n      const ruleName = `${domain}-rule`\n      \n      const command = new DeleteReceiptRuleCommand({\n        RuleSetName: ruleSetName,\n        RuleName: ruleName\n      })\n\n      await this.sesClient.send(command)\n      return true\n    } catch (error) {\n      console.error('Failed to remove receipt rule:', error)\n      return false\n    }\n  }\n\n  /**\n   * Check if a rule exists and return it\n   */\n  private async getRuleIfExists(ruleSetName: string, ruleName: string): Promise<ReceiptRule | null> {\n    try {\n      const command = new DescribeReceiptRuleSetCommand({\n        RuleSetName: ruleSetName\n      })\n      const response = await this.sesClient.send(command)\n      \n      const existingRule = response.Rules?.find(rule => rule.Name === ruleName)\n      return existingRule || null\n    } catch (error) {\n      console.log(`📋 SES Rules - Rule set ${ruleSetName} does not exist or rule ${ruleName} not found`)\n      return null\n    }\n  }\n\n  /**\n   * Ensure rule set exists, create if it doesn't\n   */\n  private async ensureRuleSetExists(ruleSetName: string): Promise<void> {\n    try {\n      // Try to describe the rule set\n      await this.sesClient.send(new DescribeReceiptRuleSetCommand({\n        RuleSetName: ruleSetName\n      }))\n    } catch (error) {\n      // Rule set doesn't exist, create it\n      if (error instanceof Error && error.name === 'RuleSetDoesNotExistException') {\n        await this.sesClient.send(new CreateReceiptRuleSetCommand({\n          RuleSetName: ruleSetName\n        }))\n      } else {\n        throw error\n      }\n    }\n  }\n\n  /**\n   * Set the active rule set\n   */\n  private async setActiveRuleSet(ruleSetName: string): Promise<void> {\n    await this.sesClient.send(new SetActiveReceiptRuleSetCommand({\n      RuleSetName: ruleSetName\n    }))\n  }\n\n  /**\n   * Get Lambda function ARN for the current region\n   */\n  static getLambdaFunctionArn(functionName: string, accountId: string, region: string): string {\n    return `arn:aws:lambda:${region}:${accountId}:function:${functionName}`\n  }\n\n  /**\n   * Validate email address format\n   */\n  static isValidEmailAddress(email: string): boolean {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/\n    return emailRegex.test(email)\n  }\n\n  /**\n   * Extract domain from email address\n   */\n  static extractDomain(email: string): string {\n    return email.split('@')[1] || ''\n  }\n\n  /**\n   * Configure catch-all email receiving for a domain\n   * This creates a receipt rule that captures ALL emails sent to the domain\n   */\n  async configureCatchAllDomain(config: CatchAllConfig): Promise<ReceiptRuleResult> {\n    const ruleSetName = config.ruleSetName || 'inbound-email-rules'\n    const ruleName = `${config.domain}-catchall-rule`\n    const individualRuleName = `${config.domain}-rule`\n\n    try {\n      console.log(`🌐 SES Rules - Configuring catch-all for domain: ${config.domain}`)\n      console.log(`🪝 SES Rules - Webhook ID: ${config.webhookId}`)\n      \n      // Ensure rule set exists\n      await this.ensureRuleSetExists(ruleSetName)\n\n      // CRITICAL: Remove individual email rule if it exists\n      // This prevents rule precedence conflicts\n      const existingIndividualRule = await this.getRuleIfExists(ruleSetName, individualRuleName)\n      if (existingIndividualRule) {\n        console.log(`🗑️ SES Rules - Removing individual email rule to prevent conflicts: ${individualRuleName}`)\n        await this.sesClient.send(new DeleteReceiptRuleCommand({\n          RuleSetName: ruleSetName,\n          RuleName: individualRuleName\n        }))\n      }\n\n      // Create receipt rule for catch-all\n      // According to AWS SES docs, use just the domain name (not *@domain) for catch-all\n      const rule: ReceiptRule = {\n        Name: ruleName,\n        Enabled: true,\n        Recipients: [config.domain], // Just the domain name catches all emails to this domain\n        Actions: [\n          // Store email in S3\n          {\n            S3Action: {\n              BucketName: config.s3BucketName,\n              ObjectKeyPrefix: `emails/${config.domain}/catchall/`,\n              TopicArn: undefined\n            }\n          },\n          // Invoke Lambda function with catch-all metadata\n          {\n            LambdaAction: {\n              FunctionArn: config.lambdaFunctionArn,\n              InvocationType: 'Event'\n            }\n          }\n        ]\n      }\n\n      // Check if catch-all rule already exists\n      const existingCatchAllRule = await this.getRuleIfExists(ruleSetName, ruleName)\n      let status: 'created' | 'updated' | 'failed' = 'created'\n\n      if (existingCatchAllRule) {\n        console.log(`🔄 SES Rules - Updating existing catch-all rule: ${ruleName}`)\n        const updateCommand = new UpdateReceiptRuleCommand({\n          RuleSetName: ruleSetName,\n          Rule: rule\n        })\n        await this.sesClient.send(updateCommand)\n        status = 'updated'\n      } else {\n        console.log(`➕ SES Rules - Creating new catch-all rule: ${ruleName}`)\n        const createCommand = new CreateReceiptRuleCommand({\n          RuleSetName: ruleSetName,\n          Rule: rule\n        })\n        await this.sesClient.send(createCommand)\n        status = 'created'\n      }\n\n      // Set as active rule set\n      await this.setActiveRuleSet(ruleSetName)\n\n      console.log(`✅ SES Rules - Successfully ${status} catch-all rule for ${config.domain}`)\n\n      return {\n        ruleName,\n        domain: config.domain,\n        emailAddresses: [config.domain], // Just the domain name for catch-all\n        status,\n        isCatchAll: true,\n        catchAllWebhookId: config.webhookId\n      }\n    } catch (error) {\n      console.error('💥 SES Rules - Failed to configure catch-all:', error)\n      return {\n        ruleName,\n        domain: config.domain,\n        emailAddresses: [config.domain], // Just the domain name for catch-all\n        status: 'failed',\n        error: error instanceof Error ? error.message : 'Unknown error',\n        isCatchAll: true,\n        catchAllWebhookId: config.webhookId\n      }\n    }\n  }\n\n  /**\n   * Remove catch-all receipt rule for a domain\n   */\n  async removeCatchAllDomain(domain: string, ruleSetName: string = 'inbound-email-rules'): Promise<boolean> {\n    try {\n      const ruleName = `${domain}-catchall-rule`\n      \n      const command = new DeleteReceiptRuleCommand({\n        RuleSetName: ruleSetName,\n        RuleName: ruleName\n      })\n\n      await this.sesClient.send(command)\n      console.log(`✅ SES Rules - Successfully removed catch-all rule for ${domain}`)\n      return true\n    } catch (error) {\n      console.error('Failed to remove catch-all receipt rule:', error)\n      return false\n    }\n  }\n\n  /**\n   * Check if a domain has catch-all configured\n   */\n  async isCatchAllConfigured(domain: string, ruleSetName: string = 'inbound-email-rules'): Promise<boolean> {\n    const ruleName = `${domain}-catchall-rule`\n    const existingRule = await this.getRuleIfExists(ruleSetName, ruleName)\n    return existingRule !== null\n  }\n\n  /**\n   * Get all rules for a domain (both individual and catch-all)\n   */\n  async getDomainRules(domain: string, ruleSetName: string = 'inbound-email-rules'): Promise<{\n    individualRule: ReceiptRule | null\n    catchAllRule: ReceiptRule | null\n  }> {\n    const individualRuleName = `${domain}-rule`\n    const catchAllRuleName = `${domain}-catchall-rule`\n    \n    const individualRule = await this.getRuleIfExists(ruleSetName, individualRuleName)\n    const catchAllRule = await this.getRuleIfExists(ruleSetName, catchAllRuleName)\n    \n    return {\n      individualRule,\n      catchAllRule\n    }\n  }\n\n  /**\n   * Restore individual email rules when disabling catch-all\n   * This recreates the individual email rule with existing email addresses\n   */\n  async restoreIndividualEmailRules(\n    domain: string, \n    emailAddresses: string[], \n    lambdaFunctionArn: string, \n    s3BucketName: string,\n    ruleSetName: string = 'inbound-email-rules'\n  ): Promise<ReceiptRuleResult> {\n    const ruleName = `${domain}-rule`\n\n    try {\n      console.log(`🔄 SES Rules - Restoring individual email rules for domain: ${domain}`)\n      console.log(`📧 SES Rules - Email addresses: ${emailAddresses.join(', ')}`)\n      \n      // Only restore if there are email addresses to restore\n      if (emailAddresses.length === 0) {\n        console.log(`⚠️ SES Rules - No email addresses to restore for ${domain}`)\n        return {\n          ruleName,\n          domain,\n          emailAddresses: [],\n          status: 'created',\n          isCatchAll: false\n        }\n      }\n\n      // Create receipt rule for individual emails\n      const rule: ReceiptRule = {\n        Name: ruleName,\n        Enabled: true,\n        Recipients: emailAddresses,\n        Actions: [\n          // Store email in S3\n          {\n            S3Action: {\n              BucketName: s3BucketName,\n              ObjectKeyPrefix: `emails/${domain}/`,\n              TopicArn: undefined\n            }\n          },\n          // Invoke Lambda function\n          {\n            LambdaAction: {\n              FunctionArn: lambdaFunctionArn,\n              InvocationType: 'Event'\n            }\n          }\n        ]\n      }\n\n      console.log(`➕ SES Rules - Creating individual email rule: ${ruleName}`)\n      const createCommand = new CreateReceiptRuleCommand({\n        RuleSetName: ruleSetName,\n        Rule: rule\n      })\n      await this.sesClient.send(createCommand)\n\n      // Set as active rule set\n      await this.setActiveRuleSet(ruleSetName)\n\n      console.log(`✅ SES Rules - Successfully restored individual email rules for ${domain}`)\n\n      return {\n        ruleName,\n        domain,\n        emailAddresses,\n        status: 'created',\n        isCatchAll: false\n      }\n    } catch (error) {\n      console.error('💥 SES Rules - Failed to restore individual email rules:', error)\n      return {\n        ruleName,\n        domain,\n        emailAddresses,\n        status: 'failed',\n        error: error instanceof Error ? error.message : 'Unknown error',\n        isCatchAll: false\n      }\n    }\n  }\n} "],"names":[],"mappings":"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","ignoreList":[0,1,2,3,4,5]}