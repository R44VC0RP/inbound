{"version":3,"sources":["turbopack:///[project]/node_modules/next/src/server/route-modules/app-page/vendored/rsc/react-server-dom-turbopack-server-edge.ts","turbopack:///[project]/app/api/v2/email-addresses/route.ts","turbopack:///[project]/node_modules/next/dist/src/build/templates/app-route.ts"],"sourcesContent":["module.exports = require('../../module.compiled').vendored[\n  'react-rsc'\n].ReactServerDOMTurbopackServerEdge\n","import { NextRequest, NextResponse } from 'next/server'\nimport { validateRequest } from '../helper/main'\nimport { db } from '@/lib/db'\nimport { emailAddresses, emailDomains, endpoints, webhooks } from '@/lib/db/schema'\nimport { eq, and, desc, count } from 'drizzle-orm'\nimport { nanoid } from 'nanoid'\nimport { AWSSESReceiptRuleManager } from '@/lib/aws-ses/aws-ses-rules'\nimport type { EmailAddress, NewEmailAddress } from '@/lib/db/schema'\n\n/**\n * GET /api/v2/email-addresses\n * Lists all email addresses for the authenticated user with filtering and pagination\n * Supports both session-based auth and API key auth\n * Has tests? ‚è≥\n * Has logging? ‚úÖ\n * Has types? ‚úÖ\n */\n\n// GET /api/v2/email-addresses types\nexport interface GetEmailAddressesRequest {\n    limit?: number\n    offset?: number\n    domainId?: string\n    isActive?: 'true' | 'false'\n    isReceiptRuleConfigured?: 'true' | 'false'\n}\n\nexport interface EmailAddressWithDomain {\n    id: string\n    address: string\n    domainId: string\n    webhookId: string | null\n    endpointId: string | null\n    isActive: boolean\n    isReceiptRuleConfigured: boolean\n    receiptRuleName: string | null\n    createdAt: Date\n    updatedAt: Date\n    userId: string\n    domain: {\n        id: string\n        name: string\n        status: string\n    }\n    routing: {\n        type: 'webhook' | 'endpoint' | 'none'\n        id: string | null\n        name: string | null\n        config?: any\n        isActive: boolean\n    }\n}\n\nexport interface GetEmailAddressesResponse {\n    data: EmailAddressWithDomain[]\n    pagination: {\n        limit: number\n        offset: number\n        total: number\n        hasMore: boolean\n    }\n}\n\nexport async function GET(request: NextRequest) {\n    console.log('üìß GET /api/v2/email-addresses - Starting request')\n    \n    try {\n        console.log('üîê Validating request authentication')\n        const { userId, error } = await validateRequest(request)\n        if (!userId) {\n            console.log('‚ùå Authentication failed:', error)\n            return NextResponse.json(\n                { error: error },\n                { status: 401 }\n            )\n        }\n        console.log('‚úÖ Authentication successful for userId:', userId)\n\n        const { searchParams } = new URL(request.url)\n\n        // Extract query parameters\n        const limit = Math.min(parseInt(searchParams.get('limit') || '50'), 100)\n        const offset = parseInt(searchParams.get('offset') || '0')\n        const domainId = searchParams.get('domainId')\n        const isActive = searchParams.get('isActive')\n        const isReceiptRuleConfigured = searchParams.get('isReceiptRuleConfigured')\n\n        console.log('üìä Query parameters:', {\n            limit,\n            offset,\n            domainId,\n            isActive,\n            isReceiptRuleConfigured\n        })\n\n        // Validate parameters\n        if (limit < 1 || limit > 100) {\n            console.log('‚ö†Ô∏è Invalid limit parameter:', limit)\n            return NextResponse.json(\n                { error: 'Limit must be between 1 and 100' },\n                { status: 400 }\n            )\n        }\n\n        if (offset < 0) {\n            console.log('‚ö†Ô∏è Invalid offset parameter:', offset)\n            return NextResponse.json(\n                { error: 'Offset must be non-negative' },\n                { status: 400 }\n            )\n        }\n\n        // Build where conditions\n        const conditions = [eq(emailAddresses.userId, userId)]\n\n        if (domainId) {\n            conditions.push(eq(emailAddresses.domainId, domainId))\n            console.log('üîç Filtering by domainId:', domainId)\n        }\n\n        if (isActive !== null) {\n            const activeValue = isActive === 'true'\n            conditions.push(eq(emailAddresses.isActive, activeValue))\n            console.log('üîç Filtering by active status:', activeValue)\n        }\n\n        if (isReceiptRuleConfigured !== null) {\n            const configuredValue = isReceiptRuleConfigured === 'true'\n            conditions.push(eq(emailAddresses.isReceiptRuleConfigured, configuredValue))\n            console.log('üîç Filtering by receipt rule configured:', configuredValue)\n        }\n\n        const whereConditions = conditions.length > 1 ? and(...conditions) : conditions[0]\n\n        console.log('üîç Querying email addresses from database')\n        // Get email addresses with domains\n        const userEmailAddresses = await db\n            .select({\n                id: emailAddresses.id,\n                address: emailAddresses.address,\n                domainId: emailAddresses.domainId,\n                webhookId: emailAddresses.webhookId,\n                endpointId: emailAddresses.endpointId,\n                isActive: emailAddresses.isActive,\n                isReceiptRuleConfigured: emailAddresses.isReceiptRuleConfigured,\n                receiptRuleName: emailAddresses.receiptRuleName,\n                createdAt: emailAddresses.createdAt,\n                updatedAt: emailAddresses.updatedAt,\n                userId: emailAddresses.userId,\n                domainName: emailDomains.domain,\n                domainStatus: emailDomains.status,\n            })\n            .from(emailAddresses)\n            .innerJoin(emailDomains, eq(emailAddresses.domainId, emailDomains.id))\n            .where(whereConditions)\n            .orderBy(desc(emailAddresses.createdAt))\n            .limit(limit)\n            .offset(offset)\n\n        console.log('üìä Retrieved email addresses count:', userEmailAddresses.length)\n\n        // Get total count for pagination\n        const totalCountResult = await db\n            .select({ count: count() })\n            .from(emailAddresses)\n            .where(whereConditions)\n        \n        const totalCount = totalCountResult[0]?.count || 0\n        console.log('üìä Total email addresses count:', totalCount)\n\n        // Enhance email addresses with routing information\n        console.log('üîß Enhancing email addresses with routing information')\n        const enhancedEmailAddresses: EmailAddressWithDomain[] = []\n\n        for (const emailAddress of userEmailAddresses) {\n            let routing: EmailAddressWithDomain['routing'] = {\n                type: 'none',\n                id: null,\n                name: null,\n                isActive: false\n            }\n\n            // Get endpoint or webhook routing info\n            if (emailAddress.endpointId) {\n                const endpoint = await db\n                    .select({\n                        id: endpoints.id,\n                        name: endpoints.name,\n                        type: endpoints.type,\n                        config: endpoints.config,\n                        isActive: endpoints.isActive,\n                    })\n                    .from(endpoints)\n                    .where(eq(endpoints.id, emailAddress.endpointId))\n                    .limit(1)\n\n                if (endpoint[0]) {\n                    routing = {\n                        type: 'endpoint',\n                        id: endpoint[0].id,\n                        name: endpoint[0].name,\n                        config: JSON.parse(endpoint[0].config),\n                        isActive: endpoint[0].isActive || false\n                    }\n                }\n            } else if (emailAddress.webhookId) {\n                const webhook = await db\n                    .select({\n                        id: webhooks.id,\n                        name: webhooks.name,\n                        url: webhooks.url,\n                        isActive: webhooks.isActive,\n                    })\n                    .from(webhooks)\n                    .where(eq(webhooks.id, emailAddress.webhookId))\n                    .limit(1)\n\n                if (webhook[0]) {\n                    routing = {\n                        type: 'webhook',\n                        id: webhook[0].id,\n                        name: webhook[0].name,\n                        config: { url: webhook[0].url },\n                        isActive: webhook[0].isActive || false\n                    }\n                }\n            }\n\n            enhancedEmailAddresses.push({\n                id: emailAddress.id,\n                address: emailAddress.address,\n                domainId: emailAddress.domainId,\n                webhookId: emailAddress.webhookId,\n                endpointId: emailAddress.endpointId,\n                isActive: emailAddress.isActive || false,\n                isReceiptRuleConfigured: emailAddress.isReceiptRuleConfigured || false,\n                receiptRuleName: emailAddress.receiptRuleName,\n                createdAt: emailAddress.createdAt || new Date(),\n                updatedAt: emailAddress.updatedAt || new Date(),\n                userId: emailAddress.userId,\n                domain: {\n                    id: emailAddress.domainId,\n                    name: emailAddress.domainName,\n                    status: emailAddress.domainStatus\n                },\n                routing\n            })\n        }\n\n        const response: GetEmailAddressesResponse = {\n            data: enhancedEmailAddresses,\n            pagination: {\n                limit,\n                offset,\n                total: totalCount,\n                hasMore: offset + limit < totalCount\n            }\n        }\n\n        console.log('‚úÖ GET /api/v2/email-addresses - Successfully retrieved email addresses')\n        return NextResponse.json(response, { status: 200 })\n\n    } catch (error) {\n        console.error('‚ùå GET /api/v2/email-addresses - Error:', error)\n        return NextResponse.json(\n            { error: 'Internal server error' },\n            { status: 500 }\n        )\n    }\n}\n\n/**\n * POST /api/v2/email-addresses\n * Creates a new email address and configures SES receipt rules\n * Supports both session-based auth and API key auth\n * Has tests? ‚è≥\n * Has logging? ‚úÖ\n * Has types? ‚úÖ\n */\n\n// POST /api/v2/email-addresses types\nexport interface PostEmailAddressesRequest {\n    address: string\n    domainId: string\n    endpointId?: string\n    webhookId?: string \n    isActive?: boolean\n}\n\nexport interface PostEmailAddressesResponse {\n    id: string\n    address: string\n    domainId: string\n    webhookId: string | null\n    endpointId: string | null\n    isActive: boolean\n    isReceiptRuleConfigured: boolean\n    receiptRuleName: string | null\n    createdAt: Date\n    updatedAt: Date\n    userId: string\n    domain: {\n        id: string\n        name: string\n        status: string\n    }\n    routing: {\n        type: 'webhook' | 'endpoint' | 'none'\n        id: string | null\n        name: string | null\n        config?: any\n        isActive: boolean\n    }\n    warning?: string\n}\n\nexport async function POST(request: NextRequest) {\n    console.log('üìù POST /api/v2/email-addresses - Starting request')\n    \n    try {\n        console.log('üîê Validating request authentication')\n        const { userId, error } = await validateRequest(request)\n        if (!userId) {\n            console.log('‚ùå Authentication failed:', error)\n            return NextResponse.json(\n                { error: error },\n                { status: 401 }\n            )\n        }\n        console.log('‚úÖ Authentication successful for userId:', userId)\n\n        const data: PostEmailAddressesRequest = await request.json()\n        console.log('üìã Request data:', {\n            address: data.address,\n            domainId: data.domainId,\n            endpointId: data.endpointId,\n            webhookId: data.webhookId,\n            isActive: data.isActive\n        })\n\n        // Validate required fields\n        if (!data.address || !data.domainId) {\n            console.log('‚ùå Missing required fields')\n            return NextResponse.json(\n                { \n                    error: 'Missing required fields',\n                    required: ['address', 'domainId']\n                },\n                { status: 400 }\n            )\n        }\n\n        // Validate email format\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/\n        if (!emailRegex.test(data.address)) {\n            console.log('‚ùå Invalid email address format:', data.address)\n            return NextResponse.json(\n                { error: 'Invalid email address format' },\n                { status: 400 }\n            )\n        }\n\n        // Check if domain exists and belongs to user\n        console.log('üîç Checking domain ownership')\n        const domainResult = await db\n            .select()\n            .from(emailDomains)\n            .where(and(\n                eq(emailDomains.id, data.domainId),\n                eq(emailDomains.userId, userId)\n            ))\n            .limit(1)\n\n        if (!domainResult[0]) {\n            console.log('‚ùå Domain not found or access denied:', data.domainId)\n            return NextResponse.json({\n                error: 'Domain not found or access denied'\n            }, { status: 404 })\n        }\n\n        // Validate email domain matches domain record\n        const emailDomain = data.address.split('@')[1]\n        if (emailDomain !== domainResult[0].domain) {\n            console.log('‚ùå Email domain mismatch:', emailDomain, 'vs', domainResult[0].domain)\n            return NextResponse.json({\n                error: `Email address must belong to domain ${domainResult[0].domain}`\n            }, { status: 400 })\n        }\n\n        // Check if email already exists\n        console.log('üîç Checking if email address already exists')\n        const existingEmail = await db\n            .select()\n            .from(emailAddresses)\n            .where(eq(emailAddresses.address, data.address))\n            .limit(1)\n\n        if (existingEmail[0]) {\n            console.log('‚ùå Email address already exists:', data.address)\n            return NextResponse.json({\n                error: 'Email address already exists'\n            }, { status: 409 })\n        }\n\n        // Validate endpoint/webhook if provided\n        let endpointId = null\n        let webhookId = null\n        let routingInfo = null\n        \n        if (data.endpointId) {\n            console.log('üîç Validating endpoint:', data.endpointId)\n            const endpointResult = await db\n                .select()\n                .from(endpoints)\n                .where(and(\n                    eq(endpoints.id, data.endpointId),\n                    eq(endpoints.userId, userId)\n                ))\n                .limit(1)\n\n            if (!endpointResult[0]) {\n                console.log('‚ùå Endpoint not found or access denied:', data.endpointId)\n                return NextResponse.json({\n                    error: 'Endpoint not found or access denied'\n                }, { status: 404 })\n            }\n            endpointId = data.endpointId\n            routingInfo = {\n                type: 'endpoint' as const,\n                id: endpointResult[0].id,\n                name: endpointResult[0].name,\n                config: JSON.parse(endpointResult[0].config),\n                isActive: endpointResult[0].isActive || false\n            }\n        } else if (data.webhookId) {\n            console.log('üîç Validating webhook:', data.webhookId)\n            const webhookResult = await db\n                .select()\n                .from(webhooks)\n                .where(and(\n                    eq(webhooks.id, data.webhookId),\n                    eq(webhooks.userId, userId)\n                ))\n                .limit(1)\n\n            if (!webhookResult[0]) {\n                console.log('‚ùå Webhook not found or access denied:', data.webhookId)\n                return NextResponse.json({\n                    error: 'Webhook not found or access denied'\n                }, { status: 404 })\n            }\n            webhookId = data.webhookId\n            routingInfo = {\n                type: 'webhook' as const,\n                id: webhookResult[0].id,\n                name: webhookResult[0].name,\n                config: { url: webhookResult[0].url },\n                isActive: webhookResult[0].isActive || false\n            }\n        }\n\n        // Create the email address\n        console.log('üìù Creating email address record')\n        const newEmailAddress: NewEmailAddress = {\n            id: nanoid(),\n            address: data.address,\n            domainId: data.domainId,\n            endpointId,\n            webhookId,\n            isActive: data.isActive !== undefined ? data.isActive : true,\n            isReceiptRuleConfigured: false,\n            receiptRuleName: null,\n            userId,\n            createdAt: new Date(),\n            updatedAt: new Date()\n        }\n\n        const [createdEmailAddress] = await db.insert(emailAddresses).values(newEmailAddress).returning()\n        console.log('‚úÖ Email address record created:', createdEmailAddress.id)\n\n        // Configure AWS SES receipt rule for the new email\n        let isReceiptRuleConfigured = false\n        let receiptRuleName = null\n        let awsConfigurationWarning = null\n\n        try {\n            console.log('üîß Configuring AWS SES receipt rules')\n            const sesManager = new AWSSESReceiptRuleManager()\n            \n            // Get AWS configuration\n            const awsRegion = process.env.AWS_REGION || 'us-east-2'\n            const lambdaFunctionName = process.env.LAMBDA_FUNCTION_NAME || 'email-processor'\n            const s3BucketName = process.env.S3_BUCKET_NAME\n            const awsAccountId = process.env.AWS_ACCOUNT_ID\n\n            if (!s3BucketName || !awsAccountId) {\n                awsConfigurationWarning = 'AWS configuration incomplete. Missing S3_BUCKET_NAME or AWS_ACCOUNT_ID'\n                console.warn(`‚ö†Ô∏è ${awsConfigurationWarning}`)\n            } else {\n                const lambdaArn = AWSSESReceiptRuleManager.getLambdaFunctionArn(\n                    lambdaFunctionName,\n                    awsAccountId,\n                    awsRegion\n                )\n\n                console.log('üîß Configuring SES receipt rule for:', data.address)\n                const receiptResult = await sesManager.configureEmailReceiving({\n                    domain: domainResult[0].domain,\n                    emailAddresses: [data.address],\n                    lambdaFunctionArn: lambdaArn,\n                    s3BucketName\n                })\n                \n                if (receiptResult.status === 'created' || receiptResult.status === 'updated') {\n                    // Update email record with receipt rule information\n                    await db\n                        .update(emailAddresses)\n                        .set({\n                            isReceiptRuleConfigured: true,\n                            receiptRuleName: receiptResult.ruleName,\n                            updatedAt: new Date(),\n                        })\n                        .where(eq(emailAddresses.id, createdEmailAddress.id))\n\n                    isReceiptRuleConfigured = true\n                    receiptRuleName = receiptResult.ruleName\n                    console.log('‚úÖ AWS SES configured successfully')\n                } else {\n                    awsConfigurationWarning = `SES configuration failed: ${receiptResult.error}`\n                    console.warn(`‚ö†Ô∏è ${awsConfigurationWarning}`)\n                }\n            }\n        } catch (error) {\n            awsConfigurationWarning = `SES configuration error: ${error instanceof Error ? error.message : 'Unknown error'}`\n            console.error('‚ùå AWS SES configuration failed:', error)\n        }\n\n        // Build response\n        const response: PostEmailAddressesResponse = {\n            id: createdEmailAddress.id,\n            address: createdEmailAddress.address,\n            domainId: createdEmailAddress.domainId,\n            webhookId: createdEmailAddress.webhookId,\n            endpointId: createdEmailAddress.endpointId,\n            isActive: createdEmailAddress.isActive || false,\n            isReceiptRuleConfigured,\n            receiptRuleName,\n            createdAt: createdEmailAddress.createdAt || new Date(),\n            updatedAt: createdEmailAddress.updatedAt || new Date(),\n            userId: createdEmailAddress.userId,\n            domain: {\n                id: domainResult[0].id,\n                name: domainResult[0].domain,\n                status: domainResult[0].status\n            },\n            routing: routingInfo || {\n                type: 'none',\n                id: null,\n                name: null,\n                isActive: false\n            },\n            ...(awsConfigurationWarning && { warning: awsConfigurationWarning })\n        }\n\n        console.log('‚úÖ POST /api/v2/email-addresses - Successfully created email address')\n        return NextResponse.json(response, { status: 201 })\n\n    } catch (error) {\n        console.error('‚ùå POST /api/v2/email-addresses - Error:', error)\n        return NextResponse.json(\n            { \n                error: 'Internal server error',\n                details: error instanceof Error ? error.message : 'Unknown error'\n            },\n            { status: 500 }\n        )\n    }\n} ","import {\n  AppRouteRouteModule,\n  type AppRouteRouteModuleOptions,\n} from '../../server/route-modules/app-route/module.compiled'\nimport { RouteKind } from '../../server/route-kind'\nimport { patchFetch as _patchFetch } from '../../server/lib/patch-fetch'\n\nimport * as userland from 'VAR_USERLAND'\n\n// These are injected by the loader afterwards. This is injected as a variable\n// instead of a replacement because this could also be `undefined` instead of\n// an empty string.\ndeclare const nextConfigOutput: AppRouteRouteModuleOptions['nextConfigOutput']\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\n// INJECT:nextConfigOutput\n\nconst routeModule = new AppRouteRouteModule({\n  definition: {\n    kind: RouteKind.APP_ROUTE,\n    page: 'VAR_DEFINITION_PAGE',\n    pathname: 'VAR_DEFINITION_PATHNAME',\n    filename: 'VAR_DEFINITION_FILENAME',\n    bundlePath: 'VAR_DEFINITION_BUNDLE_PATH',\n  },\n  resolvedPagePath: 'VAR_RESOLVED_PAGE_PATH',\n  nextConfigOutput,\n  userland,\n})\n\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule\n\nfunction patchFetch() {\n  return _patchFetch({\n    workAsyncStorage,\n    workUnitAsyncStorage,\n  })\n}\n\nexport {\n  routeModule,\n  workAsyncStorage,\n  workUnitAsyncStorage,\n  serverHooks,\n  patchFetch,\n}\n"],"names":["module","exports","require","vendored","ReactServerDOMTurbopackServerEdge","AppRouteRouteModule","RouteKind","patchFetch","_patchFetch","userland","routeModule","definition","kind","APP_ROUTE","page","pathname","filename","bundlePath","resolvedPagePath","nextConfigOutput","workAsyncStorage","workUnitAsyncStorage","serverHooks"],"mappings":"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","ignoreList":[0,2]}