{"version":3,"sources":["turbopack:///[project]/lib/db/domains.ts","turbopack:///[project]/node_modules/@aws-sdk/client-ses/dist-es/commands/VerifyDomainIdentityCommand.js","turbopack:///[project]/node_modules/@aws-sdk/client-ses/dist-es/commands/DeleteIdentityCommand.js","turbopack:///[project]/lib/domains-and-dns/domain-verification.ts"],"sourcesContent":["import { db } from './index'\nimport { emailDomains, domainDnsRecords, emailAddresses, type EmailDomain, type NewEmailDomain, type DomainDnsRecord, type NewDomainDnsRecord, type EmailAddress, type NewEmailAddress } from './schema'\nimport { eq, and } from 'drizzle-orm'\nimport { nanoid } from 'nanoid'\n\nexport interface DomainWithRecords extends EmailDomain {\n  dnsRecords: DomainDnsRecord[]\n  emailAddresses?: EmailAddress[]\n}\n\n/**\n * Create a new domain verification record\n */\nexport async function createDomainVerification(\n  domain: string,\n  userId: string,\n  dnsCheckResult: {\n    canReceiveEmails: boolean\n    hasMxRecords: boolean\n    provider?: {\n      name: string\n      confidence: 'high' | 'medium' | 'low'\n    }\n  }\n): Promise<EmailDomain> {\n  const domainRecord: NewEmailDomain = {\n    id: `indm_${nanoid()}`,\n    domain,\n    userId,\n    status: 'pending',\n    canReceiveEmails: dnsCheckResult.canReceiveEmails,\n    hasMxRecords: dnsCheckResult.hasMxRecords,\n    domainProvider: dnsCheckResult.provider?.name,\n    providerConfidence: dnsCheckResult.provider?.confidence,\n    lastDnsCheck: new Date(),\n    updatedAt: new Date(),\n  }\n\n  const [created] = await db.insert(emailDomains).values(domainRecord).returning()\n  return created\n}\n\n/**\n * Update domain with SES verification information\n */\nexport async function updateDomainSesVerification(\n  domainId: string,\n  verificationToken: string,\n  sesStatus: string,\n  dnsRecords: Array<{ type: string; name: string; value: string }>\n): Promise<EmailDomain> {\n  // Update the domain record\n  const [updated] = await db\n    .update(emailDomains)\n    .set({\n      verificationToken,\n      status: sesStatus === 'Success' ? 'verified' : 'pending',\n      lastSesCheck: new Date(),\n      updatedAt: new Date(),\n    })\n    .where(eq(emailDomains.id, domainId))\n    .returning()\n\n  // Insert or update DNS records\n  for (const record of dnsRecords) {\n    const dnsRecord: NewDomainDnsRecord = {\n      id: `dns_${nanoid()}`,\n      domainId,\n      recordType: record.type,\n      name: record.name,\n      value: record.value,\n      isRequired: true,\n      isVerified: false,\n    }\n\n    await db.insert(domainDnsRecords).values(dnsRecord).onConflictDoNothing()\n  }\n\n  return updated\n}\n\n/**\n * Get domain with DNS records by domain name and user ID\n */\nexport async function getDomainWithRecords(domain: string, userId: string): Promise<DomainWithRecords | null> {\n  const domainRecord = await db\n    .select()\n    .from(emailDomains)\n    .where(and(eq(emailDomains.domain, domain), eq(emailDomains.userId, userId)))\n    .limit(1)\n\n  if (!domainRecord[0]) return null\n\n  const dnsRecords = await db\n    .select()\n    .from(domainDnsRecords)\n    .where(eq(domainDnsRecords.domainId, domainRecord[0].id))\n\n  return {\n    ...domainRecord[0],\n    dnsRecords,\n  }\n}\n\n/**\n * Update DNS record verification status\n */\nexport async function updateDnsRecordVerification(\n  domainId: string,\n  recordType: string,\n  name: string,\n  isVerified: boolean\n): Promise<void> {\n  await db\n    .update(domainDnsRecords)\n    .set({\n      isVerified,\n      lastChecked: new Date(),\n    })\n    .where(\n      and(\n        eq(domainDnsRecords.domainId, domainId),\n        eq(domainDnsRecords.recordType, recordType),\n        eq(domainDnsRecords.name, name)\n      )\n    )\n}\n\n/**\n * Check if all required DNS records are verified\n */\nexport async function areAllDnsRecordsVerified(domainId: string): Promise<boolean> {\n  const records = await db\n    .select()\n    .from(domainDnsRecords)\n    .where(and(eq(domainDnsRecords.domainId, domainId), eq(domainDnsRecords.isRequired, true)))\n\n  return records.length > 0 && records.every(record => record.isVerified)\n}\n\n/**\n * Update domain status based on verification progress\n */\nexport async function updateDomainStatus(domainId: string, status: string): Promise<EmailDomain> {\n  const [updated] = await db\n    .update(emailDomains)\n    .set({\n      status,\n      updatedAt: new Date(),\n    })\n    .where(eq(emailDomains.id, domainId))\n    .returning()\n\n  return updated\n}\n\n/**\n * Create a new email address for a domain\n */\nexport async function createEmailAddress(\n  address: string,\n  domainId: string,\n  userId: string\n): Promise<EmailAddress> {\n  const emailRecord: NewEmailAddress = {\n    id: `email_${nanoid()}`,\n    address,\n    domainId,\n    userId,\n    isActive: true,\n    isReceiptRuleConfigured: false,\n    updatedAt: new Date(),\n  }\n\n  const [created] = await db.insert(emailAddresses).values(emailRecord).returning()\n  return created\n}\n\n/**\n * Get email addresses for a domain\n */\nexport async function getEmailAddressesForDomain(domainId: string): Promise<EmailAddress[]> {\n  return db\n    .select()\n    .from(emailAddresses)\n    .where(eq(emailAddresses.domainId, domainId))\n}\n\n/**\n * Update email address receipt rule status\n */\nexport async function updateEmailAddressReceiptRule(\n  emailId: string,\n  isConfigured: boolean,\n  ruleName?: string\n): Promise<EmailAddress> {\n  const [updated] = await db\n    .update(emailAddresses)\n    .set({\n      isReceiptRuleConfigured: isConfigured,\n      receiptRuleName: ruleName,\n      updatedAt: new Date(),\n    })\n    .where(eq(emailAddresses.id, emailId))\n    .returning()\n\n  return updated\n}\n\n/**\n * Get domain with DNS records and email addresses\n */\nexport async function getDomainWithRecordsAndEmails(domain: string, userId: string): Promise<DomainWithRecords | null> {\n  const domainRecord = await db\n    .select()\n    .from(emailDomains)\n    .where(and(eq(emailDomains.domain, domain), eq(emailDomains.userId, userId)))\n    .limit(1)\n\n  if (!domainRecord[0]) return null\n\n  const dnsRecords = await db\n    .select()\n    .from(domainDnsRecords)\n    .where(eq(domainDnsRecords.domainId, domainRecord[0].id))\n\n  const emailAddressList = await db\n    .select()\n    .from(emailAddresses)\n    .where(eq(emailAddresses.domainId, domainRecord[0].id))\n\n  return {\n    ...domainRecord[0],\n    dnsRecords,\n    emailAddresses: emailAddressList,\n  }\n}\n\n/**\n * Delete a domain and all its related records from the database\n */\nexport async function deleteDomainFromDatabase(domainId: string, userId: string): Promise<{ success: boolean; error?: string }> {\n  try {\n    // Verify the domain belongs to the user\n    const domainRecord = await db\n      .select()\n      .from(emailDomains)\n      .where(and(eq(emailDomains.id, domainId), eq(emailDomains.userId, userId)))\n      .limit(1)\n\n    if (!domainRecord[0]) {\n      return {\n        success: false,\n        error: 'Domain not found or access denied'\n      }\n    }\n\n    console.log(`üóëÔ∏è Deleting domain from database: ${domainRecord[0].domain}`)\n\n    // Delete all email addresses for this domain\n    await db\n      .delete(emailAddresses)\n      .where(eq(emailAddresses.domainId, domainId))\n\n    // Delete all DNS records for this domain\n    await db\n      .delete(domainDnsRecords)\n      .where(eq(domainDnsRecords.domainId, domainId))\n\n    // Delete the domain record\n    await db\n      .delete(emailDomains)\n      .where(eq(emailDomains.id, domainId))\n\n    console.log(`‚úÖ Successfully deleted domain from database: ${domainRecord[0].domain}`)\n\n    return { success: true }\n\n  } catch (error) {\n    console.error('Database domain deletion error:', error)\n    return {\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to delete domain from database'\n    }\n  }\n}\n\n/**\n * Enable catch-all for a domain\n */\nexport async function enableDomainCatchAll(\n  domainId: string,\n  webhookId: string,\n  receiptRuleName: string\n): Promise<EmailDomain> {\n  const [updated] = await db\n    .update(emailDomains)\n    .set({\n      isCatchAllEnabled: true,\n      catchAllWebhookId: webhookId,\n      catchAllReceiptRuleName: receiptRuleName,\n      updatedAt: new Date(),\n    })\n    .where(eq(emailDomains.id, domainId))\n    .returning()\n\n  if (!updated) {\n    throw new Error('Domain not found')\n  }\n\n  return updated\n}\n\n/**\n * Disable catch-all for a domain\n */\nexport async function disableDomainCatchAll(domainId: string): Promise<EmailDomain> {\n  const [updated] = await db\n    .update(emailDomains)\n    .set({\n      isCatchAllEnabled: false,\n      catchAllWebhookId: null,\n      catchAllReceiptRuleName: null,\n      updatedAt: new Date(),\n    })\n    .where(eq(emailDomains.id, domainId))\n    .returning()\n\n  if (!updated) {\n    throw new Error('Domain not found')\n  }\n\n  return updated\n}\n\n/**\n * Get domain with catch-all configuration\n */\nexport async function getDomainWithCatchAll(domain: string, userId: string): Promise<EmailDomain | null> {\n  const [domainRecord] = await db\n    .select()\n    .from(emailDomains)\n    .where(and(eq(emailDomains.domain, domain), eq(emailDomains.userId, userId)))\n    .limit(1)\n\n  return domainRecord || null\n}\n\n/**\n * Check if domain has catch-all enabled\n */\nexport async function isDomainCatchAllEnabled(domainId: string): Promise<boolean> {\n  const [domain] = await db\n    .select({ isCatchAllEnabled: emailDomains.isCatchAllEnabled })\n    .from(emailDomains)\n    .where(eq(emailDomains.id, domainId))\n    .limit(1)\n\n  return domain?.isCatchAllEnabled || false\n}\n\n/**\n * Get domain owner information by domain name\n * Returns the user details for the domain owner to send notifications\n */\nexport async function getDomainOwnerByDomain(domain: string): Promise<{ userId: string; userEmail: string; userName: string | null } | null> {\n  try {\n    // Import user table from auth schema\n    const { user } = await import('./auth-schema')\n    \n    const result = await db\n      .select({\n        userId: emailDomains.userId,\n        userEmail: user.email,\n        userName: user.name,\n      })\n      .from(emailDomains)\n      .innerJoin(user, eq(emailDomains.userId, user.id))\n      .where(eq(emailDomains.domain, domain))\n      .limit(1)\n\n    if (!result[0]) {\n      console.log(`‚ùå getDomainOwnerByDomain - No owner found for domain: ${domain}`)\n      return null\n    }\n\n    console.log(`‚úÖ getDomainOwnerByDomain - Found owner for domain ${domain}: ${result[0].userEmail}`)\n    return result[0]\n  } catch (error) {\n    console.error('‚ùå getDomainOwnerByDomain - Error looking up domain owner:', error)\n    return null\n  }\n}\n\n/**\n * Update domain status to verified\n */\nexport async function markDomainAsVerified(domain: string): Promise<EmailDomain | null> {\n  try {\n    const [updated] = await db\n      .update(emailDomains)\n      .set({\n        status: 'verified',\n        lastSesCheck: new Date(),\n        updatedAt: new Date(),\n      })\n      .where(eq(emailDomains.domain, domain))\n      .returning()\n\n    if (updated) {\n      console.log(`‚úÖ markDomainAsVerified - Domain ${domain} marked as verified`)\n    }\n\n    return updated || null\n  } catch (error) {\n    console.error('‚ùå markDomainAsVerified - Error updating domain status:', error)\n    return null\n  }\n} ","import { getEndpointPlugin } from \"@smithy/middleware-endpoint\";\nimport { getSerdePlugin } from \"@smithy/middleware-serde\";\nimport { Command as $Command } from \"@smithy/smithy-client\";\nimport { commonParams } from \"../endpoint/EndpointParameters\";\nimport { de_VerifyDomainIdentityCommand, se_VerifyDomainIdentityCommand } from \"../protocols/Aws_query\";\nexport { $Command };\nexport class VerifyDomainIdentityCommand extends $Command\n    .classBuilder()\n    .ep(commonParams)\n    .m(function (Command, cs, config, o) {\n    return [\n        getSerdePlugin(config, this.serialize, this.deserialize),\n        getEndpointPlugin(config, Command.getEndpointParameterInstructions()),\n    ];\n})\n    .s(\"SimpleEmailService\", \"VerifyDomainIdentity\", {})\n    .n(\"SESClient\", \"VerifyDomainIdentityCommand\")\n    .f(void 0, void 0)\n    .ser(se_VerifyDomainIdentityCommand)\n    .de(de_VerifyDomainIdentityCommand)\n    .build() {\n}\n","import { getEndpointPlugin } from \"@smithy/middleware-endpoint\";\nimport { getSerdePlugin } from \"@smithy/middleware-serde\";\nimport { Command as $Command } from \"@smithy/smithy-client\";\nimport { commonParams } from \"../endpoint/EndpointParameters\";\nimport { de_DeleteIdentityCommand, se_DeleteIdentityCommand } from \"../protocols/Aws_query\";\nexport { $Command };\nexport class DeleteIdentityCommand extends $Command\n    .classBuilder()\n    .ep(commonParams)\n    .m(function (Command, cs, config, o) {\n    return [\n        getSerdePlugin(config, this.serialize, this.deserialize),\n        getEndpointPlugin(config, Command.getEndpointParameterInstructions()),\n    ];\n})\n    .s(\"SimpleEmailService\", \"DeleteIdentity\", {})\n    .n(\"SESClient\", \"DeleteIdentityCommand\")\n    .f(void 0, void 0)\n    .ser(se_DeleteIdentityCommand)\n    .de(de_DeleteIdentityCommand)\n    .build() {\n}\n","import { SESClient, VerifyDomainIdentityCommand, GetIdentityVerificationAttributesCommand, DeleteIdentityCommand } from '@aws-sdk/client-ses'\nimport { getDomainWithRecords, updateDomainSesVerification } from '@/lib/db/domains'\n\n// Check if AWS credentials are available\nconst awsRegion = process.env.AWS_REGION || 'us-east-2'\nconst awsAccessKeyId = process.env.AWS_ACCESS_KEY_ID\nconst awsSecretAccessKey = process.env.AWS_SECRET_ACCESS_KEY\n\nlet sesClient: SESClient | null = null\n\nif (awsAccessKeyId && awsSecretAccessKey) {\n  sesClient = new SESClient({ \n    region: awsRegion,\n    credentials: {\n      accessKeyId: awsAccessKeyId,\n      secretAccessKey: awsSecretAccessKey,\n    }\n  })\n} else {\n  console.warn('AWS credentials not configured. SES verification will not work.')\n}\n\nexport interface DomainVerificationResult {\n  domain: string\n  domainId: string\n  verificationToken: string\n  status: 'pending' | 'verified' | 'failed'\n  sesStatus?: string\n  dnsRecords: Array<{\n    type: string\n    name: string\n    value: string\n    isVerified: boolean\n  }>\n  canProceed: boolean\n  error?: string\n}\n\n/**\n * Initiate domain verification with AWS SES and generate DNS records\n */\nexport async function initiateDomainVerification(\n  domain: string,\n  userId: string\n): Promise<DomainVerificationResult> {\n  try {\n    // Get domain record from database\n    const domainRecord = await getDomainWithRecords(domain, userId)\n    if (!domainRecord) {\n      throw new Error('Domain not found in database')\n    }\n\n    // Check if AWS credentials are configured\n    if (!sesClient) {\n      return {\n        domain,\n        domainId: domainRecord.id,\n        verificationToken: '',\n        status: 'pending',\n        dnsRecords: [],\n        canProceed: false,\n        error: 'AWS SES not configured. Please set AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY environment variables.'\n      }\n    }\n\n    // Validate domain format\n    const domainRegex = /^[a-zA-Z0-9]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(\\.[a-zA-Z0-9]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/\n    if (!domainRegex.test(domain) || domain.length > 253) {\n      throw new Error('Invalid domain format')\n    }\n\n    // Verify domain identity with AWS SES (if not already done)\n    let verificationToken = domainRecord.verificationToken\n    if (!verificationToken) {\n      const verifyCommand = new VerifyDomainIdentityCommand({\n        Domain: domain\n      })\n      const verifyResponse = await sesClient.send(verifyCommand)\n      verificationToken = verifyResponse.VerificationToken || ''\n    }\n\n    // Get current verification status from AWS\n    const getAttributesCommand = new GetIdentityVerificationAttributesCommand({\n      Identities: [domain]\n    })\n\n    const attributesResponse = await sesClient.send(getAttributesCommand)\n    const attributes = attributesResponse.VerificationAttributes?.[domain]\n\n    // Determine verification status\n    const sesStatus = attributes?.VerificationStatus || 'Pending'\n    let status: 'pending' | 'verified' | 'failed' = 'pending'\n    \n    if (sesStatus === 'Success') {\n      status = 'verified'\n    } else if (sesStatus === 'Failed') {\n      status = 'failed'\n    }\n\n    // Prepare DNS records that need to be added\n    const requiredDnsRecords = [\n      {\n        type: 'TXT',\n        name: `_amazonses.${domain}`,\n        value: verificationToken || 'verification-token-not-available'\n      },\n      {\n        type: 'MX',\n        name: domain,\n        value: `10 inbound-smtp.${awsRegion}.amazonaws.com`\n      }\n    ]\n\n    // Update domain record in database with SES information\n    if (!domainRecord.verificationToken) {\n      await updateDomainSesVerification(\n        domainRecord.id,\n        verificationToken,\n        sesStatus,\n        requiredDnsRecords\n      )\n    }\n\n    // Return the DNS records that need to be added\n    const dnsRecords = requiredDnsRecords.map(record => ({\n      type: record.type,\n      name: record.name,\n      value: record.value,\n      isVerified: false // New domains won't have verified DNS records yet\n    }))\n\n    return {\n      domain,\n      domainId: domainRecord.id,\n      verificationToken: verificationToken || '',\n      status,\n      sesStatus,\n      dnsRecords,\n      canProceed: status === 'verified'\n    }\n\n  } catch (error) {\n    console.error('Domain verification error:', error)\n    \n    // Handle specific AWS errors\n    if (error instanceof Error) {\n      if (error.name === 'InvalidParameterValue') {\n        throw new Error('Invalid domain parameter')\n      }\n      if (error.name === 'LimitExceededException') {\n        throw new Error('AWS SES limit exceeded')\n      }\n    }\n\n    throw new Error('Failed to verify domain with AWS SES')\n  }\n}\n\n/**\n * Delete domain identity from AWS SES\n */\nexport async function deleteDomainFromSES(domain: string): Promise<{ success: boolean; error?: string }> {\n  try {\n    // Check if AWS credentials are configured\n    if (!sesClient) {\n      return {\n        success: false,\n        error: 'AWS SES not configured. Please set AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY environment variables.'\n      }\n    }\n\n    // Validate domain format\n    const domainRegex = /^[a-zA-Z0-9]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(\\.[a-zA-Z0-9]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/\n    if (!domainRegex.test(domain) || domain.length > 253) {\n      return {\n        success: false,\n        error: 'Invalid domain format'\n      }\n    }\n\n    console.log(`üóëÔ∏è Deleting domain identity from SES: ${domain}`)\n\n    // Delete domain identity from AWS SES\n    const deleteCommand = new DeleteIdentityCommand({\n      Identity: domain\n    })\n\n    await sesClient.send(deleteCommand)\n\n    console.log(`‚úÖ Successfully deleted domain identity from SES: ${domain}`)\n\n    return { success: true }\n\n  } catch (error) {\n    console.error('SES domain deletion error:', error)\n    \n    // Handle specific AWS errors\n    if (error instanceof Error) {\n      if (error.name === 'InvalidParameterValue') {\n        return {\n          success: false,\n          error: 'Invalid domain parameter'\n        }\n      }\n      if (error.name === 'NotFoundException') {\n        // Domain not found in SES, consider this a success\n        console.log(`‚ö†Ô∏è Domain not found in SES (already deleted): ${domain}`)\n        return { success: true }\n      }\n    }\n\n    return {\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to delete domain from AWS SES'\n    }\n  }\n} "],"names":[],"mappings":"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","ignoreList":[1,2]}